<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atalasoft.PdfDoc</name>
    </assembly>
    <members>
        <member name="T:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions">
            <summary>
            Represents a set of actions that are available to annotations on particular events.  These actions allow the creation of
            interactive PDF documents.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions"/> class.  Each action event is initialized
            to an empty <see cref="T:Atalasoft.PdfDoc.PdfActionList"/>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.IsEmpty">
            <summary>
            Determines whether all <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> objects are empty.
            </summary>
            <returns>
              <c>true</c> if all actions lists are empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the class and adds to the problem list.
            </summary>
            <param name="problems">The problems accumulated.</param>
            <param name="repairContext">The repair context for this class.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnCursorIn">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the cursor enters the area of an annotation.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnCursorOut">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the cursor leaves the area of an annotation.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnClickDown">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the mouse is clicked when the cursor is in the area of an annotation.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnClickUp">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the mouse is released after a click within the area of an annotation.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnFocusIn">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the annotation gets focus from the application.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnFocusOut">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the annotation loses focus from the application.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnPageOpened">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the page on which the annotation appears is opened.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnPageClosed">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the page on which the annotation appears is closed.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnPageInView">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the page on which the annotation appears comes into view.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnPageOutOfView">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfActionList"/> for when the page on which the annotation appears moves out of view.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnKeyDown">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionList"/> for when a key is entered in a text for field, a pop-up box,
            or a list box.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnFieldFormatting">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionList"/> for when a field is about to be displayed.  This action may
            change the field's value.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnFieldValueChanging">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionList"/> for when a field's value is changing.  This action may check
            for validity.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.AnnotationAdditionalActions.OnFieldRecalculating">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionList"/> for when changes in other fields would require this field
            to be recalculated.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions">
            <summary>
            Represents a collection of sets of actions to taken at the document event level.  Note that
            these events are to be carried out by a PDF viewing application, not by the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/>
            class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions"/> class.
            All actions will be set to new empty lists.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.IsEmpty">
            <summary>
            Determines whether all action lists are empty.
            </summary>
            <returns>
              <c>true</c> if there are no actions; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object and accumulates any problems in the problems list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.OnDocumentOpened">
            <summary>
            Gets the actions to be performed when a document has been opened.  This is initialized to an empty list. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.OnDocumentClosing">
            <summary>
            Gets the actions to be performed when a document will be closed.  This is initialized to an empty list. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.OnDocumentSaving">
            <summary>
            Gets the actions to be performed when a document will be saved.  This is initialized to an empty list. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.OnDocumentSaved">
            <summary>
            Gets the actions to be performed when a document has been saved.  This is initialized to an empty list. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.OnDocumentPrinting">
            <summary>
            Gets the actions to be performed when a document will be printed.  This is initialized to an empty list. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.DocumentAdditionalActions.OnDocumentPrinted">
            <summary>
            Gets the actions to be performed when a document has been printed.  This is initialized to an empty list. 
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.PageAdditionalActions">
            <summary>
            PageAdditionalActions represent a set of actions that are performed when a page has been either opened or closed.
            Opening or closing a page within a PDF viewer navigates to or away from a viewable page.  The PDF specification is
            not clear as to what will happen when a viewer supports showing multiple pages at once.  When going from page to page, the
            <see cref="P:Atalasoft.PdfDoc.Actions.PageAdditionalActions.OnPageClosed"/> actions on the current page will happen before the <see cref="P:Atalasoft.PdfDoc.Actions.PageAdditionalActions.OnPageOpened"/> actions on
            the subsequent page.
            <example>
            Adding a sound to play when a page has been opened.
            <code>
            public void AddSoundToPageOpened(PdfGeneratedPage page, PdfSoundAction openSound)
            {
                page.AdditionalActions.OnPageOpened.Add(openSound);
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PageAdditionalActions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PageAdditionalActions"/> class.  All actions will be empty lists.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PageAdditionalActions.IsEmpty">
            <summary>
            Determines whether all action lists are empty.
            </summary>
            <returns>
              <c>true</c> if there are no actions; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PageAdditionalActions.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PageAdditionalActions.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object and accumulates any problems in the problems list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PageAdditionalActions.OnPageOpened">
            <summary>
            Gets the actions to be performed when a page has been opened.  This is initialized to an empty list. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PageAdditionalActions.OnPageClosed">
            <summary>
            Gets the actions to be performed when a page has been closed.  This is initialized to an empty list. 
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionListCollection">
            <summary>
            This is a collection of JavaScriptActionLists that are used within a PDF when a document is opened.
            Upon opening, all scripts within this collection will be executed in string order of the keys.  The keys
            themselves are unimportant and are not used for anything beyond the order of execution.  The intent of
            this collection is to define JavaScript elements that may be used elsewhere in the document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionListCollection.Add(System.String,Atalasoft.PdfDoc.PdfJavaScriptAction)">
            <summary>
            Adds the specified action to the collection, creating a new <see cref="T:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionList"/> if needed.
            </summary>
            <remarks>
            This is a convenience method for adding a single action instead of a list of actions.  If <c>name</c> already
            exists in the collection, <c>action</c> will be added to it.  If not, a new <see cref="T:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionList"/>
            will be created, the action added to that list, then the list will be added to the collection under <c>name</c>.
            </remarks>
            <param name="name">The name of the action.</param>
            <param name="action">The action to add.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionListCollection.IsEmpty">
            <summary>
            Determines whether this collection contains any scripts, checking each list (if any) for elements.
            </summary>
            <returns>
              <c>true</c> if there are any scripts in this collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionList">
            <summary>
            A specialized collection for JavaScript only actions
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfJavaScriptActionList"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.PdfNamedAction">
            <summary>
            PdfNamedAction is a <see cref="T:Atalasoft.PdfDoc.PdfAction"/> class that is used for causing specific behaviors to occur in the
            PDF viewer.  The PDF specification defines a number of standard navigation named actions that are to be implemented in
            all PDF viewers, but any named action could be defined.
            
            The standard names are:
            <list>
                <item>
                <term>NextPage</term><description>Go to the next page in the document (if there is one)</description>
                </item>
                <item>
                <term>PrevPage</term><description>Go to the previous page in the document (if there is one)</description>
                </item>
                <item>
                <term>FirstPage</term><description>Go to the first page in the document</description>
                </item>
                <item>
                <term>LastPage</term><description>Go to the last page in the document</description>
                </item>
            </list>
            The advantage to using <c>PdfNamedAction</c> instead of <see cref="T:Atalasoft.PdfDoc.PdfGoToViewAction"/> is that the named actions aren't
            tied to a particular page so if, for example, a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation"/> labeled "Next" has a "NextPage" action,
            the widget will always work correctly no matter how the pages have been ordered.  This allows an author to easily put navigation
            buttons on pages for reading or for skipping to, say, a contents page at the beginning or an index page at the end.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfAction">
            <summary>
            PdfAction is an abstract class that represents an action that will be taken
            when certain items in PDF documents have been activated.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <remarks>
            PdfAction is an abstract class with internal abstract members.  Client code
            is not meant to make subclasses of PdfAction.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfAction.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
            <exception cref="T:System.ArgumentNullException">o</exception>
            <exception cref="T:System.ArgumentException">expected an ActionRepairContext, but got a  + o.GetType().Name</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfAction.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object and accumulates any problems in the problems list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfAction.LLValidate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Low-level validation.  Not for use by client code
            </summary>
            <param name="problems">The problems so far.</param>
            <param name="repairContext">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfAction.ActionType">
            <summary>
            Gets the type of the action represented by this object
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfNamedAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfNamedAction"/> class.
            The Name property will be initialized to "NextPage".
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfNamedAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfNamedAction"/> class.
            </summary>
            <param name="name">The name for the action.</param>
            <note>You can make an a <c>PdfNamedAction</c> with any non-null string.  Names that are not in the
            standard set are likely to be ignored by PDF viewers.  You can use <see cref="M:Atalasoft.PdfDoc.Actions.PdfNamedAction.IsStandardName(System.String)"/> to determine
            if a name is a member of the standard set of names.</note>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfNamedAction.IsStandardName(System.String)">
            <summary>
            Determines whether <c>name</c> is a member of the set of standard names:
            <c>"NextPage"</c>, <c>"PrevPage"</c>, <c>"FirstPage"</c> or <c>"LastPage"</c>.
            </summary>
            <param name="name">The name to check.</param>
            <returns>
              <c>true</c> if the specified name is a standard name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfNamedAction.ActionType">
            <summary>
            Gets the type of the action represented by this object. Returns <c>PdfActionType.PerformNamedAction</c>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfNamedAction.Name">
            <summary>
            Gets or sets the name for this action.
            </summary>
            <value>
            The name to set - must not be <c>null</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.PdfResetFormAction">
            <summary>
            This class represents an action which will cause a PdfForm object (if any) within a PDF document to have either all
            or a subset of fields within it to be reset to their default values.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfResetFormAction.ActionType">
            <summary>
            Gets the type of the action represented by this object - returns PdfActionType.SubmitForm
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfResetFormAction.ExcludeFields">
            <summary>
            Gets or sets a value indicating whether to exclude fields from the form reset.
            </summary>
            <value>
              if <c>true</c>, the <see cref="P:Atalasoft.PdfDoc.Actions.PdfResetFormAction.Fields"/> will be excluded, otherwise they will be included.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfResetFormAction.Fields">
            <summary>
            Gets the fields that will be included or excluded from the form reset.  If the Fields property is an empty
            list, all fields will be reset and the <see cref="P:Atalasoft.PdfDoc.Actions.PdfResetFormAction.ExcludeFields"/> property will be ignored.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier">
            <summary>
            This class is used to represent a reference to an annotation or form field that exists somewhere in a PDF document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier"/> class as a reference to a form field.
            </summary>
            <param name="fieldIdentifier">The field identifier which refers to the <see cref="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.FieldName"/> of a field
            defined in the <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Form"/> object.</param>
            <example>
            Given a PdfAnnotationIdentifier that refers to a field, the field could be found with the following code:
            <code>
            foreach (IFormElement elem in FormVisitor.BreadthFirst(doc.Form))
            {
                if (elem.FieldName == annotIdentifier.FieldIdentifier)
                    return elem; // found
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier"/> class as a reference to an annotation.
            </summary>
            <param name="pageIndex">Zero-based index of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedPage"/> that holds the annotation.</param>
            <param name="annotationIndex">Index of the annotation within the <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.Annotations"/> collection.</param>
            <remarks>
            The page index should be a zero-based index of a page, although the page does not need to exist in the document collection
            until the document is saved.
            The annotation index should be a zero-based index of an annotation in a pages annotation collection, althogh the annotation
            does not need to exist until the document is saved.
            </remarks>
            <example>
            Given a PdfAnnotationIdentifier that refers to an annotation, the annotation could be found with the following code:
            <code>
            // note - the PageIndex and AnnotationIndex values need to be in range
            BaseAnnotation annot = ((PdfGeneratedPage)doc.Pages[annotIdentifier.PageIndex]).Annotations[annotIdentidifier.AnnotationIndex];
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier.PageIndex">
            <summary>
            Gets the index of the page.  Returns -1 if this <see cref="T:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier"/> refers to a field by name.
            </summary>
            <value>
            The zero-based index of the page referred on which an annotation appears.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier.AnnotationIndex">
            <summary>
            Gets the index of the annotation.  Returns -1 if this <see cref="T:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier"/> refers to a field by name.
            </summary>
            <value>
            The zero-based index of the annotation within its page's Annotation collection.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier.FieldIdentifier">
            <summary>
            Gets the field identifier.  Returns <c>null</c> if this <see cref="T:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier"/> refers to an annotation.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.PdfShowHideAction">
            <summary>
            PdfShowHideAction is an action that is used to show or hide one or more annotations or fields on a page.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfShowHideAction.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfShowHideAction"/> class.
            </summary>
            <param name="willHide">if set to <c>true</c> the target will be hidden, shown otherwise.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfShowHideAction.#ctor(System.Boolean,Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfShowHideAction"/> class.
            </summary>
            <param name="willHide">if set to <c>true</c> the target will be hidden, shown otherwise.</param>
            <param name="idents">The <see cref="T:Atalasoft.PdfDoc.Actions.PdfAnnotationIdentifier"/> objects to show or hide.</param>
            <note>
            This constructor can be used to show or hide a set of annotations or fields as a group.
            </note>
            <example>
            This is an example of how to show a field on a page.
            <code>
            TextWidgetAnnotation annot = GetMyTextWidget(); // from somewhere else
            PdfShowHideAction action = new PdfShowHideAction(false, new PdfAnnotationIdentifier(annot.FieldName));
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfShowHideAction.ActionType">
            <summary>
            Gets the type of the action represented by this object.  Returns <see cref="F:Atalasoft.PdfDoc.PdfActionType.Hide"/>
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfShowHideAction.Identifiers">
            <summary>
            Gets the identifiers of fields or annotations that will be shown or hidden.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfShowHideAction.WillHide">
            <summary>
            Gets or sets a value indicating whether the action will hide the annotation(s).
            /// </summary>
            <value>
              <c>true</c> if annotation(s) will be hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.PdfSoundAction">
            <summary>
            Represents an action that will cause a sound to be played.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfSoundAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfSoundAction"/> class with no sound specified.
            the <see cref="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.Sound"/> property needs to be specified before saving a PDF with this action.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfSoundAction.#ctor(Atalasoft.PdfDoc.Generating.Multimedia.Sound)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfSoundAction"/> class with the specified <see cref="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.Sound"/>.
            </summary>
            <param name="sound">The sound that will be played.</param>
            <note>Sound must be non-null.</note>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.ActionType">
            <summary>
            Gets the type of the action represented by this object.  Returns <see cref="F:Atalasoft.PdfDoc.PdfActionType.PlaySound"/>
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.Volume">
            <summary>
            Gets or sets the volume with which the sound with be played.
            </summary>
            <value>
            The volume of the sound to be played.
            </value>
            <note>
            The range of the volume is -1.0 to 1.0 inclusive.  1.0 is the maximum volume.  The PDF specification is unclear as to the
            meaning of negative volume, although it is noted that Acrobat viewers mute any volume less than 0.
            </note>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.Sound">
            <summary>
            Gets or sets the <see cref="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.Sound"/> that will be played.
            </summary>
            <value>
            The sound to play.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.IsSynchronous">
            <summary>
            Gets or sets a value indicating whether this sound is to be played synchronously.
            </summary>
            <value>
            	<c>true</c> if this instance is to played synchronously; otherwise, <c>false</c>.
            </value>
            <note>
            Acrobat version 6 does not support the <see cref="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.IsSynchronous"/> property.
            </note>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.Repeat">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Actions.PdfSoundAction"/> is repeated when played.
            </summary>
            <value>
              <c>true</c> if repeated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSoundAction.MixWithPlayingSounds">
            <summary>
            Gets or sets a value indicating whether the sound will be mixed with already playing sounds.
            </summary>
            <value>
            	<c>true</c> if the sound will be mixed with already playing sounds; otherwise, <c>false</c>.
            </value>
            <note>
            Acrobat version 5.0 and earlier does not support mixing.
            </note>
        </member>
        <member name="T:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction">
            <summary>
            PdfSubmitFormActions represents an action to cause the form elements in a document to be sent to a server for
            processing.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction"/> class.
            </summary>
            <remarks>
            Will throw an exception if <c>uri</c> is not a proper URI.
            </remarks>
            <param name="uri">The URL of the server.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction"/> class.
            </summary>
            <param name="uri">The URI of the server.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.ActionType">
            <summary>
            Gets the type of the action represented by this object
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.FormDestination">
            <summary>
            Gets or sets the form destination.
            </summary>
            <value>
            The form destination.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.MalformedImportedUri">
            <summary>
            If a PDF file has been read that contains an improper URI, this property will be set to the improper value
            and the FormDestination will be set to null.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.ExcludeFields">
            <summary>
            Gets or sets a value indicating whether to exlude fields from the form submission.
            </summary>
            <value>
              if <c>true</c>, the <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.Fields"/> will be excluded, otherwise they will be included.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.IncludeEmptyFields">
            <summary>
            Gets or sets a value indicating whether empty fields should be sumbitted.
            </summary>
            <value>
            	<c>true</c> if to include empty fields; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsHtml">
            <summary>
            If <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsPdf"/> and <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsXFDF"/> are false, then if <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsHtml"/>
            is true, the form will be submitted as HTML form formal, otherwise it will be submitted as FDF.
            </summary>
            <value>
              <c>true</c> if the data will be submitted as HTML, <c>false</c> if it will be submitted as FDF.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.UseHttpGet">
            <summary>
            Gets or sets a value indicating whether to use HTTP GET, otherwise use HTTP POST.
            </summary>
            <value>
              <c>true</c> to use HTTP GET; otherwise, HTTP POST.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitCoordinates">
            <summary>
            Gets or sets a value indicating whether to submit coordinates with the data.
            </summary>
            <value>
              <c>true</c> if coordinates will be submitted, <c>false</c> otherwise.
            </value>
            <remarks>
            If <c>true</c>, the coordinates of the mouse click within the clicked widget will get
            submitted in the format <c>name.x=xvalue&amp;name.y=yvalue</c>, where name is the widget's field
            name for export or the field name, whichever is non-null.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsXFDF">
            <summary>
            Gets or sets a value indicating whether to submit the form as XFDF.
            </summary>
            <value>
              <c>true</c> if the form data will be submitted as XFDF; otherwise, <c>false</c>.
            </value>
            <remarks>
            This will only be used if SubmitAsPdf is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.IncludeAppendSaves">
            <summary>
            Gets or sets a value indicating whether to include appended save data.
            </summary>
            <value>
              <c>true</c> if  append save data will be included; otherwise, <c>false</c>.
            </value>
            <remarks>
            This will only be used if <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsXFDF"/> and <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsHtml"/> are <c>false</c>.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.IncludeAnnotations">
            <summary>
            Gets or sets a value indicating whether to include all markup annotation data.
            </summary>
            <value>
              <c>true</c> if all markup annotation data will be included; otherwise, <c>false</c>.
            </value>
            <remarks>
            This will only be used if <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsXFDF"/> and <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsHtml"/> are <c>false</c>.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsPdf">
            <summary>
            Gets or sets a value indicating whether the entire document will be sumbitted.
            </summary>
            <value>
              <c>true</c> if the entire document will be submitted; otherwise, <c>false</c>.
            </value>
            <remarks>
            If <c>true</c>, all other flags will be ignored except <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.UseHttpGet"/>.
            Documents will be submitted using the MIME content type application/pdf.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitDatesAsPdfFormat">
            <summary>
            Gets or sets a value indicating whether to submit dates in the PDF date format
            </summary>
            <value>
            	<c>true</c> if to submit dates in the PDF data format; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.ExcludeAnnotationsWithoutUser">
            <summary>
            Gets or sets a value indicating whether markup annotations that do not have a user name will be ignored.
            </summary>
            <value>
            	<c>true</c> if markup annotations without a user name; otherwise, <c>false</c>.
            </value>
            <remarks>
            This will only be used if <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsXFDF"/> and <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsHtml"/> are <c>false</c>.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.ExcludeFdfFile">
            <summary>
            Gets or sets a value indicating whether to exclude the FDF file specification.  
            </summary>
            <value>
              <c>true</c> if the FDF file will be excluded; otherwise, <c>false</c>.
            </value>
            <remarks>
            This will only be used if <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsXFDF"/> and <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.SubmitAsHtml"/> are <c>false</c>.  Not currently supported.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.EmbedForm">
            <summary>
            Gets or sets a value indicating whether to include the embedded form data.
            </summary>
            <value>
              <c>true</c> if to include the embeded form data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.Fields">
            <summary>
            Gets the fields that will be included or excluded from the form submission.  If the Fields property is
            empty, all fields will be sumbitted, ignoring the <see cref="P:Atalasoft.PdfDoc.Actions.PdfSubmitFormAction.ExcludeFields"/> property, except for those fields that individually have IsFieldNoExport set to <c>true</c>.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.BaseSignature">
            <summary>
            A base class that represents common elements of all digital signatures and certifications
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.BaseSignature.#ctor(Atalasoft.PdfDoc.DigitalSignatures.CmsInformation,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.BaseSignature"/> class.
            </summary>
            <param name="cmsInfo">The CMS information.</param>
            <param name="isVisible">if set to <c>true</c> the signature will be visible.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.BaseSignature.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object and accumulates any problems in the problems list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
            <exception cref="T:System.ArgumentException">expected a DocRepairContext but got  +
                            repairContext == null ? null : repairContext.GetType().Name</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.BaseSignature.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.BaseSignature.CmsInformation">
            <summary>
            Gets or sets the CMS information used to sign the document including the signatures.
            </summary>
            <value>
            The CMS information used to sign the document.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.BaseSignature.IsVisible">
            <summary>
            Gets or sets a value indicating whether the signature is visible.
            </summary>
            <value>
              <c>true</c> if the signature is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation">
            <summary>
            This class represents the CMS information used to sign a PDF document.
            </summary>
            <remarks>
            When a PDF document is signed, the X509Certificate2Collection is used to create a cryptographic
            signature that will be embedded in the PDF file. If the certificate uses RSA encryption and the
            RSACryptoServiceProvider object in the certificate does not support the specified digest algorithm,
            DotPdf will attempt to use BouncyCastle to perform the signing. This will only work as a fall back
            method if the certificate came from a file and the file was opened as having the private key exportable.
            <para>Otherwise, the property <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.ContentDigestMethodIsSupported"/> will be false and at the time of signing,
            DotPdf will invoke the action in the property <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.UnsupportedContentDigestAlgorithmAction"/>. Almost
            certainly, certificates that come from the Windows certificate store will NOT have an exportable private key.
            </para>
            <example>
            This sample shows how to open a certificate file to allow exporting a private key.
            <code>
            X509Certificate2 cert = new X509Certificate2(pathToACertFile, yourCertPassword, X509KeyStorageFlags.Exportable);
            </code>
            </example>
            <example>
            How to determine the set of supported digest methods.
            <code>
            public IList&lt;PdfContentDigestMethod&gt; GetSupportedDigestMethods(X509Certificate2Collection certificates)
            {
                List&lt;PdfContentDigestMethod&gt; meths = new List&lt;PdfContentDigestMethod&gt;();
                foreach (PdfContentDigestMethod method in Enum.GetValues(typeof(PdfContentDigestMethod)))
                {
                    CmsInformation cms = new CmsInformation(certificate, method, UnsupportedContentDigestAlgorithmAction.FallBackToSHA1);
                    if (cms.ContentDigestMethodIsSupported)
                        meths.Add(method);
                }
                return meths;
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation"/> class.
            </summary>
            <param name="certificates">A non-null, non-empty collection of certificates.</param>
            <exception cref="T:System.ArgumentNullException">
            certificates
            or
            signers
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            certificates
            or
            signers
            </exception>
            <remarks>
            This constructor will set the <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.UnsupportedContentDigestAlgorithmAction"/> to <see cref="F:Atalasoft.PdfDoc.DigitalSignatures.UnsupportedContentDigestAlgorithmAction.FallBackToSHA1"/>
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,Atalasoft.PdfDoc.DigitalSignatures.PdfContentDigestMethod,Atalasoft.PdfDoc.DigitalSignatures.UnsupportedContentDigestAlgorithmAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation"/> class.
            </summary>
            <param name="certificates">A non-null, non-empty collection of certificates.</param>
            <param name="method">The method that will be used to create a message digest of the PDF file for the signature.</param>
            <param name="action">The that will be taken when attempting to sign a document with an unsupported algorithm.</param>
            <exception cref="T:System.ArgumentNullException">certificates</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">certificates</exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.Certificates">
            <summary>
            Gets the certificates collection. This represents the certificate or
            chain of certificates used to sign the document. The actual signer will
            always be the first.
            </summary>
            <value>
            The certificates.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.ContentDigestMethod">
            <summary>
            Gets the content digest method that will be used to create a message digest of the PDF file.
            <para>Note that this is currently only used for signature creation and not for reflecting the method used in a signed file.</para>
            </summary>
            <value>
            The content digest method to use to create a message digest of the PDF file.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.ContentDigestMethodIsSupported">
            <summary>
            Gets a value indicating whether the <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.ContentDigestMethod"/> is supported by the provided certificate
            if it is supported, it will be used as is. If it is unsupported, at the time of saving the document (in PdfDocument
            or PdfGeneratedDocument) or signing (in PdfDocumentSigner), the <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.UnsupportedContentDigestAlgorithmAction"/>
            will be invoked.
            </summary>
            <value>
            <c>true</c> if  the content digest method is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.UnsupportedContentDigestAlgorithmAction">
            <summary>
            Gets the action that will be taken when the <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.CmsInformation.ContentDigestMethod"/> is not supported.
            </summary>
            <remarks>
            If set to <see cref="F:Atalasoft.PdfDoc.DigitalSignatures.UnsupportedContentDigestAlgorithmAction.FallBackToSHA1"/>, the document
            will be digested and signed using the SHA1 algorithm. If not, DotPdf will throw a PdfException
            indicating the failure.
            </remarks>
            <value>
            The action taken when the ContentDigestMethod is not supported.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationErrorSeverity">
            <summary>
            Describes the severity of an error that occurred while validating a PDF digital signature
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationErrorSeverity.Information">
            <summary>
            Occurs when there is no issue, but there is associated information.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationErrorSeverity.Warning">
            <summary>
            Occurs when the issue may be acceptable under certain circumstances.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationErrorSeverity.Fatal">
            <summary>
            Occurs when the issue is not acceptable.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.DocumentMDPAllowedChanges">
            <summary>
            Describes changes allowed to a certified document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.DocumentMDPAllowedChanges.NotSpecified">
            <summary>
            The document did not specify a set of allowed changes. If the document is certified, this is
            allowable but suspect.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.DocumentMDPAllowedChanges.None">
            <summary>
            No changes of any kind may be made to the document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.DocumentMDPAllowedChanges.FillFormsAndSigning">
            <summary>
            The document allows users to fill forms and signing the document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.DocumentMDPAllowedChanges.FillFormsSigningAndAnnotations">
            <summary>
            The document allows users to fill forms, sign the document, and edit annotations (add, remove, modify).
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.FieldDisallowChangeAction">
            <summary>
            When a document is signed, this enum determines whether or not all fields or a subset of
            of fields will be locked for changes.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.FieldDisallowChangeAction.IncludeAll">
            <summary>
            All non-read-only fields will be marked as read only upon signing.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.FieldDisallowChangeAction.IncludeSome">
            <summary>
            The signature will contain a list of fields that will be locked upon signing.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.FieldDisallowChangeAction.ExcludeSome">
            <summary>
            The signature will contain a list of fields that will not be locked upon signing,
            all others will be locked.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.PdfContentDigestMethod">
            <summary>
            When a document is signed, this enum determines the hashing algorithm that is used to create
            the detached message digest that will embedded in the file.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.PdfContentDigestMethod.SHA1">
            <summary>
            The sha-1 message digest is a 160 bit hash.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.PdfContentDigestMethod.SHA256">
            <summary>
            The sha-256 message digest is a 256 bit hash using the general SHA-2 algorithm
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.PdfContentDigestMethod.SHA384">
            <summary>
            The sha-384 message digest is a 384 bit hash using the general SHA-2 algorithm
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.PdfContentDigestMethod.SHA512">
            <summary>
            The sha-256 message digest is a 512 bit hash using the general SHA-2 algorithm
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.UnsupportedContentDigestAlgorithmAction">
            <summary>
            Defines the action to be taken when the contentdigest algorithm is not supported.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.UnsupportedContentDigestAlgorithmAction.FallBackToSHA1">
            <summary>
            Fall back to the SHA1 digest algorithm
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.DigitalSignatures.UnsupportedContentDigestAlgorithmAction.ThrowException">
            <summary>
            The throw an exception. Note that throwing an exception will result in an incompletely written file.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.PdfCertification">
            <summary>
            This class represents the certification information for a signed PDF.
            The certification is represented by a <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.PdfCertification.CmsInformation"/> object, although
            in the future it may be represented by other types.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfCertification.IsValid">
            <summary>
            Gets a value indicating whether the certification was valid as read from
            the PDF.
            </summary>
            <remarks> This does not indicate that the document is necessarily valid nor does it
            necessarily indicate that the associated CmsInformtation is valid. This indicates that
            when the secure hash was extracted from the CmsInformation in the document that it matches
            the current hash of the PDF. A mismatch indicates that the file has been modified.
            </remarks>
            <value>
              <c>true</c> if the certification is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfCertification.CmsInformation">
            <summary>
            Gets the CMS information for signer of the PDF document, if signed using CMS.
            </summary>
            <value>
            The CMS information.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.BaseDocumentCertification">
            <summary>
            The BaseDocumentCertification class represents the common information necessary for placing a
            certification signature on a PDF document. A certification signature is an indication that the
            document is as it was intended to be at the time it was signed. A signer may control the changes
            that may be made to the document after certification.
            <para>The certification may be visible or not. If visible, the parameters that control the
            appearance are in the specific subclasses used in <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> and
            <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/></para>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.BaseDocumentCertification.#ctor(Atalasoft.PdfDoc.DigitalSignatures.CmsInformation,Atalasoft.PdfDoc.DigitalSignatures.DocumentMDPAllowedChanges,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.BaseDocumentCertification"/> class.
            </summary>
            <param name="cmsInfo">The CMS information used to sign the document.</param>
            <param name="allowedChanges">The allowed changes after signing.</param>
            <param name="isVisible">if set to <c>true</c> if the signature is visible.</param>
            <exception cref="T:System.ArgumentNullException">cmsInfo</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">allowedChanges</exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.BaseDocumentCertification.AllowedChanges">
            <summary>
            Gets or sets the allowed changes, may not be NotSpecified.
            </summary>
            <value>
            The allowed changes.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">value</exception>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentCertification">
            <summary>
            The PdfDocumentCertification class is a subclass of <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.BaseDocumentCertification"/> used
            specifically for certifying documents created by the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> object.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentCertification.#ctor(Atalasoft.PdfDoc.DigitalSignatures.CmsInformation,Atalasoft.PdfDoc.DigitalSignatures.DocumentMDPAllowedChanges,System.Boolean,System.Int32,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentCertification"/> class.
            This class is used to represent the document certification and placement information
            for certifying a PDF document. The class is only intended to be used with the
            PdfDocument object.
            </summary>
            <param name="cmsInfo">The CMS information.</param>
            <param name="allowedChanges">The allowed changes.</param>
            <param name="isVisible">if set to <c>true</c> the signature is visible.</param>
            <param name="pageIndex">Index of the page which will contain the signature.</param>
            <param name="bounds">The bounds of the signature.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            pageIndex should be non-negative
            or bounds should not be empty if isVisible is true.
            </exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentCertification.PageIndex">
            <summary>
            Gets or sets the index of the page upon which the signature will be placed.
            </summary>
            <value>
            The index of the page.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentCertification.Bounds">
            <summary>
            Gets or sets the location of the signature on the page in PDF coordinates.
            </summary>
            <value>
            The location of the signature.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignature">
            <summary>
            The PdfDocumentSignature class represents the data needed for applying a digital signature
            to an existing <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/> object
            in a PdfDocument. This means that the SignatureWidgetAnnotation must already exist in the
            PagesOfAnnotations property in the PdfDocumentSigner either because it was pre-existing in the original
            document or that the document allowed it to be added.
            </summary>
            <example>
            This example shows how you can sign a document using PdfDocumentSignature.
            <code>
            public void SignDoc(PdfDocumentSigner signer, SignatureWidgetAnnotation annot, CmsInformation cmsInfo)
            {
                PdfDocumentSignature signature = new PdfDocumentSignature(cmsInfo, signature, true, true);
                signer.SignAndSave(new PdfDocumentSignature[] { signature } );
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignature.#ctor(Atalasoft.PdfDoc.DigitalSignatures.CmsInformation,Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignature"/> class.
            </summary>
            <param name="cmsInfo">The CMS information for the signature.</param>
            <param name="signature">The signature widget annotation that holds the visual cuing.</param>
            <param name="isVisible">if set to <c>true</c> the signature will be visible.</param>
            <param name="autoGenerateAppearance">if set to <c>true</c> DotPdf will auto-generate an appearance for this signature.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignature.SignatureWidget">
            <summary>
            Gets the signature widget that will be used for signing.
            </summary>
            <value>
            The signature widget.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignature.AutoGenerateSignatureAppearance">
            <summary>
            Gets or sets a value indicating whether DotPdf should automatically
            generate the signature's <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet"/>.
            </summary>
            <value>
            <c>true</c> if DotPdf should automatically
            generate the signature's <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation">
            <summary>
            PdfDocumentSignatureInformation is a class that contains information that was retrieved from
            an existing signed or certified PDF document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.Validate">
            <summary>
            Validates this PDF-oriented aspects of the signatures within the document.
            </summary>
            <remarks>
            DotPdf does not validate the content of the X509 certificates that were used to
            sign the document. How that should be done is strictly up to client code. This
            method instead will look at the aspects of the document that are <b>not</b> controlled
            by the signining certificates. For example, did a program modify the PDF document in a
            way that was forbidden by either the document's Certification or by one or more SignatureWidgetAnnotation\
            objects within the document.
            </remarks>
            <returns>A list of possible errors. If there are not errors, returns an empty list.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.ErrorsEncountered">
            <summary>
            Gets a description of the errors encountered, if any, while attempting to get
            signature information from a PDF file. If there were no errors,
            this will be an empty string.
            </summary>
            <value>
            The errors encountered while opening a PDF file.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.HasSignatures">
            <summary>
            Gets a value indicating whether a PDF document has signatures.
            </summary>
            <remarks>
            This only indicates the presence of signatures not whether they are
            signed or valid.
            </remarks>
            <value>
              <c>true</c> if a PDF document has signatures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.IsCertified">
            <summary>
            Gets a value indicating whether a PDF document is certified.
            </summary>
            <remarks> This property does not indicate that the certificate is valid, only that it is
            present.
            </remarks>
            <value>
              <c>true</c> if a PDF document is certified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.AllowedChanges">
            <summary>
            Gets the allowed changes to the document.
            </summary>
            <value>
            The allowed changes to the document. If set to NotSpecified, the document did not provide a set of changes.
            If <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.IsCertified"/> is <c>false</c>, this will be set to NotSpecified. If <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.IsCertified"/>
            is <c>true</c>, this is technically allowable but is suspect.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.Certificate">
            <summary>
            Gets the certificate associated with the document or <c>null</c> if there is no certificate.
            </summary>
            <value>
            The certificate for the document.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.SignatureCount">
            <summary>
            Gets the total number of signature fields in the document.
            </summary>
            <value>
            The signature count of the document.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.SignedSignatureCount">
            <summary>
            Gets the total number of signed signatures in the document.
            </summary>
            <remarks>
            This does not reflect whether or not the signatures are valid.
            </remarks>
            <value>
            The signed signature count of the document.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation.Signatures">
            <summary>
            Gets the list of signatures in the document. A signature, represented by a <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation"/> object
            may be signed or unsigned.
            </summary>
            <value>
            The list of signatures in the document.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner">
            <summary>
            PdfDocumentSigner is a class that is responsible for getting information about DigitalSignatures within
            a PDF document and applying signatures to a PDF document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.GetInfo(System.IO.Stream)">
            <summary>
            Gets the signature information for a PDF document.
            </summary>
            <param name="stream">The stream that contains a PDF file.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignatureInformation"/> object.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.GetInfo(System.String,System.String,System.IO.Stream)">
            <summary>
            Gets the signature information for a PDF document.
            </summary>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
            <param name="stream">The stream that contains a PDF file.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            If the password is incorrect or cannot be verified, the constructor will
            throw a IncorrectPasswordException.
            </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.#ctor(System.String,System.String,System.IO.Stream,Atalasoft.PdfDoc.PdfDocumentLoadedProgress)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner"/> class.
            </summary>
            <param name="userPassword">The optional user password for the document.</param>
            <param name="ownerPassword">The optional owner password for the document.</param>
            <param name="stream">The stream containing a PDF document.</param>
            <param name="pageLoaded">The page loaded handler.</param>
            <exception cref="T:Atalasoft.PdfDoc.PdfException">
            Throws a PdfException if one or more fatal errors occurred getting signature information. The exception message will contain
            the specifics of the errors. These messages are taken from a <c>PdfDocumentSignatureInformation</c> object.
            </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.#ctor(System.IO.Stream,Atalasoft.PdfDoc.PdfDocumentLoadedProgress)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner"/> class.
            </summary>
            <param name="stream">The stream containing a PDF document.</param>
            <param name="pageLoaded">The page loaded handler.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.AppendChangesFinal(System.Boolean)">
            <summary>
            Appends any changes made to annotations and form fields to the Stream provided in the
            constructor. After calling this method, this object is considered dead and can no longer
            be used for appending more changes or appending signatures. Further changes require
            constructing a new PdfDocumentSignerObject.
            </summary>
            <remarks>
            If closeStream is <c>true</c>, the stream will not be closed in the event of an error.
            <para>This is an append action, not a rewrite action and will modify the original stream.
            If you need to preserve the original stream, copy it to a temporary stream first, then
            use that stream for making changes.
            </para>
            
            </remarks>
            <param name="closeStream">if set to <c>true</c> close the initial stream.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.AppendSignaturesFinal(System.Boolean,System.Collections.Generic.ICollection{Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignature})">
            <summary>
            This method will sign, in turn, the provided collection of <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignature"/> then
            append all changes to the PDF document. After calling this method, this object is considered dead and can no longer
            be used for appending more changes or appending signatures. Further changes require
            constructing a new PdfDocumentSignerObject.
            </summary>
            <remarks>
            Each <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSignature"/> object must contain an <em>unsigned</em>
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/> which is also
            contained in both the <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.PagesOfAnnotations"/> collection as well as the <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.Form"/>.
            <para>Each signature will be checked for validity, will have an appearance applied to it (if requested),
            and, the signature applied and finally any fields that are required to be locked will be locked.</para>
            </remarks>
            <param name="closeStream">if set to <c>true</c> close the stream containing the PDF upon completion.</param>
            <param name="signatures">The signatures.</param>
            <exception cref="T:System.ArgumentNullException">signatures</exception>
            <exception cref="T:System.ArgumentException">signatures</exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.PagesOfAnnotations">
            <summary>
            Gets the pages of annotations within the PDF document. This is a read-only collection and can't be
            modified. Each element represents a page in the document in order. If a page has no annotations, it will contain
            an empty collection. If a document disallows adding or removing annotations, each collection will be a read-
            only collection.
            </summary>
            <value>
            The pages of annotations.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.Resources">
            <summary>
            Gets or sets the global resources.
            </summary>
            <value>
            The global resources.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.Form">
            <summary>
            Gets or sets the form object for the document.  By default, this is null.
            </summary>
            <value>
            The form.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner.Info">
            <summary>
            Gets the signature information about the document signatures as the result of opening the document.
            </summary>
            <remarks>
            This is object is equivalent to <code>PdfDocumentSigner.GetInfo(stm)</code>.
            </remarks>
            <value>
            The signature information for the document.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.PdfGeneratedDocumentCertification">
            <summary>
            The PdfGeneratedDocumentCertification class is a subclass of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.BaseDocumentCertification"/>
            class which is used specifically to control the appearance of signatures in a
            <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> object.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.PdfGeneratedDocumentCertification.#ctor(Atalasoft.PdfDoc.DigitalSignatures.CmsInformation,Atalasoft.PdfDoc.DigitalSignatures.DocumentMDPAllowedChanges,System.Boolean,Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfGeneratedDocumentCertification"/> class.
            This class is used to represent the document certification and placement information
            for certifying a PDF document. The class is only intended to be used with the
            PdfGeneratedDocument object.
            </summary>
            <param name="cmsInfo">The CMS information.</param>
            <param name="allowedChanges">The allowed changes.</param>
            <param name="isVisible">if set to <c>true</c> the signature is visible.</param>
            <param name="signature">The annotation representing the signature.</param>
            <param name="autoGenerateSignatureAppearance">if set to <c>true</c> DotPdf should automatically
            generate the signature's <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet"/>.</param>
            <exception cref="T:System.ArgumentNullException">signature</exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfGeneratedDocumentCertification.Signature">
            <summary>
            Gets or sets the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/> that represents
            the signature. This is required whether or not <see cref="P:Atalasoft.PdfDoc.DigitalSignatures.BaseSignature.IsVisible"/> is <c>true</c>.
            </summary>
            <value>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/> for the certification.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfGeneratedDocumentCertification.AutoGenerateSignatureAppearance">
            <summary>
            Gets or sets a value indicating whether DotPdf should automatically
            generate the signature's <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet"/>.
            </summary>
            <value>
            <c>true</c> if DotPdf should automatically
            generate the signature's <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation">
            <summary>
            This is an information class that represents the data associated with a digital signature
            applied to a PDF document.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.IsSigned">
            <summary>
            Gets a value indicating whether the given signature is signed.
            </summary>
            <value>
              <c>true</c> if the signature is signed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.IsVisible">
            <summary>
            Gets a value indicating whether the signature is visible.
            </summary>
            <value>
              <c>true</c> if the signature is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.Certification">
            <summary>
            Gets the certification for the signature.
            </summary>
            <value>
            The <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfCertification"/> for the signature or <c>null</c> if not signed.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.PageNumber">
            <summary>
            Gets the 0-based page number on which the associated <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/> exists.
            </summary>
            <value>
            The page number of the associated <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.AnnotationIndex">
            <summary>
            Gets the 0-based index of the associated <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/> in the page's annotation collection.
            </summary>
            <value>
            The index of the associated <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.SigningIteration">
            <summary>
            Gets the signing iteration for this document.  This is an indication of when this signature was
            applied relative to other signature annotations.
            </summary>
            <value>
            The signing iteration, 0 indicated an unsigned signature.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.SignatureFieldName">
            <summary>
            Gets the name of the associated <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/>.  This will be a string
            in full "dotted name" form used by the PDF specification.
            </summary>
            <value>
            The name of the signature field.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.Filter">
            <summary>
            Gets the name of the preferred signature handler to use when validating this signature.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.SubFilter">
            <summary>
            Gets a name that describes the encoding of the signature value. May be used by any handler 
            that supports this format to validate the signature.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.SignatureAuthor">
            <summary>
            Gets the name of the person or authority signing the document. This value should be used only 
            when it is not possible to extract the name from the signature.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.SigningTime">
            <summary>
            Gets the time of signing. Depending on the signature handler, this may be a normal unverified 
            computer time or a time generated in a verifiable way from a secure time server.
            This value should be used only when the time of signing is not available in the signature.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.Location">
            <summary>
            Gets the CPU host name or physical location of the signing.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.Reason">
            <summary>
            Gets the reason for the signing, such as (I agree...).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.PdfSignatureInformation.ContactInfo">
            <summary>
            Gets the information provided by the signer to enable a recipient to contact the signer to verify 
            the signature. For example, a phone number.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationError">
            <summary>
            Represents an error while validating digital signatures
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationError.#ctor(System.String,Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationErrorSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationError"/> class.
            </summary>
            <param name="message">The message associated with the error.</param>
            <param name="severity">The severity of the error.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationError.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.DigitalSignatures.SignatureValidationError.Severity">
            <summary>
            Gets the severity.
            </summary>
            <value>
            The severity.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.ColorSpace.MLPdfIndexedColorSpaceLookup">
            <summary>
            Represents indexed color space Lookup parameter.
            <para>
            The colour table shall be defined by the lookup parameter,
            which may be either a stream or a byte string.
            It shall provide the mapping between index values and
            the corresponding colours in the base colour space.
            </para>
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.MLPdfByteString">
            <summary>
            Represents bytes string type.
            <para>
            The byte string type shall be used for binary data that shall be represented as a series of bytes,
            where each byte may be any value representable in 8 bits. Byte string type is a subtype of string type.
            </para>
            <remarks>
            The string may represent characters but the encoding is not known.
            The bytes of the string may not represent characters.
            </remarks>
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.MLPdfStreamableObject">
            <summary>
            Summary description for MLPdfStreamableObject.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfByteString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.MidLevel.MLPdfByteString"/> class.
            </summary>
            <param name="stringValue">String value of bytes string.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfByteString.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.MidLevel.MLPdfByteString"/> class.
            </summary>
            <param name="bytesValue">Bytes of bytes string.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfByteString.GetBytes(System.String)">
            <summary>
            Retrieves bytes from string regardless of encoding.
            </summary>
            <param name="value">Bytes source.</param>
            <returns>String bytes.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfByteString.GetChars(System.Byte[])">
            <summary>
            Retrieves chars from bytes regardless of encoding.
            </summary>
            <param name="bytes">Chars source.</param>
            <returns>Converted chars.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfByteString.Bytes">
            <summary>
            Gets or sets bytes of bytes string.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.ColorSpace.MLPdfIndexedColorSpaceLookup.PdfVersionWhereLookupIsStream">
            <summary>
            The version number from which lookup parameter can be a byte string
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.ColorSpace.MLPdfIndexedColorSpaceLookup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.MidLevel.ColorSpace.MLPdfIndexedColorSpaceLookup"/> class.
            </summary>
            <param name="stringLookup">String value of lookup.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.ColorSpace.MLPdfIndexedColorSpaceLookup.#ctor(Atalasoft.PdfDoc.MidLevel.MLPdfStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.MidLevel.ColorSpace.MLPdfIndexedColorSpaceLookup"/> class.
            </summary>
            <param name="streamLookup">Stream value of lookup.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.ColorSpace.MLPdfIndexedColorSpaceLookup.GetBytes(Atalasoft.PdfDoc.MidLevel.MLPdfStream)">
            <summary>
            Retrieves bytes from string regardless of encoding.
            </summary>
            <param name="value">Bytes source.</param>
            <returns>Stream bytes.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.HintTables.BitReader.GetStreamAsBitSequence">
            <summary>
            The method convert stream data to bit sequence.
            </summary>
            <returns>Bit sequence.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.HintTables.BitWriter.Write(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="val"></param>
            <param name="length">Number of bits for value representation</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.LeastObjectCountPerPage">
            <summary>
            The least number of objects in a page (including the page object itself).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.FirstPageObjectOffset">
            <summary>
            The location of the first page’s page object.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.ObjectCoundDifferenceSize">
            <summary>
            The number of bits needed to represent the difference between 
            the greatest and least number of objects in a page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.LeastPageLength">
            <summary>
            The least length of a page in bytes. This shall be the least length from 
            the beginning of a page object to the last byte of the last object used 
            by that page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.PageLengthDifferenceSize">
            <summary>
            The number of bits needed to represent the difference between 
            the greatest and least length of a page, in bytes.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.LeastContentStreamOffset">
            <summary>
            The least offset of the start of any content stream, 
            relative to the beginning of its page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.ContentStreamOffsetDifferenceSize">
            <summary>
            The number of bits needed to represent the difference between 
            the greatest and least offset to the start of the content stream.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.LeastContentStreamLength">
            <summary>
            The least content stream length.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.ContentStreamLengthDifferenceSize">
            <summary>
            The number of bits needed to represent the difference between 
            the greatest and least content stream length.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.GreatestNumberOfSharedObjectRefsSize">
            <summary>
            The number of bits needed to represent the greatest number of shared 
            object references.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.GreatestIdentifiersSize">
            <summary>
            The number of bits needed to represent the numerically greatest 
            shared object identifier used by the pages
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.SharedObjectsNumeratorSize">
            <summary>
            The number of bits needed to represent the numerator of the fractional 
            position for each shared object reference. For each shared object referenced 
            from a page, there shall be an indication of where in the page’s content stream 
            the object is first referenced. That position shall be given as 
            the numerator of a fraction, whose denominator is specified once for 
            the entire document (in the next item in this table).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.PageOffsetHeader.DenominatorOfSharedObjects">
            <summary>
            The number of bits needed to represent the numerator of the fractional 
            position for each shared object reference. For each shared object referenced 
            from a page, there shall be an indication of where in the page’s content stream 
            the object is first referenced. That position shall be given as 
            the numerator of a fraction, whose denominator is specified once for 
            the entire document (in the next item in this table).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.SharedObjectHeader.FirstObjectId">
            <summary>
            The object number of the first object in the shared objects section
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.SharedObjectHeader.FirstObjectOffset">
            <summary>
            The location of the first object in the shared objects section.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.SharedObjectHeader.FirstPageObjectCount">
            <summary>
            The number of shared object entries for the first page 
            (including nonshared objects, as noted above).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.SharedObjectHeader.SharedObjectCount">
            <summary>
            The number of shared object entries for the shared objects section, 
            including the number of shared object entries for 
            the first page (that is, the value of <see cref="F:Atalasoft.PdfDoc.MidLevel.HintTables.SharedObjectHeader._header"/>[2]).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.SharedObjectHeader.SizeOfGreatestObjectCountInGroups">
            <summary>
            The number of bits needed to represent the greatest number of objects 
            in a shared object group.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.SharedObjectHeader.LeastObjectGroupLength">
            <summary>
            The least length of a shared object group in bytes.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.HintTables.SharedObjectHeader.SizeOfObjectGroupLengthDifference">
            <summary>
            The number of bits needed to represent the difference between 
            the greatest and least length of a shared object group, in bytes.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfDictionary.DateTimeFromString(System.String)">
            <summary>
            Parse a PDF Date string into a System.DateTime
            </summary>
            <param name="s">PDF date string</param>
            <returns>the equivalent System.DateTime (or MinValue in case of error)</returns>
            <remarks>The returned DateTime is in seconds, with Millisecond = 0.
            If the input string specifies a time-zone, the returned value is UTC.
            Otherwise the returned value has Kind = Unspecified (unknown time zone).
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructDictionary.Page">
            <summary>
            (Optional; shall be an indirect reference) A page object
            representing a page on which some or all of the content items 
            designated by the K entry shall be rendered.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfMarkedContentReference.Stm">
            <summary>
            (Optional; shall be an indirect reference) The content stream containing 
            the marked-content sequence. This entry should be present only if 
            the marked-content sequence resides in a content stream other than 
            the content stream for the page (see 8.10, “Form XObjects” and 12.5.5, 
            “Appearance Streams”).
            If this entry is absent, the marked-content sequence shall be contained in 
            the content stream of the page identified by Pg (either in the marked-content 
            reference dictionary or in the parent structure element).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfMarkedContentReference.MCID">
            <summary>
            (Required) The marked-content identifier of the marked-content 
            sequence within its content stream.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.S">
            <summary>
            (Required) The structure type, a name object identifying the 
            nature of the structure element and its role within the document, 
            such as a chapter, paragraph, or footnote (see 14.7.3, 
            “Structure Types”). Names of structure types shall conform to 
            the guidelines described in Annex E.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.ParentElement">
            <summary>
            (Required; shall be an indirect reference) The structure element 
            that is the immediate parent of this one in the structure hierarchy.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.ID">
            <summary>
            (Optional) The element identifier, a byte string designating this 
            structure element. The string shall be unique among all elements 
            in the document’s structure hierarchy. The IDTree entry in 
            the structure tree root (see Table 322) defines the correspondence 
            between element identifiers and the structure elements they denote.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.K">
            <summary>
            (Optional) The children of this structure element. The value of this 
            entry may be one of the following objects or an array consisting of 
            one or more of the following objects:
            •A structure element dictionary denoting another structure element
            •An integer marked-content identifier denoting a marked-content sequence
            •A marked-content reference dictionary denoting a marked-content sequence
            •An object reference dictionary denoting a PDF object
            Each of these objects other than the first (structure element dictionary) 
            shall be considered to be a content item; see 14.7.4, “Structure Content” 
            for further discussion of each of these forms of representation.
            If the value of K is a dictionary containing no Type entry, it shall be 
            assumed to be a structure element dictionary.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.A">
            <summary>
            (Optional) A single attribute object or array of attribute objects 
            associated with this structure element. Each attribute object shall 
            be either a dictionary or a stream. If the value of this entry is 
            an array, each attribute object in the array may be followed by 
            an integer representing its revision number (see 14.7.5, “Structure 
            Attributes,” and 14.7.5.3, “Attribute Revision Numbers”).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.C">
            <summary>
            (Optional) An attribute class name or array of class names 
            associated with this structure element. If the value of this entry is 
            an array, each class name in the array may be followed by an integer 
            representing its revision number (see 14.7.5.2, “Attribute Classes,” 
            and 14.7.5.3, “Attribute Revision Numbers”).
            If both the A and C entries are present and a given attribute is 
            specified by both, the one specified by the A entry shall take precedence.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.R">
            <summary>
            (Optional) The current revision number of this structure element 
            (see 14.7.5.3, “Attribute Revision Numbers”). The value shall be 
            a non-negative integer. Default value: 0.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.Title">
            <summary>
            (Optional) The title of the structure element, a text string 
            representing it in human-readable form. The title should 
            characterize the specific structure element, such as Chapter 1, 
            rather than merely a generic element type, such as Chapter.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.Lang">
            <summary>
            (Optional; PDF 1.4) A language identifier specifying the natural 
            language for all text in the structure element except where 
            overridden by language specifications for nested structure elements 
            or marked content (see 14.9.2, “Natural Language Specification”). 
            If this entry is absent, the language (if any) specified in 
            the document catalogue applies.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.Alt">
            <summary>
            (Optional) An alternate description of the structure element and 
            its children in human-readable form, which is useful when extracting 
            the document’s contents in support of accessibility to users with 
            disabilities or for other purposes (see 14.9.3, “Alternate Descriptions”).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.E">
            <summary>
            (Optional; PDF 1.5) The expanded form of an abbreviation.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructElem.ActualText">
            <summary>
            (Optional; PDF 1.4) Text that is an exact replacement for 
            the structure element and its children. This replacement text 
            (which should apply to as small a piece of content as possible) 
            is useful when extracting the document’s contents in support of 
            accessibility to users with disabilities or for other purposes 
            (see 14.9.4, “Replacement Text”).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructTreeRoot.K">
            <summary>
            (Optional) The immediate child or children of the structure tree root 
            in the structure hierarchy. The value may be either a dictionary 
            representing a single structure element or an array of such dictionaries.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructTreeRoot.IDTree">
            <summary>
            (Required if any structure elements have element identifiers) 
            A name tree that maps element identifiers (see Table 323) to the structure 
            elements they denote.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructTreeRoot.ParentTree">
            <summary>
            (Required if any structure element contains content items) 
            A number tree (see 7.9.7, “Number Trees”) used in finding the structure elements
            to which content items belong. Each integer key in the number tree 
            shall correspond to a single page of the document or to an individual object 
            (such as an annotation or an XObject) that is a content item in its own right. 
            The integer key shall be the value of the StructParent or StructParents entry 
            in that object (see 14.7.4.4, “Finding Structure Elements from Content Items”). 
            The form of the associated value shall depend on the nature of the object:
            For an object that is a content item in its own right, the value shall be an indirect 
            reference to the object’s parent element 
            (the structure element that contains it as a content item).
            For a page object or content stream containing marked-content sequences 
            that are content items, the value shall be an array of references to the parent 
            elements of those marked-content sequences.
            See 14.7.4.4, “Finding Structure Elements from Content Items” for further discussion.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructTreeRoot.ParentTreeNextKey">
            <summary>
            (Optional) An integer greater than any key in the parent tree, 
            shall be used as a key for the next entry added to the tree.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructTreeRoot.RoleMap">
            <summary>
            (Optional) A dictionary that shall map the names of structure types 
            used in the document to their approximate equivalents in the set of 
            standard structure types (see 14.8.4, “Standard Structure Types”).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.LogicalStructure.MLPdfStructTreeRoot.ClassMap">
            <summary>
            (Optional) A dictionary that shall map name objects designating 
            attribute classes to the corresponding attribute objects or arrays of 
            attribute objects (see 14.7.5.2, “Attribute Classes”).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfBead.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; 
            if present, shall be Bead for a bead dictionary.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfBead.Thread">
            <summary>
            (Required for the first bead of a thread; optional for all others; 
            shall be an indirect reference) 
            The thread to which this bead belongs.
            (PDF 1.1) This entry shall be permitted only for the first bead of a thread.
            (PDF 1.2) It shall be permitted for any bead but required only for the first.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfBead.NextBead">
            <summary>
            (Required; shall be an indirect reference) 
            The next bead in the thread. In the last bead, 
            this entry shall refer to the first bead.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfBead.PreviousBead">
            <summary>
            (Required; shall be an indirect reference) 
            The previous bead in the thread. In the first bead, 
            this entry shall refer to the last bead.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfBead.ParentPage">
            <summary>
            (Required; shall be an indirect reference) 
            The page object representing the page on which this bead appears.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfBead.Location">
            <summary>
            (Required) A rectangle specifying the location of this bead on the page.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.MLPdfEntryStructure">
            <summary>
            Class stored tree of objects, which have own entry.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfEntryStructure.BeginWritingObject(System.Object,Atalasoft.PdfDoc.MidLevel.MLPdfPropertyAttribute)">
            <summary>
            Setting object, which began writing. All objects, including referenced, 
            written inside this object will be associated with this object.
            </summary>
            <param name="o">Current object for writing.</param>
            <param name="attribute">Attribute of current object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfEntryStructure.AttachEntryToCurrentElement(Atalasoft.PdfDoc.MidLevel.MLPdfXrefEntry)">
            <summary>
            Attach entry to current writing element.
            </summary>
            <param name="entry">Entry.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfEntryStructure.FinishWritingObject">
            <summary>
            Reset current object.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfEntryStructure.AddReferencedObject(Atalasoft.PdfDoc.MidLevel.MLPdfXrefEntry,System.Object)">
            <summary>
            Associate reference with current object. If current object is null, entry would be skiped.
            </summary>
            <param name="entry">Entry, contained in current object.</param>
            <param name="obj">Referenced object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfEntryStructure.GetRelatedEntries(Atalasoft.PdfDoc.MidLevel.MLPdfXrefEntry)">
            <summary>
            Returns related entries.
            </summary>
            <param name="entry"></param>
            <returns>
            Entries, related to incoming entry. If entry does not contains 
            in objects tree, returns empty list.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfEntryStructure.GetRelatedEntries(System.Object)">
            <summary>
            Returns related entries of object, even if object 
            have not own entry (part of another object).
            </summary>
            <param name="obj"></param>
            <returns>
            Entries, related to incoming entry. If entry does not contains 
            in objects tree, returns empty list.
            </returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Examiner.ExaminerResults">
            <summary>
            ExaminerResults represents the results of information about a PDF that can be determined
            without extensive scanning of the document.  Not all information within the results is
            exhaustive and therefore may have either false positives or false negatives depending on
            the actual document content. To the greatest extent possible, these false indicators are
            benign except where noted.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Examiner.ExaminerResults.FromStream(System.IO.Stream,System.String,System.String)">
            <summary>
            Attempts to build an ExaminerResults object from the stream provided.  To the greatest extent
            possible, <c>FromStream</c> attempts to get some information from the file.  If the file is a PDF
            and it is encrypted, <c>FromStream</c> will throw an <see cref="T:Atalasoft.PdfDoc.IncorrectPasswordException"/>.
            <br/>
            Note that many of the properties in the file cascade. For example, if <see cref="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsPdf"/> returns
            <c>false</c>, no other property will be valid. If <see cref="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsEncrypted"/> is <c>true</c>, no other
            properties except <see cref="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsPdf"/>, <see cref="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsPdfA"/>, and <see cref="P:IsIncorrectVersionForXrefStream"/>
            will be valid.
            <br/>
            The properties within ExaminerResults are meant to reflect a very lightweight examination of the file
            and are in no way are exhaustive. PDF is a very complicated file format and there are a number of
            exceptions in the specification that are counter to the goal of having a light-weight interface to
            the information within the file.  For example, because a PDF file presents information that indicates
            that it meets the archival variant, PDF/A, this doesn't guarantee that the document meets all requirements.
            ExaminerResults reflects what is advertised by the file and not necessarily the entire depth of content.
            <br/>
            The stream position can not be counted on to be at a consistent location upon return.
            <br/>
            The supplied passwords may either or both be null indicating no password.  If passwords are supplied
            and the document is not encrypted, the passwords will be ignored. If the document is encrypted and the
            password(s) are incorrect or null FromStream will throw an <see cref="T:Atalasoft.PdfDoc.IncorrectPasswordException"/>.
            <example>
            The following example converts the rectangular points of an annotation into
            document space.
            <code lang="CS" title="ConverterExample">
            public ExaminerResults ExaminePdf(Stream stm)
            {
                ExaminerResults res = null;
                try {
                    res = ExaminerResults.FromStream(stm, null, null);
                    return res;
                }
                catch (IncorrectPasswordException) {
                    while (true) {
                        string password = GetPasswordFromUser();
                        if (password == null) return null; // canceled
                        try {
                            res = ExaminerResults.FromStream(stm, password, null);
                            return res;
                        }
                        catch (IncorrectPasswordException) { }
                    }
                }
            }
            </code>
            </example>
            </summary>
            <param name="stm">The instream.</param>
            <param name="userPassword">The user password. Set to <c>null</c> for no password.</param>
            <param name="ownerPassword">The owner password. Set to <c>null</c> for no password.</param>
            <returns>An instance of ExaminerResults if successfull.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsPdf">
            <summary>
            Gets a value indicating whether the document is a PDF. This test is more lenient than the
            specification allows and will return <c>true</c> if the document contains the PDF header
            including in some pathological cases. If the PDF header meets specification, <see cref="P:IsValidHeader"/>
            will return <c>true</c>. If it returns
            <c>false</c>, the document is well out-of-spec and no other information in ExaminerResults
            will be valid.
            </summary>
            <value>
              <c>true</c> if the document is a PDF; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsValidPdfHeader">
            <summary>
            Gets a value indicating whether the document contains a valid PDF header.  If the document
            does not meet the PDF specification for a header but still contains the text "%PDF-" this will
            return false.  For example, if the document start with the following:
            <para><c>%!PS-Adobe - this is PostScript not %PDF-1.0</c></para><para>this will be considered to
            be a PDF, even though it is not within specification (and because it's labeled as PostScript, it will likely
            generate other errors).</para>
            
            </summary>
            <value>
              <c>true</c> if the document contains a valid PDF header; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsEncrypted">
            <summary>
            Gets a value indicating whether the document contains encryption.  Not all documents that are
            encrypted require a non-empty password. This property merely indicates that a password might be
            required to correctly open the document. If <see cref="M:Atalasoft.PdfDoc.Examiner.ExaminerResults.FromStream(System.IO.Stream,System.String,System.String)"/> throws an
            <c>IncorrectPasswordException</c>, then the document requires a non-empty password or the supplied
            password(s) are incorrect.
            </summary>
            <value>
              <c>true</c> if the document is encrypted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsIncorrectVersionForXrefStream">
            <summary>
            Gets a value indicating whether the PDF document's advertised document version is incorrect.
            Specifically, some PDF document generators use a PDF featured called cross-reference streams that
            require that the document be version 1.5 or greater. If there is evidence of a cross-reference stream
            and the version is less than 1.5, this property will true.
            </summary>
            <value>
              <c>true</c> if the PDF is marked version 1.4 or earlier and contains a cross reference stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsPdfPortfolio">
            <summary>
            Gets a value indicating whether the document contains a PDF Portfolio. This test looks specifically
            for a Collection object in the document's catalog. A PDF Portfolio is a feature wherein a PDF document
            doesn't necessarily contain any PDF data at all, but instead contains a series of embedded files which
            represent the content of the document. Some PDF documents that have a Portfolion include an ersatz page
            which is shown for compatibility. The presentation of embedded files is application dependent.
            </summary>
            <value>
              <c>true</c> if the document contains a PDF portfolio; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsBadlyDamaged">
            <summary>
            Gets a value indicating whether the document is badly damaged. If, during the process of opening the
            file, errors were encountered that were of Major severity or worse then IsBadlyDamaged will be set to
            <c>true</c>.  If <c>true</c>, only the properties <see cref="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsPdf"/>, <see cref="P:IsValidHeader"/>,
            and <see cref="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsEncrypted"/> will be valid.  All other values are suspect.
            </summary>
            <value>
              <c>true</c> if the document is badly damaged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.IsPdfA">
            <summary>
            Gets a value indicating whether the document advertises itself as conforming to the PDF/A-1b
            archival specification.  This does not mean that the document in any way complies with the specification,
            merely that it says it does.  For example, if IsPdfA returns <c>true</c> and <see cref="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.HasXmp"/> returns <c>false</c>,
            then the document is <b>NOT</b> a PDF/A compliant document. 
            </summary>
            <value>
              <c>true</c> if the document advertises itself as conforming to the PDF/A-1b specification; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.HasForm">
            <summary>
            Gets a value indicating whether the document contains an AcroForm.
            </summary>
            <value>
              <c>true</c> if the document contains an AcroForm; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.FormUsesXFA">
            <summary>
            Gets a value indicating whether the AcroForm in the document uses Adobe's Extensible Form
            Architecture, XFA.
            </summary>
            <value>
              <c>true</c> if the AcroForm uses xfa; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.RequiresDynamicFormRendering">
            <summary>
            Gets a value indicating whether requires dynamic form rendering. Typically, this is set when a document
            contains an XFA form and has embedded form data that has not yet been converted into PDF content.
            </summary>
            <value>
            <c>true</c> if the document requires dynamic form rendering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.HasSignatures">
            <summary>
            Gets a value indicating whether the AcroForm advertises that it contains digital signatures. This
            does not indicate that the signatures are valid.
            </summary>
            <remarks>Some documents may advertise that they contains signatures, but have had them (incorrectly)
            removed</remarks>
            <value>
              <c>true</c> if the document advertises that it has signatures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.DocumentVersion">
            <summary>
            Gets the document version advertised by the document. The resulting value is the maximum of the value
            in the document header and the value in the document catalog. The value will always be for the form
            major.minor. Currently major is always 1. Note many incorrect documents contain PDF features that are
            beyond their advertised version.
            </summary>
            <value>
            The document version.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.PageCount">
            <summary>
            Gets the page count of the document.
            </summary>
            <value>
            The page count.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.ErrorsEncountered">
            <summary>
            Gets a list of errors encountered while opening the document. Since only a narrow subset of the document
            is examined, this list is not guaranteed to be exhaustive.
            </summary>
            <value>
            The errors encountered while opening the document.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.Metadata">
            <summary>
            Gets the metadata associated with the PDF document from the DocumentInfo object within the file. This
            value may be <c>null</c>.
            </summary>
            <value>
            The metadata for the file
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Examiner.ExaminerResults.HasXmp">
            <summary>
            Gets a value indicating whether the document has XMP metatdata.
            </summary>
            <value>
              <c>true</c> if the document has XMP metadata; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder">
            <summary>
            This class represents the appearance of the border drawn for PDF annotations.
            <example>
            This is an example of how to create a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation"/> with round corners and a wide outline:
            <code>
            RectangleAnnotation annot = new RectangleAnnotation(bounds);
            annot.Border = new AnnotationBorder(4, 4, 10, AnnotationBorder.EmpyDashPattern);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder"/> class with <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.HorizontalCornerRadius"/> = 0,
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.VerticalCornerRadius"/> = 0, <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.Width"/> = 0, and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.DashPattern"/> = <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.EmptyDashPattern"/>.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.#ctor(System.Double,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder"/> class with the specified values.
            </summary>
            <param name="hoizontalCornerRadius">The hoizontal corner radius.</param>
            <param name="verticalCornerRadius">The vertical corner radius.</param>
            <param name="width">The line width.</param>
            <param name="dashPattern">The dash pattern.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.HorizontalCornerRadius">
            <summary>
            Gets or sets the horizontal corner radius in PDF units.
            </summary>
            <value>
            The horizontal corner radius.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.VerticalCornerRadius">
            <summary>
            Gets or sets the vertical corner radius in PDF units.
            </summary>
            <value>
            The vertical corner radius.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.Width">
            <summary>
            Gets or sets the width of the line in PDF units.
            </summary>
            <value>
            The width of the line.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.DashPattern">
            <summary>
            Gets or sets the dash pattern.
            </summary>
            <value>
            The dash pattern.
            </value>
            <example>
            This is a set of numbers that indicate how many PDF units the line will be drawn and skipped.  For example, to have
            lines drawn with a 3 unit dash seprated by 1 unit spaces, you would use <c>new double[] { 3, 1 }</c>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder.EmptyDashPattern">
            <summary>
            Gets the empty dash pattern.  Using this as the dash pattern with generate a solid line.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationPropertyProblem`1">
            <summary>
            Defines a problem that could occur with the a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation"/> property value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.AnnotationPropertyProblem`1.#ctor(`0,System.String,System.String,Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext,Atalasoft.Shared.Validation.Problem{`0,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext}.ReparationMechanism)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationPropertyProblem`1"/> class.
            </summary>
            <param name="source">The source annotation.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="description">The description of the problem.</param>
            <param name="consequences">The description of the consequences of fixing the problem.</param>
            <param name="repairContext">The repair context.</param>
            <param name="reparation">The reparation action to take.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet">
            <summary>
            Pdf annotations support appearances that can be associated with three interaction modes
            <list>
            <item>
            <term>Normal</term><description>How the annotation will appear under typical circumstances (ie, no interaction)</description>
            </item>
            <item>
            <term>Rollover</term><description>How the annotation will appear when the cursor is in the annotation</description>
            </item>
            <item>
            <term>Activated</term><description>How the annotation will appear when click on</description>
            </item>
            </list>
            Each of this modes is associated with a collection of appearances, each of which corresponds to an annotation's current
            state.  For example, a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation"/> defines states for when it has been checked and when it is clear.
            The <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.Normal"/> property would contain appearances for each of these states.  When an annotation only
            has one state, the name of that state is inconsequetial and will be ignored when written to the PDF file.  For naming purposes,
            if an annotation has only a single state with no meaningful name, you can use <see cref="F:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.DefaultAppearanceName"/>
            for the name.
            </summary>
            <example>
            The following example makes an annotation with a star appearance.
            <code>
            PdfGeneratedDocument doc = new PdfGeneratedDocument();
            PdfGeneratedPage page = doc.AddPage(PdfDefaultPages.Letter);
            RectangleAnnotation anno = new RectangleAnnotation(new PdfBounds(72, 400, 200, 200));
            DrawingTemplate template = new DrawingTemplate(new PdfBounds(0, 0, anno.Bounds.Width, anno.Bounds.Height));
            PdfPath path = new PdfPath(PdfColorFactory.FromRgb(.8, .25, .25));
            path.FillMethod = PdfFillMethod.NonZeroWinding;
            path.MoveTo(100, 200);
            path.LineTo(175, 0);
            path.LineTo(0, 150);
            path.LineTo(200, 150);
            path.LineTo(25, 0);
            path.Close();
            template.DrawingList.Add(path);
            string resourceName = doc.Resources.Templates.Add(template);
            anno.Appearance = new AppearanceSet();
            anno.Appearance.Normal.Add(AppearanceSet.DefaultAppearanceName, resourceName);
            page.Annotations.Add(anno);
            doc.Save("staranno.pdf");
            </code>
            </example>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.IPdfResourceConsumer">
            <summary>
            An interface to prevent renaming conflict disconnects when a resource changes names.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.IPdfResourceConsumer.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Notifies that the resource was renamed.
            </summary>
            <param name="gr">The gr.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.IPdfResourceConsumer.ResourcesUsed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Reports a list of all resources consumed by the object of the given class.
            </summary>
            <remarks>
            The gr parameter is used by objects that refer to resources which themselves may be resource consumers.
            Typical client code is unlikely to need to implement this class unless is uses a resource by name.
            </remarks>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>A list of all resources of the class specified that may be used by this object.</returns>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.DefaultAppearanceName">
            <summary>
            A string to use for <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceStates"/> objects with a single state.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet"/> class.  <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.Normal"/>,
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.Rollover"/>, and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.Activated"/> are initialed to empty <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceStates"/>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Notifies the object that the resource was renamed.
            </summary>
            <param name="gr">The global resources that contain the resource.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original resource.</param>
            <param name="newName">The new name to be used.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.ResourcesUsed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Reports a list of all resources consumed by the object of the given class.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.Normal">
            <summary>
            Gets the normal <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceStates"/>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.Rollover">
            <summary>
            Gets the rollover <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceStates"/>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.Activated">
            <summary>
            Gets the Activated <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceStates"/>.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceStates">
            <summary>
            AppearanceStates represents a collection of names of <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource"/> objects that are
            keyed by a state name.  For most annotations there is only one state that has no particular state name.
            For this situation, you can use <see cref="F:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.DefaultAppearanceName"/> for the single state
            name.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.AppearanceStates.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Notifies the object that the resource was renamed.
            </summary>
            <param name="gr">The global resources that contain the resource.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original resource.</param>
            <param name="newName">The new name to be used.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.AppearanceStates.ResourcesUsed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Reports a list of all resources consumed by the object of the given class.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation">
            <summary>
            Represents a base class for all PDF annotation types.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ThrowIfReadOnly``1(``0)">
            <summary>
            If <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.EnforceReadyOnlyWithException"/> is <c>true</c> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ReadOnly"/> is true,
            throw an InvalidOperationException, otherwise return <c>value</c>.
            </summary>
            <remarks>
            This is a helper method used in public properties to prevent modification to annotation contents.
            </remarks>
            <typeparam name="T">The value type</typeparam>
            <param name="value">The value</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Attempt to modify a read-only annotation.</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.HasAppearance">
            <summary>
            Determines whether this instance has at least 1 element in the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet.Normal"/> appearance set.
            </summary>
            <returns><c>true</c> if there is at least 1 appearance; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties of this object and adds any issues to the problems list.
            </summary>
            <param name="problems">The problems accumulated so far.</param>
            <param name="context">The context for repairing issues.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ValidateActions(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the actions.
            </summary>
            <param name="problems">The problems.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ValidateActionList(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext,Atalasoft.PdfDoc.PdfActionList)">
            <summary>
            Validates the action list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="context">The context.</param>
            <param name="actions">The actions.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this annotation object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <remarks>
            Expected <c>o</c> to be a <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedPage"/>.
            </remarks>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the annotation and accumulates any problems.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            This method is called when a global resourec has been renamed, allowing the resource consumer to update to the
            new name.  Annotations defer this to their appearance, if any.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original resource.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ResourcesUsed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Reports a list of all resources consumed by the object of the given class.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.EnforceReadyOnlyWithException">
            <summary>
            Gets or sets a value indicating whether to enforce ready only with the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ReadOnly"/> propery with an exception.
            </summary>
            <remarks>
            When set to <c>true</c>, if <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ReadOnly"/> or <see cref="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.IsFieldReadOnly"/>is set to true, this will cause any property
            that is modified to throw an InvalidOperationException. This has true as a default value. It is
            <b>not</b> recommended to change this property.
            </remarks>
            <value>
            <c>true</c> if ReadOnly will be enforced  with an exception; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.IsReadOnlyOrFieldReadOnly">
            <summary>
            Determines whether the annotation is read only if either <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ReadOnly"/> is <c>true</c> or if
            this object implements <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/>, if
            <see cref="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.IsFieldReadOnly"/> is <c>true</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.IsDirty">
            <summary>
            Gets or sets a value indicating whether the annotation is dirty and in need of being written.
            </summary>
            <value>
              <c>true</c> if the annotation is dirty; otherwise, <c>false</c>.
            </value>
            <remarks>
            This property is, at present, used only by the PdfDocumentSigner object in order to track
            annotations and fields that have been changed in order to update them in the output.
            This property is automatically set in the act of setting any property in the annotation, however,
            it is <em>not</em> set when changing the <i>contents</i> of a property.
            <code>
            someAnnotation.AppearanceSet = GenerateNewAppearanceSet(); // someAnnotation.IsDirty is now true
            someAnnotation.IsDirty = false;
            someAnnotation.AppearanceSet.Normal.Add("SomeName", "SomeTemplate"); // someAnnotation.IsDirty is still false
            </code>
            Therefore, an application that intends to modify annotations should, as a matter of course,
            mark them dirty so that they will be updated in the output.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds">
            <summary>
            Gets or sets the bounding rectangle for this annotation.
            </summary>
            <value>
            The bounds of the annotation.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Contents">
            <summary>
            Gets or sets the text contents of the annotation.  How contents is used depends on the annotation type.  For example
            a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation"/> will use <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Contents"/> to represent text the user has entered.
            </summary>
            <value>
            The text contents.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ParentPage">
            <summary>
            Gets or sets the parent page that contains this annotation.
            </summary>
            <value>
            The parent page.
            </value>
            <remarks>
            This property is only required for ScreenAnnotations, but can be set by any annotation. 
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Name">
            <summary>
            Gets or sets the name of the annotation.  This name is meant to be a unique identifier for the annotation and may be
            use in scripts in <see cref="T:Atalasoft.PdfDoc.PdfJavaScriptAction"/> objects that want to find an annotation.
            </summary>
            <value>
            The name of the annotation.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ModificationDate">
            <summary>
            Gets or sets the modification date for this annotation.  DotPdf does not update this property.
            It is the client's responsibility to change it.
            </summary>
            <value>
            The modification date.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Border">
            <summary>
            Gets or sets the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationBorder"/> for this annotation.
            </summary>
            <value>
            The border to use.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Color">
            <summary>
            Gets or sets the color of the annotation.  The meaning of this color varies based on the annotation type.
            It may represent the background color of the annotation's icon (if any) when closed, the title bar of the
            annotation's pop-up window, the border color of the annotation.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.IsTransparent">
            <summary>
            Gets or sets a value indicating whether this instance is transparent.  This is an indication that there was
            no <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Color"/> specified for the annotation.
            </summary>
            <value>
            	<c>true</c> if this instance is transparent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.AnnotationType">
            <summary>
            Gets the type of the original PDF annotation if this annotation was imported from a file.  This is generally
            only useful if the annotation was a type not recognized or not currently modeled by DotPdf
            </summary>
            <value>
            The type of the annotation, empty string if none.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.BorderStyle">
            <summary>
            Gets or sets the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.BorderStyle"/> for the annotation.
            </summary>
            <value>
            The border style.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Appearance">
            <summary>
            Gets or sets the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AppearanceSet"/> for the annotation.  This property defaults to null (no appearance set).
            </summary>
            <value>
            The appearance set to use for the annotation.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.DefaultAppearanceState">
            <summary>
            Gets or sets the name of the default appearance state for the annotation.  In annotations that may have multiple
            possible states (say, "On" of "Off") this the name of the default state.  In an annotation's "normal" state, this
            corresponds to <c>Appearance.Normal[DefaultAppearanceState]</c>.
            </summary>
            <value>
            The default state of the appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ClickActions">
            <summary>
            Gets the set of actions performed when the annotation has been clicked.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.AdditionalActions">
            <summary>
            Gets the additional actions associated with the annotation.  These are generally only used by widget annotations.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.IsParentRequired">
            <summary>
            Gets a value indicating whether this instance requires the parent property.
            </summary>
            <value>
            	<c>true</c> if this instance requires the parent property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Invisible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation"/> is invisible.  Invisibility
            specifically means that if the annotation is not recognized by the viewer, then it should not be displayed,
            otherwise the viewer may make a substitute appearance for the annotation.  Default is <c>false</c>.
            </summary>
            <value>
              <c>true</c> if invisible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Hidden">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation"/> is hidden.  A hidden annotation
            is neither displayed nor printed by a viewer under any circumstances.  Default is <c>false</c>.
            </summary>
            <value>
              <c>true</c> if hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Print">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation"/> is printed.  Default is <c>false</c>.
            </summary>
            <value>
              <c>true</c> if print; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.NoZoom">
            <summary>
            Gets or sets a value indicating whether the annotation's appearance is scaled when the page is zoomed in.  Default is <c>false</c>.
            </summary>
            <value>
              <c>true</c> if the annotation will not zoom; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.NoRotate">
            <summary>
            Gets or sets a value indicating whether the annotation should be rotated when a page is rotated.   Default is <c>false</c>.
            </summary>
            <value>
              <c>true</c> if will not rotate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.NoView">
            <summary>
            Gets or sets a value indicating whether the annotation is viewable and will interact with the user.  This is different
            from hidden in that an annotation <c>NoView</c> set to true can be printed.  This is a way, for example, to put watermarks on
            a page that only show when printed.  Default is false.
            </summary>
            <value>
              <c>true</c> if the annotation is not viewable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the annotation can interact with the user.   Default is false.
            </summary>
            <value>
              <c>true</c> if the annotation is unusable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Locked">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation"/> is locked.  A locked annotation
            may not be deleted or have its properties changed, but its contents (such as a form field) may still be editable.
            </summary>
            <value>
              <c>true</c> if locked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ToggleNoView">
            <summary>
            Gets or sets a value indicating whether to toggle the sense of the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.NoView"/> property.  This might
            be used to make an annotation visible when the mouse enters it.
            </summary>
            <value>
              <c>true</c> if <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.NoView"/> will be toggled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.DocumentRevision">
            <summary>
            Gets the revision of the document in which this widget was found.       
            </summary>
            <remarks>
            A widget may be placed in any revision that is allowed by the document and it
            may be replaced in any subsequent revision. Typically this is used to identify which
            annotations should have been marked read only when a document is signed.
            </remarks>
            <value>
            The revision of the document in which this widget was found.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.BaseButtonWidgetAnnotation">
            <summary>
            This class is a base class for all button widgets, including <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation"/>,
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation"/>, and <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation"/>.  It cannot be
            constructed directly.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/> is the abstract base class of all widget annotations.  All widgets serve both
            as annotations and as form elements, therefore <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/> also implements the
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> interface allowing it to act as a child field
            of any non-widget annotation.
            </summary>
            
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement">
            <summary>
            An object that implements the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> interface can be used as a field within in
            a PDF form.  It is not recommended to use any but the standard form elements.  Client code should not
            implement this interface.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.ParentField">
            <summary>
            Gets or sets the parent field of this form field.
            </summary>
            <value>
            The parent field.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.ChildFields">
            <summary>
            Gets the child fields for this field.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.FieldAlternateDescription">
            <summary>
            Gets or sets the field alternate description for display in the user interface.
            </summary>
            <value>
            The field alternate description.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.FieldNameForExport">
            <summary>
            Gets or sets the field name for export.
            </summary>
            <value>
            The field name for export.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.IsFieldReadOnly">
            <summary>
            Gets or sets a value indicating whether this field is read only.
            </summary>
            <value>
            	<c>true</c> if this instance field is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.IsFieldRequired">
            <summary>
            Gets or sets a value indicating whether this field is required.
            </summary>
            <value>
            	<c>true</c> if this instance field is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.IsFieldNoExport">
            <summary>
            Gets or sets a value indicating whether this field should not be export.
            </summary>
            <value>
            	<c>true</c> if this field should not exported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.FieldFullName">
            <summary>
            Gets the fully qualified name of the field.  This value is only correct if
            <see cref="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.ParentField"/> has been set.  When the parent chain is properly
            set up, this will return ParentField.FieldFullName + '.' + FieldName
            </summary>
            <value>
            The full name of the field.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties of this object and adds any issues to the problems list.
            </summary>
            <param name="problems">The problems accumulated so far.</param>
            <param name="context">The context for repairing issues.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.IsValidChildOf(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether this annotation is valid child of the specified form field.
            </summary>
            <param name="elem">The parent field.</param>
            <returns>
              <c>true</c> if this is valid child of the specified form field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>
            The color of the border.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.HighlightAppearance">
            <summary>
            Gets or sets the highlight appearance.
            </summary>
            <value>
            The highlight appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.ParentField">
            <summary>
            Gets or sets the parent field.  When the document is saved, this will be set for you if you haven't set it yourself.
            </summary>
            <value>
            The parent field.
            </value>   
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.ChildFields">
            <summary>
            Gets the child fields for this annotation.  This will always be null in a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/>
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.FieldAlternateDescription">
            <summary>
            Gets or sets the field alternate description for display in the UI.
            </summary>
            <value>
            The field alternate description.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.FieldNameForExport">
            <summary>
            Gets or sets the field name for export.  When data from a form is aggregated, if FieldNameForExport is
            non-null, it will be used in place of <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.FieldName"/>.  This allows you to have field values mapped
            to a different name which may be more suitable for a data collection application.
            </summary>
            <value>
            The field name for export.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.IsFieldReadOnly">
            <summary>
            Gets or sets a value indicating whether this field is read only.
            </summary>
            <value>
            	<c>true</c> if this instance field is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.IsFieldRequired">
            <summary>
            Gets or sets a value indicating whether this field is required.
            </summary>
            <value>
            	<c>true</c> if this instance field is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.IsFieldNoExport">
            <summary>
            Gets or sets a value indicating whether this field should not be export.
            </summary>
            <value>
            	<c>true</c> if this field should not exported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.FieldFullName">
            <summary>
            Gets the fully qualified name of the field.  This value is only correct if
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.ParentField"/> has been set.  When the parent chain is properly
            set up, this will return ParentField.FieldFullName + '.' + FieldName
            </summary>
            <value>
            The full name of the field.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.DefaultTextAppearance">
            <summary>
            Gets or sets the default text appearance.
            </summary>
            <value>
            The default text appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.ValueAsString">
            <summary>
            Gets the value as string.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation.DefaultValueAsString">
            <summary>
            Gets the default value as string.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseButtonWidgetAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseButtonWidgetAnnotation"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseButtonWidgetAnnotation.Caption">
            <summary>
            Gets or sets the text displayed on the button.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect"/> object represents a way to modify the basic appearance of
            some PDF annotations, including <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation"/>, <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.EllipseAnnotation"/>, 
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation"/> and <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/>.  Support for all but <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/>
            began with PDF 1.5.  Support for <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/> began in PDF 1.6.
            BorderEffect consists of a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BorderEffectKind"/> and an intensity setting.  Intensity only
            currently applies to <see cref="F:Atalasoft.PdfDoc.Generating.Annotations.BorderEffectKind.Cloudy"/>.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect"/> class. <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect.EffectKind"/> will be set to
            <see cref="F:Atalasoft.PdfDoc.Generating.Annotations.BorderEffectKind.None"/> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect.Intensity"/> will be set to 0.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect.EffectKind">
            <summary>
            Gets or sets the kind of the effect.
            </summary>
            <value>
            The kind of the effect.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect.Intensity">
            <summary>
            Gets or sets the intensity of the effect.  This only currently affects <see cref="F:Atalasoft.PdfDoc.Generating.Annotations.BorderEffectKind.Cloudy"/>.
            </summary>
            <value>
            The intensity of the effect.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle"/> object represents a border than may surround an annotation including border width,
            style and dash pattern.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle"/> class with <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.StyleKind"/> set to
            <see cref="F:Atalasoft.PdfDoc.Generating.Annotations.BorderStyleKind.Solid"/> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.DashPattern"/> set to <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.DefaultDashPattern"/>.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the BorderStyle accumulating any problems.
            </summary>
            <param name="problems">The problems accumulated so far.</param>
            <param name="repairContext">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.Width">
            <summary>
            Gets or sets the width of the border - default is 0, value is specified to be non-negative.
            </summary>
            <value>
            The width of the border.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.StyleKind">
            <summary>
            Gets or sets the style of the border.
            </summary>
            <value>
            The style of the border.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.DashPattern">
            <summary>
            Gets or sets the dash pattern for the border.
            </summary>
            <value>
            The dash pattern.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.EmptyDashPattern">
            <summary>
            Gets an empty dash pattern which represents a solid line.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BorderStyle.DefaultDashPattern">
            <summary>
            Gets the default dash pattern for PDF border styles.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation"/> is a type of <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/> which represents
            a text annotation with a line pointing from the annotation to a particular point on the page.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/> represents and annotation with text constrained by a bounding rectangle.
            Unlike the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation"/>, the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/> does not have an
            open/closed state.  It is simply text in a box on the page.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/> is an abstract class that represents the common features of PDF annotations
            that are used for document mark-up.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties for the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/>.
            </summary>
            <param name="problems">A list of problems to add to.</param>
            <param name="context">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.AuthorName">
            <summary>
            Gets or sets the name of the author of the annotation.
            </summary>
            <value>
            The name of the author.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.Popup">
            <summary>
            Gets or sets the a popup annotation for this annotation.  A popup annotation can either be hidden or shown
            and allows extra information about an annotation to be shown.  When adding a popup annotation to another annotation,
            the popup will need to be added to the same <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.Annotations"/> collection.  When
            attached to a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>, the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation"/> will project the text content
            and author of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>.
            </summary>
            <value>
            The popup annotation.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.Transparency">
            <summary>
            Gets or sets the transparency of the annotation.  1.0 means fully transparent and 0.0 means fully opaque.  Default is 0.
            </summary>
            <value>
            The transparency.
            </value>
            <remarks>If an annotation has a custom appearance stream, this value will have no affect in a compliant viewer.</remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.CreationDate">
            <summary>
            Gets the creation date of the annotation.  When a new <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/> is constructed the
            CreationDate is automatically set to the current date and time.  When a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/> is
            read from a file, the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.CreationDate"/> will reflect the date in the file.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.RichTextContent">
            <summary>
            The <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Contents"/> property can also be represented as rich text.  Rich text is content that
            may include a subset of XHTML markup include body, p, i, b, and span tags.  When setting the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.RichTextContent"/>
            property, you should also set the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Contents"/> property to the plain text equivalent with no markup.
            </summary>
            <value>
            The content of the rich text.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.Intent">
            <summary>
            Gets or sets the intent of the annotation.  Set automatically where required.
            </summary>
            <value>
            The intent of the annotation.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.InReplyTo">
            <summary>
            Gets or sets the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation"/> that this annotation is in reply to.
            </summary>
            <value>
            The annotation to which this annotation is in reply to.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.InReplyToRelation">
            <summary>
            Gets or sets the relationship of this annotation to its <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.InReplyTo"/>.  Default is <see cref="F:Atalasoft.PdfDoc.Generating.Annotations.ReplyRelation.Reply"/>.
            </summary>
            <value>
            The relationship of this annotation to its <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.InReplyTo"/>.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/> class with the specified bounds.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/> class with the specified bounds and text.  Text
            is stored in the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Contents"/> property.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties for the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/>.
            </summary>
            <param name="problems">A list of problems to add to.</param>
            <param name="context">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.DefaultTextAppearance">
            <summary>
            Gets or sets the default text appearance for the annotation.  If set to null, this will internally default to
            Helvetica 10 point.
            </summary>
            <value>
            The default text appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.DefaultRichTextStyleString">
            <summary>
            Gets or sets the default style string.  The style string is a string that specifies the rich text style
            to use by default for the annotation, if using the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.RichTextContent"/> property.
            </summary>
            <example>
            <code>
            textBoxAnnot.DefaultRichTextStyleString = "font: 12pt Helvetica";
            </code>
            </example>
            <remarks>
            You should avoid using only the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.DefaultRichTextStyleString"/> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.RichTextContent"/>
            properties.  When using these properties, be sure to set the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Contents"/> property to a plain
            text equivalent.  This will allow maximum compatability with older PDF viewers.
            </remarks>
            <value>
            The default style string.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.Effect">
            <summary>
            Gets or sets the effect for the border of the annotation.
            </summary>
            <value>
            The effect to apply.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.InsetArea">
            <summary>
            Gets or sets the inset area of the annotation.  This is a way of setting margins for the annotation.
            The InsetArea must be fully contained within the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> property.
            </summary>
            <example>
            Setting a 4 unit margin on each side of the annotation.
            <code>
            textBoxAnnotation.InsetArea = textBoxAnnotation.Bounds.Expand(-4);
            </code>
            </example>
            <value>
            The inset area.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation"/> class using the bounds provided.
            In order for the annotation to be complete it needs to be set to point at a particular location.
            This can be done by setting the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.Line"/> property.  To make it easier to build the callout <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.Line"/>
            property, you can use the utility method <see cref="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.PointAt(Atalasoft.PdfDoc.Geometry.PdfPoint)"/>.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation"/> class using the bounds and text provided.
            In order for the annotation to be complete it needs to be set to point at a particular location.
            This can be done by setting the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.Line"/> property.  To make it easier to build the callout <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.Line"/>
            property, you can use the utility method <see cref="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.PointAt(Atalasoft.PdfDoc.Geometry.PdfPoint)"/>.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation"/> class with the text provided, pointing at
            the supplied point with the specified line ending kind.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="text">The text.</param>
            <param name="pointAt">The point to point at.</param>
            <param name="ending">The ending style of the line.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation"/> class with the text provided, pointing at
            the supplied point with an open arrow head.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="text">The text.</param>
            <param name="pointAt">The point at.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties of the class.
            </summary>
            <param name="problems">The problems.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.PointAt(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Builds a CalloutLine for this annotation which points at the given target.  The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutLine"/> object
            will be a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TwoPointCalloutLine"/> if the target is either inside the annoutation's <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/>
            or if it lines up with the midpoint of the nearest edge of the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/>, otherwise it will be a
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ThreePointCalloutLine"/>.
            </summary>
            <param name="target">The target to point to.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutLine"/></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.Line">
            <summary>
            Gets or sets the line for the CalloutAnnotation.  There is no guidance in the PDF specification as how the line
            in the callout should be defined, including making lines that don't originate from the annotation.  Be aware that
            while unusual representations may be rendered correctly, if they are moved a viewer is likely to change the
            location of at least the starting point.
            </summary>
            <value>
            The line that represents where the callout line starts from and points to.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation.LineEnding">
            <summary>
            Gets or sets the line ending for the callout.
            </summary>
            <value>
            The line ending.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/> is a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/> that represents an intended insertion point in
            a document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/> class at the specified bounds.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties for the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/>.
            </summary>
            <param name="problems">A list of problems to add to.</param>
            <param name="context">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation.InsetArea">
            <summary>
            Gets or sets the inset area for the annotation.  This <see cref="T:Atalasoft.PdfDoc.Geometry.PdfBounds"/> should be either empty or
            completely contained within the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> of this annotation.
            </summary>
            <value>
            The inset area.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation.Symbol">
            <summary>
            Gets or sets the symbol to use for the caret.
            </summary>
            <value>
            The symbol to use.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation"/> is a button type widget that allows the user to select
            between one of two possible values.  By convention, these values are "Yes" and "Off".  Unlike most annotations,
            CheckBoxWidgetAnnotations needs to have a suite of <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> resources associated with it.
            At a minimum, there needs to be a "Yes" and "Off" entries in the Normal appearance set.
            <example>
            This is how to set up a set of default appearances for a checkbox:
            <code>
            checkbox.Appearance.Normal.Add(CheckboxWidgetAnnotation.CheckedValue, "normalChecked");
            checkbox.Appearance.Normal.Add(CheckboxWidgetAnnotation.ClearedValue, "normalCleared");
            </code>
            "normalChecked" and "normalCleared" are strings that should be the name of <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource"/> objects in your document's
            resource collection.
            </example>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation"/> class and will initialize the default
            appearances for Normal and Activated for the annotation using "standard" appearances.  If the standard appearances
            have not been installed in the provided resource collection, they will be installed for you.
            </summary>
            <param name="gr">The resource collection which will hold the standard appearances.</param>
            <param name="bounds">The bounds of the check.</param>
            <param name="name">The name of the field.</param>
            <param name="nameForUI">The name of the field shown in a view user interface.</param>
            <param name="nameForExport">The name of the field used for data export.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation"/> class.
            </summary>
            <param name="gr">The resource collection which will hold the standard appearances.</param>
            <param name="bounds">The bounds of the check.</param>
            <param name="name">The name of the field.</param>
            <param name="nameForUI">The name of the field shown in a view user interface.</param>
            <param name="nameForExport">The name of the field used for data export.</param>
            <param name="useStandardAppearances">if set to <c>true</c> this check box with use standard appearances, installing them if needed.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties of this object and adds any issues to the problems list.
            </summary>
            <param name="problems">The problems accumulated so far.</param>
            <param name="context">The context for repairing issues.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.IsValidChildOf(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether this annotation is valid child of the specified form field.  Returns true is elem is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.GenericFormField"/> or a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField"/>
            </summary>
            <param name="elem">The parent field.</param>
            <returns>
              <c>true</c> if this is valid child of the specified form field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.Value">
            <summary>
            Gets or sets the current value of the checkbox.  Use <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.CheckedValue"/> or <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.ClearedValue"/> to be compatible with
            convention.
            </summary>
            <value>
            The value of the checkbox.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.DefaultValue">
            <summary>
            Gets or sets the default value of the checkbox.  Use <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.CheckedValue"/> or <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.ClearedValue"/> to be compatible with
            convention.
            </summary>
            <value>
            The default value of the checkbox.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.ValueAsString">
            <summary>
            Gets the value as string.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.DefaultValueAsString">
            <summary>
            Gets the default value as string.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.CheckedValue">
            <summary>
            Gets the standard checked value string.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation.ClearedValue">
            <summary>
            Gets the standard cleared value string.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.ChoicePair">
            <summary>
            In a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/>, it is possible to have either a list of choices which will be used both
            for display and for exporting data, or a list of pairs where one element is used for display and the other element
            is used for exporting data.  For example, you might create a survey where a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/>
            displays "Best - Would Purchase Again", "Good - Satisfactory", "Poor - Would Not Purchase Again".  These are wordy
            and might not be suitable for a data consumer, so you could instead associate export names with each choice: "Best",
            "Good", "Poor".  You could also create surveys for other languages by putting the target language in the display name
            and a language neutral name in the export name.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoicePair.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoicePair"/> class.
            </summary>
            <param name="displayName">The display name.</param>
            <param name="exportName">Name used for export.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoicePair.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoicePair"/> class.  <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.ChoicePair.ExportName"/> will be null.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoicePair.DisplayName">
            <summary>
            Gets or sets the display name - must be non-null.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoicePair.ExportName">
            <summary>
            Gets or sets the name for export. Setting to <c>null</c> means that <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.ChoicePair.DisplayName"/> will be used
            for export.
            </summary>
            <value>
            The name used for export.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/> is a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/> used for
            defining a selection from a list of options.  The selection can be none, 1 item or many items.
            The annotation can be either a list box or a pop-up menu of options.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/> class with the
            kind set to <c>ListBox</c>.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/> class with the kind
            of annotation specified.
            </summary>
            <param name="kind">The kind of annotation.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetKind,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/> class.
            </summary>
            <param name="kind">The kind of annotation.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetKind,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/> class.  The choices
            provided will all be used as display names in the choice pairs.
            </summary>
            <param name="kind">The kind of annotation.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="bounds">The bounds of the annotation.</param>
            <param name="choices">The choices in the list.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetKind,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/> class.  The choices
            provided will all be used as display names in the choice pairs.
            </summary>
            <param name="kind">The kind of annotation.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="bounds">The bounds of the annotation.</param>
            <param name="choices">The choices in the list.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetKind,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds,System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Annotations.ChoicePair})">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/> class.  The choices
            provided will be used as display and export names.
            </summary>
            <param name="kind">The kind of annotation.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="bounds">The bounds of the annotation.</param>
            <param name="choices">The choices in the list.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties of this object and adds any issues to the problems list.
            </summary>
            <param name="problems">The problems accumulated so far.</param>
            <param name="context">The context for repairing issues.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.IsValidChildOf(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether this annotation is valid child of the specified form field.  Returns true is elem is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.GenericFormField"/> or a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.ChoiceFormField"/>
            </summary>
            <param name="elem">The parent field.</param>
            <returns>
              <c>true</c> if this is valid child of the specified form field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.FirstVisibleChoice">
            <summary>
            Gets or sets the index of first visible choice.
            </summary>
            <value>
            The first visible choice in the list.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.CurrentSelection">
            <summary>
            Gets the indexes of the current selection.  This collection is independent of <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.AllowMultiSelect"/>
            in that it is the client's responsibility to ensure that if <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.AllowMultiSelect"/> is <c>false</c>,
            then <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.CurrentSelection"/> has at most 1 entry.  It is undefined what a PDF viewer should do if
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.AllowMultiSelect"/> is <c>false</c> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.CurrentSelection"/> has multiple elements.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.AllowMultiSelect">
            <summary>
            Gets or sets a value indicating whether the widget will allow multiple selections.
            </summary>
            <value>
              <c>true</c> if multiple selections are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.Choices">
            <summary>
            Gets the choices that will be displayed.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.ValueAsString">
            <summary>
            Gets the value of the widget as a string.  This value will be a comma-separated list built from the
            export names from each of the currently selected choices.  If the export name for any choice is <c>null</c>,
            the display name will be used instead.  If the name contains a comma, it will be replaced with two commas.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.DefaultValueAsString">
            <summary>
            Gets the default value as string.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.WidgetKind">
            <summary>
            Gets or sets the kind of the widget.
            </summary>
            <value>
            The kind of the widget.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation.AutoGenerateBasicAppearance">
            <summary>
            Gets or sets a value indicating whether to auto generate a basic appearance for this widget.  Default is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if [auto generate basic appearance]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates">
            <summary>
            This is a class that is used for defining and installing <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource"/> objects in a resource
            dictionary that represent the appearances for widget annotations.  At present this class is responsible for
            making appearances for checkbox and radio button widgets, as these appearances can be shared across an entire
            document.  Before working with a new document, you can set the basic color schemes used for the appearances.
            In addition, you can force installation of your own default appearances and they will be treated as standard.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.InstallDefaultAppearances(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,System.Boolean)">
            <summary>
            Installs the default appearances in the resource collection, optionally overriding any that exist.
            </summary>
            <param name="gr">The resource collection.</param>
            <param name="overrideExisting">if set to <c>true</c> override existing appearances.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.InstallAppearances(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,System.Boolean,System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Annotations.StringDrawingTemplatePair})">
            <summary>
            Installs the appearances in the resource collection.
            </summary>
            <param name="gr">The resource collection.</param>
            <param name="overrideExisting">if set to <c>true</c> override existing appearances.</param>
            <param name="pairs">The sets of names and appearances to use.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.GetCheckAppearances(Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Gets the standard checkbox appearances.
            </summary>
            <param name="normalColor">Color of the normal appearance.</param>
            <param name="activatedColor">Color of the activated appearance.</param>
            <param name="activateHiliteColor">Color of the activate hilite appearance.</param>
            <param name="rolloverColor">Color of the rollover appearance.</param>
            <returns>A set of appearances for standard checkbox widgets</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.GetRadioAppearances(Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Gets the standard radio appearances.
            </summary>
            <param name="normalColor">Color of the normal appearance.</param>
            <param name="activatedColor">Color of the activated appearance.</param>
            <param name="activateHiliteColor">Color of the activate hilite appearance.</param>
            <param name="rolloverColor">Color of the rollover appearance.</param>
            <returns>A set of standard radio button widget appearances.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.NormalColor">
            <summary>
            Gets or sets the main color of the normal appearance.
            </summary>
            <value>
            The color of the normal appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.ActivatedColor">
            <summary>
            Gets or sets the main color of the activated appearance.
            </summary>
            <value>
            The color of the activated appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.ActivatedHilightColor">
            <summary>
            Gets or sets the highlight color of the activated appearance.
            </summary>
            <value>
            The color of the activated appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.RolloverColor">
            <summary>
            Gets or sets the main color of the rollover appearance.
            </summary>
            <value>
            The color of the rollover appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.CheckboxCheckedNormalName">
            <summary>
            Gets the name of the checkbox checked normal resource.
            </summary>
            <value>
            The name of the checkbox checked normal resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.CheckboxClearedNormalName">
            <summary>
            Gets the name of the checkbox cleared normal resource.
            </summary>
            <value>
            The name of the checkbox cleared normal resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.CheckboxCheckedActivatedName">
            <summary>
            Gets the name of the checkbox checked activated resource.
            </summary>
            <value>
            The name of the checkbox checked activated resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.CheckboxClearedActivatedName">
            <summary>
            Gets the name of the checkbox cleared activated resource.
            </summary>
            <value>
            The name of the checkbox cleared activated resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.CheckboxCheckedRolloverName">
            <summary>
            Gets the name of the checkbox checked rollover resource.
            </summary>
            <value>
            The name of the checkbox checked rollover resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.CheckboxClearedRolloverName">
            <summary>
            Gets the name of the checkbox cleared rollover resource.
            </summary>
            <value>
            The name of the checkbox cleared rollover resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.RadioButtonCheckedNormalName">
            <summary>
            Gets the name of the radio button checked normal resource.
            </summary>
            <value>
            The name of the radio button checked normal resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.RadioButtonClearedNormalName">
            <summary>
            Gets the name of the radio button cleared normal resource.
            </summary>
            <value>
            The name of the radio button cleared normal resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.RadioButtonCheckedActivatedName">
            <summary>
            Gets the name of the radio button checked activated resource.
            </summary>
            <value>
            The name of the radio button checked activated resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.RadioButtonClearedActivatedName">
            <summary>
            Gets the name of the radio button cleared activated resource.
            </summary>
            <value>
            The name of the radio button cleared activated resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.RadioButtonCheckedRolloverName">
            <summary>
            Gets the name of the radio button checked rollover resource.
            </summary>
            <value>
            The name of the radio button checked rollover resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.DefaultWidgetTemplates.RadioButtonClearedRolloverName">
            <summary>
            Gets the name of the radio button cleared rollover resource.
            </summary>
            <value>
            The name of the radio button cleared rollover resource.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.EllipseAnnotation">
            <summary>
            Represents an ellipse (or circle) annotation.  This annotation is identical in every
            way to the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation"/> except for the appearance.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation"/> represents a rectangle drawn on the page.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation"/> class.
            </summary>
            <param name="bounds">The bounds of the rectangle.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties for the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/>.
            </summary>
            <param name="problems">A list of problems to add to.</param>
            <param name="context">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation.InternalColor">
            <summary>
            Gets or sets the fill color.
            </summary>
            <value>
            The fill color.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RectangleAnnotation.Effect">
            <summary>
            Gets or sets the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect"/>.
            </summary>
            <value>
            The effect.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.EllipseAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.EllipseAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.EllipseAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.EllipseAnnotation"/> class with the specified bounds.
            </summary>
            <param name="bounds">The bounds of the annotation.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent">
            <summary>
            In PDF, annotations can optionally specify their intended meaning and use.  For some
            annotations, such as <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation"/>, <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation"/>, and <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation"/>,
            there is not always a reliable way to disambiguate one annotation from another in the PDF file without
            having an <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent"/> set in the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.Intent"/> property of an annotation.
            When an <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent"/> is mandatory, DotPdf classes will enforce them and ensure they are correct.
            When it is optional, it is typically left out.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.None">
            <summary>
            No Intent
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.FreeTextCallout">
            <summary>
            A Free Text annotation acting as a call-out
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.FreeTextTypeWriter">
            <summary>
            A Free Text annotation that lets a user type directly on the page.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.LineArrow">
            <summary>
            A pointing line
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.LineDimension">
            <summary>
            A line for measurement
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.PolygonCloud">
            <summary>
            A cloud-appearance polygon
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Link">
            <summary>
            A hyperlink
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.FreeText">
            <summary>
            Plain text on the page
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Line">
            <summary>
            A simple line
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Square">
            <summary>
            A square
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Circle">
            <summary>
            A circle
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Polygon">
            <summary>
            A polygon
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.PolyLine">
            <summary>
            An unfilled, typically open polygon
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Highlight">
            <summary>
            A text highlight
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Underline">
            <summary>
            Text underline
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Squiggly">
            <summary>
            Text squiggly line
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.StrikeOut">
            <summary>
            Text strike-out
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Stamp">
            <summary>
            A rubber stamp
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Caret">
            <summary>
            A text insertion point
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Ink">
            <summary>
            Free hand marks
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Popup">
            <summary>
            Pop-up extra information
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.FileAttachment">
            <summary>
            An attached file
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Sound">
            <summary>
            A sound
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Movie">
            <summary>
            A movie
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Widget">
            <summary>
            A form field
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Screen">
            <summary>
            A display area for movies
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.PrinterMark">
            <summary>
            Marks for print production
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.TrapNet">
            <summary>
            Indications for print trapping
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.Watermark">
            <summary>
            A page watermark
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.PolyLineDimension">
            <summary>
            A connected set of segments for measurement
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationIntent.PolygonDimension">
            <summary>
            A filled polygon for measurement
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.BorderStyleKind">
            <summary>
            BorderStyleKind is used to specify how the borders of simple annotations should appear on the
            page.  None is default.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.BorderStyleKind.None">
            <summary>
            No additional effect
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.BorderStyleKind.Solid">
            <summary>
            A solid line - default
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.BorderStyleKind.Dashed">
            <summary>
            A dashed line determined by an associated dash array
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.BorderStyleKind.Beveled">
            <summary>
            A simulated embossed border
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.BorderStyleKind.Inset">
            <summary>
            A simulated engraved border
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.BorderStyleKind.Underline">
            <summary>
            A single underline
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.BorderEffectKind">
            <summary>
            Some annotations can be shown with a "cloudy" effect on the border.  This enumeration is used for specifying it.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.BorderEffectKind.None">
            <summary>
            No effect
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.BorderEffectKind.Cloudy">
            <summary>
            Cloudy effect
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind">
            <summary>
            Annotations with lines may have decorative ends.  This enumeration specifies those ends.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.None">
            <summary>
            No end
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.Square">
            <summary>
            Square blocks on the ends
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.Circle">
            <summary>
            Circular dots on the ends
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.Diamond">
            <summary>
            Diamond blocks on the ends
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.OpenArrow">
            <summary>
            An arrow with open flanges on the end
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.ClosedArrow">
            <summary>
            An arrow with closed flanges on the end
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.Butt">
            <summary>
            Short perpendicular lines
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.ReverseOpenArrow">
            <summary>
            A backwards open arrow head
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.ReverseClosedArrow">
            <summary>
            A backwards closed arrow head
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineEndingKind.Slash">
            <summary>
            Angled end lines
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.LineUsageKind">
            <summary>
            Specifies how a line is to be used
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineUsageKind.Line">
            <summary>
            Simple line
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineUsageKind.Arrow">
            <summary>
            Pointing arrow
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LineUsageKind.Dimension">
            <summary>
            Measurment line
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.CaptionPositionKind">
            <summary>
            Determines where to locate a caption on a line
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.CaptionPositionKind.Inline">
            <summary>
            In the middle of the line itself
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.CaptionPositionKind.Top">
            <summary>
            On top of the line
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupKind">
            <summary>
            Determines the type of text markup in a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation"/>
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupKind.Highlight">
            <summary>
            A page highlight annotation
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupKind.Underline">
            <summary>
            An underline annotation
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupKind.Squiggly">
            <summary>
            A squiggle line
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupKind.StrikeOut">
            <summary>
            Text strike out
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.CaretSymbol">
            <summary>
            The symbol to use for a insertion annotation
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.CaretSymbol.None">
            <summary>
            The default symbol
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.CaretSymbol.Paragraph">
            <summary>
            A new paragraph symbol (ie, ¶)
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.LinkHighlightAppearance">
            <summary>
            Determines how a link annotation should respond when clicked
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LinkHighlightAppearance.None">
            <summary>
            No change
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LinkHighlightAppearance.Invert">
            <summary>
            Invert the area of the annotation
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LinkHighlightAppearance.Outline">
            <summary>
            Draw an outline around the area of the annotation
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.LinkHighlightAppearance.PushDown">
            <summary>
            Shade the annotation to look like it is recessed in the page
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.WidgetHighlightAppearance">
            <summary>
            Determines how a clickable widget will appear when it is clicked.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.WidgetHighlightAppearance.None">
            <summary>
            No specified appearance.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.WidgetHighlightAppearance.Invert">
            <summary>
            The bounds will be inverted.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.WidgetHighlightAppearance.Outline">
            <summary>
            An outline will be drawn around the bounds.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.WidgetHighlightAppearance.PushDown">
            <summary>
            The annotation will be drawn as if it is sunk into the page.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.WidgetHighlightAppearance.Toggle">
            <summary>
            Same as <see cref="F:Atalasoft.PdfDoc.Generating.Annotations.WidgetHighlightAppearance.PushDown"/>. <see cref="F:Atalasoft.PdfDoc.Generating.Annotations.WidgetHighlightAppearance.PushDown"/> is preferred.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetKind">
            <summary>
            Determines how a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetAnnotation"/> will appear in the user interface.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetKind.ListBox">
            <summary>
            The choices will be represented as a list of lines.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetKind.PopupSelection">
            <summary>
            The choices will be displayed as a pop-up menu.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.ChoiceWidgetKind.PopupSelectionWithText">
            <summary>
            The choices will be displayed as a pop-up menu with a text field for typing a name of an element.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.AnnotationTextAlignment">
            <summary>
            Determines alignment of text drawn in certain types of annotations.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationTextAlignment.Left">
            <summary>
            Text will be aligned along the left edge.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationTextAlignment.Center">
            <summary>
            Text will be center-aligned.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.AnnotationTextAlignment.Right">
            <summary>
            Text will be aligned along the right edge.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind">
            <summary>
            Determines how a rubber stamp will appear from the set of standard PDF types.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.Draft">
            <summary>
            The text "Draft".
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.Approved">
            <summary>
            The text "Approved.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.Experimental">
            <summary>
            The text "Experimental"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.NotApproved">
            <summary>
            The text "Not Approved"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.AsIs">
            <summary>
            The text "As Is"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.Expired">
            <summary>
            The text "Expired"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.NotForPublicRelease">
            <summary>
            The text "Not For Public Release"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.Confidential">
            <summary>
            The text "Confidential"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.Final">
            <summary>
            The text "Final"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.Sold">
            <summary>
            The text "Sold"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.Departmental">
            <summary>
            The text "Departmental"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.ForComment">
            <summary>
            The text "For Comment"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.TopSecret">
            <summary>
            The text "Top Secret"
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind.ForPublicRelease">
            <summary>
            The text "For Public Release"
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.ReplyRelation">
            <summary>
            Represents the type of reply a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/> represents.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.ReplyRelation.Reply">
            <summary>
            A direct reply
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Annotations.ReplyRelation.Group">
            <summary>
            A group element
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.InkAnnotation">
            <summary>
            An <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.InkAnnotation"/> represents a series of free-hand marks.  They are modeled by
            a set of polylines grouped as one.  These could be used for a signature or document
            mark up.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.InkAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.InkAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.InkAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties for the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/>.
            </summary>
            <param name="problems">A list of problems to add to.</param>
            <param name="context">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.InkAnnotation.AutoCalculateBounds">
            <summary>
            Gets or sets a value indicating whether to automatically calculate the annotation's <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/>.
            </summary>
            <value>
              <c>true</c> if the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> will be automatically calculated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.InkAnnotation.InkList">
            <summary>
            Gets the ink list.  This is a collection of <see cref="T:Atalasoft.PdfDoc.Geometry.PdfPointCollection"/>.  Each element
            represents a polyline that will be drawn.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation"/> represents a single line on the page
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation"/> class with the two end points.
            </summary>
            <param name="start">The start point.</param>
            <param name="end">The end point.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties for the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/>.
            </summary>
            <param name="problems">A list of problems to add to.</param>
            <param name="context">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.Usage">
            <summary>
            Gets or sets the intended <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LineUsageKind"/> of the line
            </summary>
            <value>
            The line usage.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.StartPt">
            <summary>
            Gets or sets the start point.  <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> are updated automatically after setting.
            </summary>
            <value>
            The start point.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.EndPt">
            <summary>
            Gets or sets the end point.  <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> are updated automatically after setting.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LineEnding">
            <summary>
            Gets the line endings for this line.  The 0th entry is the ending for the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.StartPt"/> and the
            1st entry is for the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.EndPt"/>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength">
            <summary>
            Gets or sets the length of the leader line.
            </summary>
            <value>
            The length of the leader line.
            </value>
            <remarks>
            If you want to customize the appearance of a line annotation beyond simple line ends, you can set three parameters:
            the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/>, the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength"/>, and the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset"/>.
            Lines are offset from the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.StartPt"/> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.EndPt"/> by a distance that is the sum of the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/>
            and the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset"/>.  <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/> represent the length of the line butt ends that are
            closest to the starting and ending points (offset by <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset"/>). <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength"/>
            is the length of the butt ends that project past the actual drawn line.  If you specify a <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength"/>,
            you must also have a non-zero <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/>.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength">
            <summary>
            Gets or sets the length of the leader line extension.
            </summary>
            <value>
            The length of the leader line extension.
            </value>
            <remarks>
            If you want to customize the appearance of a line annotation beyond simple line ends, you can set three parameters:
            the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/>, the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength"/>, and the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset"/>.
            Lines are offset from the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.StartPt"/> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.EndPt"/> by a distance that is the sum of the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/>
            and the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset"/>.  <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/> represent the length of the line butt ends that are
            closest to the starting and ending points (offset by <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset"/>). <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength"/>
            is the length of the butt ends that project past the actual drawn line.  If you specify a <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength"/>,
            you must also have a non-zero <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/>.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset">
            <summary>
            Gets or sets the leader line offset.
            </summary>
            <value>
            The leader line offset.
            </value>
            <remarks>
            If you want to customize the appearance of a line annotation beyond simple line ends, you can set three parameters:
            the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/>, the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength"/>, and the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset"/>.
            Lines are offset from the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.StartPt"/> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.EndPt"/> by a distance that is the sum of the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/>
            and the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset"/>.  <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/> represent the length of the line butt ends that are
            closest to the starting and ending points (offset by <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineOffset"/>). <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength"/>
            is the length of the butt ends that project past the actual drawn line.  If you specify a <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineExtensionLength"/>,
            you must also have a non-zero <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.LeaderLineLength"/>.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.IsCaptioned">
            <summary>
            Gets or sets a value indicating whether this instance is captioned.  If a line is captioned, the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Contents"/>
            will be used as a caption.
            </summary>
            <value>
            	<c>true</c> if this instance is captioned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.CaptionOffset">
            <summary>
            Gets or sets the caption offset from its normal position.
            </summary>
            <value>
            The caption offset.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LineAnnotation.CaptionPositioning">
            <summary>
            Gets or sets the caption positioning.  Captions can be positioned inline or above the line.
            </summary>
            <value>
            The caption positioning.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation"/> represents a hyperlink in a PDF document.  A PDF hyperlink is
            a generalized to mean "an area that when clicked causes a chain of actions to take place."  For example,
            a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation"/> could cause a sound to be played and then the document to be zoomed to
            a particular view on a page.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation"/> class with the given bounds.  No action is specified.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.PdfAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation"/> class with the given bounds and to
            take the particular action.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation"/> class with the given bounds and creates it as a "web link"
            to the given Uri used in a <see cref="T:Atalasoft.PdfDoc.PdfURIAction"/> for the link.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="uriDestination">The URI destination.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation"/> class with the given bounds and creates it as a
            "goto page" link using the index to reference a particular page.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="pageIndex">Index of the page.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation"/> class with empty bounds and no action.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation.Regions">
            <summary>
            In addition to a simple rectangle, a link annotation may also be represented by a set of
            quadrilateral areas.  If this collection is non-empty, the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> will be
            set to contain all the quadrilaterals.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.LinkAnnotation.HighlightAppearance">
            <summary>
            Gets or sets the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.LinkHighlightAppearance"/> of the annotation when it is clicked.
            </summary>
            <value>
            The highlight appearance.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.OpaqueAnnotation">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.OpaqueAnnotation"/> is an annotation that does not currently have a
            DotPdf high-level representation.  You cannot create an <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.OpaqueAnnotation"/>
            directly.  It will be created when reading a PDF file with an unsupported annotation.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.PdfAnnotationList">
            <summary>
            PdfAnnotationList is a collection of annotations for a PDF page,
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PdfAnnotationList.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Notifies the list that the resource was renamed.
            </summary>
            <param name="gr">The resource collection conatining the resource.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original resource.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PdfAnnotationList.ResourcesUsed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Reports a list of all resources consumed by the object of the given class.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation"/> represents a filled polygon on the page.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Geometry.PdfPoint[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation"/> class with the specified colors and points.
            </summary>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The line width.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Geometry.PdfPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation"/> class with the specified colors and points.
            </summary>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The line width.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties for the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/>.
            </summary>
            <param name="problems">A list of problems to add to.</param>
            <param name="context">The repair context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.IsVerticesCorrect">
            <summary>
            Determines whether the vertices are correct for a polygon - returns true if the polygon has at least three vertices.
            </summary>
            <returns>
              <c>true</c> if the vertices are correct; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.Vertices">
            <summary>
            Gets the vertices of the polygon.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.InternalColor">
            <summary>
            Gets or sets the fill color of the polygon.  If the fill color is <c>null</c>, there will be no fill.
            </summary>
            <value>
            The color of the internal.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.IsInternalColorTransparent">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.InternalColor"/> is transparent.
            </summary>
            <value>
            	<c>true</c> if this the internal color is transparent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.Effect">
            <summary>
            Gets or sets the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BorderEffect"/> for the polygon.
            </summary>
            <value>
            The effect.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PolygonAnnotation.LineEnding">
            <summary>
            Gets the line ending for the polygon.  These are only displayed if the polygon is open.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.PolylineAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PolylineAnnotation"/> represents an unfilled polygon.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PolylineAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PolylineAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PolylineAnnotation.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Geometry.PdfPoint[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PolylineAnnotation"/> class with the specified colors and points.
            </summary>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The line width.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PolylineAnnotation.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Geometry.PdfPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PolylineAnnotation"/> class with the specified colors and points.
            </summary>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The line width.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PolylineAnnotation.IsVerticesCorrect">
            <summary>
            Determines whether the vertices are correct for a polygon - returns true if the polyline has at least two vertices.
            </summary>
            <returns>
              <c>true</c> if the vertices are correct; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation"/> represents an annotation that can be shown or hidden and offers more information
            about another annotation.  Popup annotations never appear singly.  They are always associated with an existing
            annotation via its <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.Popup"/> property and also by setting the
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.ParentAnnotation"/> property to the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>.  When the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.ParentAnnotation"/>
            is a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>, the PopupAnnotation will project properties of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation"/> class and automatically associates it with the
            supplied <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="parentAnnotation">The parent annotation.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.IsOpen">
            <summary>
            Gets or sets a value indicating whether popup is open.
            </summary>
            <value>
              <c>true</c> if the popup is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.ParentAnnotation">
            <summary>
            Gets or sets the parent annotation to this popup.  This property must be set.
            </summary>
            <value>
            The parent annotation.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.Contents">
            <summary>
            Gets or sets the text contents of the annotation.  If the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.ParentAnnotation"/> is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>, Contents will reflect that annotation's Contents.
            </summary>
            <value>
            The contents text.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.AuthorName">
            <summary>
            Gets or sets the name of the author.  If the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.ParentAnnotation"/> is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>, the AuthorName property will reflect the parent
            annotation's AuthorName.
            </summary>
            <value>
            The name of the author.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.ModificationDate">
            <summary>
            Gets or sets the modification date for this annotation.  DotPdf does not update this property.
            It is the client's responsibility to change it.  If the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.ParentAnnotation"/> is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>, the ModificationDate will project the parent annotation's
            ModificationDate.
            </summary>
            <value>
            The modification date.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.Color">
            <summary>
            Gets or sets the color of the annotation.  The meaning of this color varies based on the annotation type.
            It may represent the background color of the annotation's icon (if any) when closed, the title bad of the
            annotation's pop-up window, the border color of the annotation.  If the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation.ParentAnnotation"/> is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/>, Color will project the parent annotation's color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation"/> represents a clickable button on a page.
            A pushbutton annotation doesn't have any actions associated by default and need to be
            set in the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.ClickActions"/> property.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation"/> class.
            </summary>
            <param name="bounds">The bounds of the annotation.</param>
            <param name="name">The name of the field.</param>
            <param name="nameForUI">The name for UI.</param>
            <param name="nameForExport">The name for export.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation"/> class with the given
            bounds and name.
            </summary>
            <param name="bounds">The bounds of the annotation.</param>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation"/> class with the given
            bounds, name, and export name.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="name">The name.</param>
            <param name="nameForUI">The name for UI.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties of this object and adds any issues to the problems list.
            </summary>
            <param name="problems">The problems accumulated so far.</param>
            <param name="context">The context for repairing issues.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.MakeBasicAppearance(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.String)">
            <summary>
            Makes the a basic button appearance, installs it in the resources and returns its name.  This makes a simple
            round-cornered rectangle with the text centered in it.
            </summary>
            <param name="gr">The resource collection.</param>
            <param name="bounds">The bounds of the button..</param>
            <param name="app">The appearance of the text in the button.</param>
            <param name="borderWidth">Width of the border.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="value">The text label for the button.</param>
            <returns>The name of a basic button appearance that has been installed in the resources.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.IsValidChildOf(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether this annotation is valid child of the specified form field.  Returns true is elem is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.GenericFormField"/> or a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.PushButtonFormField"/>
            </summary>
            <param name="elem">The parent field.</param>
            <returns>
              <c>true</c> if this is valid child of the specified form field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.AutoGenerateBasicAppearance">
            <summary>
            Gets or sets a value indicating whether auto generate a basic appearance.  Default is true.
            </summary>
            <value>
            	<c>true</c> if the annotation will auto generate a basic appearance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.ValueAsString">
            <summary>
            Gets the value as string.  Always returns null - pushbuttons don't have a value.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.PushButtonWidgetAnnotation.DefaultValueAsString">
            <summary>
            Gets the default value as string.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation"/> represents a possible selection in a set of
            choices.  Typically, the act of selecting a radio button annotation will have the side
            effect of de-selecting one or more others.  As a result, a single <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation"/>
            is not particularly useful on its own.  Grouping is managed by making each button in the
            group be a child of a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField"/>.  This is done by creating a
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation"/> for each button, giving each a unique "on value",
            setting each in the <see cref="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.ChildFields"/> collection of the parent field and putting
            the annotations into a page.
            
            It is far easier to use <see cref="M:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField.MakeRadioSet(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.PdfGeneratedPage,System.String,System.String,System.String,System.String[],Atalasoft.PdfDoc.Geometry.PdfBounds[])"/> which will
            construct the parent field and all the radio buttons and wire them up correctly.
            
            If you use the standard appearances, the radio button's appearance will not have any text associated with it.
            It will instead just be the button itself.  It is the responsibility of the client code to provide labels.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation"/> class.
            </summary>
            <param name="gr">The resource collection to hold the appearance.</param>
            <param name="bounds">The bounds of the button.</param>
            <param name="name">The field name.</param>
            <param name="nameForUI">The name for UI.</param>
            <param name="nameForExport">The name for export.</param>
            <param name="onValue">The on value which is used to identify the appearance of a selected item.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation"/> class.
            </summary>
            <param name="gr">The resource collection to hold the appearance.</param>
            <param name="bounds">The bounds of the button.</param>
            <param name="name">The field name.</param>
            <param name="nameForUI">The name for UI.</param>
            <param name="nameForExport">The name for export.</param>
            <param name="onValue">The on value which is used to identify the appearance of a selected item.</param>
            <param name="useStandardAppearances">if set to <c>true</c> use standard radio button appearances.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties of this object and adds any issues to the problems list.
            </summary>
            <param name="problems">The problems accumulated so far.</param>
            <param name="context">The context for repairing issues.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.IsValidChildOf(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether this annotation is valid child of the specified form field.  Returns true is elem is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.GenericFormField"/> or a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField"/>
            </summary>
            <param name="elem">The parent field.</param>
            <returns>
              <c>true</c> if this is valid child of the specified form field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.Value">
            <summary>
            Gets or sets the current value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.ValueAsString">
            <summary>
            Gets the value as string.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.DefaultValueAsString">
            <summary>
            Gets the default value as string.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation.ClearedValue">
            <summary>
            Gets the standard cleared value.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation"/> is a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation"/> that is used to
            mark areas within a document that are proposed for redaction.  The creation of this annotation on a page does not
            remove any content below it.  That is left strictly to the PDF viewer and may or may not be supported.  This particular
            annotation was only supported beginning with PDF version 1.7 and should be used with care.  When a compliant viewer
            performs redaction based on one or more <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation"/> objects, it is instructed to remove all
            content under the area or areas specified and will remove the annotation but insert new content in its place.  This content
            depends on the specification of the annotation.  If the annotation does not specify any quadrilaterals in the
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.Regions"/> property, the area will be a rectangle specified by <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> that is filled with the
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.RedactionInteriorColor"/> or black if none has been specified.  If there are <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.Regions"/> specified,
            they will be used instead of <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/>.  If <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.OverlayText"/> is specified, this text will be overlayed
            on top of the redacted area.  If <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.IsOverlayTextRepeated"/> is <c>true</c>, then the text will be laid down in a
            repeating pattern.  If <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.RedactionTemplate"/> is set, this template will be used for the redaction instead of all
            of the previous elements.
            </summary>
            <example>
            This example shows how to detect if a document contains any <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation"/> objects.  This might
            be useful in flagging a document to prevent it from being sent out if the redactions have not been applied.
            <code>
            public static bool PageHasRedactions(PdfGeneratedPage page)
            {
                if (page == null) throw new Exception("page was null or not a PdfGeneratedPage.");
                foreach (BaseAnnotation annot in page.Annotations) {
                    if (annot is RedactionProposalAnnotation) return true;
                }
                return false;
            }
            
            public static bool DocumentHasRedactions(PdfGeneratedDocument doc)
            {
                foreach (BasePage page in doc.Pages)
                {
                    // page argument will be null if BasePage is not a PdfGeneratedPage
                    // this would happen if the document was opened without the "attempt to import foreign content" flag set.
                    if (PageHasRedactions(page as PdfGeneratedPage)) return true;
                }
                return false;
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation"/> class with empty bounds.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.MakeBasicAppearance(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Makes the basic appearance for the annotation.  Unlike <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation"/>, <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation"/>
            can't easily share the same appearance since appearances are geometrically scaled to fit the bounds of the annotation.
            This means that border outlines will grow or shrink when drawn.  When the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> of the
            annotation change, the appearance needs to be rebuilt in order to render correctly in the document.
            This method is provided so that, for example, client code might add in custom coloring or easily build consistent
            appearances for when the annotation has been cliecked on or when it is rolled over.
            </summary>
            <param name="gr">The resources that will hold the appearance.</param>
            <param name="bounds">The bounds of the annotation.</param>
            <param name="quads">An optionally empty or null collection of quadrilaterals to be marked.</param>
            <param name="borderWidth">Width of the border.</param>
            <param name="outlineColor">Color of the outline.</param>
            <returns>
            A string which is the name of an template resource that will represent the annotation's appearance.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.RedactionInteriorColor">
            <summary>
            Gets or sets the color of the interior of the redacted area.  If not set, the redacted area will be transparent.
            </summary>
            <remarks>
            This color is applied after the redaction has been applied by a PDF viewer.
            If <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.RedactionTemplate"/> is set, this will be ignored.
            </remarks>
            <value>
            The color of the interior of the redacted area.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.Regions">
            <summary>
            Gets the regions for this annotation.  Regions represents a set of quadrilaterals each of which
            represent the area covered by the annotation.  Typically, parts of the annotation are drawn through
            sections of the quatrilateral.  For example, underlines are drawn across the bottom of the annotation,
            strike outs through the middle.
            </summary>
            <remarks>
            If not used, the Bounds property will be used instead.  If used, the Bounds property will be adjusted
            to contain the entire set of quadrilaterals within <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.Regions"/>.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.RedactionTemplate">
            <summary>
            Gets or sets the name of a template resource to be used when the redaction is applied.
            If specified, this template will take precedence over all other appearance related properties.
            </summary>
            <value>
            The redaction template.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.OverlayText">
            <summary>
            Gets or sets the overlay text that will be used on the redaction when placed.
            </summary>
            <remarks>
            This value will be ignored if the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.RedactionTemplate"/> is set.
            </remarks>
            <value>
            The overlay text.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.IsOverlayTextRepeated">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.OverlayText"/>, if present, will be repeated.
            </summary>
            <value>
            	<c>true</c> if the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.OverlayText"/>, if present, will be repeated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.DefaultTextAppearance">
            <summary>
            Gets or sets the default text appearance for the annotation.  If set to null, this will internally default to
            Helvetica 10 point.
            </summary>
            <value>
            The default text appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RedactionProposalAnnotation.AutoGenerateBasicAppearance">
            <summary>
            Gets or sets a value indicating whether to auto generate a basic appearance for the proposed redaction.
            Generation of the appearance happens when the document is saved.
            </summary>
            <value>
            	<c>true</c> if the annotation will make a basic appearance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation"/> objects can be use to mark documents for being in a particular review state.
            The process of review is represented by the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess"/> class.  <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess"/>
            is an abstract class and is not used directly.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess"/> class defining the valid states for the review.
            </summary>
            <param name="validStates">The valid states.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess.SetCurrentState(System.String)">
            <summary>
            Sets the review state by name.  If the name is not a valid state, this will revert to the 0th state.
            </summary>
            <param name="name">The name of the state.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess.ProcessName">
            <summary>
            Gets the name of the review process.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess.StateName">
            <summary>
            Gets the name of the current review state.
            </summary>
            <value>
            The name of the state.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess.CurrentState">
            <summary>
            Gets or sets the current review state.  This index is used to select a valid state from the
            set of available review states in <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess.ValidStates"/>
            </summary>
            <value>
            The state of the current review.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess.ValidStates">
            <summary>
            Gets the valid states for this <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ReviewProcess"/>
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.MarkingReview">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.MarkingReview"/> represents a review process with two states: Marked and Unmarked.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.MarkingReview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.MarkingReview"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.MarkingReview.ProcessName">
            <summary>
            Gets the name of the review process.  Returns "Marked".
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.MarkingReview.UnmarkedStateIndex">
            <summary>
            Gets the index of the unmarked state.
            </summary>
            <value>
            The index of the unmarked state.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.MarkingReview.MarkedStateIndex">
            <summary>
            Gets the index of the marked state.
            </summary>
            <value>
            The index of the marked state.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview"/> represents a review process with states None,
            Accepted, Rejected, Cancelled, and Completed.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview.ProcessName">
            <summary>
            Gets the name of the review process.  Returns "Review".
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview.NoneStateIndex">
            <summary>
            Gets the index of the none state.
            </summary>
            <value>
            The index of the none state.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview.AcceptedStateIndex">
            <summary>
            Gets the index of the accepted state.
            </summary>
            <value>
            The index of the accepted state.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview.RejectedStateIndex">
            <summary>
            Gets the index of the rejected state.
            </summary>
            <value>
            The index of the rejected state.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview.CancelledStateIndex">
            <summary>
            Gets the index of the cancelled state.
            </summary>
            <value>
            The index of the cancelled state.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.GeneralReview.CompletedStateIndex">
            <summary>
            Gets the index of the completed state.
            </summary>
            <value>
            The index of the completed state.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.UnknownReview">
            <summary>
            Represents a review process that is not modeled in DotPdf.  Since review process in Acrobat does not
            contain all possible states, it is impossible to infer the full set of possible states from PDF file,
            so this class of review is likely to be incomplete.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.UnknownReview.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.UnknownReview"/> class.
            </summary>
            <param name="name">The name of the review process.</param>
            <param name="setting">The current (and only) setting.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.UnknownReview.ProcessName">
            <summary>
            Gets the name of the review process.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation"/> represents a canned set of markings for a document that
            appear as if the document had been stamped.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation"/> class with the provided bounds and
            the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind"/> of 'Draft'.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation.#ctor(Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation"/> class.
            </summary>
            <param name="label">The kind of rubber stamp.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation.#ctor(System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation"/> class.  Not all
            PDF readers are required to handle arbitrary stamp strings.
            </summary>
            <param name="stampLabel">The stamp label as text.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties for the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/>.
            </summary>
            <param name="problems">A list of problems to add to.</param>
            <param name="context">The repair context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation.StringFromRubberStampKind(Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind)">
            <summary>
            Returns the string equivalent of the given <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RubberStampKind"/>.
            </summary>
            <param name="kind">The kind of the rubber stamp.</param>
            <returns>A string equivalent of the RubberStampKind</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.RubberStampAnnotation.StampLabel">
            <summary>
            Gets or sets the stamp label.
            </summary>
            <value>
            The stamp label.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/> represents an area on a page that can be
            signed by the recipient of a document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="name">The name of the field.</param>
            <param name="nameForUI">The name displayed in the UI.</param>
            <param name="nameForExport">The name for data export.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.MakeBasicAppearance(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Boolean,Atalasoft.PdfDoc.DigitalSignatures.BaseSignature)">
            <summary>
            Makes a basic appearance for using supplied signature information.
            </summary>
            <param name="gr">The GlobalResources in which the appearance will be stored.</param>
            <param name="bounds">The bounds of the appearance.</param>
            <param name="app">The text appearance.</param>
            <param name="borderWidth">Width of the border around the signature, ignored if null.</param>
            <param name="outlineColor">Color of the border.</param>
            <param name="fillColor">Color used to fill the signature, ignored if null.</param>
            <param name="includeLogo">If set to true, will add a logo under the signature.</param>
            <param name="docCert">The document cert.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">app</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.IsValidChildOf(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether this annotation is valid child of the specified form field.  Returns true is elem is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.GenericFormField"/> or a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.SignatureFormField"/>
            </summary>
            <param name="elem">The parent field.</param>
            <returns>
              <c>true</c> if this is valid child of the specified form field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.SetFieldsToLock(Atalasoft.PdfDoc.DigitalSignatures.FieldDisallowChangeAction,System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Forms.IFormElement})">
            <summary>
            Sets the fields to set to read only or leave alone when this widget is signed.
            </summary>
            <remarks>
            When the change action is set to <see cref="F:Atalasoft.PdfDoc.DigitalSignatures.FieldDisallowChangeAction.IncludeAll"/>, formElements will be ignored. When it is set to
            either <see cref="F:Atalasoft.PdfDoc.DigitalSignatures.FieldDisallowChangeAction.IncludeSome"/> or <see cref="F:Atalasoft.PdfDoc.DigitalSignatures.FieldDisallowChangeAction.ExcludeSome"/>,
            then the formElements argument should be an enumerable collection of IFormElement objects to include or exclude.
            </remarks>
            <param name="changeAction">The change action to take.</param>
            <param name="formElements">The form elements to set to read only or to leave alone.</param>
            <exception cref="T:System.ArgumentNullException">If the changeAction is IncludeSome or ExcludeSome, formElements must be non-null.</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.AreFieldChangesDisallowedBySigning(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether changes to the supplied <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> would be disallowed by signing this widget.
            </summary>
            <param name="elem">The element to check, typically a subclass of <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/>.</param>
            <returns><c>true</c> if the element would be marked as read-only by signing.</returns>
            <remarks>
            The value returned by this method is only meaningful if this SignatureWidgetAnnotation has not
            yet been signed, in other words, this is indication of the result of a future action based on current
            state. A spec-compliant PDF signing tool will mark the appropriate fields <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.FieldsChangeSet"/>
            as read-only at the time of signing.
            <para>
            To sign signature widgets in PDF documents with DotPdf, use the <see cref="T:Atalasoft.PdfDoc.DigitalSignatures.PdfDocumentSigner"/> object.
            </para>
            </remarks>
            <exception cref="T:Atalasoft.PdfDoc.PdfException">Unknown FieldDisallowChangeAction:  + FieldDisallowChangeAction</exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.ValueAsString">
            <summary>
            Gets the value as string.  Returns null.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.DefaultValueAsString">
            <summary>
            Gets the default value as string.  Returns null.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.FieldDisallowChangeAction">
            <summary>
            Gets the action to take for allowing or disallowing changes to fields after signing this widget.
            </summary>
            <value>
            The field disallow change action.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.FieldsChangeSet">
            <summary>
            Gets the list of fields that will be allowed or disallowed by <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.FieldDisallowChangeAction"/>.
            </summary>
            <remarks>
            If <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.FieldDisallowChangeAction"/> is set to <see cref="F:Atalasoft.PdfDoc.DigitalSignatures.FieldDisallowChangeAction.IncludeAll"/>,
            this list will be empty.
            </remarks>
            <value>
            The fields change set.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation.IsSigned">
            <summary>
            Gets a value indicating whether the signature widget annotation has already been signed.
            </summary>
            <value>
              <c>true</c> if the annotation is signed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation"/> is used to provide a voice or other sound mark-up in a document.
            The annotation appears on the page as either a speaker or a microphone using the standard appearance.
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation"/> objects contain a <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.Sound"/> object which represents the
            sound that will be played.  In most PDF viewers, sound annotations can only be triggered to play by direct user
            interaction.  If you need a <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.Sound"/> to be played by some other trigger, consider using a
            <see cref="T:Atalasoft.PdfDoc.Actions.PdfSoundAction"/>
            
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation"/> class with a
            speaker icon and no associated sound.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation"/> class in the specified bounds.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties of this object and adds any issues to the problems list.
            </summary>
            <param name="problems">The problems accumulated so far.</param>
            <param name="context">The context for repairing issues.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation.Sound">
            <summary>
            Gets or sets the sound for playback.
            </summary>
            <value>
            The sound.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation.IconName">
            <summary>
            Gets or sets the name of the icon that will be displayed.
            <remarks>
            The PDF specification states that only the icond "Speaker" and "Mic" need to be
            supported by PDF viewers.  These are available via the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation.RecommendedIconNames"/>
            property.
            </remarks>
            </summary>
            <value>
            The name of the icon.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation.RecommendedIconNames">
            <summary>
            Gets the recommended icon names for a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SoundAnnotation"/>
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation"/> is meant to represent a sticky note on the page.  In
            interaction, the note is either closed or open.  When closed, it appears as a small piece of
            paper attached to the page.  When open, it provides a simple user interface to view and
            edit text associated with it.  In the initial versions of PDF, this annotation was represented
            on its own and because of the nature of the UI, was very complicated.  In later revisions,
            it was changed to be two annotations: a StickyNoteAnnotation which holds the text and a
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation"/> which represents the UI for editing the text.  This is now
            the preferred form and there is a convenience constructor that will make an associated
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation"/> and attach it to the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation"/>.
            <example>
            This shows how to use the convenience constructor for making a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation"/>.
            <code>
            StickyNoteAnnotation annot = new StickyNoteAnnotation(new PdfBounds(72, 400, 36, 72), "empty.",
                                                    new PdfBounds(72, 400, 144, 288));
            // this is equivalent to:
            
            StickyNoteAnnotation annot = new StickyNoteAnnotation(new PdfBounds(72, 400, 36, 72) "empty.");
            annot.Popup = new PopupAnnotation(new PdfBounds(72, 400, 144, 288), annot);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation"/> class with the
            specified bounds and text.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation"/> class with the
            specified bounds and text, constructing an associated <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation"/> to attach
            to the StickyNoteAnnotation.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="text">The text.</param>
            <param name="popupBounds">The bounds of the associated <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.PopupAnnotation"/>.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.StandardIconNames">
            <summary>
            Gets the standard icon names usable for sticky note appearances.
            </summary>
            <remarks>
            The PDF specification states that a set of standard names should be
            supported by all viewers for icons.  The list includes "Note", "Comment",
            "Key", "Help", "NewParagraph", "Paragraph", and "Insert".  If these is
            no icon name (null), the viewer will use a note.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.NoteIconName">
            <summary>
            Gets the name of the note icon.
            </summary>
            <value>
            The name of the note icon.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.CommentIconName">
            <summary>
            Gets the name of the comment icon.
            </summary>
            <value>
            The name of the comment icon.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.KeyIconName">
            <summary>
            Gets the name of the key icon.
            </summary>
            <value>
            The name of the key icon.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.HelpIconName">
            <summary>
            Gets the name of the help icon.
            </summary>
            <value>
            The name of the help icon.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.NewParagraphIconName">
            <summary>
            Gets the name of the new paragraph icon.
            </summary>
            <value>
            The new name of the paragraph icon.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.ParagraphIconName">
            <summary>
            Gets the name of the paragraph icon.
            </summary>
            <value>
            The name of the paragraph icon.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.InsertIconName">
            <summary>
            Gets the name of the insert icon.
            </summary>
            <value>
            The name of the insert icon.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.IsOpen">
            <summary>
            Gets or sets a value indicating whether the sticky note should appear in open or closed state.
            </summary>
            <value>
              <c>true</c> if the sticky note is open; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.IconName">
            <summary>
            Gets or sets the name of the icon that will be used when the sticky note is closed.
            </summary>
            <value>
            The name of the icon.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.ReviewProcess">
            <summary>
            Gets or sets the review process for this sticky note.
            </summary>
            <remarks>
            Sticky note annotations can be used as a tool for reviewing documents.  To this end a
            sticky note can have a <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.ReviewProcess"/> attached to it.  A <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.StickyNoteAnnotation.ReviewProcess"/>
            is a process classification that allows the sticky note to represent a current state from
            a set of allowable states.  For example, a document might be marked, via the sticky note as
            being "Completed" or "Accepted".
            </remarks>
            <value>
            The review process.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.StringDrawingTemplatePair">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StringDrawingTemplatePair"/> is a utility class to associate a name with a <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/>.
            This class is immutable.  Once constructed, neither component can be changed.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.StringDrawingTemplatePair.#ctor(System.String,Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.StringDrawingTemplatePair"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="template">The template.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StringDrawingTemplatePair.Name">
            <summary>
            Gets the name in the pair.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.StringDrawingTemplatePair.Template">
            <summary>
            Gets the template in the pair.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation"/> is an annotation type that is used to represent various similar
            ways of marking editing changes to text on a page.  Typically, this type of annotation is built by
            using the set of quadrilaterals that bound individual words or word parts on a page and then providing
            marks on top of the text including underlines, highlights, an insertion caret, strike out, or squiggly
            underline.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation"/> class with Highlight as the default kind.
            The <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation.Regions"/> will be a new empty collection.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation.#ctor(Atalasoft.PdfDoc.Generating.Annotations.TextMarkupKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation"/> class with the specified markup kind.
            The <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation.Regions"/> will be a new empty collection.
            </summary>
            <param name="kind">The kind.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation.MarkupKind">
            <summary>
            Gets or sets the kind of the markup.
            </summary>
            <value>
            The kind of the markup.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextMarkupAnnotation.Regions">
            <summary>
            Gets the regions for this annotation.  Regions represents a set of quadrilaterals each of which
            represent the area covered by the annotation.  Typically, parts of the annotation are drawn through
            sections of the quatrilateral.  For example, underlines are drawn across the bottom of the annotation,
            strike outs through the middle.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation"/> is used to provide a user-fillable text field on
            a form in a document.  Note that the act of putting a widget annotation of a page is not enough to
            mark it as a form field.  The annotation must also be put into the Fields collection of the document's <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Form"/>
            property as well.
            <example>
            Creating a typical widget annotation.
            <code>
            TextWidgetAnnotation anno = new TextWidgetAnnotation(bounds, "user", "anonymous");
            page.Annotations.Add(anno);
            doc.Form.Fields.Add(anno);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation"/> class.
            </summary>
            <param name="bounds">The bounds of the text box.</param>
            <param name="name">The name for identifying the field.</param>
            <param name="defaultValue">The default value of the text box.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation"/> class.
            </summary>
            <param name="bounds">The bounds of the text box.</param>
            <param name="name">The name for identifying the field.</param>
            <param name="nameForUI">The name of the field that should be displayed in the user interface.</param>
            <param name="nameForExport">The name of the field used for exporting data.</param>
            <param name="defaultValue">The default value of the text box.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.MakeBasicAppearance(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.String,System.Boolean,Atalasoft.PdfDoc.Generating.Annotations.AnnotationTextAlignment)">
            <summary>
            Makes the basic appearance for the annotation.  Unlike <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CheckboxWidgetAnnotation"/>, <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation"/>
            can't easily share the same appearance since appearances are geometrically scaled to fit the bounds of the annotation.
            This means that border outlines will grow or shrink when drawn.  When the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> of the
            annotation change, the appearance needs to be rebuilt in order to render correctly in the document.
            This method is provided so that, for example, client code might add in custom coloring or easily build consistent
            appearances for when the annotation has been cliecked on or when it is rolled over.
            </summary>
            <param name="gr">The resources that will hold the appearance.</param>
            <param name="bounds">The bounds of the annotation.</param>
            <param name="app">The text appearance for text in the widget.</param>
            <param name="borderWidth">Width of the border.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="value">The text value.</param>
            <param name="isMultiline">A value indicating if this text can contain multiple lines.</param>
            <param name="annotationTextAlignment">The horizontal alignment of the text.</param>
            <returns>
            A string which is the name of an template resource that will represent the annotation's appearance.
            </returns>
            <example>
            If you have <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.AutoGenerateBasicAppearance"/> set to <c>true</c> this method will be called as follows:
            <code>
            appearanceName = MakeBasicAppearance(resources, Bounds, DefaultAppearance, borderWidth,
                BorderColor ?? PdfColorFactory.FromGray(0), BackgroundColor ?? PdfColorFactory.FromGray(1), TextValue ?? "");
            if (this.Appearance == null)
                this.Appearance = new AppearanceSet();
            this.Appearance.Normal.Add("N", appearanceName);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.GenerateAutoFontSize(Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Calculates the font size used for auto-sized fonts.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties of this object and adds any issues to the problems list.
            </summary>
            <param name="problems">The problems accumulated so far.</param>
            <param name="context">The context for repairing issues.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsValidChildOf(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether this annotation is valid child of the specified form field.  Returns true is elem is a
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.GenericFormField"/> or a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.TextFormField"/>
            </summary>
            <param name="elem">The parent field.</param>
            <returns>
              <c>true</c> if this is valid child of the specified form field; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsMultiLine">
            <summary>
            Gets or sets a value indicating whether this instance is multi line text.
            </summary>
            <value>
            	<c>true</c> if this instance is multi line; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsPassword">
            <summary>
            Gets or sets a value indicating whether this instance is password.  If true, a PDF viewer should
            display neutral marks for each of the characters entered.  Note that fields values are stored in the
            PDF file without any encryption. Labeling a field as a password does not imply any security on how that
            value is stored in the file.  At the very least client code should consider encrypting the the output
            PDF to prevent the password from being stored in clear text.  See <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.UserPassword"/>
            or <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.OwnerPassword"/>.
            </summary>
            <value>
            	<c>true</c> if this instance is password; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsSpellChecked">
            <summary>
            Gets or sets a value indicating whether the text is spell checked.  If true, text
            entered should be checked by a client service for correct spelling.
            </summary>
            <value>
            	<c>true</c> if the text is spell checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsScrollable">
            <summary>
            Gets or sets a value indicating whether the text box will have scroll bars if needed.
            </summary>
            <value>
            	<c>true</c> if the text box will have scroll bars if needed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsColumns">
            <summary>
            Gets or sets a value indicating whether this instance is columns of text.
            </summary>
            <remarks>
            This will only be used if the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.MaximumLength"/> property is non-zero and the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsScrollable"/>,
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsPassword"/>, and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsFileSelection"/> properties are set to false.  With those conditions,
            text will be broken into <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.MaximumLength"/> columns.
            </remarks>
            <value>
            	<c>true</c> if this instance is columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsRichText">
            <summary>
            Gets or sets a value indicating whether text is represented by rich text
            </summary>
            <value>
            	<c>true</c> if the text is rich text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.IsFileSelection">
            <summary>
            Gets or sets a value indicating whether the text is a file selection.
            </summary>
            <value>
            	<c>true</c> if this instance is file selection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.MaximumLength">
            <summary>
            Gets or sets the maximum length of text in the field.
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.TextValue">
            <summary>
            Gets or sets the text value of the field.
            </summary>
            <value>
            The text value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.DefaultTextValue">
            <summary>
            Gets or sets the default text value.
            </summary>
            <value>
            The default text value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.RichTextValue">
            <summary>
            Gets or sets the rich text value.
            </summary>
            <value>
            The rich text value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.DefaultRichTextStyleString">
            <summary>
            Gets or sets the default style string.  The style string is a string that specifies the rich text style
            to use by default for the annotation, if using the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.RichTextContent"/> property.
            </summary>
            <example>
            <code>
            textWidgetAnnot.DefaultRichTextStyleString = "font: 12pt Helvetica";
            </code>
            </example>
            <remarks>
            You should avoid using only the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.DefaultRichTextStyleString"/> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseMarkupAnnotation.RichTextContent"/>
            properties.  When using these properties, be sure to set the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Contents"/> property to a plain
            text equivalent.  This will allow maximum compatability with older PDF viewers.
            </remarks>
            <value>
            The default style string.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.ValueAsString">
            <summary>
            Gets the value as a string.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.DefaultValueAsString">
            <summary>
            Gets the default value as a string.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TextWidgetAnnotation.AutoGenerateBasicAppearance">
            <summary>
            Gets or sets a value indicating whether to auto generate a basic appearance for the text box.
            Generation of the appearance happens when the document is saved.  Default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the widget will make a basic appearance for the text box; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutLine">
            <summary>
            A callout line is a line that runs from a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutAnnotation"/> to another point on the page.
            CalloutLine is abstract with concrete implementations that represent a two-point line and a three-point
            line.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CalloutLine"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.CalloutLine.ToDoubleArray">
            <summary>
            Converts the points to a double array.
            </summary>
            <returns>An array representing the callout points</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.TwoPointCalloutLine">
            <summary>
            This represents a simple two-point line with a starting point and an ending point.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TwoPointCalloutLine.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TwoPointCalloutLine"/> class.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TwoPointCalloutLine.ToDoubleArray">
            <summary>
            Converts the points to a double array with in the order StartPoint.X, StartPoint.Y, EndPoint.X, EndPoint.Y.
            </summary>
            <returns>An array representing the callout points</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TwoPointCalloutLine.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
            <value>
            The start point.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TwoPointCalloutLine.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.ThreePointCalloutLine">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ThreePointCalloutLine"/> is a line that contains a "knee" in the middle of the line.  This can
            be used to make a more pleasing call out line such that at least one line segment is rectilinear.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ThreePointCalloutLine.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.ThreePointCalloutLine"/> class.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="kneePoint">The middle or knee point.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.ThreePointCalloutLine.ToDoubleArray">
            <summary>
            Converts the points to a double array with in the order StartPoint.X, StartPoint.Y, KneePoint.X, KneePoint.Y, EndPoint.X, EndPoint.Y.
            </summary>
            <returns>An array representing the callout points</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.ThreePointCalloutLine.KneePoint">
            <summary>
            Gets or sets the knee point.
            </summary>
            <value>
            The knee point.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation">
            <summary>
            The <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation"/> is nearly identical to the TextBoxAnnotation except that it implies that the
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/> property are fluid to the text that is being entered and that there is usually no
            background or outline drawn for the bounding region.  As such, it is supposed to appear as if the user is typing
            notes directly onto the page.  If the text contains either neline or carriage returns characters (<c>'\n'</c> or
            <c>'\r'</c>, the lines will be split at those points.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation"/> class, placing the text from the start point
            supplied.
            </summary>
            <remarks>
            The startPoint acts as the baseline and start position for text to be drawn, NOT the upper left of a bounding box.
            </remarks>
            <param name="startPoint">The start point.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.ValidateProperties(Atalasoft.Shared.Validation.ProblemList,Atalasoft.PdfDoc.Generating.Validation.PageRepairContext)">
            <summary>
            Validates the properties for the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.CaretAnnotation"/>.
            </summary>
            <param name="problems">A list of problems to add to.</param>
            <param name="context">The repair context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.CalculateBounds(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Geometry.PdfPoint,System.String)">
            <summary>
            Calculates the bounds required by the supplied text.
            </summary>
            <param name="gr">The gr.</param>
            <param name="startingPoint">The starting point.</param>
            <param name="text">The text.</param>
            <returns>The bounds required by the supplied text</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.StartPoint">
            <summary>
            Gets or sets the start point for rendering the text in the annotation on the page.
            </summary>
            <remarks>
            The startPoint acts as the baseline and start position for text to be drawn, NOT the upper left of a bounding box.
            </remarks>
            <value>
            The start point.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.AutoGenerateBounds">
            <summary>
            Gets or sets a value indicating whether to auto generate the bounds.  This is done by using the starting point
            plus the font ascent as the upper left corner of the bounds and the line height times the total number of lines
            as the overall height.  The width is the width of the longest line.  This rectangle will be used for the Bounds
            unless <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.AutoGenerateInsetArea"/> is true, then this rectangle will become the
            <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.InsetArea"/> and then will be expanded by the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.LeftRightMargin"/> and <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.TopBottomMargin"/>
            to get the actual <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation.Bounds"/>.
            </summary>
            <value>
              <c>true</c> if the bounds will be calculated before rendering; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.AutoGenerateInsetArea">
            <summary>
            Gets or sets a value indicating whether auto generate the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.InsetArea"/>.
            </summary>
            <value>
            	<c>true</c> if the control will auto generate the <see cref="P:Atalasoft.PdfDoc.Generating.Annotations.TextBoxAnnotation.InsetArea"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.LeftRightMargin">
            <summary>
            Gets or sets the left and right margins.
            </summary>
            <value>
            The left right margin.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Annotations.TypeWriterAnnotation.TopBottomMargin">
            <summary>
            Gets or sets the top and bottom margins.
            </summary>
            <value>
            The top bottom margin.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.BaseButtonFormField">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.BaseButtonFormField"/> is an abstract class that represents a parent field to any button form
            field or button widget.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.BaseFormField">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.BaseFormField"/> is an abstract class used to represent all form fields that will be
            parents of other fields or widget annotations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.BaseFormField"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.ThrowIfReadOnly``1(``0)">
            <summary>
            If <see cref="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.EnforceReadyOnlyWithException"/> is <c>true</c> and <see cref="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.IsFieldReadOnly"/> is true,
            throw an InvalidOperationException, otherwise return <c>value</c>.
            </summary>
            <remarks>
            This is a helper method used in public properties to prevent modification to annotation contents.
            </remarks>
            <typeparam name="T">The value type</typeparam>
            <param name="value">The value</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Attempt to modify a read-only annotation.</exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.AdditionalActions">
            <summary>
            Gets the additional actions that may be used by annotations that are children of this field.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.DefaultTextAppearance">
            <summary>
            Gets or sets the default text appearance that is shared by children of this field.
            </summary>
            <value>
            The default text appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.EnforceReadyOnlyWithException">
            <summary>
            Gets or sets a value indicating whether to enforce ready only with the <see cref="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.IsFieldReadOnly"/> propery with an exception.
            </summary>
            <remarks>
            When set to <c>true</c>, if <see cref="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.IsFieldReadOnly"/> or <see cref="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.IsFieldReadOnly"/>is set to true, this will cause any property
            </remarks>
            <value>
            <c>true</c> if ReadOnly will be enforced  with an exception; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.ParentField">
            <summary>
            Gets or sets the parent field.
            </summary>
            <value>
            The parent field.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.ChildFields">
            <summary>
            Gets the child fields for this field.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>
            The name of the field.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.FieldAlternateDescription">
            <summary>
            Gets or sets the field alternate description for display in the user interface.
            </summary>
            <value>
            The field alternate description.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.FieldNameForExport">
            <summary>
            Gets or sets the field name for export.
            </summary>
            <value>
            The field name for export.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.IsFieldReadOnly">
            <summary>
            Gets or sets a value indicating whether this field is read only.
            </summary>
            <value>
            	<c>true</c> if this instance field is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.IsFieldRequired">
            <summary>
            Gets or sets a value indicating whether this field is required.
            </summary>
            <value>
            	<c>true</c> if this instance field is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.IsFieldNoExport">
            <summary>
            Gets or sets a value indicating whether this field should not be export.
            </summary>
            <value>
            	<c>true</c> if this field should not exported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.FieldFullName">
            <summary>
            Gets the fully qualified name of the field.  This value is only correct if
            <see cref="P:Atalasoft.PdfDoc.Generating.Forms.BaseFormField.ParentField"/> has been set.  When the parent chain is properly
            set up, this will return ParentField.FieldFullName + '.' + FieldName
            </summary>
            <value>
            The full name of the field.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.BaseButtonFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.BaseButtonFormField"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.BaseButtonFormField.ImplementMe">
            <summary>
            Built for inheritance.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField"/> represents a parent field of other <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> objects
            that are either CheckboxFormField objects or CheckboxWidgetAnnotations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField.ImplementMe">
            <summary>
            Built for inheritance.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField.Value">
            <summary>
            Gets or sets the string value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField.DefaultValue">
            <summary>
            Gets or sets the default string value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField.CheckedValue">
            <summary>
            Gets the standard string used for a checked value.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.CheckboxFormField.ClearedValue">
            <summary>
            Gets the standard string used for a cleared value.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.ChoiceFormField">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Forms.ChoiceFormField"/> represents a parent field of other <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> objects
            that are either ChoiceFormField objects or ChoiceWidgetAnnotations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.ChoiceFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.ChoiceFormField"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.FormVisitor">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Forms.FormVisitor"/> is an set of utility methods for visiting the elements in a
            PDF form.  There are variations for visiting the elements in either depth first or breadth
            first order as well as convenience methods that only visit the actual widget annotations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.FormVisitor.DepthFirst(Atalasoft.PdfDoc.Generating.Forms.PdfForm)">
            <summary>
            Returns an enumeration of all the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> objects in a form in
            depth first order.
            </summary>
            <param name="form">The form containing fields.</param>
            <returns>The elements in the form.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.FormVisitor.BreadthFirst(Atalasoft.PdfDoc.Generating.Forms.PdfForm)">
            <summary>
            Returns an enumeration of all the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> objects in a form in
            breadth first order.
            </summary>
            <param name="form">The form containing fields.</param>
            <returns>The elements in the form.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.FormVisitor.WidgetsDepthFirst(Atalasoft.PdfDoc.Generating.Forms.PdfForm)">
            <summary>
            Returns an enumeration of all the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/> objects in a form in
            depth first order.
            </summary>
            <param name="form">The form containing fields.</param>
            <returns>The widgets in the form.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.FormVisitor.WidgetsBreadthFirst(Atalasoft.PdfDoc.Generating.Forms.PdfForm)">
            <summary>
            Returns an enumeration of all the <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/> objects in a form in
            breadth first order.
            </summary>
            <param name="form">The form containing fields.</param>
            <returns>The widgets in the form.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.GenericFormField">
            <summary>
            While most implementations of <see cref="T:Atalasoft.PdfDoc.Generating.Forms.BaseFormField"/> imply that their child fields are a particular type,
            PDF allows for form fields that have no type associated with them. <see cref="T:Atalasoft.PdfDoc.Generating.Forms.GenericFormField"/> represents
            a parent field that may have child fields of any type.
            </summary>
            <remarks>
            While it is possible to put non-matching child fields as the children of any field, this is not considered
            good practice.
            </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.PdfForm">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Forms.PdfForm"/> represents a collection of fields that may be entered by a user for later collection
            or submission.  A form is a hierarchy of form elements ending in nodes which are always <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/>
            object.  For the widgets to be visible to the user, they must also be put into the Annotations collection in a
            <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedPage"/>.
            </summary>
            <example>
            Here is an example that makes a simple form.
            <code>
            PdfGeneratedDocument doc = new PdfGeneratedDocument();
            doc.Form = new PdfForm();
            PdfGeneratedPage page = doc.AddPage(PdfDefaultPages.Letter);
            TextWidgetAnnotation text = new TextWidgetAnnotation(new PdfBounds(72, 400, 200, 20), "name", null);
            page.Annotations.Add(text);
            doc.Form.Fields.Add(text);
            doc.Save("output.pdf");
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.PdfForm.IsFieldLeaf(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether a give <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> is a leaf or a node.
            </summary>
            <param name="elem">The form element.</param>
            <returns>
              <c>true</c> if [is field leaf] [the specified elem]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.PdfForm.ContainsFormElement(Atalasoft.PdfDoc.Generating.Forms.IFormElement)">
            <summary>
            Determines whether this form contains the given <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/>
            </summary>
            <param name="given">The form element to search for.</param>
            <returns>
              <c>true</c> if the form contains the given element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.PdfForm.EnforceParentage">
            <summary>
            Enforces the parent/child relationships in form elements within a form field hierarchy.
            This is done by doing a breadth-first traversal of all form elements and forcing the
            child elements to point back to the parent.  Calling this method will ensure that
            <see cref="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.FieldFullName"/> will return the correct value.  Before saving
            a document or validation this method will get called automatically.  Calling this method will ensure
            that the <see cref="P:Atalasoft.PdfDoc.Generating.Forms.IFormElement.FieldFullName"/> property returns the correct value.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.PdfForm.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.  <see cref="T:Atalasoft.PdfDoc.Generating.Forms.PdfForm"/> does not require an object passed in.
            </summary>
            <param name="o">An object used to make the repair context.  In <see cref="T:Atalasoft.PdfDoc.Generating.Forms.PdfForm"/>, this is ignored.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.PdfForm.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object looking for problems.
            </summary>
            <param name="problems">The problems.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.PdfForm.TextAlignment">
            <summary>
            Gets or sets the text alignment for all child fields in the form (if not otherwise specified).
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.PdfForm.DefaultAppearance">
            <summary>
            Gets or sets the default text appearance for all child fields in the form (if not otherwise specified)..
            </summary>
            <value>
            The default appearance.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.PdfForm.FormHasSignatures">
            <summary>
            Gets a value indicating whether form has signature fields.
            </summary>
            <remarks>
            This is meant to be a hint to viewers and may not have been set properly by the generating software.
            When a <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> has been constructed from and existing PDF, this property
            will reflect the content of the file (correct or not).  Upon writing out a document, DotPdf will
            automatically set this property for you, defaulting it to <c>false</c> and setting it to <c>true</c>
            if DotPdf encounters either a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.SignatureFormField"/> or a <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.SignatureWidgetAnnotation"/>.
            <example>
            If you want to determine if a form has fields, you can use this code:
            <code>
            public static bool HasField(PdfForm form)
            {
                if (form == null) return false;
                foreach (IFormElement elem in FormVisitor.BreadthFirst())
                {
                    if (elem is SignatureFormField || elem is SignatureWidgetAnnotation)
                        return true;
                }
                return false;
            }
            </code>
            </example>
            </remarks>
            <value>
              <c>true</c> if the form has signatures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.PdfForm.SavingWillInvalidateSignatures">
            <summary>
            Gets a value indicating whether saving the document will invalidate signatures.
            </summary>
            <remarks>The PDF specification for signatures uses data present in a partially written PDF file to
            create a data hash to verify that a document is consistent with its state when it was signed.  Under
            certain conditions, it may be impossible to retain this ability.  Generally speaking, DotPdf will
            completely rewrite a file when saving and this will invalidate any and all signatures in the file</remarks>
            <value>
            	<c>true</c> if saving will invalidate signatures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.PdfForm.Fields">
            <summary>
            Gets the fields present in this form.  Any <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/>
            objects in the <see cref="P:Atalasoft.PdfDoc.Generating.Forms.PdfForm.Fields"/> tree must also be contained in an Annotations collection on a page in the
            document.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.PdfForm.FieldCalculationSequence">
            <summary>
            Gets the field calculation sequence.  If form fields contain a field calculation, the order of calculation
            can be specified by this list.  A PDF viewer will perform the recalculation based on the order of this list.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.PdfForm.IsEmpty">
            <summary>
            Gets a value indicating whether there are any fields in this form.
            </summary>
            <value>
              <c>true</c> if the form does not contain fields; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.PdfForm.XFA">
            <summary>
            Gets a collection of <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream"/> objects that
            represent packets of XFA data contained within a PDF Document.  Each StoredStream will contain XML data that
            represents the XFA data.  XFA may be contained within a single stream or within a collection of packets, each of
            which represents a subsection of the XFA model.
            </summary>
            <remarks>
            DotPdf makes no guarantees about the correctness of the data contained within the XFA packets nor will
            DotPdf make any attempt to validate data that is provided by client code or other sources before writing
            the streams to the file.
            
            Note that if the source document is signed, saving the new document will generate an exception. See <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.DocumentWasSigned"/>
            for more information.
            </remarks>
            <example>
            PdfGeneratedDocument doc = new PdfGeneratedDocument("myform.pdf");
            if (doc.Form == null) return;
            foreach (StoredStream sstm in doc.Form.XFA) {
                ProcessXFAPacket(sstm.Aquire());
                sstm.Release();
            }
            
            PdfGenerateDocument changedoc = new PdfGeneratedDocument("myform.pdf");
            if (doc.Form == null return;
            if (doc.DocumentWasSigned) return; // can't reliably edit a signed document
            TempFileStreamProvider provider = new TempFileStreamProvider();
            StoredStream sstm = provider.MakeStream();
            Stream stm = sstm.Aquire();
            CopyNewXFAPacketToStream(stm);
            sstm.Release();
            doc.Form.XFA.Add(sstm);
            doc.Save("newdataadded.pdf");
            </example>
            
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.PdfFormPropertyProblem">
            <summary>
            Defines a problem that could occur with the a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.PdfForm"/> property value.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.PdfFormPropertyProblem.#ctor(Atalasoft.PdfDoc.Generating.Forms.PdfForm,System.String,System.String,Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences,Atalasoft.PdfDoc.Generating.Validation.PdfFormRepairContext,Atalasoft.Shared.Validation.Problem{Atalasoft.PdfDoc.Generating.Forms.PdfForm,Atalasoft.PdfDoc.Generating.Validation.PdfFormRepairContext}.ReparationMechanism)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.PdfFormPropertyProblem"/> class.
            </summary>
            <param name="source">The source problem.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="description">The description of the problem.</param>
            <param name="consequences">The description of the consequences of fixing the problem.</param>
            <param name="repairContext">The repair context.</param>
            <param name="reparation">The reparation action to take.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.PushButtonFormField">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Forms.PushButtonFormField"/> represents a parent field of other <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> objects
            that are either PushButtonFormField objects or PushButtonWidgetAnnotations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.PushButtonFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.PushButtonFormField"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.PushButtonFormField.ImplementMe">
            <summary>
            Built for inheritance.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField"/> represents a parent field of other <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> objects
            that are either RadioButtonFormField objects or RadioButtonWidgetAnnotations.  Making a set of radio buttons
            that are wired up correctly can be a tricky process.  RadioButtonWidgetAnnotations typically are not used
            without a parent RadioButtonFormField.  It is typically easier to use the <see cref="M:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField.MakeRadioSet(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.PdfGeneratedPage,System.String,System.String,System.String,System.String[],Atalasoft.PdfDoc.Geometry.PdfBounds[])"/>
            method to make a set of radio buttons.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField.ImplementMe">
            <summary>
            Built for inheritance.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField.MakeRadioSet(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.PdfGeneratedPage,System.String,System.String,System.String,System.String[],Atalasoft.PdfDoc.Geometry.PdfBounds[])">
            <summary>
            Makes a set of radio button fields with a single parent field.  If currentValue or defaultValue are null, the code will
            substitute the standard radio button cleared value.
            </summary>
            <param name="gr">The resources for holding button appearances.</param>
            <param name="owningPage">The page that will own the radio buttons.</param>
            <param name="fieldName">The name of the output form field</param>
            <param name="currentValue">The current setting from the set.</param>
            <param name="defaultValue">The default value for the set.</param>
            <param name="values">The possible values for the radio buttons.</param>
            <param name="locations">The locations of each radio button.</param>
            <returns>A single parent <see cref="T:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField"/> that represents a group of radio buttons and their current value (if any).</returns>
            <example>
            How to make a simple set of radio buttons with nothing selected and no default value.  Note that this does not create
            any text on the page, just the buttons.  The standard radio button appearance is just the functional part of the button
            and doesn't include any labeling so that it can be shared across many buttons.
            <code>
            RadioButtonFormField field = RadioButtonFormField.MakeRadioSet(doc.Resources, page,
                      "CallMeHow",
                      null, null,
                      new string[] {"Yes", "No", "Maybe"},
                      new PdfBounds[] { new PdfBounds(72, 100, 8, 8), new PdfBounds(72, 90, 8, 8), new PdfBounds(72, 80, 8, 8) });
            doc.Form.Fields.Add(field);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField.MakeRadioSet(System.String,System.String,System.String,Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation[])">
            <summary>
            Makes a radio set from the collection of <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation"/> objects.
            Note that it is the client's responsibility to ensure that the radio buttons are put into the Annotations collection of
            a page in the document.
            </summary>
            <param name="fieldName">The name of the output form field</param>
            <param name="currentValue">The current value of the set.</param>
            <param name="defaultValue">The default value of the set.</param>
            <param name="radioButtons">The radio buttons.</param>
            <returns>A set of radio buttons arrached to a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField.MakeRadioSet(Atalasoft.PdfDoc.Generating.PdfGeneratedPage,System.String,System.String,System.String,Atalasoft.PdfDoc.Generating.Annotations.RadioButtonWidgetAnnotation[])">
            <summary>
            Makes the radio set from the set of radio buttons installing them in the supplied page (if any).
            </summary>
            <param name="owningPage">The owning page.</param>
            <param name="fieldName">The name of the output form field</param>
            <param name="currentValue">The current value.</param>
            <param name="defaultValue">The default value.</param>
            <param name="radioButtons">The radio buttons.</param>
            <returns>A set of radio buttons arrached to a <see cref="T:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField"/></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField.Value">
            <summary>
            Gets or sets the string value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.RadioButtonFormField.DefaultValue">
            <summary>
            Gets or sets the default string value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.SignatureFormField">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Forms.SignatureFormField"/> represents a parent field of other <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> objects
            that are either SignatureFormField objects or SignatureWidgetAnnotations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.SignatureFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.SignatureFormField"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Forms.TextFormField">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Forms.TextFormField"/> represents a parent field of other <see cref="T:Atalasoft.PdfDoc.Generating.Forms.IFormElement"/> objects
            that are either TextFormField objects or TextWidgetAnnotations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Forms.TextFormField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Forms.TextFormField"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.IsMultiLine">
            <summary>
            Gets or sets a value indicating whether child fields should be multi line.
            </summary>
            <value>
            	<c>true</c> if child fields should be multi line; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.IsPassword">
            <summary>
            Gets or sets a value indicating whether child fields should represent a password field.
            </summary>
            <value>
            	<c>true</c> if child fields should be password fields; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.IsSpellChecked">
            <summary>
            Gets or sets a value indicating whether child fields should be spell checked.
            </summary>
            <value>
            	<c>true</c> if child fields should be spell checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.IsScrollable">
            <summary>
            Gets or sets a value indicating whether child fields should be scrollable.
            </summary>
            <value>
            	<c>true</c> if this child fields should be scrollable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.IsColumns">
            <summary>
            Gets or sets a value indicating whether child fields should be columns.
            </summary>
            <value>
            	<c>true</c> if child fields are columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.IsRichText">
            <summary>
            Gets or sets a value indicating whether child fields are rich text.
            </summary>
            <value>
            	<c>true</c> if child fields are rich text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.IsFileSelection">
            <summary>
            Gets or sets a value indicating whether child fields are file selection.
            </summary>
            <value>
            	<c>true</c> if child fields are file selection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.TextValue">
            <summary>
            Gets or sets the text value of this field
            </summary>
            <value>
            The text value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.DefaultTextValue">
            <summary>
            Gets or sets the default text value.
            </summary>
            <value>
            The default text value.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.TextAlignment">
            <summary>
            Gets or sets the text alignment for child fields.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Forms.TextFormField.MaximumLength">
            <summary>
            Gets or sets the maximum length for child fields.
            </summary>
            <value>
            The maximum length.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Multimedia.SoundEncodingFormat">
            <summary>
            Represents allowable PDF sound data formats.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.SoundEncodingFormat.Raw">
            <summary>
            Raw, or pulse code modulation (PCM)
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.SoundEncodingFormat.Signed">
            <summary>
            Data that should be interpreted as signed.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.SoundEncodingFormat.MuLaw">
            <summary>
            MuLaw compression
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.SoundEncodingFormat.ALaw">
            <summary>
            ALaw compression
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression">
            <summary>
            Compression formats available in the WAV file standard
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.PCM">
            <summary>
            Pulse code modulation
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.ADPCM">
            <summary>
            Adapative differential pulse code modulation 
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.ALaw">
            <summary>
            A-law compression 
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.MuLaw">
            <summary>
            Mu-Law compression
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.IMAADPCM">
            <summary>
            Interactive Multimedia Association adaptive differential pulse code modulation 
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.ITUG723">
            <summary>
             G.723 speech codec 
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.GSM610">
            <summary>
            GSM 6.10 lossy compression 
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.ITUG721">
            <summary>
            G.721 speech codec
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.Mpeg">
            <summary>
            Mpeg compression
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Multimedia.WavCompression.Experimental">
            <summary>
            Experimential - not recommended.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Multimedia.Sound">
            <summary>
            Represents a sound for playback from a PDF file.
            </summary>
            <remarks>
            PDF accepts a wide range of values for sound parameters, but for maximum compatibility, you should limit yourself
            to with 8kHz, 11.025kHz, or 22.050kHz sampling rates, a multiple of 8 bits of data per sample per channel and either
            1 or two channels.
            Because of these restrictions, it is easier to use pre-existing data that matches that format.  WAV is typically
            the closest and can be handled with the <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.WavReader"/> class.
            </remarks>
            <example>
            Making a sound annotation from an existing file.
            <code>
            FileStream stm = new FileStream("somefile.wav", FileMode.Open);
            WavReader reader = new WavReader(stm);
            Sound sound = Sound.FromWavReader(reader);
            if (sound == null) // returns null if not a widely compatible format.
            {
                // incompatible format
                stm.Close();
                throw new Exception("incompatible sound format");
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Multimedia.Sound.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.Sound"/> class.  <see cref="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.SamplingRate"/> will default to
            22050, <see cref="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.Channels"/> to 1, <see cref="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.BitsPerSample"/> to 8, <see cref="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.EncodingFormat"/> to Raw
            and a null <see cref="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.DataStream"/>.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Multimedia.Sound.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Multimedia.Sound.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the specified problems.
            </summary>
            <param name="problems">The list of problems accumulated.</param>
            <param name="repairContext">The repair context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Multimedia.Sound.FromWavReader(Atalasoft.PdfDoc.Generating.Multimedia.IWavReader)">
            <summary>
            Constructs a new <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.Sound"/> from the given <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <returns>A new Sound object if the WAV file contains generally compatible data, null otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Multimedia.Sound.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.Sound"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Multimedia.Sound.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.SamplingRate">
            <summary>
            Gets or sets the sampling rate.  For maximum compatibility this value is in Hz and should be one of:
            8000, 11025, or 22050.
            </summary>
            <value>
            The sampling rate.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.Channels">
            <summary>
            Gets or sets the number of channels.  This should be either 1 or 2.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.BitsPerSample">
            <summary>
            Gets or sets the bits per sample.  Only 8 is supported.
            </summary>
            <value>
            The bits per sample.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.EncodingFormat">
            <summary>
            Gets or sets the encoding format.
            </summary>
            <value>
            The encoding format.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.Sound.DataStream">
            <summary>
            Gets or sets the data stream.
            </summary>
            <value>
            The data stream.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Multimedia.WavReader">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.WavReader"/> is a simple implementation of a WAV file reader, implementing
            <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader"/>.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader"/> defines a class that represents the data within a WAV file.  This is useful in
            creating a <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.Sound"/> object.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader.GetDataStream">
            <summary>
            Gets a stream of possibly compressed sound data from the file.
            </summary>
            <returns>The sound data stream.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader.Compression">
            <summary>
            Gets the compression used in the data.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader.Channels">
            <summary>
            Gets the total number of channels of sound.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader.SamplingRate">
            <summary>
            Gets the sampling rate of the sound data.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader.BytesPerSecond">
            <summary>
            Gets the playback rate in bytes per second.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader.BlockAlignment">
            <summary>
            Gets the block alignment of data in the file.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader.BitsPerSample">
            <summary>
            Gets the number bits per sample.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.IWavReader.ExtraFormatBytes">
            <summary>
            Gets extra bytes that may represent further compression or data interpretation information.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Multimedia.WavReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Multimedia.WavReader"/> class.
            </summary>
            <param name="stm">The stream to read from.  The stream should be at the start of the file.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Multimedia.WavReader.GetDataStream">
            <summary>
            Gets a stream of possibly compressed sound data from the file.  This is a sub stream of the data within the
            stream used to construct the class.  Closing this stream will close the parent stream as well.
            </summary>
            <returns>A Stream of sound data</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.WavReader.Compression">
            <summary>
            Gets the compression used in the data.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.WavReader.Channels">
            <summary>
            Gets the total number of channels of sound.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.WavReader.SamplingRate">
            <summary>
            Gets the sampling rate of the sound data.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.WavReader.BytesPerSecond">
            <summary>
            Gets the playback rate in bytes per second.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.WavReader.BlockAlignment">
            <summary>
            Gets the block alignment of data in the file.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.WavReader.BitsPerSample">
            <summary>
            Gets the number bits per sample.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Multimedia.WavReader.ExtraFormatBytes">
            <summary>
            Gets extra bytes that may represent further compression or data interpretation information.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.IOpaqueDrawingList">
            <summary>
            This interface is meant to denote drawing lists that were imported from existing
            PDF content that could not be translated into IPdfRenderable objects.  Opaque drawing
            lists may be removed from their page or reordered within the list, but they cannot be
            put into any other list.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderableContainer">
            <summary>
            This interface is used for certain classes of rendering objects that may need to do meta-rendering.
            In such cases, an object should implement <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderableContainer"/>.  When it is rendered,
            it first have PreRender called, then Render, then PostRender.
            An object may not implement <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderableContainer"/> alone.  It must also implement
            <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderable"/>.
            
            For example, <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent"/> is a container of
            other renderer content and does no rendering of its own.  Instead, on PreRender it informs the
            renderer that marked content will follow.  The renderer will automatically pick up its DrawingList
            (since PdfMarkedContent also implements <c>IEumerable&lt;IPdfRenderable&gt;</c>) and render its
            contents, then on PostRender, it will inform the renderer that marked content is complete.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderableContainer.PreRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            This method is called before rendering happens.  This is an opportunity for the object to create or save
            information for later use or restoration.  The value returned is a memento that will be passed back to
            the object when <see cref="M:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderableContainer.PostRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,System.Object)"/> is called.
            </summary>
            <param name="r">The renderer.</param>
            <returns>A memento that will be sent back in <see cref="M:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderableContainer.PostRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,System.Object)"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderableContainer.PostRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,System.Object)">
            <summary>
            This method is called after rendering is complete.  This is an opportunity for the object to clean up
            previous work or restore prior state.  The value returned by <see cref="M:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderableContainer.PreRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)"/> is passed in
            the parameter <c>memento</c>.
            </summary>
            <param name="r">The r.</param>
            <param name="memento">The memento.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderable">
            <summary>
            Represents objects that can generate PDF document content,
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderable.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            </summary>
            <param name="r">The PdfPageRenderer for generating PDF.</param>
            <example>
            <code>
            public void GeneratePdf(PdfPageRenderer r)
            {
               w.DrawingSurface.Begin();
               w.DrawingSurface.AddRect(MyBounds); // place a rectangle
               w.DrawingSurface.Stroke(PdfLineStyle.Default, MyColor); // draw its outline in black
               w.DrawingSurface.End();
            }
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderable.Name">
            <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Authoring API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
            <value>
            The name of the object.
            </value>
            <example>
            <code>
            foreach (IPdfRenderable namedGroup in list.FindAll(item => item.Name == "Group") {
               ProcessGroup(namedGroup);
            }
            </code>
            </example>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance"/> represents the general characteristics of text on page,
            including font name, size, character spacing, leading, and so on.
            </summary>
            <remarks>
            The following are the default values for the class:
            <list>
            <item>
            <term>Matrix</term><description>The identity matrix.</description>
            </item>
            <item>
            <term>CharacterSpacing</term><description>0</description>
            </item>
            <item>
            <term>WordSpacing</term><description>0</description>
            </item>
            <item>
            <term>HorizontalScaling</term><description>100</description>
            </item>
            <item>
            <term>Leading</term><description>0</description>
            </item>
            <item>
            <term>RenderMode</term><description>FillText</description>
            </item>
            <item>
            <term>Rise</term><description>0</description>
            </item>
            <item>
            <term>FillColor</term><description>Gray 0 (ie, black)</description>
            </item>
            <item>
            <term>StrokeColor</term><description>null - no stroke, fill only</description>
            </item>
            <item>
            <term>FontSize</term><description>0</description>
            </item>
            <item>
            <term>FontName</term><description>null</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance"/> class with the given font and size in points.
            </summary>
            <param name="fontName">Name of the font from the document resources.</param>
            <param name="fontSize">Size of the font.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.Matrix">
            <summary>
            Gets or sets the font matrix.
            </summary>
            <value>
            The matrix.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.CharacterSpacing">
            <summary>
            Gets or sets the character spacing.
            </summary>
            <remarks>Spacing is the amount of space to add (or take away) between characters as they are placed on the page.  Negative numbers bring the characters closer.</remarks>
            <value>
            The character spacing.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.WordSpacing">
            <summary>
            Gets or sets the word spacing.
            </summary>
            <remarks>Spacing is the amount of space to add (or take away) between words as they are placed on the page.  Negative numbers bring the words closer.</remarks>
            <value>
            The word spacing.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.HorizontalScaling">
            <summary>
            Gets or sets the horizontal scaling of characters as they are placed on the page as a percentage. 100 is normal.  Less than 100 is narrower, greater is wider.
            </summary>
            <value>
            The horizontal scaling.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.Leading">
            <summary>
            Gets or sets the leading or spacing between lines.
            </summary>
            <value>
            The leading.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.FontName">
            <summary>
            Gets or sets the name of the font.  This is a resource name, not the font's name.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.FontSize">
            <summary>
            Gets or sets the size of the font in points.
            </summary>
            <value>
            The size of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.RenderMode">
            <summary>
            Gets or sets the render mode for the text.
            </summary>
            <value>
            The render mode.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.Rise">
            <summary>
            Gets or sets the rise, or how much characters sit above (or below) the baseline.  This is used for creating superscript or subscript writing.
            </summary>
            <value>
            The rise.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.FillColor">
            <summary>
            Gets or sets the fill color of the text.  This is only used in one of the text render modes that uses filling.
            </summary>
            <value>
            The fill color of the text.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfTextAppearance.StrokeColor">
            <summary>
            Gets or sets the stroke color of the text.  This is only used in one of the text render modes that uses stroking.
            </summary>
            <value>
            The stroke color of the text.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfNamedColorSpaceResource">
            <summary>
            PdfNamedColorSpaceResource is an internally used class representing stock PDF "device" colorspaces
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource">
            <summary>
            A resource representing a color space for use in a pdf image.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource">
            <summary>
            PdfResource is a base class for all document resources used in Generating PDF documents.
            These resource include fonts, images, page content templates, and color space definitions.
            
            Resources can represent large amounts of data that may be used by multiple pages within a document.
            By referring to them indirectly through resource managers allows the resources to be shared within
            the document.
            
            The PDF Generating toolkit defines the resource types and managers for each.  Client code will never
            need to define its own resource types.
            
            PdfResource on its own is never used except to define base capabilities and to create collection
            classes.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.Dispose">
            <summary>
            Disposes the resource.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResource"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource.#ctor(Atalasoft.PdfDoc.Generating.PdfColorSpaceType)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource.ColorSpaceType">
            <summary>
            Gets or sets the type of the color space.
            </summary>
            <value>
            The type of the color space.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource.IsCalibrated">
            <summary>
            Gets or sets a value indicating whether this instance is calibrated.
            </summary>
            <value>
            	<c>true</c> if this instance is calibrated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource.ColorSpaceHolder">
            <summary>
            Gets or sets the color space holder.
            </summary>
            <value>
            The color space holder.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics">
            <summary>
            This class contains tools for measuring text that is to be placed in a page in a PDF document.  Concrete versions of this
            class are constructed behind the scenes for client code.  It is unlikely that client code would ever need to create or
            construct a concrete version of this class.  FontBounds, Ascent, Descent, and Leading are measured in PDF font design units, in which
            glyph coordinates are laid out in a design grid that is 1000 units by 1000 units.  In practice, glyphs will go outside this
            grid for descender and for glyphs that project to the left (swashes, for example).  To convert these numbers to a particular point
            size, use this formula: final size = (size in PDF design units x font size in points) / 1000
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.MeasureText(System.Double,System.String,System.Int32,System.Int32)">
            <summary>
            Measures the given text in the provided font size in points.
            </summary>
            <param name="pointSize">Size of the font in points.</param>
            <param name="text">The text to be measured.</param>
            <param name="start">The start index of text to measure.</param>
            <param name="length">The number of characters to measure.</param>
            <returns>The size of the text provided.  In practice, this measurement represents what is known as the Advance Width of a given
            string.  The is the amount and the direction that the text origin would be moved by placing the text.  If the font represents a left to
            right writing system, the X value of the returned point will be set to "width" of the text and the Y value will be 0.  Vertical writing systems
            are not currently supported.</returns>
            <example>
            <code>
            PdfPoint size = metrics.MeasureText(12.0, "Alyssa P. Hacker", 10, 6); // measure 'Hacker'
            bool isLeftToRight = size.Width &gt; 0;
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.MeasureText(System.Double,System.String)">
            <summary>
            Measures the given text in the provided font size in points.
            </summary>
            <param name="pointSize">Size of the font in points.</param>
            <param name="text">The text to be measured.</param>
            <returns>The size of the text provided.  In practice, this measurement represents what is known as the Advance Width of a given
            string.  The is the amount and the direction that the text origin would be moved by placing the text.  If the font represents a left to
            right writing system, the X value of the returned point will be set to "width" of the text and the Y value will be 0.  Vertical writing systems
            are not currently supported.</returns>
            <example>
            <code>
            PdfPoint size = metrics.MeasureText(12.0, "Bivalve farming");
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.GetTextBounds(System.Double,System.String,System.Int32,System.Int32)">
            <summary>
            Gets bounding box that surrounds the text.
            </summary>
            <param name="pointSize">Size of the font in points.</param>
            <param name="text">The text to be measured.</param>
            <param name="start">The start index of text to measure.</param>
            <param name="length">The number of characters to measure.</param>
            <returns>A new PdfBounds object that represents the bounds of the text in points.  X will be 0.  Width will be the
            absolute value of the width of the string. Y will be the negative of the font's Descent.  Height will be the font's
            descent plus its ascent.  Vertical writing systems are not currently supported.</returns>
            <example>
            <code>
            PdfBounds bounds = metrics.GetTextBounds(12.0, "laminated writing desk", 0, 9); // measure 'laminated'
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.GetTextBounds(System.Double,System.String)">
            <summary>
            Gets bounding box that surrounds the text.
            </summary>
            <param name="pointSize">Size of the font in points.</param>
            <param name="text">The text to be measured.</param>
            <returns>
            descent plus its ascent.  Vertical writing systems are not currently supported.</returns>
            <example>
            <code>
            PdfBounds bounds = metrics.GetTextBounds(12.0, "Striling engine");
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.LineSpacing(System.Double)">
            <summary>
            Measures the line spacing for a font in a given point size.
            </summary>
            <remarks>
            This is equivalent to:
            <code>
            (Ascent - Descent + Leading) * pointSize / 1000.0
            </code>
            If Leading is less than or equal to 0, it will be replaced with 1.25 * Descent.
            </remarks>
            <param name="pointSize">Size of the point.</param>
            <returns>The line spacing in PDF units</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.GetCharMetrics(System.Char,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Gets the metrics for a given character using the specified transform.  This method is implemented by concrete
            instances of PdfFontMetrics.  Client code will not typically create subclasses of PdfFontMetrics.
            </summary>
            <param name="c">The character to measure.</param>
            <param name="fontTransfrom">The font transfrom.</param>
            <returns>The advance width for the given character.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.FontBounds">
            <summary>
            Gets the smallest bounding box that can surround all glyphs within the font.  Units are in PDF font design units.
            </summary>
            <value>
            The font bounds in PDF font design units.
            </value>
            <example>
            <code>
            PdfBounds bounds = metrics.FontBounds;
            double totalHeight = bounds.Height;
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.Ascent">
            <summary>
            Gets the ascent of the font in PDF font design units.
            </summary>
            <value>
            The ascent of the font in PDF font design units.
            </value>
            <example>
            <code>
            double ascent = metrics.Ascent;
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.Descent">
            <summary>
            Gets the descent of the font in PDF font design units.  The Descent is the distance that the font extends below the baseline of the font.  Descent is usually negative.
            </summary>
            <value>
            The descent of the font in PDF font design units.
            </value>
            <example>
            <code>
            double descent = metrics.Descent;
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontMetrics.Leading">
            <summary>
            Gets the recommended leading for this font in PDF font design units.  This should be the height of the gap
            between lines, not the distance between baselines of successive lines.  The distance between successive lines
            will be Ascent - Descent + Leading.
            </summary>
            <value>
            The leading of the font in PDF font design units.
            </value>
            <example>
            <code>
            double lineSpacing = metrics.Ascent - metrics.Descent + metrics.Leading;
            </code>
            </example>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource">
            <summary>
            PdfFontResource represents a typographic font that will be used for placing text on a page in
            a PDF document.  This object represents the font as a whole and not a rendering of the font in a
            specific size.  Font resources represent a single style of the font and not a family of fonts.
            For example, Basketball Overextended and Basketball Overextended Bold are considered to be two
            different fonts, even if conceptually they are in the same family.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.FromFile(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager,System.String)">
            <summary>
            Constructs a new font resource for the given font specified by a path.
            </summary>
            <param name="manager">The font resource manager used to determine embedding policy.</param>
            <param name="path">The path to the font object.  This file must at present be either a TrueType font or a OpenType font
            containing TrueType information.</param>
            <returns>a new PdfFontResource for the given font.</returns>
            <example>
            <code>
            PdfFontResource resource = PdfFontResource.FromFile(globalResources.Fonts, pathToUserFont); // will throw if font doesn't exist
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.FromFontName(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager,System.String)">
            <summary>
            Attempts to create a new font based on the name of the font.  If there is no matching font, this throw an exception.
            </summary>
            <param name="manager">The font resource manager used to determine embedding policy.</param>
            <param name="name">The name of the font family and its subfamily, for example "Courier New" or "Futura Condensed Italic"</param>
            <returns>a new PdfFontResource for the given font.</returns>
            <example>
            <code>
            PdfFontResource resource = PdfFontResource.FromFontName(globalResources.Fonts, "Franklin Semi Hemi Demi Bold");
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.FontFamily">
            <summary>
            Gets the name of the font's family.  For example, the font Armageddon Light would have the FontFamily "Armageddon"
            </summary>
            <example>
            <code>
            Console.WriteLine("Font family is " + fontResource.FontFamily);
            </code></example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.FontSubFamily">
            <summary>
            Gets the font sub family name such as "Bold" or "Condensed".
            </summary>
            <example>
            <code>
            Console.WriteLine("Font family is " + fontResource.FontSubFamily);
            </code></example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource.Metrics">
            <summary>
            Gets the an object that can be used for measuring text in the font.
            </summary>
            <example>
            <code>
            PdfFontMetrics mets = fontResource.Metrics;
            PdfPoint size = mets.MeasureText(12.0, "Dixon, Illinois");
            </code></example>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCodecDetails">
            <summary>
            The settings for the pdf jpeg2000 codec
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCodecDetails">
            <summary>
            A class to hold codec details
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCodecDetails.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCodecDetails"/> class.
            </summary>
            <param name="quality">The quality.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCodecDetails.Quality">
            <summary>
            Gets the quality.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateManager">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateManager"/> is a <see cref="T:Atalasoft.PdfDoc.PdfResourceManager"/> instance used for
            managing <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource"/> objects which are used to hold <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/>
            objects.  You will never need to make one of these objects yourself.  There is an instance of the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateManager"/> class in Templates property of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1">
            <summary>
            PdfResourceManager is a generic type that is used for defining the base capabilities and implementations
            of all classes of resource manager.
            
            Specific implementations of PdfResourceManager are defined in the PDF Generating toolkit and need not be created
            by client code.
            
            Resources are referred to by a string name.  The actual name itself is not important and will not appear directly
            in any produced PDF.  The name is used to distinguish one resource from another.  Clients may choose any name they wish
            as long as different resources of the same type have different names.
            </summary>
            <typeparam name="T">The type of resource that is to be managed, must be a subclass of PdfResource</typeparam>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1"/> class.
            </summary>
            <param name="autoPrefix">The auto prefix.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.NextName">
            <summary>
            Returns the next available auto-generated name for this resource.
            <code>
            string name = someResourceManager.NextName();
            someResourceManager.Add(name, someResource);
            </code>
            </summary>
            <returns>The next available name</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Add(`0)">
            <summary>
            Adds the specified resource with an auto-generated name.
            </summary>
            <param name="resource">The resource to add.</param>
            <returns>A unique name that is associated with the given resource</returns>
            <example>
            <code>
            string image = globalResources.Images.Add(myImageResource);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Add(System.String,`0)">
            <summary>
            Adds a resource to the resource manager.  Throws ArgumentException if a resource with the same name is already present.
            </summary>
            <param name="name">The name of the resource to add.</param>
            <param name="resource">The resource that will be added.</param>
            <example>
            <code>
            globalResources.Fonts.Add("times", PdfFontResource.FromFontName(globalResources.Fonts, "Times New Roman"));
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Get(System.String)">
            <summary>
            Gets a resource with the given name.  Throws an exception if there is no resource present with that name.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <returns>The found resource</returns>
            <example>
            <code>
            PdfFontResource font = globalResources.Get("plainfont0");
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Contains(System.String)">
            <summary>
            Determines whether or not the resource is present.
            </summary>
            <param name="name">The name of the resource to look up.</param>
            <returns>
              <c>true</c> if the manager contains the specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Remove(System.String)">
            <summary>
            Removes the resource of the specified name.  Throws an ArgumentException if name is not present.
            </summary>
            <param name="name">The name of the resource to remove.</param>
            <returns>The resource associated with name.</returns>
            <example>
            <code>
            PdfFontResource resource = globalResources.Fonts.Remove("titlefont");
            resource.Dispose(); // dispose this if it's no longer needed.
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.TryGet(System.String,`0@)">
            <summary>
            Tries to get the specified resource.
            </summary>
            <param name="name">The name of the resource to get.</param>
            <param name="value">The resource retrieved.</param>
            <returns><c>true</c> if name is present; <c>false</c>otherwise.</returns>
            <example>
            <code>
            PdfFontResource font = null;
            if (!globalResources.Fonts.TryGet("headingfont", out font))
                throw new Exception("unable to get heading font");
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Merge(Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager{`0},Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.MergeRenameNotifier)">
            <summary>
            Merges the set of resources, other, into this ResourceManager using the selector to resolve name conflicts.
            </summary>
            <param name="other">The set of other resources to be merged.</param>
            <param name="notifier">The selector to resolve conflicts.  If selector is <c>null</c>, the original resource will be kept.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.ResourcesMatch(`0,`0)">
            <summary>
            Compares two resources for equality.  Default implementation returns false.  Subclasses should override this method
            </summary>
            <param name="one">The first resource.</param>
            <param name="two">The second resource.</param>
            <returns>true if the resources match, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Dispose">
            <summary>
            Disposes all resources contained in this resource manager
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.ResourceNames">
            <summary>
            Gets the resource names for this resource manager.
            <example>
            <code>
            foreach (string name in globalResources.Images.ResourceNames) {
                Console.WriteLine("resource name: " + name);
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.ResourceClass">
            <summary>
            Gets the resource class.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceManager`1.Item(System.String)">
            <summary>
            Gets the resource with the specified s.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateManager.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateManager"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateManager.ResourcesMatch(Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource,Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource)">
            <summary>
            Compares two resources for equality.  Default implementation returns false.  Subclasses should override this method
            </summary>
            <param name="one">The first resource.</param>
            <param name="two">The second resource.</param>
            <returns>
            true if the resources match, false otherwise.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateManager.Add(Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate)">
            <summary>
            Adds the specified template.
            </summary>
            <param name="template">The template.</param>
            <returns>The added resource</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateManager.Add(System.String,Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate)">
            <summary>
            Adds the specified template, using the provided name.
            </summary>
            <param name="name">The name.</param>
            <param name="template">The template.</param>
            <remarks>Throws a PDF Exception if a resource exists with that name.</remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateManager.ResourceClass">
            <summary>
            Gets the resource class.  Returns <see cref="F:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass.Templates"/>.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource"/> is a document-level resource that
            represents a reusable <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> on a
            page or used as an appearance for an annotation.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource.#ctor(Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource"/> class from the given <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/>.
            </summary>
            <remarks>The template must be non-null.</remarks>
            <param name="template">The template.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Templates.PdfTemplateResource.Template">
            <summary>
            Gets the template.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox">
            <summary>
            DynamicPdfTextBox is a text shape that is used to take a variable amount of space. By providing a maximum height and maximum width and the text instructions, the DynamicPdfTextBox will provide the minimum amount of space required to display the information through its MinimumBounds property.
            </summary>
            <example>
            DynamicPdfTextBox box = new DynamicPdfTestBox(startPoint, "Font0", 12.0, 400, 500, textString, document.GlobalResources.Fonts);
            if(box.MinimumBounds.Height &lt; 200)
            page.DrawingList.Add(smallBorderShape)
            else
            page.DrawingList.Add(largeBorderShape)
            </example>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape">
            <summary>
            The base class for making pdf text shapes. It provides the basic settings to control fonts and transformations automatically.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape">
            <summary>
            A base class for any repeatable composite drawing action. To use this class inherit from PdfBaseShape then override the CloneInstance and DrawShape methods to get the PdfPageRenderer object.
            </summary>
            <example>
            <code>
            public class RegularPolygon : PdfBaseShape
            {
            public RegularPolygon(PdfPoint center, double radius, int sides):base(PdfColorFactory.FromGray(0.0),5.0)
            {
            if (sides &lt; 3) throw new ArgumentException("Polygons must have 3 sides");
            GeneratePoints(center, radius, sides);
            Center = center;
            Radius = radius;
            Sides = sides;
            }
            public PdfPoint Center { get; private set; }
            public double Radius { get; private set; }
            public int Sides { get; private set; }
            private void GeneratePoints(PdfPoint center, double radius, int sides)
            {
            Points = new List&lt;PdfPoint&gt;();
            PdfPoint currPoint = new PdfPoint(0, radius);
            Points.Add(currPoint + center);
            PdfTransform transform = PdfTransform.Rotate(2 * Math.PI/(double)sides);
            for (int i = 1; i &lt; sides; i++)
            {
            currPoint = transform.Transform(currPoint);
            Points.Add(currPoint + center);
            }
            }
            public List&lt;PdfPoint&gt; Points { get; set; }
            protected override PdfBaseShape CloneInstance()
            {
            return new RegularPolygon(Center, Radius, Sides);
            }
            protected override void DrawShape(PdfPageRenderer r)
            {
            bool first = true;
            PdfPath path = new PdfPath(this);
            foreach (PdfPoint p in Points)
            {
            if (first) { first = false; path.MoveTo(p); }
            else { path.LineTo(p); }
            }
            path.Close();
            path.GeneratePdf(w);
            }
            }
            </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> class.
            </summary>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The width of outlines.</param>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> class.
            </summary>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The width of outlines.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> class.
            </summary>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates the PDF.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.GenerateTransform">
            <summary>
            Generates the default transform based on Scale, Rotate, and Translate.
            </summary>
            <returns>the PdfTransform based on the Scale, Rotate, and Translate properties.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.CopyBaseShapePropertiesTo(Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape,System.Boolean)">
            <summary>
            Copies the base shape properties to the parameter shape.
            </summary>
            <param name="other">The parameter shape.</param>
            <param name="copyTransform">if set to <c>true</c> [copy transform].</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Notifies a resource consumer that a resource was renamed.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original resource.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.OnResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Called when a resource in the base shape has been renamed.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original resource.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.ResourcesUsed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Reports a list of all resources consumed by the object of the given class.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.OnResourcesRequested(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Called when the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> is requested to report resources used.  If client code
            consumes resources, it should override this method combining its results with those of
            <c>base.OnResourceRequested</c>
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>
            The style.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.OutlineColor">
            <summary>
            Gets or sets the color of the outline.
            </summary>
            <value>
            The color of the outline.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.FillColor">
            <summary>
            Gets or sets the color of the fill.
            </summary>
            <value>
            The color of the fill.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Clip">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> shape will clip.
            </summary>
            <value>
              <c>true</c> if the shape will clip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location of the shape.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale of the shape.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Rotation">
            <summary>
            Gets or sets the rotation in degrees.
            </summary>
            <value>
            The rotation of the shape in degrees.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape.Name">
            <summary>
            Gets or sets the name of the IPdfRenderable object.
            </summary>
            <value>
            The name of the IPdfRenderable object.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape"/> class.
            </summary>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.#ctor(System.String,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape"/> class.
            </summary>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="lineWidth">Width of the line.</param>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.#ctor(Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape"/> class.
            </summary>
            <param name="copy">The PdfBaseTextShape to copy from.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.GetTextStartOffset(System.Double,System.Double)">
            <summary>
            Gets the text start offset for a line of text. This is used to align text based on the alignment.
            </summary>
            <param name="textLength">Length of the text.</param>
            <param name="spaceLength">Length of the space.</param>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.GetTextStartOffset(System.Double,System.Double,Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment)">
            <summary>
            Gets the text start offset for a line of text. This is used to align text based on the alignment.
            </summary>
            <param name="textLength">Length of the text.</param>
            <param name="spaceLength">Length of the space.</param>
            <param name="alignment">The alignment.</param>
            <returns>The offset for the line start</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates the PDF display list objects.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.OnResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Called when a resource in the shape has been renamed.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original resource.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.OnResourcesRequested(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Called when the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> is requested to report resources used.  If client code
            consumes resources, it should override this method combining its results with those of
            <c>base.OnResourceRequested</c>
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>
            The size of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.HorizontalScaling">
            <summary>
            Gets or sets the horizontal scaling.
            </summary>
            <value>
            The horizontal scaling value in percent (100 is default).
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.WordSpacing">
            <summary>
            Gets or sets the word spacing.
            </summary>
            <value>
            The word spacing in pdf text points (0 is default).
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.RenderMode">
            <summary>
            Gets or sets the render mode.
            </summary>
            <value>
            The render mode.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape.Alignment">
            <summary>
            Gets or sets the alignment.
            </summary>
            <value>
            The alignment.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.String,System.Double,System.Double,System.Double,System.String,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox"/> class.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="width">The width.</param>
            <param name="maximumHeight">The maximum height.</param>
            <param name="text">The text.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,System.Double,Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox"/> class.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="width">The width.</param>
            <param name="maximumHeight">The maximum height.</param>
            <param name="text">The styled text input.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A clone of this shape</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.LockedWidth">
            <summary>
            Gets the width of the box.
            </summary>
            <value>
            The width of the box.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.MaximumHeight">
            <summary>
            Gets the maximum height of the box.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.DynamicPdfTextBox.MinimumBounds">
            <summary>
            Gets the minimum bounds of the box calculated from the given text.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.IPdfTextContainer">
            <summary>
            An interface for shapes that contain text.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.IPdfTextContainer.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1">
            <summary>
            This object represents the information provided on an Add or Remove event to an ObservableList.
            </summary>
            <typeparam name="T">The type of the object in the list under observation.</typeparam>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="isAdd">if set to <c>true</c> [is add].</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1.IsAdd">
            <summary>
            Gets a value indicating whether this instance is an add event or a remove event.
            </summary>
            <value>
              <c>true</c> if this instance is an add event; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1.Item">
            <summary>
            Gets the item that is being added or removed.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1">
            <summary>
            Represents a list that generates events when objects are being added or removed.
            Hooking into the ItemChanged event will allow an application to observe when an item
            has been added or removed.  On a set operation through the array accessor both a remove
            and add event are fired.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.ItemChanged">
            <summary>
            Event for hooking to the list to observe add/remove operations
            <code>
            list.ItemChanged += new EventHandler&lt;AddRemoveEventArgs&lt;MyItemType&gt;&gt;(MyEventHandler);
            </code>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.OnItemChanged(Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs{`0})">
            <summary>
            Raises the <see cref="E:ItemChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.AddRemoveEventArgs`1"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.  Fires the
            ItemChanged event with an "add".
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index. Fires the ItemChanged event with
            a "remove".
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>. Fires an ItemChanged "add" event.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.  Fires ItemChanged "remove"
            events for every item in the list.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array"/> is null.
              </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="arrayIndex"/> is less than 0.
              </exception>
              
            <exception cref="T:System.ArgumentException">
              <paramref name="array"/> is multidimensional.
            -or-
              <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <typeparamref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            Fires the ItemChanged event with a "remove".
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes all the elements in the list for which pred returns true.  Note that each element will be visited twice.
            <code>
            list.RemoveAll(shape => shape is PdfPath); // remove all paths from the list
            </code>
            </summary>
            <param name="pred">The pred.</param>
            <returns>The number of items removed.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.  Fires an ItemChanged event with a "remove" and then an "add".
            </summary>
            <returns>
            The element at the specified index.
              </returns>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.ObservableList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine">
            <summary>
            A pdf text object which writes text and clips to a rectangle. This object is best used to make spreadsheet like trimming of long strings to fit into a cell of a table.
            </summary>
            <example>
            <code>
            for(int i=0; i &lt; 5;i++)
            {
                PdfClippedTextLine line = new PdfClippedTextLine(TextValues[i], new PdfBounds(100*i,200,100,50), doc.GlobalResources.Fonts); 
                doc.DisplayList.Add(line);
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.#ctor(System.String,System.String,System.Double,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="textStartPoint">The text start point.</param>
            <param name="clipBounds">The clip bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.#ctor(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine"/> class while intelligently figuring out fontsize and positioning.
            </summary>
            <param name="text">The text.</param>
            <param name="fontName">Name of the font.</param>
            <param name="bounds">The bounds.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates the PDF display list objects.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfClippedTextLine.ClipBounds">
            <summary>
            Gets or sets the clip bounds.
            </summary>
            <value>
            The clip bounds.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent"/> represents an area within drawing on a PDF page or in a
            <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> that is marked as having
            special meaning.  For example, certain classes of annotations that have customized appearances
            use "marked content" to set aside an area that reserved for customizable or user-entered text.
            </summary>
            <example>
            In order to create text marked for an annotation, you might do this:
            PdfMarkedContent content = new PdfMarkedContent("Tx");
            PdfTextLine line = new PdfTextLine(myFontName, 10.0, "This is marked content", new PdfPoint(36, 700));
            content.DrawingList.Add(line);
            page.DrawingList.Add(content);
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent"/> class.  <see cref="P:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.Tag"/> will be "unknown".
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent"/> class with the given tag.
            </summary>
            <remarks>The tag must be non-null and non-empty.</remarks>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.PreRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            This method is called before rendering happens.  This is an opportunity for the object to create or save
            information for later use or restoration.  The value returned is a memento that will be passed back to
            the object when <see cref="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.PostRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,System.Object)"/> is called.
            </summary>
            <param name="r">The renderer.</param>
            <returns>A memento for rendering, passed back in <see cref="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.PostRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,System.Object)"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            </summary>
            <param name="r">The PdfPageRenderer for generating PDF.</param>
            <example>
              <code>
            public void GeneratePdf(PdfPageRenderer r)
            {
            w.DrawingSurface.Begin();
            w.DrawingSurface.AddRect(MyBounds); // place a rectangle
            w.DrawingSurface.Stroke(PdfLineStyle.Default, MyColor); // draw its outline in black
            w.DrawingSurface.End();
            }
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.PostRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,System.Object)">
            <summary>
            This method is called after rendering is complete.  This is an opportunity for the object to clean up
            previous work or restore prior state.  The value returned by <see cref="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.PreRender(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)"/> is passed in
            the parameter <c>memento</c>.
            </summary>
            <param name="r">The r.</param>
            <param name="memento">The memento.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Notifies that the resource was renamed.
            </summary>
            <param name="gr">The resources.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.ResourcesUsed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Reports a list of all resources consumed by the object of the given class.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.Tag">
            <summary>
            Gets or sets the tag to the value specified.
            </summary>
            <remarks>The tag must be non-null and non-empty.</remarks>
            <value>
            The tag.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.Name">
            <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Authoring API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
            <value>
            The name of the object.
            </value>
            <example>
              <code>
            foreach (IPdfRenderable namedGroup in list.FindAll(item =&gt; item.Name == "Group") {
            ProcessGroup(namedGroup);
            }
              </code>
              </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent.DrawingList">
            <summary>
            Gets the drawing list for the marked content.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTable">
             <summary>
             An object to output object data in a table format to a PdfGeneratedDocument.    
             </summary>
             <example>
             <code>
             // constructor takes the PdfBounds for the table, the default font type, and font size
             PdfTable productTable = new PdfTable(new PdfBounds(10, 100, 500, 600), "Arial", 6);
             
             // create the table columns
             // the columns are shown in the order they are added to the table
             // add a column, pass the key, display Text, and column Width
             productTable.Columns.Add(new PdfTableColumn("SKU", "Product Code", 50));
             
             // if the width is not specified, the width will be calculated by using the average of what width is left 
             productTable.Columns.Add(new PdfTableColumn("Name", "Product Name"));
            
             productTable.Columns.Add(new PdfTableColumn("Quantity", "Quantity", 25));
             productTable.Columns.Add(new PdfTableColumn("UnitPrice", "Price", 50));
            
             // specify the BorderStyle,BorderWidth, and BorderColor
             // BorderStyle options: Grid, Vertical, Horizontal, Outline, None
             productTable.BorderStyle = PdfTableBorderStyle.Vertical;
             productTable.BorderWidth = .5;
             productTable.BorderColor = PdfColorFactory.FromColor(System.Drawing.Color.Black);
            
             List&lt;Product&gt; productList = CreateProductList();
             productTable.AddRows(productList.GetEnumerator());
            
             // create the Pdf doc and page to draw to
             PdfGeneratedDocument pdfDoc = new PdfGeneratedDocument();
             PdfGeneratedPage page = PdfDefaultPages.Letter;
            
             // populate the table with the data collection
             productTable.Fill(pdfDoc.Resources.Fonts);
            
             // add the table to the page
             page.DrawingList.Add(productTable);
             pdfDoc.Pages.Add(page);
             </code>
             </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTable"/> class.
            </summary>
            <param name="tableBounds">The bounds of the table</param>
            <param name="defaultFontName">Name of the default font</param>
            <param name="defaultFontSize">Default font size</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Fill(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
            <summary>
            Fills the specified table with rows using the PdfTableInput enumerator 
            This method must be called before the table attempts to render. This fills the table with the rows provided,
            it will stop at the point the table bounds height has been reached.
            </summary>     
            <param name="fontManager">The font manager to use for resources.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates the PDFTable. Draws each row in the table
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.GetNextRowLocation(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double)">
            we calculate the NextRow location by taking the starting Y location and subtracting 
            the number of rows already added TO THE PAGE times the height of each row
            this will give us the location of the NEXT row        
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.AddRows(System.Collections.IEnumerator)">
            <summary>
            <![CDATA[
            Add row data to the table. Pass an enumerator for a collection of items.  Can also be an enumerator of a List<Dictionary<string,string>> object.
            ]]>
            </summary>
            <example>
            <code>
            <![CDATA[
            List<Product> productList = CreateProductList();
            productTable.AddRows(productList.GetEnumerator());
            
            //Or
                    
            Dictionary<string, string> productData = new Dictionary<string, string>();
            productData.Add("Name", productName);
            productData.Add("SKU", productSku);
            productData.Add("Quantity", quantity.ToString());
            productData.Add("UnitPrice", unitPrice.ToString("C", CultureInfo.CurrentCulture));
            productData.Add("CreatedDate", createdDate.ToString("d"));
            productData.Add("TotalPrice", (quantity * unitPrice).ToString("C", CultureInfo.CurrentCulture));
            List<Dictionary<string, string>> productList = new List<Dictionary<string, string>>();
            productList.add(productData);
            productTable.AddRows(productList.GetEnumerator());
            ]]>
            </code>
            </example>
            <param name="en">An enumerator for the data collection</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.GetResourceName(System.String)">
            <summary>
            Keep track of font resources and return the internal resource name 
            </summary>
            <param name="fontName">Font name to use</param>        
            <returns>The internal resource name for the font</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Clone">
            <summary>
            Copy the PdfTable object to a new instance. 
            Reuses the Font Resource manager. Reuses the Ta
            Does not copy table rows.
            </summary>
            <returns><see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTable"/></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.ShowColumnHeadingRow">
            <summary>
            Get/sets whether to draw the a heading row for the table. Default is true.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.HasMoreRows">
            
             <summary>
             Returns true if there are more rows to draw for the table. Check this after the Fill() method to see if all the rows were written to the table.
             </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.ActualHeight">
            <summary>
            returns the height of the filled table. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Name">
            <summary>
            Gets/sets the name of the IPdfRenderable object.
            </summary>
            <value>
            The name of the IPdfRenderable object.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Bounds">
            <summary>
            Gets/sets the bounds for the table
            </summary>
            <value>The bounds to use for the table</value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Columns">
            <summary>
            Returns the columns already set for the PdfTable. See <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn"/>
            </summary>
            <returns>List of  columns set for the table. See <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn"/></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.LineHeight">
            <summary>
            Gets/sets the height of each row in the table.
            If text has multiple lines the row height will be multiplied by the number of lines.
            The default row height is calculated based on the font type and font size specified.
            </summary>
            <value>The row height for each rendered row.</value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.BorderWidth">
            <summary>
            Gets/sets the width the border should be drawn. This applies to all the lines that are drawn for the table
            The default border width is 1.
            </summary>
            <value>The borderwidth of the gridlines.</value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.FontName">
            <summary>
            Gets/sets the name of the font to be used
            </summary>
            <value>
            The name of the font to use for all text in the table.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.HeaderFontName">
            <summary>
            Gets or sets the name of the header font.  If set to null, when <see cref="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.Fill(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)"/> is called, PdfTable will
            attempt to find a font named <see cref="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.FontName"/> + " Bold" in the system (creating a font resource if needed),
            otherwise it will use a font named by HeaderFontName.
            </summary>
            <value>
            The name of the header font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.FontSize">
            <summary>
            Gets/sets the size of the font.
            </summary>
            <value>
            The size of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.TextPaddingLeft">
            <summary>
            The padding from the left margin to the start of the text. This will apply to the entire table. 
            If there is a column TextPaddingLeft defined it will override this value.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.TextPaddingRight">
            <summary>
            The padding from the end of the text to the right margin. This will apply to the entire table
            If there is a column TextPaddingRight defined it will override this value.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.BorderColor">
            <summary>
            Gets/sets the color to draw the border grid lines.        
            The default border color is black.
            </summary>
            <example>
            <code>
            pdfTable.BorderColor = PdfColorFactory.FromColor(System.Drawing.Color.Black);
            </code>
            </example>        
            <value>
            A <see cref="T:Atalasoft.PdfDoc.Generating.IPdfColor"/> color the border gridlines should draw
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTable.BorderStyle">
            <summary>
            The border style for the table. See <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle"/>
            The default border style is None.
            Border options are: Grid,Vertical,Horizontal,Outline, None.
            </summary>
            <example>
            <code>
            pdfTable.BorderStyle = PdfTableBorderStyle.Vertical;
            </code>
            </example>
            <value>A <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle"/> to render the gridlines</value>
            
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle">
            <summary>
            Border style options available for the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTable"/>. To be used to set the PdfTable.BorderStyle property.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.None">
            <summary>
            Draw no border. No vertical column lines, no horizontal row lines
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.Vertical">
            <summary>
            Draw only vertical column lines
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.Horizontal">
            <summary>
            Draw only horizontal row lines
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.Outline">
            <summary>
            Draw only outside border. No vertical column lines and NO horizontal row lines
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle.Grid">
            <summary>
            Draws vertical column lines and horizontal row lines and outside border lines
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn">
            <summary>
            Used to define the columns for the PdfTable
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn"/> class.
            The key should match the property name or Dictionary key for the objects.
            </summary>
            <param name="key">Key for column. This should be the same as the property name of the object</param>
            <param name="displayText">Text to show in table</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.#ctor(System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn"/> class.
            The key should match the property name or Dictionary key for the objects.
            </summary>
            <param name="key">Key for column. This should be the same as the property name of the object</param>
            <param name="displayText">Text to show in table column header</param>
            <param name="columnWidth">The width the column should span</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.#ctor(System.String,System.String,System.Double,Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn"/> class.
            The key should match the property name or Dictionary key for the objects.
            </summary>
            <param name="key">Key for column. This should be the same as the property name of the object or Dictionary&lt;string,string&gt; key.</param>
            <param name="displayText">Text to show in table column header</param>
            <param name="columnWidth">The width the column should span</param>
            <param name="textAlignment">The horizontal alignment for the column text</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.#ctor(System.String,System.String,System.Double,Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn"/> class.
            The key is used to do a lookup in a collection or Dictionary for property values.
            </summary>
            <param name="key">Key for column. This should be the same as the property name of the object or Dictionary&lt;string,string&gt; key.</param>
            <param name="displayText">Text to show in table column header</param>
            <param name="columnWidth">The width the column should span</param>
            <param name="textAlignment">The horizontal alignment for the column text</param>
            <param name="textPaddingLeft">The amount of padding to the left of the text for the column</param>
            <param name="textPaddingRight">The amount of padding to the right of the text for the column</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.Clone">
            <summary>
            Creates and returns a new instance of the PdfTableColumn
            </summary>
            <returns>A copy of this column.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.DisplayText">
            <summary>
            Text that will display in the column heading
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.Key">
            <summary>
            The key is used to do a lookup in a collection or Dictionary for property values.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.Width">
            <summary>
            Width of the column
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.TextAlignment">
            <summary>
            Horizontal alignment for the text in the column
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.TextPaddingLeft">
            <summary>
            Get/sets the padding to the left of text for the column
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.TextPaddingRight">
            <summary>
            Get/sets the padding to the right of text for the column
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn.TextStyle">
            <summary>
            The text style to apply to the column
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableGridLines">
            <summary>
            class that draws the vertical and horizontal grid lines for a PdfTable
            </summary>
            
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableGridLines.#ctor(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection)">
            <summary>
            pass items needed to calculate and draw the grid lines
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableGridLines.#ctor(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection,Atalasoft.PdfDoc.Generating.Shapes.PdfTableBorderStyle,Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            pass items needed to calculate and draw the grid lines
            </summary>
            <param name="columns"></param>
            <param name="borderStyle">The type of grid lines that should be drawn for the table</param>
            <param name="tableBounds">When the grid lines should be drawn</param>
            <param name="borderColor">The color the border lines should be drawn</param>
            <param name="borderWidth">The width the border should be drawn</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableGridLines.GetVerticalColumnGridLines(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            used to draw the gridlines for each column, checks the table's BorderStyle to determine exactly which lines to draw.
            </summary>     
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableGridLines.GetHorizontalGridLine(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Creates a horizontal line by changing the X coordinate from the left side of the bounds to the right side
            </summary>
            <param name="colRectangleBounds"></param>
            <returns>A horizontal grid line for the bounding box.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow">
            <summary>
            Draws a table row. This class is used by the PdfTable to render a row    
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.#ctor(Atalasoft.PdfDoc.Generating.Shapes.PdfTable,System.Double,System.String,System.Double,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
            <summary>
            Initializes a new instance. Allows the width to be set.
            </summary>
            <param name="parentTable">the table to which the row belongs</param>
            <param name="rowWidth">Total width of the row.</param>
            <param name="fontName">Name of the font to use for the text.</param>
            <param name="fontSize">Size of the font to use for the text.</param>        
            <param name="fontManager">Font Manager for the table row</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.#ctor(Atalasoft.PdfDoc.Generating.Shapes.PdfTable,System.Double,System.String,System.Double,System.Double,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseTextShape"/> class.
            </summary>
            <param name="parentTable">the table to which the row belongs</param>
            <param name="rowWidth">Total width of the row.</param>
            <param name="fontName">Name of the font to use for the text.</param>
            <param name="fontSize">Size of the font to use for the text.</param>
            <param name="lineWidth">Width of the line.</param>  
            <param name="fontManager">Font Manager for the table row</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.GetTextBox(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
            <summary>
            if there was textStyle added to the control create a PdfStyledTextBox and render the styled text
            if there was NOT any textStyle added, use a regular textbox
            </summary>
            <param name="textboxBounds">The bounds for the text</param>
            <param name="text">The text to be written to the table</param>
            <param name="column">The PdfTableColumn. Contains properties to render the text</param>
            <returns>The renderable text box</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.SetRowData(System.Object[])">
            <summary>
            Sets the data that will be displayed in the table row
            </summary>
            <param name="rowdata"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.Clone">
            <summary>
            Clones the PdfTableRow. Copies all settings and data
            </summary>
            <returns>The copy of this PdfTableRow</returns>
            
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates the PDF.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.Columns">
            <summary>
            the columns for the table
            contains width and text alignment
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.Name">
            <summary>
            Gets or sets the name of the IPdfRenderable object.
            </summary>
            <value>
            The name of the IPdfRenderable object.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.IsFirstRow">
            <summary>
            Property to indicate the row is the first in a collection of rows
            </summary>
             <value>
            whether the row is the first in the collection
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.IsLastRow">
            <summary>
            Property to indicate the row is the last in a collection of rows
            </summary>
             <value>
            whether the row is the last in the collection
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>
            The size of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.HorizontalScaling">
            <summary>
            Gets or sets the horizontal scaling.
            </summary>
            <value>
            The horizontal scaling value in percent (100 is default).
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.WordSpacing">
            <summary>
            Gets or sets the word spacing.
            </summary>
            <value>
            The word spacing in pdf text points (0 is default).
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.Width">
            <summary>
            the width the row should span
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.Height">
            <summary>
            The height of the row
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location of the shape.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.BorderColor">
            <summary>
            gets or sets the color to draw the grid lines
            </summary>
            <value>
            The color the gridlines should draw
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.BorderStyle">
            <summary>
            The border style for the row
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.BorderWidth">
            <summary>
            gets/sets the width the border should be drawn
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.TextPaddingLeft">
            <summary>
            The padding from the left margin to the start of the text. This will apply to the entire table.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableRow.TextPaddingRight">
            <summary>
            The padding from the end of the text to the right margin. This will apply to the entire table
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableInput">
            <summary>
            Used to feed PdfTable input rows. Keeps track of rows added to the table and allows for spanning data across multiple <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTable"/>.
            </summary>
            <example>
            <code>
             List&lt;Product&gt; productList = CreateProductList();
             PdfTableInput tableInputRows = new PdfTableInput();
             tableInputRows.AddRows(productList.GetEnumerator());
             PdfTable productTable = new PdfTable(new PdfBounds(10, 100, 500, 600), "Arial", 6);
             productTable.Fill(tableInputRows, pdfDoc.Resources.Fonts);
            </code>
            </example>
            
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableInput.AddRows(System.Collections.IEnumerator)">
            <summary>
            Sets the enumerator for the table input.
            </summary>
            <param name="en">Enumerator to use</param>        
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableInput.GetNextRow(System.Boolean)">
             <summary>
             Method that retrieves the next item in the enumerator based on whether it is the first row
             we need this because we check each row AFTER its been retrieve to see if it fits in the table bounds
             if it does not then the next instance of the table(isFirstRowOfTable==true AND this.IsFirstItemInEnumation == false) needs to get the 
             current item and not make a call to NextRow
             
             basically if its the first row of a table(and not the very first row of the enumeration) we want to pick up where we left off
             in the enumeration.
            
             </summary>
             <param name="isFirstRowOfTable"></param>
             <returns>The next row</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableInput.HasMoreRows">
            <summary>
            check this property to see if there are more rows to draw for the table        
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableInput.NextRow">
            <summary>
            returns the next item of the enumerator and 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableInput.IsFirstItemInEnumation">
            <summary>
            Determines if at the start of the enumerator
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape">
            <summary>
            The shape used to place an image on a page
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape.#ctor(System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape"/> class.
            </summary>
            <param name="templateName">Name of the template in your document's Resources.</param>
            <param name="bounds">The bounds of the template.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape.#ctor(Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape"/> class copying from the supplied <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape"/>
            </summary>
            <param name="other">The shape to copy from.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of the shape</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape.OnResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Called when resource has been renamed.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original resource.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape.OnResourcesRequested(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Called when the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> is requested to report resources used.  If client code
            consumes resources, it should override this method combining its results with those of
            <c>base.OnResourceRequested</c>
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape.TemplateName">
            <summary>
            Gets or sets the name of the template.
            </summary>
            <value>
            The name of the template.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PathTextStyle">
            <summary>
            The style of how the text is broken to apply to the path.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PathTextStyle.Letter">
            <summary>
            break per letter
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PathTextStyle.Word">
            <summary>
            break per word
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath">
            <summary>
            A PdfBaseShape to perform complex custom direction text writing
            </summary>
            <example>
            <code>
                        PdfGeneratedDocument doc = new PdfGeneratedDocument();
                   PdfGeneratedPage page = PdfDefaultPages.Letter;
                   GlobalResources globalRes = new GlobalResources();
                   doc.Resources = globalRes;
                   globalRes.Fonts.Add("Arial", PdfFontResource.FromFontName(globalRes.Fonts, "Arial"));
                   doc.Pages.Add(page);
                   PdfTextPath path = new PdfTextPath();
                   path.PathStyle = PathTextStyle.Letter;
                   path.FontName = "Arial";
                   path.FontSize = 18.0;
                   path.Text = "This Text is following a path and will soon find itself at the end of the path";
                   path.LineTo(new PdfPoint(100, 150));
                   path.CurveTo(new PdfPoint(100, 250), new PdfPoint(200, 250), new PdfPoint(200, 150));
                   path.LineTo(new PdfPoint(300, 40));
                   path.CurveTo(new PdfPoint(340, 0), new PdfPoint(340, 0), new PdfPoint(380, 40));
                   path.CurveTo(new PdfPoint(380, 100), new PdfPoint(380, 100), new PdfPoint(600, 40));
                   page.DrawingList.Add(path);</code></example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.MoveTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Moves to a point in pdf space
            </summary>
            <param name="p">The destination point</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.LineTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Draws a line from the previous point to the destination point
            </summary>
            <param name="p">The destination point</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.CurveTo(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Draws a curve from the previous point to the destination point using two bezier control points
            </summary>
            <param name="sourceControlPoint">The source control point.</param>
            <param name="destinationControlPoint">The destination control point.</param>
            <param name="destinationPoint">The destination point.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of the shape</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.PathStyle">
            <summary>
            Gets or sets the path style.
            </summary>
            <value>
            The path style.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextPath.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape">
            <summary>
            The shape for drawing Postnet style barcodes. 
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.#ctor(System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of the shape</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r"></param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PostnetBarcodeShape.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection">
            <summary>
            Collection of table columns, added methods to calculate widths and clone the column collection
            </summary>
            
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.IndexOf(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
            <summary>
            returns the index of the item
            </summary>
            <param name="item"></param>
            <returns>The index of the item; returns &lt; 0 when not found.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Insert(System.Int32,Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
            <summary>
            inserts an items at the index
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.RemoveAt(System.Int32)">
            <summary>
            removes the item at the index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Add(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
            <summary>
            adds an item to the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.AddRange(System.Collections.Generic.List{Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn})">
            <summary>
            adds multiple items tothe collection
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Clear">
            <summary>
            clears all items from the collection
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Contains(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
            <summary>
            returns true if the item is found in the collection
            </summary>
            <param name="item"></param>
            <returns><c>true</c> if found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.CopyTo(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn[],System.Int32)">
            <summary>
            copies the collection
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Remove(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn)">
            <summary>
            removes an item from collection
            </summary>
            <param name="item"></param>
            <returns><c>true</c> if removed; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.GetEnumerator">
            <summary>
            returns an enumerator for the column collection
            </summary>
            <returns>An enumerable list of columns</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.AddRange(Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection)">
            <summary>
            add a collection of PdfTableColumn
            </summary>
            <param name="columns"></param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Item(System.Int32)">
            <summary>
            indexor access
            </summary>
            <param name="index"></param>
            <returns>The nth <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumn"/></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.Count">
            <summary>
            the number of columns
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTableColumnCollection.IsReadOnly">
            <summary>
            whther the collection is read only
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.Transform">
            <summary>
            Transform represents an Affine transform in PDF page.  It wraps a PdfTransform object
            and will apply it upon render.  Client code should avoid injecting transformations that
            have no inverse (Scale with 0 in either or both X and Y), as it creates a degenrate transform that
            can only be undone with a GRestore to a prior GSave.  Since this has other side effects (changing clipping,
            line thickness and so on), it is not good practice.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.Transform.#ctor(Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Construct a new Transform object with the given PdfTransform.  
            </summary>
            <param name="tr">The PdfTransform that will be applied.  The transform is used directly, not copied.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.Transform.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            </summary>
            <param name="r"></param>
            <example>
              <code>
            public void GeneratePdf(PdfPageRenderer r)
            {
            w.DrawingSurface.Begin();
            w.DrawingSurface.AddRect(MyBounds); // place a rectangle
            w.DrawingSurface.Stroke(PdfLineStyle.Default, MyColor); // draw its outline in black
            w.DrawingSurface.End();
            }
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.Transform.IsInvertable">
            <summary>
            Returns <em>true</em> if the TransformationMatrix has an inverse <em>false</em> otherwise.
            </summary>
            <returns><c>true</c> if the matrix has an inverse; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.Transform.GetInverse">
            <summary>
            Returns a new Transform object which represents the inverse transform.
            </summary>
            <returns>A new inverse Transform object.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.Transform.Name">
            <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Authoring API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
            <value>
            The name of the object.
            </value>
            <example>
              <code>
            foreach (IPdfRenderable namedGroup in list.FindAll(item =&gt; item.Name == "Group") {
            ProcessGroup(namedGroup);
            }
              </code>
              </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.Transform.TransformationMatrix">
            <summary>
            Gets or sets the transformation matrix that will be applied when this object is rendered.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate">
            <summary>
            A <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> is a representation of a reusable drawing to be placed on a page or
            to be used to set or replace the appearance of an annotation on a page.  <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/>
            objects are never used directly.  Instead, after they are created they are stored in a document's
            <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Resources"/> property and referenced
            throughout the document by the resource name instead of using the <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/>
            directly.
            
            <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> objects themselves may refer to other resources including
            image, font, colorspace, and template resources.
            
            <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> objects have a Bounds property that specifies the area in which the
            <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> will be constrained when drawn.  Any marks outside of this box will
            be clipped out of view.
            
            To use a <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> within a page or another template, make a
            <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape"/> that references the template's
            resource name.  The <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTemplateShape"/> can be put
            into the page's DrawingList.
            
            To build the visual components of a template, make shape objects and put them in the template's
            <see cref="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.DrawingList"/>.
            </summary>
            <example>
            Making a triangle shape.
            <code>
            DrawingTemplate template = new DrawingTemplate(new PdfBounds(0, 0, 100, 100));
            PdfPath path = new PdfPath(PdfColorFactory.FromRgb(0, 0, 0), 2, PdfColorFactory.FromRgb(1, 1, 0));
            path.MoveTo(2, 2);
            path.LineTo(98, 2);
            path.LineTo(50, 98);
            path.Close();
            template.DrawingList.Add(path);
            string resourceName = doc.Resources.Templates.Add(template);
            PdfTemplateShape shape = new PdfTemplateShape(resourceName, template.Bounds);
            page.DrawingList.Add(shape); // this puts the template on the page
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> class with the supplied bounds.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> class with the supplied width and height.
            </summary>
            <remarks>This is equivalent to <c>DrawingTemplate(new PdfBounds(0, 0, width, height))</c></remarks>
            <param name="width">The width of the bounding box.</param>
            <param name="height">The height of the bounding box.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.Kind">
            <summary>
            Gets or sets the kind of drawing template.  Currently only Normal or Transparency are supported.
            </summary>
            <value>
            The kind of template
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.TransparencyIsIsolated">
            <summary>
            Gets or sets a value indicating whether transparency for this template will be isolated from the rest of the backdrop.
            </summary>
            <value>
            	<c>true</c> if the transparency is isolated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.TransparencyIsKnockout">
            <summary>
            Gets or sets a value indicating whether transparency is a knockout, meaning that it will be composited with
            the template's backdrop rather than preceding elements in the template.
            </summary>
            <value>
            	<c>true</c> if the transparency is knockout; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.DrawingList">
            <summary>
            Gets the drawing list that represents shapes in the template.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.Bounds">
            <summary>
            Gets or sets the bounds for the template.  All drawing will be limited to the interior of the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.TransformationMatrix">
            <summary>
            Gets or sets the transformation matrix that maps the coordinates of elements in the template to the surface
            on which it's drawn.  The default is the identity matrix.
            </summary>
            <value>
            The transformation matrix.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.ImportedFonts">
            <summary>
            If the template was imported from an existing PDF, this will contain a list of fonts that were successfully imported
            into the resource dictionary.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.ColorSpace">
            <summary>
            Gets or sets the color space preferred by the template.  In general, this is used by the PDF viewer when the
            template is rendered transparently.  In such a case, the template will be rendered to this color space before
            compositing with other elements.
            </summary>
            <value>
            The color space.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate.ICCResourceName">
            <summary>
            Gets or sets the name of the ICC resource to be used as a ColorSpace if the template should be rendered
            with a calibrated color space.
            </summary>
            <value>
            The name of the ICC resource.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Templates.TemplateKind">
            <summary>
            TemplateKind describes the general usage of a <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/>.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateKind.Normal">
            <summary>
            This represents a normal drawing.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateKind.Transparency">
            <summary>
            This represents a template that should be drawn with transparency.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateKind.Reference">
            <summary>
            This represents a template that is contained within a separate PDF file and is not
            currently supported.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Templates.TemplateColorSpaceKind">
            <summary>
            This represents possible color spaces for a transparent <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/>.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateColorSpaceKind.None">
            <summary>
            None specified.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateColorSpaceKind.RGB">
            <summary>
            Red, green, and blue.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateColorSpaceKind.CMYK">
            <summary>
            Cyan, magenta, yellow, and black.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateColorSpaceKind.Gray">
            <summary>
            Grayscale.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateColorSpaceKind.CalibratedGray">
            <summary>
            Calibrated grayscale.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateColorSpaceKind.CalibratedRGB">
            <summary>
            Calibrated red, green and blue.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Templates.TemplateColorSpaceKind.ICC">
            <summary>
            An ICC color space.  This should always be accompanied with a colorspace resource.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgContainer">
            <summary>
            This class can be extended if the Svg element can hold other svg elements that need to be rendered. SvgGroup,SvgSwitch
            currently inherit. The ToRenderable() checks for clipping shapes and then renders any children within the container.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgBasicShape">
            <summary>
            Base class for any Svg element that needs to be drawn. DrawShape() is called by SvgDocument to create the dotPdf renderable item. 
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgObj.InitFromXmlAfterChildrenLoaded(System.Xml.XmlNode,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            this is mainly used by the SvgDef object. It needed to load items into the object after all the children were loaded.
            </summary>
            <param name="node"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgObj.ToRenderable">
            <summary>
            Main method that will render the Svg shape into a PdfDoc shape or drawing list that can be rendered in dotPdf
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgObj.CopyParentPropertiesAsDefault">
            <summary>
            We want the parent of nodes attributes to cascade to their children all the way back up to the main parent
            But the children attributes should override the parents attributes. So we are setting the parents first. Then 
            letting the children override them.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgObj.Clip">
            <summary>
            Gets or sets the color of the fill.
            </summary>
            <value>
            The color of the fill.
            </value>
              public IPdfColor FillColor { get; set; }
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> shape will clip.
            </summary>
            <value>
              <c>true</c> if the shape will clip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgObj.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location of the shape.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgObj.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale of the shape.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgObj.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>
            The rotation of the shape in degrees.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgBasicShape.ClearShape">
            <summary>
            The Pdf Shape is created when the xml is loaded. But there are times we want to re-create the shape. This allows us to clear
            the previously created shape which will force the recreation
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgBasicShape.InitFromXmlAfterChildrenLoaded(System.Xml.XmlNode,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            This loads the basic properties that apply to all SvgShape objects. It is call AFTER  all of the items children 
            have been loaded.
            </summary>
            <param name="node"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgBasicShape.InitFromXml(System.Xml.XmlNode,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            This loads the basic properties that apply to all SvgShape objects. It is call before each objects specific LoadSvgProperties.
            This will allow the object specific LoadSvgProperties() to override any values with object specific details.
            </summary>
            <param name="node"></param>
            <param name="parentTransform"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgBasicShape.LoadCssStyles(System.Xml.XmlNode)">
            <summary>
             this method looks up the class name in the resources class and copies all the attributes associated with the 
             class to this shapes property list
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgBasicShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the current SVG Shape. Uses the ToRenderable() method to get a drawing list for the shape, then checks to see if clipping
            needs to happen.
            Any element that can contain shape elements(group,switch), overrides DrawShape() so it can loop through all of its 
            children and call DrawShape() on each
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgBasicShape.PointToLineDistance(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            returns the distance 
            </summary>
            <param name="pt"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgBasicShape.Name">
            <summary>
            Gets or sets the name of the IPdfRenderable object.
            </summary>
            <value>
            The name of the IPdfRenderable object.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgContainer.ToRenderable">
            <summary>
            The ToRenderable() method is most different for the SvgShapeGroup because it needs to render each of the items
            that is nested in the group
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgLink">
            <summary>
            represents the 'a' element in SVG file
            </summary>
            
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgPresentationAttributes.SetAttributes(System.Xml.XmlNode)">
            <summary>
            Loops through and creates a property for each attributes of node
            </summary>
            <param name="node">SVG node</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgPresentationAttributes.SetAttribute(System.Xml.XmlAttribute)">
            <summary>
            Sets the attribute based on XmlAttribute.Name and XmlAttribute.Value
            </summary>
            <param name="attribute">XmlAttibute with XmlNode</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgPresentationAttributes.ParseStyleString(System.String)">
            <summary>
            Retrieves all the attributes in the style string and creates individual attributes for each of them.
            </summary>
            <param name="style">String in the format: fill:blue;stroke-width:3;</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs">
            <summary> This class is used for encapsulating errors encountered while parsing SVG files. </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs._description">
            <summary> Get the description of the error that has occurred. </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs.#ctor(System.String,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel)">
            <summary> Construct a new set CodecErrorEventArgs object. </summary>
            <param name="description"> A string description of the error that has occurred. </param>
            <param name="level"> The severity of the error that has occurred. </param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs.Description">
            <summary> Get the description of the error that has occurred. </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs.ErrorLevel">
            <summary> Get the severity of the error that has occurred. </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventHandler">
            <summary> Event handler when errors occur when reading images. </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel">
            <remarks> This enumeration is used in the <see cref="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs"/> class in order to denote the severity of
            an error. </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel.None">
            <summary> This value denotes that there is no error present.  While it is not presently used, it is included for the
            sake of completeness. </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel.Warning">
            <summary> This value denotes that a problem of very mild severity has been detected in a codec. </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel.Error">
            <summary> This value denotes that a problem of moderate to high severity has been detected in a codec. </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.ErrorLevel.Fatal">
            <summary> This value denotes that there a severe error has occurred that could be fatal to the CLR or the current
            application.  This severity should never be used in released software. </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgArcHelper.MatMul(System.Double,System.Double,System.Double,System.Double,Atalasoft.PdfDoc.Geometry.DPoint)">
            <summary>
            Implementation of arc based on w3c specs: http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgClipPathElement">
            <summary>
            Stores the shape that is to be used as the clipping object. We do not current support Union clip paths.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgClipPathElement.ClipPathUnits">
            <summary>
            Defines the coordinate system for the contents of the ‘clipPath’.
            If clipPathUnits="userSpaceOnUse", the contents of the ‘clipPath’ represent values in the current user coordinate system in place at the time when the ‘clipPath’ element is referenced (i.e., the user coordinate system for the element referencing the ‘clipPath’ element via the ‘clip-path’ property).
            If clipPathUnits="objectBoundingBox", then the user coordinate system for the contents of the ‘clipPath’ element is established using the bounding box of the element to which the clipping path is applied (see Object bounding box units).
            If attribute ‘clipPathUnits’ is not specified, then the effect is as if a value of 'userSpaceOnUse' were specified.
            
            Not Implemented
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDef">
            <summary>
            object to store the definitions that are in the &lt;def&gt; tags. These are inserted in the resource manager to be looked up later.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument">
            <summary>
            This object is created by parsing an SVG file. It extends from IPdfRenderable so it can be placed in a drawing list of a page.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.OnParsingError(Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventArgs)">
            <summary> Fires the Error event </summary>
            <param name="e"> A CodecErrorEventArgs object specifying the error </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.String,System.Double,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
            <param name="filePath">The path to the .svg file</param>
            <param name="pageHeight">The page height of the Pdf Document the SVG objects will appear</param>
            <param name="doc">The PdfGeneratedDocument object the SVG will be inserted.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.String,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
            <param name="filePath">The path to the .svg file</param>
            <param name="doc">The PdfGeneratedDocument object the SVG will be inserted.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.Xml.XmlDocument,System.Double,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
            <param name="xml">An XmlDocument object loaded with SVG. Can use the LoadXml() method to load a string of SVG</param>
            <param name="pageHeight">The page height of the Pdf Document the SVG objects will appear</param>
            <param name="doc">The PdfGeneratedDocument object to the SVG will be inserted.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.Xml.XmlDocument,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
            <param name="xml">An XmlDocument object loaded with SVG. Can use the LoadXml() method to load a string of SVG</param>
            <param name="doc">The PdfGeneratedDocument object to the SVG will be inserted.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.Xml.XmlDocument,System.Double,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventHandler)">
            <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
            <param name="xml">An XmlDocument object loaded with SVG. Can use the LoadXml() method to load a string of SVG</param>
            <param name="pageHeight">The page height of the Pdf Document the SVG objects will appear</param>
            <param name="doc">The PdfGeneratedDocument object to the SVG will be inserted.</param>
            <param name="parsingErrorHandler">The parsing error delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.#ctor(System.String,System.Double,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParsingErrorEventHandler)">
            <summary>
            A PdfRenderable object that should be added to a PdfGeneratedPage drawing list to allow objects from 
            a Svg file to be inserted on page.
            </summary>
            <param name="filePath">The path to the .svg file</param>
            <param name="pageHeight">The page height of the Pdf Document the SVG objects will appear</param>
            <param name="doc">The PdfGeneratedDocument object the SVG will be inserted.</param>
            <param name="parsingErrorHandler">The parsing error delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Override of PdfBaseShape DrawShape. Draws all SVG shapes that need rendering for document.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.InitFromXml(System.Xml.XmlNode)">
            <summary>
            load properties from XmlNode value. Should be the svg node
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.CloneInstance">
            <summary>
            Creates a clone of current SvgDocument
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.CloneInstance(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            Creates a clone of current SvgDocument
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.FromSvg(System.String,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            Creates a new <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> with a
            drawing list containing the supplied SVG.
            </summary>
            <param name="filePath">The path to an SVG file.</param>
            <param name="doc">The receiving <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.FromSvg(System.Xml.XmlDocument,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            Creates a new <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> with a
            drawing list containing the supplied SVG.
            </summary>
            <param name="xml">Xml represeting SVG.</param>
            <param name="doc">The receiving <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/>.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.PageHeight">
            <summary>
            The page height defined in SVG xml
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.PageWidth">
            <summary>
            The page width defined in SVG xml
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.Version">
            <summary>
            The version defined in SVG xml
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.ViewBox">
            <summary>
            The viewbox defined in the root svg node
            </summary>
        </member>
        <member name="E:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument.SvgParsingError">
            <summary> This event is used by the <STRONG>SvgDocument</STRONG> object to report errors that occur when parsing a
            SVG file. </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgStyleAttribute.ParseStyleString(System.String)">
            <summary>
            uses the values set in the StyleAttribute string property to create a PdfLineStyle object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgShapeLine.InitFromXml(System.Xml.XmlNode,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            This loads the basic properties that apply to all SvgShape objects. It is call before each objects specific LoadSvgProperties.
            This will allow the object specific LoadSvgProperties() to override any values with object specific details.
            </summary>
            <param name="node"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgTransform.PerformRotate(Atalasoft.PdfDoc.Geometry.PdfTransform,System.Double[])">
            <summary>
            Performs rotate command on set of values.
            SVG Definition:
             rotate(rotate-angle [x y]), which specifies a rotation by rotate-angle degrees about a given point.
             If optional parameters x and x are not supplied, the rotate is about the origin of the current user coordinate system. 
              The operation corresponds to the matrix [cos(a) sin(a) -sin(a) cos(a) 0 0].
              If optional parameters x and y are supplied, the rotate is about the point (x, y). The operation represents the 
              equivalent of the following specification: translate(x, y) rotate(rotate-angle-in-radians) translate(-x, -y).
            </summary>
            <param name="tempTransform"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgTransform.GetTransformValuesFromString(System.String)">
            <summary>
            takes a string in the format: matrix(0.9882 -0.1533 0.1533 0.9882 -69.0769 52.1971) and sets the value for the gradient transform
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgShapeTSpan.InitFromXml(System.Xml.XmlNode,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            text nodes might have children tspan nodes that need to be displayed
            </summary>
            <param name="node"></param>
            <param name="transform"></param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.Interpolator">
            <summary>
            takes start point and end point, given a ratio(0 to 1), returns the point between the start and end at the ratio
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.SvgGradientManager">
            <summary>
            Internal class that handles the storing and retrieving of the LinearGradient values in a SVG file. Each linear gradient has
            an id. The id is in the format:SVGID_17_. Each shape may store the gradient id in the fill value(fill="url(#SVGID_16_)")
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.SvgGradientManager.GetGradient(System.String)">
            <summary>
            Retrieve the linear gradient by id. If no match is found a search for the fill value format is performed
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.SvgGradient.LoadGradientColors(System.Xml.XmlNode)">
            <summary>
            Loops through the childnodes for the shape looking for "stop" tags that define the gradient colors
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.SvgGradient.ToRenderable">
            <summary>
            gradients do not have an equivalent PdfDoc shape
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.SvgGradient.PointToLineDistance(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            returns the distance 
            </summary>
            <param name="pt"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.SvgRadialGradient.DrawGradient(Atalasoft.PdfDoc.Generating.Rendering.IPdfRenderable)">
            <summary>
            RadialGradient uses the StartPoint as the centerpoint of the circle
            </summary>
            <param name="shape"></param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.PdfDocPathCommand">
            <summary>
            this class executes the correct path command for a SVG file command. The SVG
            file stores a list of commands each one containing a FROM point and a TO point and an END point
            </summary>
            
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.PdfDocPathCommand.Process(Atalasoft.PdfDoc.Generating.Shapes.PdfPath)">
            <summary>
            This method executes a PdfPath action based on the SVG command type
            </summary>
            <param name="path1">The PdfPath to add the action</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager">
            <summary>
            This class is used to build the list of SVG commands for a path tag. It is used for SVG types of Path and Polygon.  It needs to keep track of the current 
            point because some of the commands will use reference values that need to be added to the current point 
            and some commands will use Absolute points
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.#ctor">
            <summary>
            Helps process the Line to commands in an SVG file
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.GetPdfPointFromStringArray(System.String)">
            <summary>
            split the first item on a comma(,) which will put the X in 0 and Y in 1 of the array
            </summary>
            <param name="points"></param>
            <returns></returns> 
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.CreateCommandListFromString(System.String,System.Boolean)">
            <summary>
            this method is used by the CreatePolygonCommandList and CreatePolylineCommandList methods since they share similar ideas.
            We have a list of points that represent a bunch of Absoult lineTo path commands.
            </summary>
            <param name="pathListString"></param>
            <param name="addCloseCommand"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.CreatePolygonCommandList(System.String)">
            <summary>
            Iterates through the text provided in the SVG polygon tag and returns the command objects to recreate 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.CreatePolylineCommandList(System.String)">
            <summary>
            Iterates through the text provided in the SVG polyline tag and returns the command objects to recreate 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.CreateMultipleCommands(System.Collections.Generic.List{Atalasoft.PdfDoc.Generating.Utilities.VectorImport.PdfDocPathCommand},System.Collections.Generic.List{System.String},System.String@,System.Int32,System.String)">
            <summary>
            loops through list of multiple commands for a single listed commands. Each command has a number of points. This method groups the points
            by that number and creates an individual command for each grouping.
            </summary>
            <param name="rtnCommands">the command list to populate</param>
            <param name="points">the points string</param>
            <param name="command">the command to create</param>
            <param name="numberOfPointsInCommand">The grouping number of points for the command</param>
            <param name="nextCommand"> The next command in the list, used to determine whether we need to keep track of the first moveto command</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.GetSVGCommands(System.String)">
            <summary>
            returns the SVG commands found in the string of svg items. Each command indicates a different type of PdfPath operation
            </summary>
            <param name="svgCommands"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.CreateCommand(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Helper method that builds the PdfSvgCommand objects. It populates the From, To, and End values for each command
            It also uses the current point to calculate the coordinates from the the relative coordinates in some of the commands
            (the lowercase:"c","l","s","c","h")
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.GetReflectedSourceControlPoint(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Calculates the reflection of the second control point on the previous command relative to the current point
            </summary>
            <param name="currentPoint"></param>
            <param name="prevSource"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.AddCommas(System.String)">
            <summary>
            adds commas to the SVG command string. The SVG command string does not contain a comma if the value is negative
            With the added comma's it makes it easier to parse
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.PdfDocSvgCommandManager.InvertY">
            <summary>
            property to indicate if the Y points should use the height to invert them. SVG uses top-left as 0,0 where
            PdfDoc uses bottom-left as 0,0 so the points may render backwards
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.Perpetrator">
            <summary>
            this class is responsible for adding the correct PdfPath actions to a path based on start and end coordinates and a ration
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.Perpetrator.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double)">
            <summary>
            Takes the start and end points and creates perpendicular line somewhere between the two points based on a ratio(t)
            a line using the width
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="width"></param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.Gradients.SvgGradientColor">
            <summary>
            this class handles the color calculations related to SVG gradients
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgColor">
            <summary>
            helper class that handles parsing of color strings defined in SVG file.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgColor.#ctor">
            <summary>
            Color defaults to black
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgColor.SetColor(System.String)">
            <summary>
            converts a string that may contain a html color(#ffffcc) to a Pdfcolor
            </summary>
            <param name="colorString"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgLength.#ctor">
            <summary>
            default to pixels and 0 length
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgLength.#ctor(System.String)">
            <summary>
            Creates SvgLength object from string. Defaults unit type to pixels if none is defined.
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgFactory">
            <summary>
            Responsible for creating each SVG element. Also maintains a list of gradients.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParser">
            <summary>
            parses SVG file and returns populated object with all items in document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParser.#ctor(System.String,System.Boolean,System.Double,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument)">
            <summary>
            Loads a svg file of xml
            </summary>
            <param name="filePath">path to the SVG file</param>
            <param name="loadDtd">whether to load the DTD or not</param>
            <param name="pageHeight">the height of the Pdf document.</param>
            <param name="svg">The SVGDocument object to add the shapes</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParser.#ctor(System.Xml.XmlDocument,System.Double,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument)">
            <summary>
            Loads a XmlDocument object of SVG nodes
            </summary>
            <param name="svgXml">XmlDocument object populated with SVG nodes</param>
            <param name="pageHeight">the height of the Pdf document.</param>
            <param name="svg">The SVGDocument object to add the shapes</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParser.#ctor(System.String,System.Boolean,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument)">
            <summary>
            Loads a svg file of xml using the declared height from the svg instead of a supplied page height
            </summary>
            <param name="filePath">path to the SVG file</param>
            <param name="loadDtd">whether to load the DTD or not</param>
            <param name="svg">The SVGDocument object to add the shapes</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParser.#ctor(System.Xml.XmlDocument,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument)">
            <summary>
            Loads a XmlDocument object of SVG nodes using the declared height from the svg instead of a supplied page height
            </summary>
            <param name="svgXml">XmlDocument object populated with SVG nodes</param>
            <param name="svg">The SVGDocument object to add the shapes</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParser.LoadSvg">
            <summary>
            Loads the SvgDocument object with items from the svg xml
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgParser.LoadAllSvgObjects(System.Xml.XmlNodeList,System.Collections.Generic.List{Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgObj},Atalasoft.PdfDoc.Geometry.PdfTransform,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgDocument,Atalasoft.PdfDoc.Generating.Utilities.VectorImport.DOM.SvgObj)">
            <summary>
            Recursively walks through SVG document adding all the items to the list of SvgObjects associated with the SvgDocument object. 
            </summary>
            <param name="childNodeList">The XmlNodeList represented by the Children property of the XmlNode</param>
            <param name="childrenList">The list of SVGObjects to add the created items</param>
            <param name="transform">the transformation to apply to created items. This cascades transformations all the way from the parent document</param>     
            <param name="svgDoc"></param>
            <param name="parentObject"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgPoint.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgPoint.PdfPoint"/> struct.
            </summary>
            <param name="p">The point to copy.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgPoint.PdfPoint"/> struct.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgPoint.X">
            <summary>
            Gets or sets the X component.
            </summary>
            <value>
            The X component.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgPoint.Y">
            <summary>
            Gets or sets the Y component.
            </summary>
            <value>
            The Y component.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgResourceManager">
            <summary>
            This object manages all the resources related to a SVG file. Any font that is used is added once and a resource name is assigned to 
            be resused. Any image (file or embedded(baes64)) is stored once and assigned a resource name.
            This object also stores any styles or clipping paths. And all definitions (&lt;def) are stored to be retrieved by any object.
            All SvgObj have a handle to SvgResourceManager
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgResourceManager.AddImageFile(System.String)">
            <summary>
            adds an image based on a file path to the resources
            </summary>
            <param name="imagePath"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgResourceManager.AddImageData(System.String)">
            <summary>
            adds a base64 encoded images to the resources
            </summary>
            <param name="imageData"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.SvgResourceManager.Base64ToByteArrayImage(System.String)">
            <summary>
            converts an image in base64 string to byte array. You can then convert the byte[] to an AtalaImage
            </summary>
            <param name="svgImageString"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgShapeImage.InitFromXml(System.Xml.XmlNode,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            image overflow="visible" width="77.8" height="73" xlink:href="images/TomatoRGB.jpg" transform="matrix(0.2083 0 0 0.2083 80 -12)"/image
            </summary>
            <param name="node"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgShapePath.GetMaxMinCoordinatesLeastX">
            <summary>
            These GetLeastX and GetLeastY() methods are my attempt and discovering the gradient start and end points based on percentages
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.VectorImport.VectorShapes.SvgShapeText.InitFromXml(System.Xml.XmlNode,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            text nodes might have children tspan nodes that need to be displayed
            </summary>
            <param name="node"></param>
            <param name="transform"></param>
        </member>
        <member name="T:Atalasoft.PdfDoc.BasePage">
            <summary>
            An empty class which represents any page in a document. Use concrete page implementations like PdfGeneratedPage or PdfPage.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.BasePage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.BasePage"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.PdfColorSpaceType">
            <summary>
            The available color spaces in pdf
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.PdfColorSpaceType.Rgb">
            <summary>
            Red Green Blue
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.PdfColorSpaceType.Gray">
            <summary>
            Grayscale
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.PdfColorSpaceType.Cmyk">
            <summary>
            Cyan Magenta Yellow Black
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.PdfColorSpaceType.Lab">
            <summary>
            Custom color spaces
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.OpaquePageInformer">
            <summary>
            When a page from a PDF document can't be imported for some reason,
            this class can report the reason for the failure if it is available.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.OpaquePageInformer.ImportFailureReason(Atalasoft.PdfDoc.BasePage)">
            <summary>
            Imports the failure reason from the page.
            </summary>
            <param name="page">The page must be the type OpaquePage which is used internally in DotPdf.</param>
            <returns>The reason for failure to import, null if the page is not an OpaquePage</returns>
            <code>
            PdfGeneratedDocument doc = new PdfGeneratedDocument(null, null, stream);
            int i = 0;
            foreach (BasePage page in doc.Pages)
            {
                string failReason = OpaquePageInformer.ImportFailReason(page);
                if (failReason != null)
                    Console.WriteLine("Failure importing on page {0}: {1}", i, failReason);
                i++;
            }
            </code>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface">
            <summary>
            The overload of PdfDrawingSurface
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface">
            <summary>
            PdfDrawingSurface is an abstract class that defines the drawing operations that can be performed on PDF page or
            other PDF content item.
            
            In this model, there is a notion of current path.  A path a set of possibly disjoint lines or curves.  A path or any
            of its sub paths may be closed open.  An existing path may have more paths added to it.
            
            When any of the painting operations are performed, the current path will be cleared - unless the user performs a GSave
            operation in the containing PdfPageRenderer object before painting.
            
            Paths may be stroked, painted, painted and stroked, or clipped.  Clipping is cumulative.  Clipping to a path can only reduce
            the current clipping region or keep it the same size.  Use GSave/GRestore to make temporary changes to the clipping region.
            
            In addition, a tranformation matrix may be applied to the drawing surface that will be incorporated into the current transformation.
            Transformations are cumulative and will affect all subsequent drawing unless managed with a GSave/Grestore operation.
            
            Before any operations can be performed on a PdfDrawingSurface, client code is required to call Begin.  Client code should also
            call End when done.  Begin and End are very efficient operations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Begin">
            <summary>
            Signal that drawing operations have begun.
            </summary>
            <example>
            <code>
            try {
                drawingSurface.Begin();
                // more drawing operations
            }
            finally {
                drawingSurface.End();
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddPath(System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation})">
            <summary>
            Adds a set of path operations to the current path.  Path should start with a Move operation.
            </summary>
            <param name="path">The path to add.</param>
            <example>
            <code>
            drawingSurface.AddPath(new PdfPathOperation[] { PdfPathOperation.MoveTo(0, 0), PdfPathOperation.LineTo(100, 150); });
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddPath(System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation},Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            First applies a translation transform then adds a set of path operations to the current path.  Path should start with a Move operation.
            The translation remains in place after the addition.
            </summary>
            <param name="path">The path to add.</param>
            <param name="location">The location to which the path will be translated.</param>
            <example>
            <code>
            drawingSurface.AddPath(myPath, drawingOrigin);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddPath(System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation},Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            First applies a transform then adds a set of path operations to the current path.  Path should start with a Move operation.
            The transform remains in place after the addition.
            </summary>
            <param name="path">The path to add.</param>
            <param name="transform">The transform to apply.</param>
            <example>
            <code>
            drawingSurface.AddPath(myPath, PdfTransform.Scale(10)); // scale up by 10 uniformly in both axes
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddRect(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Adds the a closed rectangle to the current path.
            </summary>
            <param name="r">The rectangle to add.</param>
            <example>
            <code>
            drawingSurface.Add(new PdfBounds(20, 20, 100, 150));
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddRect(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            First applies a translation transform then adds the a closed rectangle to the current path.
            The translation remains in place after the addition.
            </summary>
            <param name="r">The rectangle to add.</param>
            <param name="location">The location to which the rectangle will be translated.</param>
            <example>
            <code>
            drawingSurface.AddRect(new PdfBounds(0, 0, 60, 60), new PdfPoint(100, 120));
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.AddRect(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            First applies a transform then adds the a closed rectangle to the current path.
            The transform remains in place after the addition.
            </summary>
            <param name="r">The rectangle to add.</param>
            <param name="transform">The transform to apply.</param>
            <example>
            <code>
            drawingSurface.AddRect(new PdfBounds(0, 0, 60, 60), PdfTransform.Rotate(Math.PI/4.0));
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Stroke(Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Strokes the current path in the specified style and color then clears the current path.
            </summary>
            <param name="style">The line style that will be used to draw the path.</param>
            <param name="color">The color of the line that will be drawn.</param>
            <example>
            <code>
            drawingSurface.AddRect(boundingRect);
            drawingSurface.Stroke(currentStyle, outlineColor);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Fill(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Paints the current path using the specified fill method and color then clears the current path.
            </summary>
            <param name="fillMethod">The fill method for the path.</param>
            <param name="color">The color used to fill the path.</param>
            <example>
            <code>
            drawingSurface.AddPath(shape);
            drawingSurface.Fill(PdfFillMethod.EvenOdd, fillColor);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.FillAndStroke(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Paints then strokes the current path using the specified parameters, then clears the current path.
            </summary>
            <param name="fillMethod">The fill method that will be used to fill the path.</param>
            <param name="fillColor">The Color used for filling the path.</param>
            <param name="style">The style of the line used to stroke the path.</param>
            <param name="lineColor">The Color of the line used to stroke the path.</param>
            <example>
            <code>
            drawingSurface.AddPath(shape);
            drawingSurface.FillAndStroke(PdfFillMethod.EvenOff, fillColor, lineStyle, lineColor);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Clip(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod)">
            <summary>
            Reduces the clipping area of the current drawing surface by intersecting the current path with the current clipping area.
            Clipping is a strictly reductive process.  To preserve previous clipping areas, use the GSave and GRestore methods in PdfPageRenderer.
            </summary>
            <param name="fillMethod">The fill method to use for the path.</param>
            <example>
            <code>
            writer.GSave();
            drawingSurface.AddPath(clippingRegion);
            drawingSurface.Clip(PdfFillMethod.EvenOdd);
            PlaceClippedShapes();
            writer.GRestore();
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.Clip(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod,System.Boolean)">
            <summary>
            Reduces the clipping area of the current drawing surface by intersecting the current path with the current clipping area.
            Clipping is a strictly reductive process.  To preserve previous clipping areas, use the GSave and GRestore methods in PdfPageRenderer.
            </summary>
            <param name="fillMethod">The fill method to use for the path.</param>
            <param name="keepPath">True if the clipping path should be kept as the current path, false otherwise</param>
            <example>
            <code>
            writer.GSave();
            drawingSurface.AddPath(clippingRegion);
            drawingSurface.Clip(PdfFillMethod.EvenOdd);
            PlaceClippedShapes();
            writer.GRestore();
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.ApplyTransformation(Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Applies the transform to the drawing surface.  The transform will be accumulated onto any existing transformation.
            Previous transforms can be saved and restored via the GSave and GRestore methods in PdfPageRenderer.
            </summary>
            <param name="transform">The transform to apply.</param>
            <example>
            <code>
            writer.GSave();
            drawingSurface.ApplyTransformation(PdfTransform.Scale(2, 5)); // non-uniform scale
            PlaceScaledShapes();
            writer.GRestore();
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.End">
            <summary>
            Signal that drawing on the drawing surface is complete.
            </summary>
            <example>
            <code>
            try {
                drawingSurface.Begin();
                // more drawing operations
            }
            finally {
                drawingSurface.End();
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.PlaceImage(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Places the image on the drawing surface at the given location.  The image will be placed such that each pixel is
            1 PDF page unit square.
            </summary>
            <param name="imageName">Name of the image from global resources to place on the drawing surface.</param>
            <param name="colorSpaceResourceName">Optional name of a color space resource to use for the image.</param>
            <param name="location">The location of the image on the page.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.PlaceImage(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Places the image on the drawing surface within the bounds provided.
            </summary>
            <param name="imageName">Name of the image from global resources to place on the drawing surface.</param>
            <param name="colorSpaceResourceName">Optional name of a color space resource to use for the image.</param>
            <param name="locationAndSize">location and size of the image in PDF page units.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.PlaceImage(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Places the image on the drawing surface within the bounds and transformed by the matrix provided.
            </summary>
            <param name="imageName">Name of the image from global resources to place on the drawing surface.</param>
            <param name="colorSpaceResourceName">Optional name of a color space resource to use for the image.</param>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.PlaceTemplate(System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Places the template on the drawing surface at the given location.  The template will be placed such that each pixel is
            1 PDF page unit square.
            </summary>
            <param name="templateName">Name of the template from global resources to place on the drawing surface.</param>
            <param name="location">The location of the template on the page.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.PlaceTemplate(System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Places the template on the drawing surface within the bounds provided.
            </summary>
            <param name="templateName">Name of the template from global resources to place on the drawing surface.</param>
            <param name="locationAndSize">location and size of the template in PDF page units.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.PlaceTemplate(System.String,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Places the template on the drawing surface within the bounds and transformed by the matrix provided.
            </summary>
            <param name="templateName">Name of the template from global resources to place on the drawing surface.</param>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.BeginMarkedContent(System.String)">
            <summary>
            Marks a stream of PDF content with the given tag.  All calls to <see cref="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.BeginMarkedContent(System.String)"/>
            must have a matching call to <see cref="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.EndMarkedContent"/>.  The PDF spec does not allow nesting of
            marked content.
            </summary>
            <param name="markedContentTag">The marked content tag.</param>
            <remarks>
            Tags have meaning that is specific to entities within PDF.  For example, text that is rendered
            within some classes of annotations are set off with a <c>Tx</c>tag and a <c>BMC</c> operator within PDF.
            Most code will never need to use this method directly.  For access at a higher level, use
            the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent"/> object which can be used
            in any <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList"/> and emits both the begin marked content operator as well as the
            matching end marked content operator in a PDF stream.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.EndMarkedContent">
            <summary>
            Deontes the end of a stream of PDF content marked via <see cref="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingSurface.BeginMarkedContent(System.String)"/>.
            </summary>
            <remarks>
            Most code will never need to use this method directly.  For access at a higher level, use
            the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfMarkedContent"/> object which can be used
            in any <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList"/> and emits both the begin marked content operator as well as the
            matching end marked content operator in a PDF stream.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.#ctor(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRendererPdfOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface"/> class.
            </summary>
            <param name="renderer">The writer.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.Begin">
            <summary>
            Signal that drawing operations have begun.
            </summary>
            <example>
              <code>
            try {
            drawingSurface.Begin();
            // more drawing operations
            }
            finally {
            drawingSurface.End();
            }
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.AddPath(System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation})">
            <summary>
            Adds a set of path operations to the current path.  Path should start with a Move operation.
            </summary>
            <param name="path">The path to add.</param>
            <example>
            <code> 
            drawingSurface.AddPath(new PdfPathOperation[] { PdfPathOperation.MoveTo(0, 0), PdfPathOperation.LineTo(100, 150); });
            </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.AddPath(System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation},Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            First applies a translation transform then adds a set of path operations to the current path.  Path should start with a Move operation.
            The translation remains in place after the addition.
            </summary>
            <param name="path">The path to add.</param>
            <param name="location">The location to which the path will be translated.</param>
            <example>
              <code>
            drawingSurface.AddPath(myPath, drawingOrigin);
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.AddPath(System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation},Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            First applies a transform then adds a set of path operations to the current path.  Path should start with a Move operation.
            The transform remains in place after the addition.
            </summary>
            <param name="path">The path to add.</param>
            <param name="transform"></param>
            <example>
              <code>
            drawingSurface.AddPath(myPath, PdfTransform.Scale(10)); // scale up by 10 uniformly in both axes
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.AddRect(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Adds the a closed rectangle to the current path.
            </summary>
            <param name="r">The rectangle to add.</param>
            <example>
              <code>
            drawingSurface.Add(new PdfBounds(20, 20, 100, 150));
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.AddRect(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            First applies a translation transform then adds the a closed rectangle to the current path.
            The translation remains in place after the addition.
            </summary>
            <param name="r">The rectangle to add.</param>
            <param name="location">The location to which the rectangle will be translated.</param>
            <example>
              <code>
            drawingSurface.AddRect(new PdfBounds(0, 0, 60, 60), new PdfPoint(100, 120));
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.AddRect(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            First applies a transform then adds the a closed rectangle to the current path.
            The transform remains in place after the addition.
            </summary>
            <param name="r">The rectangle to add.</param>
            <param name="transform"></param>
            <example>
              <code>
            drawingSurface.AddRect(new PdfBounds(0, 0, 60, 60), PdfTransform.Rotate(Math.PI/4.0));
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.Stroke(Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Strokes the current path in the specified style and color then clears the current path.
            </summary>
            <param name="style">The line style that will be used to draw the path.</param>
            <param name="color">The color of the line that will be drawn.</param>
            <example>
              <code>
            drawingSurface.AddRect(boundingRect);
            drawingSurface.Stroke(currentStyle, outlineColor);
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.Fill(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Paints the current path using the specified fill method and color then clears the current path.
            </summary>
            <param name="fillMethod">The fill method for the path.</param>
            <param name="color">The color used to fill the path.</param>
            <example>
              <code>
            drawingSurface.AddPath(shape);
            drawingSurface.Fill(PdfFillMethod.EvenOdd, fillColor);
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.FillAndStroke(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Paints then strokes the current path using the specified parameters, then clears the current path.
            </summary>
            <param name="fillMethod">The fill method that will be used to fill the path.</param>
            <param name="fillColor">The Color used for filling the path.</param>
            <param name="style">The style of the line used to stroke the path.</param>
            <param name="lineColor">The Color of the line used to stroke the path.</param>
            <example>
              <code>
            drawingSurface.AddPath(shape);
            drawingSurface.FillAndStroke(PdfFillMethod.EvenOff, fillColor, lineStyle, lineColor);
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.Clip(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod)">
            <summary>
            Reduces the clipping area of the current drawing surface by intersecting the current path with the current clipping area.
            Clipping is a strictly reductive process.  To preserve previous clipping areas, use the GSave and GRestore methods in PdfPageRenderer.
            </summary>
            <param name="fillMethod">The fill method to use for the path.</param>
            <example>
              <code>
            writer.GSave();
            drawingSurface.AddPath(clippingRegion);
            drawingSurface.Clip(PdfFillMethod.EvenOdd);
            PlaceClippedShapes();
            writer.GRestore();
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.Clip(Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod,System.Boolean)">
            <summary>
            Reduces the clipping area of the current drawing surface by intersecting the current path with the current clipping area.
            Clipping is a strictly reductive process.  To preserve previous clipping areas, use the GSave and GRestore methods in PdfPageRenderer.
            </summary>
            <param name="fillMethod">The fill method to use for the path.</param>
            <param name="keepPath">True if the clipping path should be kept as the current path, false otherwise</param>
            <example>
              <code>
            writer.GSave();
            drawingSurface.AddPath(clippingRegion);
            drawingSurface.Clip(PdfFillMethod.EvenOdd);
            PlaceClippedShapes();
            writer.GRestore();
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.End">
            <summary>
            Signal that drawing on the drawing surface is complete.
            </summary>
            <example>
              <code>
            try {
            drawingSurface.Begin();
            // more drawing operations
            }
            finally {
            drawingSurface.End();
            }
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.ApplyTransformation(Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Applies the transform to the drawing surface.  The transform will be accumulated onto any existing transformation.
            Previous transforms can be saved and restored via the GSave and GRestore methods in PdfPageRenderer.
            </summary>
            <param name="transform">The transform to apply.</param>
            <example>
              <code>
            writer.GSave();
            drawingSurface.ApplyTransformation(PdfTransform.Scale(2, 5)); // non-uniform scale
            PlaceScaledShapes();
            writer.GRestore();
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.PlaceImage(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Places the image on the drawing surface at the given location.  The image will be placed such that each pixel is
            1 PDF page unit square.
            </summary>
            <param name="imageName">Name of the image from global resources to place on the drawing surface.</param>
            <param name="colorSpaceResourceName">Optional name of a color space resource to use for the image.</param>
            <param name="location">The location of the image on the page.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.PlaceImage(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Places the image on the drawing surface within the bounds provided.
            </summary>
            <param name="imageName">Name of the image from global resources to place on the drawing surface.</param>
            <param name="colorSpaceResourceName">Optional name of a color space resource to use for the image.</param>
            <param name="locationAndSize">location and size of the image in PDF page units.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.PlaceImage(System.String,System.String,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Places the image on the drawing surface within the bounds and transformed by the matrix provided.
            </summary>
            <param name="imageName">Name of the image from global resources to place on the drawing surface.</param>
            <param name="colorSpaceResourceName">Optional name of a color space resource to use for the image.</param>
            <param name="transform"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.PlaceTemplate(System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Places the template on the drawing surface at the given location.  The template will be placed such that each pixel is
            1 PDF page unit square.
            </summary>
            <param name="templateName">Name of the template from global resources to place on the drawing surface.</param>
            <param name="location">The location of the template on the page.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.PlaceTemplate(System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Places the template on the drawing surface within the bounds provided.
            </summary>
            <param name="templateName">Name of the template from global resources to place on the drawing surface.</param>
            <param name="locationAndSize">location and size of the template in PDF page units.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputDrawingSurface.PlaceTemplate(System.String,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Places the template on the drawing surface within the bounds and transformed by the matrix provided.
            </summary>
            <param name="templateName">Name of the template from global resources to place on the drawing surface.</param>
            <param name="transform">The transform.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface">
            <summary>
            
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface">
            <summary>
            PdfTextSurface is used to add Text objects to the pdf display list.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteTextAt(System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Writes the text at the specified point.
            </summary>
            <param name="text">The text.</param>
            <param name="point">The point to start writing the text at.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteTextAt(System.String,System.Double,System.Double)">
            <summary>
            Writes the text at.
            </summary>
            <param name="text">The text.</param>
            <param name="xLineOffset">The x coordinate of the point to write the text.</param>
            <param name="yLineOffset">The y coordinate of the point to write the text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteText(System.String)">
            <summary>
            Writes the text at the current point.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteTextAdvanceLine(System.String)">
            <summary>
            Writes the text and inserts a newline.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteKerningPairs(System.Collections.Generic.IList{Atalasoft.PdfDoc.Generating.Utilities.KerningPair})">
            <summary>
            Writes the kerning pairs.
            </summary>
            <param name="kerningPairs">The kerning pairs.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.WriteAdvanceLineWithNewXStartPoint(System.Double,System.String)">
            <summary>
            Writes the text line with a new X start point and inserts a newline.
            </summary>
            <param name="newXStartPos">The new X coordinate to write the line at.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextLeading(System.Double)">
            <summary>
            Sets the text leading.
            </summary>
            <param name="leading">The text leading expressed in Pdf text points.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextPoint(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Sets the text start point.
            </summary>
            <param name="point">The text start point.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.ApplyTextMatrix(Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Applies the text matrix.
            </summary>
            <param name="transform">The transform matrix.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetFont(System.String,System.Double,System.Boolean)">
            <summary>
            Sets the font.
            </summary>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="requiresUnicodeFont">if set to <c>true</c> then the font will need unicode characters.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.TextIsUnicode(System.String)">
            <summary>
            Identifies if the text is unicode or not
            </summary>
            <param name="text">The text.</param>
            <returns>True if the text requires unicode encoding</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextRenderMode(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Nullable{System.Double})">
            <summary>
            Sets the text render mode.
            </summary>
            <param name="mode">The render mode.</param>
            <param name="fillColor">Color the text will be filled with.</param>
            <param name="outlineColor">Color of the outline of the text.</param>
            <param name="outlineWidth">Width of the outline of the text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextRenderMode(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            Sets the text render mode.
            </summary>
            <param name="mode">The render mode.</param>
            <param name="outlineColor">Color of the outline of the text.</param>
            <param name="outlineWidth">Width of the outline of the text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextRenderMode(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Sets the text render mode.
            </summary>
            <param name="mode">The render mode.</param>
            <param name="fillColor">Color the text will be filled with.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetTextRenderMode(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode)">
            <summary>
            Sets the text render mode.
            </summary>
            <param name="mode">The render mode.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetWordSpace(System.Double)">
            <summary>
            Sets the word space.
            </summary>
            <param name="space">The spaceing between words.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.SetHorizontalScale(System.Double)">
            <summary>
            Sets the horizontal scale.
            </summary>
            <param name="scale">The scale in percentage from default (100 is the default).</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.Begin">
            <summary>
            Begin starts the TextSurface and prepares it for writing. It must be called before using any other TextSurface operations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.End">
            <summary>
            End completes the TextSurface. It must be called when the TextSurface is no longer needed.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.EncodeToPdf(System.String,System.String)">
            <summary>
            Encodes a string to PDF using an appropriate encoding for the supplied font in GlobalResources.
            </summary>
            <remarks>
            This is meant to be used for text that will appear in a content stream of a PDF document.
            </remarks>
            <param name="globalFontName">Name of the font in GlobalResources.</param>
            <param name="textToEncode">The text to encode.</param>
            <returns>An encoded string</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfTextSurface.EncodeToPdf(System.String,System.Char)">
            <summary>
            Encodes a single character to PDF using an appropriate encoding for the supplied font in GlobalResources.
            </summary>
            <param name="globalFontName">Name of the font in GlobalResources.</param>
            <param name="charToEncode">The text to encode.</param>
            <returns>An encoded character</returns>
            <remarks>
            This is meant to be used for text that will appear in a content stream of a PDF document.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.WriteTextAt(System.String,System.Double,System.Double)">
            <summary>
            Writes the text at the specified point.
            </summary>
            <param name="text">The text to write.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.WriteText(System.String)">
            <summary>
            Writes the text at the current point.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.WriteTextAdvanceLine(System.String)">
            <summary>
            Writes the text and inserts a newline.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.WriteKerningPairs(System.Collections.Generic.IList{Atalasoft.PdfDoc.Generating.Utilities.KerningPair})">
            <summary>
            Writes the kerning pairs.
            </summary>
            <param name="kerningPairs">The kerning pairs.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.ApplyTextMatrix(Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Applies the text matrix.
            </summary>
            <param name="transform">The transform matrix.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.Begin">
            <summary>
            Begin starts the TextSurface and prepares it for writing. It must be called before using any other TextSurface operations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.End">
            <summary>
            End completes the TextSurface. It must be called when the TextSurface is no longer needed.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.SetFont(System.String,System.Double,System.Boolean)">
            <summary>
            Sets the font.
            </summary>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="requiresUnicodeFont">if set to <c>true</c> then the font will need unicode characters.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.SetTextRenderMode(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Nullable{System.Double})">
            <summary>
            Sets the text render mode.
            </summary>
            <param name="mode">The mode.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="lineWidth">Width of the line.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.SetWordSpace(System.Double)">
            <summary>
            Sets the word space.
            </summary>
            <param name="space">The spaceing between words.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.SetHorizontalScale(System.Double)">
            <summary>
            Sets the horizontal scale.
            </summary>
            <param name="scale">The scale in percentage from default (100 is the default).</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.SetTextLeading(System.Double)">
            <summary>
            Sets the text leading.
            </summary>
            <param name="leading">The text leading expressed in Pdf text points.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.SetTextPoint(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Sets the text start point.
            </summary>
            <param name="point">The text start point.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfOutputTextSurface.WriteAdvanceLineWithNewXStartPoint(System.Double,System.String)">
            <summary>
            Writes the text line with a new X start point and inserts a newline.
            </summary>
            <param name="newXStartPos">The new X coordinate to write the line at.</param>
            <param name="text">The text.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalGrayColorSpaceResource">
            <summary>
            A concrete calibrated grayscale color resource
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource">
            <summary>
            A generic calibrated color space
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource.#ctor(Atalasoft.PdfDoc.Generating.PdfColorSpaceType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="components">The components.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource.ThrowOnGammaOutOfRange(System.Double,System.String)">
            <summary>
            Throws the on gamma out of range.
            </summary>
            <param name="gamma">The gamma.</param>
            <param name="propname">The propname.</param>
            <returns>The gamma value passed in.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource.WhitePoint">
            <summary>
            Gets the white point.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalibratedColorSpaceResource.BlackPoint">
            <summary>
            Gets the black point.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalGrayColorSpaceResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalGrayColorSpaceResource"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalGrayColorSpaceResource.Gamma">
            <summary>
            Gets or sets the gamma.
            </summary>
            <value>
            The gamma.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource">
            <summary>
            A Calibrated color space as a resource.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.RedGamma">
            <summary>
            Gets or sets the red gamma.
            </summary>
            <value>
            The red gamma value. (between 0 and 1)
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.GreenGamma">
            <summary>
            Gets or sets the green gamma.
            </summary>
            <value>
            The green gamma. (between 0 and 1)
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.BlueGamma">
            <summary>
            Gets or sets the blue gamma.
            </summary>
            <value>
            The blue gamma.(between 0 and 1)
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.Gammas">
            <summary>
            Gets the gammas.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfCalRgbColorSpaceResource.ComponentMatrix">
            <summary>
            Gets the component matrix.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager">
            <summary>
            Manages the pdf color space resources
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.AddFromFile(System.String)">
            <summary>
            Adds from file.
            </summary>
            <param name="path">The path.</param>
            <returns>The new resource name.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.AddFromBytes(System.Byte[])">
            <summary>
            Adds from bytes.
            </summary>
            <param name="data">The data.</param>
            <returns>The new resource name.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.AddFromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Adds from stream.
            </summary>
            <param name="stm">The STM.</param>
            <param name="closeOnDispose">if set to <c>true</c> [close on dispose].</param>
            <returns>The new resource name.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.FromFile(System.String)">
            <summary>
            Froms the file.
            </summary>
            <param name="path">The path.</param>
            <returns>The new resource.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.FromBytes(System.Byte[])">
            <summary>
            Froms the bytes.
            </summary>
            <param name="data">The data.</param>
            <returns>The new resource.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.FromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Froms the stream.
            </summary>
            <param name="stm">The STM.</param>
            <param name="closeOnDispose">if set to <c>true</c> [close on dispose].</param>
            <returns>The new resource.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.ResourcesMatch(Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource,Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceResource)">
            <summary>
            Resources the match.
            </summary>
            <param name="one">The first resource.</param>
            <param name="two">The second resources.</param>
            <returns><c>true</c> if the resources match; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.DefaultRgbColorSpace">
            <summary>
            Gets or sets the default RGB color space.
            </summary>
            <value>
            The default RGB color space.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.DefaultGrayColorSpace">
            <summary>
            Gets or sets the default gray color space.
            </summary>
            <value>
            The default gray color space.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.DefaultCmykColorSpace">
            <summary>
            Gets or sets the default cmyk color space.
            </summary>
            <value>
            The default cmyk color space.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.DeviceGrayColorSpace">
            <summary>
            Gets the name of the pre-installed device gray color space.
            </summary>
            <value>
            The stock device gray color space
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.DeviceRgbColorSpace">
            <summary>
            Gets the name of the pre-installed device rgb color space.
            </summary>
            <value>
            The stock device rgb color space
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.DeviceCmykColorSpace">
            <summary>
            Gets the name of the pre-installed device cmyk color space.
            </summary>
            <value>
            The stock device cmyk color space
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfColorSpaceManager.ResourceClass">
            <summary>
            Gets the resource class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource">
            <summary>
            A class representing an ICC complient color space for use in pdf
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource"/> class.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource"/> class.
            </summary>
            <param name="stm">The STM.</param>
            <param name="closeOnDispose">if set to <c>true</c> [close on dispose].</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Colors.PdfIccColorSpaceResource.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction">
            <summary>
            Describes an anction to take in response to a request to embed a font.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction.Embed">
            <summary>
            Embed the font within the PDF
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction.DontEmbed">
            <summary>
            Do not embed the font within the PDF
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction.ThrowException">
            <summary>
            Throw an exception instead of embedding the font
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission">
            <summary>
            This enumeration describes possible permissions for embedding a TrueType font.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.Unrestricted">
            <summary>
            The font may be embedded in a PDF with no restrictions
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.ForbiddenWithoutPermission">
            <summary>
            The font may not be embedded in a PDF unless client code has been granted permission from the font's creator
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.PreviewAndPrint">
            <summary>
            The font may be embedded in a PDF, but only for previewing and printing actions.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.NoSubsetting">
            <summary>
            The font may be embedded in a PDF, but only in its entirety
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission.Editable">
            <summary>
            The font may be embedded in a PDF and the document may be editable.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy">
            <summary>
            When a font needs to be embedded in a PDF document, client code will be called in order to determine what action
            to take.  Client code will return an object of PdfFontEmbeddingPolicy which will be used to enact that action.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction)">
            <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy"/> class.
            </summary>
            <param name="action">The action to take on a font embedding request.</param>
            <example>
            <code>
            PdfFontEmbeddingPolicy policy = new PdfFontEmbeddingPolicy(PdfFontEmbeddingAction.Embed); // embed always
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingAction,System.Exception)">
            <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy"/> class.
            </summary>
            <param name="action">The action to take on a font embedding request.</param>
            <param name="exception">An exception to throw if the action is set to PdfFontEmbeddingAction.ThrowException.  If exception is null, a PdfException will be thrown.</param>
            <example>
            <code>
            PdfFontEmbeddingPolicy policy = new PdfFontEmbeddingPolicy(PdfFontEmbeddingAction.ThrowException, new MyException("can't embed this font"));
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy.Action">
            <summary>
            Gets or sets the action to take on a font embedding request.
            </summary>
            <value>
            The action to take.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicy.ExceptionToThrow">
            <summary>
            Gets or sets the exception to throw when action is set to PdfFontEmbeddingAction.ThrowException.
            </summary>
            <value>
            The exception to throw.  This property is intended for client code that wants to control what kind of exception should be
            thrown when a font can't be embedded.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode">
            <summary>
            The mode with which to render text
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.FillText">
            <summary>
            Fill the text with the current fill color (Default).
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.StrokeText">
            <summary>
            Draw the outline of the text based on the linewidth.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.FillThenStrokeText">
            <summary>
            Fill the text then draw the outline based on the linewidth.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.Invisible">
            <summary>
            Draw nothing
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.FillTextAndClip">
            <summary>
            Fill the text and set the clip region to the text
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.StrokeTextAndClip">
            <summary>
            Strokes the text and sets the clip region to the text
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.FillStrokeTextAndClip">
            <summary>
            Both fills and clips the text and sets the clip region
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfTextRenderMode.Clip">
            <summary>
            Sets the clip region to the text.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontStreamResource.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager,System.IO.Stream)">
            <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource"/> class.
            </summary>
            <param name="manager">The font resource manager that will handle this font's embedding policy.</param>
            <param name="fontStream">The stream that represents this font.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontStreamResource.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager,System.IO.Stream,System.Boolean)">
            <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource"/> class.
            </summary>
            <param name="manager">The font resource manager that will handle this font's embedding policy.</param>
            <param name="fontStream">The stream that represents this font.</param>
            <param name="closeOnDispose">if set to <c>true</c>, the provided stream will be closed when the resource is disposed.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor">
            <summary>
            A compressor for Gdi Images
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IPdfImageCompressor">
            <summary>
            An interface for compressing pdf images
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IPdfImageCompressor.CanCompress(System.Object,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill)">
            <summary>
            Determines whether this instance can compress the specified o.
            </summary>
            <param name="o">The o.</param>
            <param name="skill">The skill.</param>
            <returns>A list of <see cref="T:Atalasoft.PdfDoc.PdfImageCodec"/> objects that can compress the given image object</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IPdfImageCompressor.GetImageInformation(System.Object,System.String)">
            <summary>
            Gets the image information.
            </summary>
            <param name="o">The o.</param>
            <param name="colorSpaceResourceName">Name of the color space resource.</param>
            <returns>The image information</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IPdfImageCompressor.Compress(System.Object,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IStoredStreamProvider,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression)">
            <summary>
            Compresses the specified o.
            </summary>
            <param name="o">The o.</param>
            <param name="streamProvider">The stream provider.</param>
            <param name="compression">The compression.</param>
            <returns>A stream provider representing the compressed image data.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.CanCompress(System.Object,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill)">
            <summary>
            Determines whether this instance can compress the specified o.
            </summary>
            <param name="o">The o.</param>
            <param name="skill">The skill.</param>
            <returns>A list of <see cref="T:Atalasoft.PdfDoc.PdfImageCodec"/> objects that can compress the given object.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.GetImageInformation(System.Object,System.String)">
            <summary>
            Gets the image information.
            </summary>
            <param name="o">The o.</param>
            <param name="colorSpaceResourceName">Name of the color space resource.</param>
            <returns>The image information</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.Compress(System.Object,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IStoredStreamProvider,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression)">
            <summary>
            Compresses the specified o.
            </summary>
            <param name="o">The o.</param>
            <param name="streamProvider">The stream provider.</param>
            <param name="compression">The compression.</param>
            <returns>A stream provider representing the compressed image data.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider">
            <summary>
            The provider for bitmap image data
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.#ctor(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider"/> class.
            </summary>
            <param name="bm">The bm.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.#ctor(System.Drawing.Imaging.BitmapData,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.Begin">
            <summary>
            Begins this instance.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.End">
            <summary>
            Ends this instance.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the row.
            </summary>
            <param name="y">The y.</param>
            <param name="destBuffer">The dest buffer.</param>
            <param name="destOffset">The dest offset.</param>
            <param name="totalBytes">The total bytes.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.GdiImageCompressor.BitmapImageDataProvider.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill">
            <summary>
            The style of image handling to use
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill.Perfect">
            <summary>
            Do not change information at all
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill.IncreaseInformation">
            <summary>
            Only increase information
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.ImageHandlingSkill.ReduceInformation">
            <summary>
            Only reduce information
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.MemoryStreamProvider">
            <summary>
            A stream for handling images from a MemoryStream
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IStoredStreamProvider">
            <summary>
            An interface used for generating streams from stored locations
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.IStoredStreamProvider.MakeStream">
            <summary>
            Makes the required stream.
            </summary>
            <returns>A <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream"/> object that can be used for getting a data stream.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.MemoryStreamProvider.MakeStream">
            <summary>
            Makes the required stream.
            </summary>
            <returns>A <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream"/> object that can be used for getting a data stream.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Dispose">
            <summary>
            Disposes the resource.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Acquire">
            <summary>
            Acquires a stream.
            </summary>
            <returns>The acquired stream.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.Release">
            <summary>
            Releases the stream.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.LLAquire">
            <summary>
            Low level aquire.
            </summary>
            <returns>The acquired stream.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.LLRelease(System.IO.Stream)">
            <summary>
            Low Level release.
            </summary>
            <param name="stm">The STM.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream.CanCloseStream">
            <summary>
            Determines whether this instance [can close stream].
            </summary>
            <returns>
              <c>true</c> if this instance [can close stream]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCCITTGroup4ImageCompression">
            <summary>
            The settings class for CCITT (group 4) compression
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression">
            <summary>
            An object used to set the image compression used in an image resource.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression.#ctor(Atalasoft.PdfDoc.PdfImageCodec,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCodecDetails)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression"/> class.
            </summary>
            <param name="codec">The codec.</param>
            <param name="details">The details.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression.Codec">
            <summary>
            Gets the codec.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression.Details">
            <summary>
            Gets the details.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCCITTGroup4ImageCompression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCCITTGroup4ImageCompression"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCodecDetails">
            <summary>
            The settings for Dct encoded images in generated pdfs
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCodecDetails.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCodecDetails"/> class.
            </summary>
            <param name="quality">The quality.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCodecDetails.Quality">
            <summary>
            Gets the quality.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression">
            <summary>
            The compression settings for Dct compression
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression"/> class.
            </summary>
            <param name="quality">The quality.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfDctImageCompression.DefaultQuality">
            <summary>
            Gets the default quality.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfFlateImageCompression">
            <summary>
            Settings for Flate Compression
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfFlateImageCompression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfFlateImageCompression"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo">
            <summary>
            PdfImageColorSpaceInfo is a class that is used to describe the color representation
            of an image in a PDF document.  This includes the color space of the image (red, green, blue for example)
            as well as the number of channels in the image and an optional associated color space resource for
            associating calibrated colors with the image. This class is constructed for client code during the
            process of converting an image into an image resource and there is no reason to construct it directly.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.#ctor(Atalasoft.PdfDoc.PdfImageColorSpace)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo"/> class.
            </summary>
            <param name="space">The space.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.#ctor(Atalasoft.PdfDoc.PdfImageColorSpace,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo"/> class.
            </summary>
            <param name="space">The space.</param>
            <param name="colorSpaceResource">The color space resource.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.#ctor(Atalasoft.PdfDoc.PdfImageColorSpace,System.String,System.Collections.Generic.IList{Atalasoft.PdfDoc.Generating.IPdfColor})">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo"/> class.
            </summary>
            <param name="space">The space.</param>
            <param name="colorSpaceResource">The color space resource.</param>
            <param name="palette">The palette.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.Channels">
            <summary>
            Gets the channels.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.ColorSpace">
            <summary>
            Gets the color space.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.ColorSpaceResourceName">
            <summary>
            Gets or sets the name of the color space resource.
            </summary>
            <value>
            The name of the color space resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo.Palette">
            <summary>
            Gets the palette.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources">
            <summary>
            This class represents resources that will be used globally through one or more PDF documents being Generated.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources"/> class with new managers for each class of resource.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Merge(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.MergeRenameNotifier)">
            <summary>
            Merges the specified other.
            </summary>
            <param name="other">The other.</param>
            <param name="notifier">The notifier.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Dispose">
            <summary>
            Disposes all the resources in all the resource maangers contained within this object.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Fonts">
            <summary>
            Gets the font resource manager for these global resources
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Images">
            <summary>
            Gets the images.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.ColorSpaces">
            <summary>
            Gets the color spaces.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.Templates">
            <summary>
            Gets the templates.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources.MergeRenameNotifier">
            <summary>
            An event delegate used for alerting about successful merge renames.
            </summary>
            <param name="resourceClass">The resource class.</param>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider">
            <summary>
            Used to decompress image streams from existing pdf into PdfImageResource
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider"/> class.
            </summary>
            <param name="imageStream">The image stream.</param>
            <param name="maskStream">The mask stream.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.StoredStream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider"/> class.
            </summary>
            <param name="imageStream">The image stream.</param>
            <param name="maskStream">The mask stream.</param>
            <param name="isSoftMask">if set to <c>true</c> [is soft mask].</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.Dispose">
            <summary>
            Disposes the resource.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.OpenImageStream">
            <summary>
            Opens the image stream.
            </summary>
            <returns>A stream of image data</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.CloseImageStream(System.IO.Stream)">
            <summary>
            Closes the image stream.
            </summary>
            <param name="stm">The STM.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.OpenMaskStream">
            <summary>
            Opens the mask stream.
            </summary>
            <returns>A stream of mask image data</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.CloseMaskStream(System.IO.Stream)">
            <summary>
            Closes the mask stream.
            </summary>
            <param name="stm">The STM.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.HasImage">
            <summary>
            Gets a value indicating whether this instance has image.
            </summary>
            <value>
              <c>true</c> if this instance has image; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.HasMask">
            <summary>
            Gets a value indicating whether this instance has mask.
            </summary>
            <value>
              <c>true</c> if this instance has mask; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfCompressedImageStreamProvider.IsSoftMask">
            <summary>
            Gets a value indicating whether this instance is soft mask.
            </summary>
            <value>
            	<c>true</c> if this instance is soft mask; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation">
            <summary>
            Information about a pdf image
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompression,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="channels">The channels.</param>
            <param name="bitsPerChannel">The bits per channel.</param>
            <param name="compression">The compression.</param>
            <param name="colorSpace">The color space.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.FromMLPdfImage(Atalasoft.PdfDoc.MidLevel.MLPdfImage,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageColorSpaceInfo)">
            <summary>
            Froms the ML PDF image.
            </summary>
            <param name="mlimage">The mlimage.</param>
            <param name="csInfo">The cs info.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.Channels">
            <summary>
            Gets the channels.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.BitsPerChannel">
            <summary>
            Gets the bits per channel.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.Compression">
            <summary>
            Gets the compression.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageInformation.ColorSpace">
            <summary>
            Gets the color space.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageCompressionSelector">
            <summary>
            The event delegate that is called when it is time to select image compression
            </summary>
            <param name="codecs">The codecs.</param>
            <param name="info">The info.</param>
            <returns>A delegate that can select an appropriate image compression.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager">
            <summary>
            The resource manager for images
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.AddImage(System.Object,System.String)">
            <summary>
            Adds the image.
            </summary>
            <param name="o">The o.</param>
            <param name="colorSpaceResourceName">Name of the color space resource.</param>
            <returns>The name of the new resource.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.AddImage(System.Object)">
            <summary>
            Adds the image.
            </summary>
            <param name="o">The o.</param>
            <returns>The name of the new resource</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.AddImage(System.String,System.Object)">
            <summary>
            Adds the image.
            </summary>
            <param name="name">The name.</param>
            <param name="o">The o.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.AddImage(System.String,System.Object,System.String)">
            <summary>
            Adds the image.
            </summary>
            <param name="name">The name.</param>
            <param name="o">The o.</param>
            <param name="colorSpaceResourceName">Name of the color space resource.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.FromImage(System.Object)">
            <summary>
            Froms the image.
            </summary>
            <param name="o">The o.</param>
            <returns>The new image resource</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.FromImage(System.Object,System.String)">
            <summary>
            Froms the image.
            </summary>
            <param name="o">The o.</param>
            <param name="colorSpaceResourceName">Name of the color space resource.</param>
            <returns>The new image resource</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.ResourcesMatch(Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource,Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource)">
            <summary>
            Compares two PDF Image resources for equality.  
            </summary>
            <param name="one">The first image resource.</param>
            <param name="two">The second image resource.</param>
            <returns>true if the resources match, false otherwise.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.Compressors">
            <summary>
            Gets the compressors.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.StreamProvider">
            <summary>
            Gets or sets the stream provider.
            </summary>
            <value>
            The stream provider.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.CompressionSelector">
            <summary>
            Gets or sets the compression selector.
            </summary>
            <value>
            The compression selector.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.DctQuality">
            <summary>
            Gets or sets the DCT quality.
            </summary>
            <value>
            The DCT quality.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.JpxQuality">
            <summary>
            Gets or sets the JPX quality.
            </summary>
            <value>
            The JPX quality.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageManager.ResourceClass">
            <summary>
            Gets the resource class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource">
            <summary>
            A resource for pdf creation that is an image.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource.ImageProvider">
            <summary>
            Gets the image provider.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfImageResource.ImageInfo">
            <summary>
            Gets the image info.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJbig2ImageCompression">
            <summary>
            The Jbig2 settings for pdf images
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJbig2ImageCompression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJbig2ImageCompression"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression">
            <summary>
            The settings for Jpeg2000 image compression for a PdfImageResource
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfJpxImageCompression"/> class.
            </summary>
            <param name="quality">The quality.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfLzwImageCompression">
            <summary>
            The settings for Lzw compression
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfLzwImageCompression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfLzwImageCompression"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfNoneImageCompression">
            <summary>
            The settings for no compression
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfNoneImageCompression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfNoneImageCompression"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfRunLengthImageCompression">
            <summary>
            The settings for run length image compression
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfRunLengthImageCompression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.PdfRunLengthImageCompression"/> class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.TempFileStreamProvider">
            <summary>
            A stream provider for temporary files
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.TempFileStreamProvider.MakeStream">
            <summary>
            Makes the required stream.
            </summary>
            <returns>A <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.TempFileStreamProvider.StoredTempFileStream"/> object that can be used for getting a data stream.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPolicyProvider">
            <summary>
            This delegate represents a method of function that will be called when a request has come to embed a particular font within a PDF.
            Client code will be passed a font resource and the embedding permissions that are contained within the font's data.  The permissions describe
            the circumstances under which the font may be embedded.  It is up to client code to respect these permissions.
            </summary>
            <param name="resource">The font resource that is needs an embedding policy.</param>
            <param name="permissions">The permissions for the font resource.</param>
            <returns>A new PdfFontEmbeddingPolicy describing the embedding action to take for this font.</returns>
            <example>
            There a number of different actions that client code could take for a request to embed a font.  In general, if there is doubt as to
            what action to take, not embedding is the safest.
            <code>
            private PdfFontEmbeddingPolicy MyEmbeddingPolicyProvider(PdfFontResource resource, PdfFontEmbeddingPermission permissions)
            {
                PdfFontEmbeddingAction action = PdfFontEmbeddingAction.DontEmbed;
                switch (permissions) {
                case PdfFontEmbeddingPermission.Unrestricted:
                case PdfFontEmbeddingPermission.PreviewAndPrint:
                case PdfFontEmbeddingPermission.NoSubsetting:
                    action = PdfFontEmbeddingAction.Embed;
                    break;
                }
                return new PdfFontEmbeddingPolicy(action);
            }
            </code>
            </example>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager">
            <summary>
            PdfFontManager is a class that is used by the GlobalResources class to maintain and manage fonts within PDF
            documents.  In addition to tracking which fonts are requested, PdfFontManager also handles policy decisions
            for embedding fonts in PDF files.
            
            The choice to embed a font or not depends upon the circumstances.  For example, some fonts may publish that they are not
            to be embedded without permission from the creator.  Since the PDF Generating toolkit can't know if client code has 
            permission for a given font, the action to be taken for embedding should be provided by client code where possible.
            
            The PdfFontManager contains a default policy which embeds the font when the permissions are PreviewAndPrint,
            Unrestricted, NoSubsetting, and Editable.  In all other cases it will throw an exception.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager"/> class and sets its default embedding policy.
            A PdfFontManager is constructed for client code in the GlobalResources class. Client code will rarely if ever
            need to construct this class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.GetEmbeddingPolicy(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontEmbeddingPermission)">
            <summary>
            Gets the embedding policy for a particular font.  This method will be called by DocumentRenderer objects or
            PDF writer objects.  There is typically no need to call it from client code.  Calling this method from client code
            will not affect how any given font is embedded.
            </summary>
            <param name="resource">The font resource that is being considered for embedding.</param>
            <param name="permission">The permission published by that font for embedding.</param>
            <returns>A new PdfFontEmbeddingPolicy represention an action to take for embedding the font.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.RebuildAvailableFontList">
            <summary>
            When new font resources are constructed by font name (instead of using the font stream directly), the font manager
            uses a cached list of installed fonts on the client computer to avoid having to repeatedly search the available resources.
            An application should call this method if it wishes to invalidate the list.  This would allow an application to be aware
            of new fonts installed while the application is running at the cost of some performance.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.AddFromFile(System.String)">
            <summary>
            Adds a new font resource using a new unique name from from a path to a true type font file.
            </summary>
            <param name="path">The path to a true type font file.</param>
            <returns>A unique name that is associated with the new font resource</returns>
            <example>
            <code>
            string fontName = gResources.Fonts.AddFromFile(pathToFontFile);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.AddFromFont(System.Drawing.Font)">
            <summary>
            Adds a new font resource using a new unique name from <see cref="T:System.Drawing.Font"/> object.
            </summary>
            <param name="font"><see cref="T:System.Drawing.Font"/> object.</param>
            <returns>A unique name that is associated with the new font resource</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.AddFromFontName(System.String)">
            <summary>
            Adds a new font resource using a new unique named from the name of an installed font.
            </summary>
            <param name="name">The name of the font to add.</param>
            <returns>A unique name that is associated with the new font resource</returns>
            <example>
            <code>
            string fontName = gResources.Fonts.AddFromFontName("Times New Roman Italic");
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.AddStream(System.IO.Stream,System.Boolean)">
            <summary>
            Adds a new font resource using a new unique name from a stream that contains a true type font.
            </summary>
            <param name="stm">The stream that contains the true type font.</param>
            <param name="closeOnDispose">if set to <c>true</c> the stream when the resource is disposed.</param>
            <returns>A unique name that is associated with the new font resource</returns>
            <example>
            <code>
            Stream myFontStream = GetFontStream();
            string fontName = gResources.Fonts.AddFromStream(myFontStream, true);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.FromFile(System.String)">
            <summary>
            Constructs a new PdfFontResource from the path to a true type file.
            </summary>
            <param name="path">The path to the file that contains the font.</param>
            <returns>A new PdfFontResource representing the font.</returns>
            <example>
            <code>
            gResources.Fonts.Add("times", gResources.Fonts.FromFile(pathToTimesNewRoman));
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.FromFont(System.Drawing.Font)">
            <summary>
            Constructs a new PdfFontResource from <see cref="T:System.Drawing.Font"/> object.
            </summary>
            <param name="font"><see cref="T:System.Drawing.Font"/> object.</param>
            <returns>A new PdfFontResource representing the font.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.FromFontName(System.String)">
            <summary>
            Constructs a new PdfFontResource from the name of a font.
            </summary>
            <param name="name">The name of an installed font.</param>
            <returns>A new PdfFontResource representing the font.</returns>
            <example>
            <code>
            gResources.Fonts.Add("times", gResources.Fonts.FromFontName("Calibri"));
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.FromStream(System.IO.Stream,System.Boolean)">
            <summary>
            Constructs a new PdfFontResource from a stream that contains a true type font.
            </summary>
            <param name="stm">The stream that contains the font.</param>
            <param name="closeOnDispose">if set to <c>true</c> clost the stream when the resource is disposed.</param>
            <returns>The new resource</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.ResourcesMatch(Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontResource)">
            <summary>
            Compares two resources for equality.  Default implementation returns false.  Subclasses should override this method
            </summary>
            <param name="one">The first resource.</param>
            <param name="two">The second resource.</param>
            <returns>
            true if the resources match, false otherwise.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.EmbeddingPolicyProvider">
            <summary>
            Gets or sets the embedding policy provider for the font resource manager.
            </summary>
            <value>
            The embedding policy provider that will be called to get the action to take in a request to embed a font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.DefaultEmbeddingPolicyProvider">
            <summary>
            Gets the default embedding policy provider for the font manager.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.StandardType1Fonts">
            <summary>
            Gets a list of the standard Type 1 fonts.
            </summary>
            <remarks>
            PDF allows access to a set of PostScript Type 1 fonts that may be used in a PDF without the need
            for the fonts to be embedded in the document.  This allows a document to be smaller since the overhead of
            the font is part of the reader, not part of the document.
            
            DotPdf allows you to use these fonts and keeps a database of their metrics so they can be properly
            measured.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager.ResourceClass">
            <summary>
            Gets the resource class.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass">
            <summary>
            A PdfResource designation class
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass.Fonts">
            <summary>
            A font used for typography
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass.Images">
            <summary>
            An image to display on the pdf
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass.ColorSpaces">
            <summary>
            A colorspace to use
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass.Templates">
            <summary>
            A drawing template
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.ResourceHandling.ResourceSelection">
            <summary>
            The handler for duplicate entries coming into the ResourceManager
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.ResourceSelection.KeepOriginal">
            <summary>
            Keep the original discard the new
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.ResourceHandling.ResourceSelection.OverwriteWithNew">
            <summary>
            Discard the original keep the new
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.GRestore">
            <summary>
            A displaylist level GRestore operation for generating pdf
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.GRestore.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            </summary>
            <param name="r"></param>
            <example>
              <code>
            public void GeneratePdf(PdfPageRenderer r)
            {
            w.DrawingSurface.Begin();
            w.DrawingSurface.AddRect(MyBounds); // place a rectangle
            w.DrawingSurface.Stroke(PdfLineStyle.Default, MyColor); // draw its outline in black
            w.DrawingSurface.End();
            }
              </code>
              </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.GRestore.Name">
            <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Authoring API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
            <value>
            The name of the object.
            </value>
            <example>
              <code>
            foreach (IPdfRenderable namedGroup in list.FindAll(item =&gt; item.Name == "Group") {
            ProcessGroup(namedGroup);
            }
              </code>
              </example>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.GSave">
            <summary>
            A drawinglist level call to GSave
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.GSave.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            </summary>
            <param name="r"></param>
            <example>
              <code>
            public void GeneratePdf(PdfPageRenderer r)
            {
            w.DrawingSurface.Begin();
            w.DrawingSurface.AddRect(MyBounds); // place a rectangle
            w.DrawingSurface.Stroke(PdfLineStyle.Default, MyColor); // draw its outline in black
            w.DrawingSurface.End();
            }
              </code>
              </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.GSave.Name">
            <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Authoring API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
            <value>
            The name of the object.
            </value>
            <example>
              <code>
            foreach (IPdfRenderable namedGroup in list.FindAll(item =&gt; item.Name == "Group") {
            ProcessGroup(namedGroup);
            }
              </code>
              </example>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment">
            <summary>
            An enum to represent text alignment styles
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment.Left">
            <summary>
            Left justify. (Default)
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment.Right">
            <summary>
            Right justify.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment.Center">
            <summary>
            Center justify.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Shapes.PdfTextAlignment.Fill">
            <summary>
            Fill the available space. This is not supported by all text objects.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape">
            <summary>
            The shape used to place an image on a page
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.#ctor(System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape"/> class.
            </summary>
            <param name="imageName">Name of the image.</param>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.GetColorSpaceResourceName(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,System.String)">
            <summary>
            Gets the name of the color space resource.
            </summary>
            <param name="r">The r.</param>
            <param name="imageName">Name of the image.</param>
            <returns>The colorspace name or null if it doesn't exist.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.OnResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Called when [resource renamed].
            </summary>
            <param name="gr">The gr.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.OnResourcesRequested(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Called when the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape"/> is requested to report resources used.  If client code
            consumes resources, it should override this method combining its results with those of
            <c>base.OnResourceRequested</c>
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.ImageName">
            <summary>
            Gets or sets the name of the image.
            </summary>
            <value>
            The name of the image.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfImageShape.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle">
            <summary>
            A PdfBaseShape for making RoundedRectangles
            </summary>
            <example>
            <code>
                   PdfGeneratedDocument doc = new PdfGeneratedDocument();
                   PdfGeneratedPage page = PdfDefaultPages.Letter;
                   doc.Pages.Add(page);
                   PdfRoundedRectangle rect = new PdfRoundedRectangle(new PdfBounds(0, 0, 72, 72), 12.0, PdfColorFactory.FromGray(0.0), 2.0);
                   PdfRoundedRectangle rect2 = new PdfRoundedRectangle(new PdfBounds(72 * 2, 72 * 2, 72 * 3, 72 * 1), 26, PdfColorFactory.FromGray(0.0));
                   page.DrawingList.Add(rect);
                   page.DrawingList.Add(rect2);
                   </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle"/> class.
            </summary>
            <param name="bounds">The bounds of the rounded rectangle.</param>
            <param name="curveRadius">The curve radius of the corners of the rectangle.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="lineWidth">Width of the line.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle"/> class.
            </summary>
            <param name="bounds">The bounds of the rounded rectangle.</param>
            <param name="curveRadius">The curve radius of the corners of the rectangle.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="lineWidth">Width of the line.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle"/> class.
            </summary>
            <param name="bounds">The bounds of the rounded rectangle.</param>
            <param name="curveRadius">The curve radius of the corners of the rectangle.</param>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            The bounds of the rounded rectangle.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfRoundedRectangle.CurveRadius">
            <summary>
            Gets or sets the curve radius.
            </summary>
            <value>
            The curve radius of the corners of the rectangle
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox">
            <summary>
            A simple pdf text box.
            </summary>
            <example>
            <code>
            PdfTextBox box = new PdfTextBox(100,100,100,100,fontName,10.0,"This is a text box. Word wrap is automatic");
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox"/> class.
            </summary>
            <param name="box">The box.</param>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="lineWidth">Width of the outline.</param>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,System.String,System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of the shape</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.GenerateTransform">
            <summary>
            Generates the default transform based on Scale, Rotate, and Translate.
            </summary>
            <returns>the PdfTransform based on the Scale, Rotate, and Translate properties.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.Bounds">
            <summary>
            Gets or sets the bounds of the text box.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextBox.Text">
            <summary>
            Gets or sets the text that will be in the box.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Utilities.KerningPair">
            <summary>
            An object to represent a "kerning pair". A "kerning pair" is comprised of a string and a kern value. The kern value represents how much spacing exists inbetween each letter.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Utilities.KerningPair.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Utilities.KerningPair"/> struct.
            </summary>
            <param name="text">The text.</param>
            <param name="kernValue">The kern value.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.KerningPair.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Utilities.KerningPair.KernValue">
            <summary>
            Gets or sets the kern value.
            </summary>
            <value>
            The kern value.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Validation.AnnotationRepairContext">
            <summary>
            A repair context for fixing problems in annotations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Validation.AnnotationRepairContext.#ctor(Atalasoft.PdfDoc.Generating.Annotations.BaseAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Validation.AnnotationRepairContext"/> class.
            </summary>
            <param name="annot">The annot.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Validation.AnnotationRepairContext.Annotation">
            <summary>
            Gets the annotation.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Validation.DocumentRepairContext">
            <summary>
            Represents a <see cref="T:Atalasoft.Shared.Validation.RepairContext"/> used for
            repairs that require document-level information.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Validation.DocumentRepairContext.#ctor(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Validation.DocumentRepairContext"/> class.
            </summary>
            <param name="doc">The document for the repair.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Validation.DocumentRepairContext.Document">
            <summary>
            Gets the document associated with the repair context.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Validation.Severity">
            <summary>
            Describes the severity of the consequences of making a repair to part of a PDF document.
            </summary>
            <remarks>
            Although enumerated, this is an ordinal type and new levels of severity may be added in the future.
            Rather than check for equality of one of these values, you should instead compare to a value.
            For example you might care about anything <c>&gt;= Severity.Serious</c>.  The severity is ordered based
            on a scale of the effect of changes made in terms of how the appearance and content may change.
            </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Validation.Severity.None">
            <summary>
            No severity - not used - this is equivalent to no problem.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Benign">
            <summary>
            The problem is readily fixable and will affect neither the outward appearance nor the content of the document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Minor">
            <summary>
            The problem is readily fixable, but the fix may affect the outward appearance in an acceptable manner, but not the content of the document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Serious">
            <summary>
            The problem is readily fixable, but the fix may affect the outward appearance and/or the content of the document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Major">
            <summary>
            The problem is fixable, but the fix necessitates permanently removing content from the document.  It is not
            recommended to indiscriminately allow automatic repair of Major problems.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Catastrophic">
            <summary>
            The problem is not fixable.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Validation.PageRepairContext">
            <summary>
            Defines a context for repairs that require access to a page that contain the objects.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Validation.PageRepairContext.#ctor(Atalasoft.PdfDoc.Generating.PdfGeneratedPage,Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PageRepairContext"/> class.
            </summary>
            <param name="page">The page.</param>
            <param name="doc">The document.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Validation.PageRepairContext.Page">
            <summary>
            Gets the page associated with this repair.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Validation.PageRepairContext.Document">
            <summary>
            Gets the document associated with this repair.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Validation.PdfFormRepairContext">
            <summary>
            Represents a repair context holding a form.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Validation.PdfFormRepairContext.#ctor(Atalasoft.PdfDoc.Generating.Forms.PdfForm)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfFormRepairContext"/> class.
            </summary>
            <param name="form">The form.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Validation.PdfFormRepairContext.Form">
            <summary>
            Gets the form object.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences">
            <summary>
            This class represents the consequences of making a given repair on a PDF document.
            </summary>
            <remarks>
            This class can only be constructed through the given factory methods.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences.Benign(System.String)">
            <summary>
            Constructs a new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object with a <see cref="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Benign"/> Severity.
            The problem is readily fixable and will affect neither the outward appearance nor the content of the document.
            </summary>
            <param name="description">The non-null description of the consequences of the repair.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences.Minor(System.String)">
            <summary>
            Constructs a new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object with a <see cref="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Minor"/> Severity.
            The problem is readily fixable, but the fix may affect the outward appearance in an acceptable manner, but not the content of the document.
            </summary>
            <param name="description">The non-null description of the consequences of the repair.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences.Serious(System.String)">
            <summary>
            Constructs a new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object with a <see cref="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Serious"/> Severity.
            The problem is readily fixable, but the fix may affect the outward appearance and/or the content of the document.
            </summary>
            <param name="description">The non-null description of the consequences of the repair.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences.Major(System.String)">
            <summary>
            Constructs a new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object with a <see cref="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Major"/> Severity.
            The problem is fixable, but the fix necessitates permanently removing content from the document.  It is not
            recommended to indiscriminantly allow automatic repair of Major problems.
            </summary>
            <param name="description">The non-null description of the consequences of the repair.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences.Catastrophic(System.String)">
            <summary>
            Constructs a new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object with a <see cref="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Catastrophic"/> Severity.
            The problem is not fixable.  Any attempts to fix the problem would result in a PDF that is damaged.
            </summary>
            <param name="description">The non-null description of the consequences of the repair.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/> object</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences.Severity">
            <summary>
            Gets the <see cref="P:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences.Severity"/> of the consequences.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.PdfColorFactory">
            <summary>
            A factory class to create PdfColors from their channel components.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromRgb(System.Double,System.Double,System.Double)">
            <summary>
            Create an Rgb color for use in Pdf.
            </summary>
            <param name="r">The red channel. Value between 0.0 and 1.0</param>
            <param name="g">The green channel. Value between 0.0 and 1.0</param>
            <param name="b">The blue channel. Value between 0.0 and 1.0</param>
            <returns>a new IPdfColor representing the desired color</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromRgb(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create an Rgb color for use in Pdf.
            </summary>
            <param name="r">The red channel. Value between 0.0 and 1.0</param>
            <param name="g">The green channel. Value between 0.0 and 1.0</param>
            <param name="b">The blue channel. Value between 0.0 and 1.0</param>
            <param name="resourceName">Name of the color space resource to use to describe this color.</param>
            <returns>a new IPdfColor representing the desired color</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromColor(System.Drawing.Color)">
            <summary>
            Create an Rgb color for use in Pdf.
            </summary>
            <param name="color">The color.</param>
            <returns>a new IPdfColor representing the desired color</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromColor(System.Drawing.Color,System.String)">
            <summary>
            Create an Rgb color for use in Pdf.
            </summary>
            <param name="color">The color.</param>
            <param name="resourceName">Name of the color space resource to use to describe this color.</param>
            <returns>a new IPdfColor representing the desired color</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromCmyk(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a Cymk color for use in Pdf.
            </summary>
            <param name="c">The cyan color. Value between 0.0 and 1.0</param>
            <param name="y">The yellow color. Value between 0.0 and 1.0</param>
            <param name="m">The magenta color. Value between 0.0 and 1.0</param>
            <param name="k">The black color. Value between 0.0 and 1.0</param>
            <returns>a new IPdfColor representing the desired color</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromCmyk(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a Cymk color for use in Pdf.
            </summary>
            <param name="c">The cyan color. Value between 0.0 and 1.0</param>
            <param name="y">The yellow color. Value between 0.0 and 1.0</param>
            <param name="m">The magenta color. Value between 0.0 and 1.0</param>
            <param name="k">The black color. Value between 0.0 and 1.0</param>
            <param name="resourceName">Name of the color space resource to use to describe this color.</param>
            <returns>a new IPdfColor representing the desired color</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromGray(System.Double)">
            <summary>
            Create a Grayscale color for use in Pdf
            </summary>
            <param name="gray">The gray color. Value between 0.0 (black) and 1.0 (white)</param>
            <returns>a new IPdfColor representing the desired color</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfColorFactory.FromGray(System.Double,System.String)">
            <summary>
            Froms the gray.
            </summary>
            <param name="gray">The gray.</param>
            <param name="resourceName">Name of the color space resource to use to describe this color.</param>
            <returns>a new IPdfColor representing the desired color</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.IPdfCmykColor">
            <summary>
            The interface for CMYK colors in Pdf.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.IPdfColor">
            <summary>
            A container interface used to carry color objects in collections. Do not use this interface unless you are simply moving a more specific color object to another object.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.IPdfColor.ColorSpaceResourceName">
            <summary>
            Gets or sets the name of the color space resource.
            </summary>
            <value>
            The name of the color space resource.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.IPdfCmykColor.C">
            <summary>
            Gets or sets the Cyan channel
            </summary>
            <value>
            The Cyan channel. Value between 0.0 and 1.0
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.IPdfCmykColor.M">
            <summary>
            Gets or sets the Magenta channel.
            </summary>
            <value>
            The Magenta channel. Value between 0.0 and 1.0
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.IPdfCmykColor.Y">
            <summary>
            Gets or sets the Yellow channel.
            </summary>
            <value>
            The Yellow channel. Value between 0.0 and 1.0
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.IPdfCmykColor.K">
            <summary>
            Gets or sets the Black channel.
            </summary>
            <value>
            The Black channel. Value between 0.0 and 1.0
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.IPdfGrayColor">
            <summary>
            The interface for Gray based colors in Pdf
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.IPdfGrayColor.Gray">
            <summary>
            Gets or sets the gray.
            </summary>
            <value>
            The gray. Value between 0.0 and 1.0
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.IPdfRgbColor">
            <summary>
            The interface for RGB color in Pdf
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.IPdfRgbColor.R">
            <summary>
            Gets or sets the Red channel.
            </summary>
            <value>
            The Red channel. Value between 0.0 and 1.0
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.IPdfRgbColor.G">
            <summary>
            Gets or sets the Green channel.
            </summary>
            <value>
            The Green channel. Value between 0.0 and 1.0.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.IPdfRgbColor.B">
            <summary>
            Gets or sets the Blue channel.
            </summary>
            <value>
            The Blue channel. Value between 0.0 and 1.0
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.ShapeUtilities">
            <summary>
            A utility class for objects that Override PdfBaseShape
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ShapeUtilities.ConditionallyClipStrokeOrFill(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Boolean,Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod)">
            <summary>
            Conditionallies the clip stroke or fill.
            </summary>
            <param name="r">The r.</param>
            <param name="strokeColor">Color of the stroke.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="clip">if set to <c>true</c> [clip].</param>
            <param name="style">The style.</param>
            <param name="fillMethod">The fill method.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.ShapeUtilities.ConditionallyClipStrokeOrFill(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Boolean,System.Boolean,Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod)">
            <summary>
            Conditionallies the clip stroke or fill.
            </summary>
            <param name="r">The r.</param>
            <param name="strokeColor">Color of the stroke.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="clip">if set to <c>true</c> [clip].</param>
            <param name="maintainPathAfterClip"><c>true</c> if the shape will maintain the current path after clip; otherwise, <c>false</c>.</param>
            <param name="style">The style.</param>
            <param name="fillMethod">The fill method.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc">
             <summary>
             A Shape class for PdfGeneratedDocuments which draws Arcs, Chords and Pie segments.
             </summary>
             <example>
             <code>
            PdfGeneratedDocument doc = new PdfGeneratedDocument();
            PdfGeneratedPage page = PdfDefaultPages.Letter;
            doc.Pages.Add(page);
            PdfCircle circle = new PdfCircle(new PdfPoint(100, 100), 100, PdfColorFactory.FromRgb(1, 0, 0), 1);
            page.DrawingList.Add(circle);
            PdfArc arc = new PdfArc(new PdfPoint(100, 100), 100, 315, 45, PdfColorFactory.FromGray(0), 1);
            arc.Style.DashPattern = new double[] { 4, 2 };
            arc.IncludeWedge = true;
            arc.Clockwise = false;
            page.DrawingList.Add(arc);
            </code>
             </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,System.Double,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc"/> class.
            </summary>
            <param name="center">The center of the circle that is used to generate the arc</param>
            <param name="radius">The radius of the circle that is used to generate the arc</param>
            <param name="startAngle">The start angle of the arc</param>
            <param name="endAngle">The end angle of the arc</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The width of drawn lines.</param>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,System.Double,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc"/> class.
            </summary>
            <param name="center">The center of the circle that is used to generate the arc</param>
            <param name="radius">The radius of the circle that is used to generate the arc</param>
            <param name="startAngle">The start angle of the arc</param>
            <param name="endAngle">The end angle</param>
            <param name="outlineColor">Color of the outline</param>
            <param name="linewidth">The width of the drawn lines</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,System.Double,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc"/> class.
            </summary>
            <param name="center">The center of the circle that is used to generate the arc</param>
            <param name="radius">The radius.</param>
            <param name="startAngle">The start angle.</param>
            <param name="endAngle">The end angle.</param>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <value>
            The center of the circle that is used to generate the arc
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>
            The radius of the circle that is used to generate the arc
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>
            The start angle of the arc
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>
            The end angle of the arc
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.IncludeWedge">
            <summary>
            Gets or sets a value indicating whether to include the wedge of the arc.
            </summary>
            <value>
              <c>true</c> if wedge included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfArc.Clockwise">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfArc"/> is clockwise.
            </summary>
            <value>
              <c>true</c> if clockwise; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.PdfDefaultPages">
            <summary>
            A collection of default pages for use in the PdfGeneratedDocument object
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.Letter">
            <summary>
            Gets the letter sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.LetterLandscape">
            <summary>
            Gets the letter landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.Legal">
            <summary>
            Gets the legalsized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.LegalLandscape">
            <summary>
            Gets the legal landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.Ledger">
            <summary>
            Gets the ledger sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.LedgerLandscape">
            <summary>
            Gets the ledger landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A4">
            <summary>
            Gets the a4 sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A4Landscape">
            <summary>
            Gets the a4 landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A5">
            <summary>
            Gets the a5 sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A5Landscape">
            <summary>
            Gets the a5 landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A6">
            <summary>
            Gets the a6 sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.A6Landscape">
            <summary>
            Gets the a6 landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B4">
            <summary>
            Gets the b4 sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B4Landscape">
            <summary>
            Gets the b4 landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B5">
            <summary>
            Gets the b5 sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B5Landscaped">
            <summary>
            Gets the b5 landscaped sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B6">
            <summary>
            Gets the b6 sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.B6Landscape">
            <summary>
            Gets the b6 landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C4">
            <summary>
            Gets the c4 sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C4Landscape">
            <summary>
            Gets the c4 landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C5">
            <summary>
            Gets the c5 sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C5Landscape">
            <summary>
            Gets the c5 landscape sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C6">
            <summary>
            Gets the c6 sized page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfDefaultPages.C6Landscape">
            <summary>
            Gets the c6 landscape sized page.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod">
            <summary>
            Defines how a path in PDF page content will be filled.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod.NonZeroWinding">
            <summary>
            This fill method represents the non-zero winding rule.  In this method, horizontal rays are fired through the path and if segments cross
            the ray from bottom to top, 1 is added to a winding count.  If segments cross the ray from top to bottom, 1 is subtracted from the winding
            count.  If the winding count is non-zero, the path will be filled along the ray.  If the winding number is 0, the path will be
            empty along the ray.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfFillMethod.EvenOdd">
            <summary>
            This fill method represents the even/odd rule.  In this method, horizontal rays are fired through the path and a running total
            of segments crossing the ray is kept.  If the running total is odd, the path will be filled along the ray.  If the running total
            is even, the path will not be filled along the ray.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle">
            <summary>
            Represents the way that ends of stroked paths will look.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle.Butt">
            <summary>
            Represents flat ends to lines
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle.Round">
            <summary>
            Represetns half-circle round ends to lines
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle.ProjectingSquare">
            <summary>
            Similar to butt ends, but lines ends will project out by half the line width forming a square end.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle">
            <summary>
            Represents how transitions in segments in path will look.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle.Mitered">
            <summary>
            At the vertex of connected line segments, the segments will be joined by projecting the outer edges of the
            segments until they intersect.  If this would produce too sharp an angle a bevel is used instead.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle.Rounded">
            <summary>
            At the vertex of connected line segments, the segments will be joined by a circular arc.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle.Beveled">
            <summary>
            At the vertex of connected line segments, the segments will be joined by connecting the outer tips of the
            segments, creating a bevel.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle">
            <summary>
            Represents all the elements that defines the style of stoked lines in PDF content.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.#ctor(System.Double,Atalasoft.PdfDoc.Generating.Rendering.PdfLineCapStyle,Atalasoft.PdfDoc.Generating.Rendering.PdfLineJoinStyle,System.Double,System.Double[],System.Int32)">
            <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle"/> class.
            </summary>
            <param name="width">The width of the line in PDF units.</param>
            <param name="capStyle">The line cap style.</param>
            <param name="joinStyle">The line join style.</param>
            <param name="miterLimit">The miter limit of mitered line joints.</param>
            <param name="dashPattern">The dash pattern.</param>
            <param name="dashPhase">The dash phase.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.#ctor(Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle"/> class using the contents of the PdfLineStyle passed in.
            </summary>
            <param name="source">The source to copy from.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.#ctor(Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle"/> class.
            </summary>
            <param name="source">The source to copy from.</param>
            <param name="width">The width of the line in PDF units that will override the width in source.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle"/> class with defaults, except for the width.
            </summary>
            <param name="width">The width of the line in PDF units.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.Width">
            <summary>
            Gets or sets the width of the line in PDF units.
            </summary>
            <value>
            The width in PDF units.  Width should be 0 or greater.  0 represents the smallest width that can be represented
            on the target device.  On very high resolution devices, this may be nearly invisible and should be avoided.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.CapStyle">
            <summary>
            Gets or sets the line cap style.
            </summary>
            <value>
            The cap style.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.JoinStyle">
            <summary>
            Gets or sets the line join style.
            </summary>
            <value>
            The join style.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.MiterLimit">
            <summary>
            Gets or sets the miter limit when JoinStyle is set to Mitered.  When segments join with a mitered joint at sharp
            angles, MiterLimit keeps the joints from projecting too far.  The miter length of a joint is this distance from
            the internal intersection of the line to the projected external intersection.  If the ration of the miter length to the
            line width is greater than the miter limit, the joint will be beveled.
            </summary>
            <value>
            The miter limit.  This value should be set to 1 or greater.  Default is 10.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.DashPattern">
            <summary>
            Gets or sets the dash pattern used for lines.  This is an array of doubles that represents alternating on and
            off patterns of dashes in PDF units.  An empty array is a solid line.  A single number is alternated on and off (ie,
            [4] will be 4 units on, 4 units off).  More than a single number will be alternated.  Default is an empty array.
            
            </summary>
            <value>
            The dash pattern.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.DashPhase">
            <summary>
            Gets or sets the dash phase.  This number represents at what point dashes will start in the DashPattern.  For example,
            if the DashPattern is [2, 3] and the phase is 1, the dashed line will be 1 unit on, 3 off, 2 on, 3 off, etc.
            </summary>
            <value>
            The dash phase.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfLineStyle.Default">
            <summary>
            Gets the default line style: 1 PDF unit wide, butt line ends, mitered joints, a miter limit of 10, no dash pattern, 0 phase.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer">
            <summary>
            PdfPageRenderer is an abstract class that represents mechanisms for generating or rendering PDF content from
            a PdfGenerated page.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.#ctor(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources)">
            <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer"/> class.
            </summary>
            <param name="globalResources">The global resources that are available for this document.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.GSave">
            <summary>
            Performs a graphics save operation.  All current graphics state should be encapsulated and pushed on a stack for later
            retrieval.
            </summary>
            <example>
            <code>
            public void ClipToShape(PdfPageRenderer renderer, SomeShape shape, IPdfRenderable moreContent)
            {
                writer.GSave(); // saves the current clip region
                ClipToMyShape(w, shape);
                moreContent.GeneratePdf(w); // generates clipped content
                writer.GRestore(); // restores the old clipping region
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.GRestore">
            <summary>
            Restores the current graphics state to the last saved state by GSave.  It is an error to call GRestore without first calling
            GSave.
            </summary>
            <example>
            <code>
            public void ClipToShape(PdfPageRenderer renderer, SomeShape shape, IPdfRenderable moreContent)
            {
                writer.GSave(); // saves the current clip region
                ClipToMyShape(w, shape);
                moreContent.GeneratePdf(w); // generates clipped content
                writer.GRestore(); // restores the old clipping region
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.MakeDrawingTemplateRenderer(Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate)">
            <summary>
            Makes a child renderer for rendering <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> objects.
            </summary>
            <param name="template">The template.</param>
            <returns>A new renderer.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.LLMakeDrawingTemplateRenderer(Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate)">
            <summary>
            Constructs a child template renderer.
            </summary>
            <param name="template">The template.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer"/></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.TextSurface">
            <summary>
            Gets or sets the text surface for rendering text content on a PDF page.
            </summary>
            <value>
            The text surface.
            </value>
            <example>
            <code>
            public void HelloWorld(PdfPageRenderer renderer)
            {
                writer.TextSurface.Begin();
                writer.TextSurface.SetFont("courier", 12.0);
                writer.TextSurface.WriteTextLine("hello, world!", new PdfPoint(36, 288));
                writer.TextSurface.End();
            }
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.DrawingSurface">
            <summary>
            Gets or sets the drawing surface for rendering graphics or images on a PDF page.
            </summary>
            <value>
            The drawing surface.
            </value>
            <example>
            <code>
            public void Triangle(PdfPageRenderer renderer)
            {
                writer.DrawingSurface.Begin();
                writer.AddPath(new PdfPathOperation[] {
                    PdfPathOperation.MoveTo(0, 0), PdfPathOperation.LineTo(20, 100),
                    PdfPathOperation.LineTo(40, 0), PdfPathOperation.Close()
                    });
                writer.DrawingSurface.End();
            }
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.GlobalResources">
            <summary>
            Gets the global resources that are available to a document and page that is being rendered.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer.ParentPageRenderer">
            <summary>
            Gets or sets the parent page renderer (if any).
            </summary>
            <value>
            The parent page renderer.
            </value>
            <remarks>
            In some cases, a page renderer may need to create a child renderer for rendering content on page,
            including <see cref="T:Atalasoft.PdfDoc.Generating.Templates.DrawingTemplate"/> objects or annotations.
            This method allows a child renderer to access its parent, if needed.
            </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer">
            <summary>
            The DocumentRenderer class is an abstract class that defines how a PdfGeneratedDocument is rendered into some other form.
            DocumentRenderer defines the process of rendering, but doesn't define the actual steps.  In this way one concrete instance of DocumentRenderer
            could create a PDF file from a PdfGeneratedDocument and another could create a WPF approximation of a single page within a PdfGeneratedDocument, but
            both renderers could be treated the same in client code.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.OnDocumentProgress(Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs)">
            <summary>
            Raises the <see cref="E:DocumentProgress"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.Render(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            Renders the entire PdfGeneratedDocument.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.Render(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,System.Collections.Generic.ICollection{Atalasoft.PdfDoc.BasePage})">
            <summary>
            Renders a subset of pages from the specified document.  This method is intended to allow the rendering of a subset
            of pages from a document.  If pages is an empty enumeration, the output is undefined.
            </summary>
            <param name="document">The document to render.</param>
            <param name="pages">An enumerable collection of pages to render.</param>
            <example>
            <code>
            public void RenderFirstPage(PdfGeneratedDocument doc, DocumentRenderer renderer)
            {
                renderer.Render(doc, new PdfBasePage[] { doc.Pages[0] });
            }
            </code>
            </example>
            
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLEndPage(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
            <summary>
            This method represents the Low-Level implementation of EndPage.  A subclass of DocumentRenderer would implement this
            method to do any processing to finish up after a page has been rendered. For example, a particular instance might need to
            remove temporary files created earlier.  The default implementation does nothing.
            </summary>
            <param name="document">The document being rendered.</param>
            <param name="page">The current page that was just rendered.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLBeginPage(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
            <summary>
            This method represents the Low-Level implementation of BeginPage.  A subclass of DocumentRenderer would implement this
            method to do any processing to set up for rendering a given page.  For exmaple, a particular rendered might need to
            create GDI Graphics objects or clear a frame buffer before rendering a page.
            </summary>
            <param name="document">The document being rendered.</param>
            <param name="page">The page that is about to be rendered.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.MakePageRenderer(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
            <summary>
            Makes the PdfPageRenderer that will be used for each page being rendered.  When rendering a document, MakeWriter will be called
            once for every page that is rendered.  A concrete implementation of DocumentRenderer must implement this method.
            </summary>
            <param name="document">The document being rendered.</param>
            <param name="page">The page that is about to be rendered.</param>
            <returns>A new PdfPageRenderer</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLBeginDoc(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            This method represents the Low-Level implementation of BeginDoc.  It is called once at the start of rendering the document
            after the first DocumentProgress event has been fired, but before the first page is rendered.  If a document has an empty
            Pages collection, LLBeginDoc will not be called.  The default implementation does nothing.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLGenerate(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage,Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            This method represents the Low-Level implementation of code used to generate PDF content for a particular page.
            A complete implementation of this method should call the GeneratePdf method of the page's DrawlingList property,
            passing in the given PdfPageRenderer object.  The default implementation does nothing.
            </summary>
            <param name="document">The document being rendered.</param>
            <param name="page">The page being rendered.</param>
            <param name="renderer">The PdfPageRenderer object returned by MakeWriter.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.LLEndDoc(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            This method represents the Low-Level implementation of EndDoc.  It is called once at the end of rendering a document after
            the final DocumentProgress event has been fired.  If a document has an empty Pages collection, LLEndDoc will not be called.
            A concrete implementation of DocumentRenderer could use this method for cleaning up temporary files created during the
            rendering process.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="E:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.DocumentProgress">
            <summary>
            Occurs when progress is made in the overall process of rendering the document. This event is fired when rendering starts, when rendering
            completes, when each page starts and when each page completes.  If the document contains no pages, then precisely one DocumentProgress
            event will be fired.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.DocumentRenderer.ErrorOccurred">
            <summary>
            Gets or sets a value indicating whether an error occurred in the process of rendering a page. ErrorOccurred will be cleared
            before rendering begins.
            </summary>
            <value>
              <c>true</c> if an error occurred; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Geometry.PdfPointCollection">
            <summary>
            Represents a list of <see cref="T:Atalasoft.PdfDoc.Geometry.PdfPoint"/> objects.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral">
            <summary>
            This class represents a four-sided polygon.  It is typically used in marking text on the page.
            For drawing order purposes, if the quadrilateral is a rectangle on the page, P0 is the lower-left
            corner, P1 is the lower-right corner, P2 is the upper right corner, and P3 is the upper-left corner.
            Misordering the points may result in the shape being rendered upside down or as a bow-tie.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral"/> class.
            </summary>
            <param name="p0">Point 0.</param>
            <param name="p1">Point 1.</param>
            <param name="p2">Point 2.</param>
            <param name="p3">Point 3.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral"/> class using the supplied bounds.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.#ctor(Atalasoft.PdfDoc.Geometry.PdfQuadrilateral)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral"/> class copying from the supplied quadrilateral.
            </summary>
            <param name="other">The other quadrilateral.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral"/> class using the eight values.
            </summary>
            <param name="x0">Point 0 X.</param>
            <param name="y0">Point 0 Y.</param>
            <param name="x1">Point 1 X.</param>
            <param name="y1">Point 1 Y.</param>
            <param name="x2">Point 2 X.</param>
            <param name="y2">Point 2 Y.</param>
            <param name="x3">Point 3 X.</param>
            <param name="y3">Point 3 Y.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.IsEmpty">
            <summary>
            Determines whether this quadrilateral is empty.
            </summary>
            <returns>
              <c>true</c> if this quadrilateral is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.IsRectangular">
            <summary>
            Determines whether this quadrilateral is rectangular.  Note that this test checks to
            see if the diagonals are equal and the shape is convex, therefore it is correct regardless of rotation.
            </summary>
            <returns>
              <c>true</c> if this quadrilateral is rectangular; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.MinX">
            <summary>
            Gets the minimum of all X coordinates.
            </summary>
            <returns>The minimum X</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.MaxX">
            <summary>
            Gets the maximum of all X coordinates.
            </summary>
            <returns>The maximum X</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.MinY">
            <summary>
            Gets the minimum of all Y coordinates.
            </summary>
            <returns>The minimum Y</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.MaxY">
            <summary>
            Gets the maximum of all Y coordinates.
            </summary>
            <returns>The maximum Y</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.LowerBound">
            <summary>
            Gets the lower bound of the quadrilateral.
            </summary>
            <returns>The minumum (X, Y) of the shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.UpperBound">
            <summary>
            Gets the upper bound of the quadrilateral.
            </summary>
            <returns>The maximum (X, Y) of the shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.LowerBound(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Gets the smaller of the <see cref="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.LowerBound"/> and the supplied point.
            </summary>
            <param name="other">The other point.</param>
            <returns>The smaller of the <see cref="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.LowerBound"/> and the supplied point.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.UpperBound(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Gets the larger of the <see cref="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.UpperBound"/> and the supplied point.
            </summary>
            <param name="other">The other point.</param>
            <returns>The larger of the <see cref="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.UpperBound"/> and the supplied point.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.IsConvex">
            <summary>
            Determines whether this quadrilateral is convex.  A quadrilateral is convex if it is
            not empty and if its diagonals cross.
            </summary>
            <returns>
              <c>true</c> if this quadrilateral is convex; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.IsSimple">
            <summary>
            Determines whether this quadrilateral is convex.  A quadrilateral is simple if it is
            not empty and if its edges do not cross.
            </summary>
            <returns>
              <c>true</c> if this quadrilateral is simple; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.IsConcave">
            <summary>
            Determines whether this quadrilateral is concave.  A quadrilateral is concave if it is
            simple and if it is not convex.
            </summary>
            <returns>
              <c>true</c> if this quadrilateral is concave; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.Empty">
            <summary>
            Gets an empty quadrilateral.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.P0">
            <summary>
            Gets or sets the Point 0.
            </summary>
            <value>
            The p0.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.P1">
            <summary>
            Gets or sets the Point 1.
            </summary>
            <value>
            The p1.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.P2">
            <summary>
            Gets or sets the Point 2.
            </summary>
            <value>
            The p2.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.P3">
            <summary>
            Gets or sets the Point 3.
            </summary>
            <value>
            The p3.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfPoint"/> at the specified index.  Index may be
            0-3 inclusive.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection">
            <summary>
            This class represents a collection of <see cref="T:Atalasoft.PdfDoc.Geometry.PdfQuadrilateral"/> objects.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.IndexOf(Atalasoft.PdfDoc.Geometry.PdfQuadrilateral)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.Insert(System.Int32,Atalasoft.PdfDoc.Geometry.PdfQuadrilateral)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.Add(Atalasoft.PdfDoc.Geometry.PdfQuadrilateral)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.Contains(Atalasoft.PdfDoc.Geometry.PdfQuadrilateral)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.CopyTo(Atalasoft.PdfDoc.Geometry.PdfQuadrilateral[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array"/> is null.
              </exception>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="arrayIndex"/> is less than 0.
              </exception>
              
            <exception cref="T:System.ArgumentException">
              <paramref name="array"/> is multidimensional.
            -or-
              <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.Remove(Atalasoft.PdfDoc.Geometry.PdfQuadrilateral)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
              </returns>
              
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
              </exception>
              
            <exception cref="T:System.NotSupportedException">
            The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
              </exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfQuadrilateralCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Geometry.QPathOperation">
            <summary>
            This is a representation of a Quadratic Bezier path - it can be any number of (possibly)
            disjoint paths.
            There are 4 distinct operations: Move, Line, Curve, and Close.
            This class is modeled after PdfPathOperation, which is a Cubic Bezier.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.QPathOperation.LerpToCubicBezier(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            To find equivalent Cubic, you need to project along the tangent to get the control point.
            See here: http://stackoverflow.com/questions/3162645/convert-a-quadratic-bezier-to-a-cubic
            </summary>
            <param name="quada">The quada.</param>
            <param name="quadb">The quadb.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.QPathOperation.ToPdfPathOperation(Atalasoft.PdfDoc.Geometry.QPathOperation)">
            <summary>
            Converts to a PdfPathOperation (public type).  To do this, we need the destination point
            of the previous path operation, so that gets passed in.
            </summary>
            <param name="prev">The prev.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.QPathOperation.ToPdfPathOperation(Atalasoft.PdfDoc.Geometry.QPathOperation,Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Same as the other one, but with a Transform (handy!)
            </summary>
            <param name="prev">The prev.</param>
            <param name="xform">The xform.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.QPathOperation.AppendToPdfPath(Atalasoft.PdfDoc.Generating.Shapes.PdfPath,System.Collections.Generic.IEnumerable{Atalasoft.PdfDoc.Geometry.QPathOperation})">
            <summary>
            Converts an entire collection of Quadratic curves to equivalent Cubics.
            </summary>
            <param name="path">The path.</param>
            <param name="ops">The ops.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Geometry.Range`1">
            <summary>
            Range represents an orderable range of values.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.Range`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.Range`1"/> class.
            </summary>
            <param name="first">The first value in the range.</param>
            <param name="second">The second value in the range.</param>
            <remarks>Neither first nor last may be null.</remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.Range`1.Clamp(Atalasoft.PdfDoc.Geometry.Range{`0})">
            <summary>
            Clamps the given other range to be within this range.  This is done by clamping each of <c>other.First</c>
            and <c>other.Second</c> to be within this range.  Order is unimportant.
            </summary>
            <param name="other">The other to clamp.</param>
            <returns>A new Range that is clamped.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.Range`1.Clamp(`0)">
            <summary>
            Clamps the specified value within the given range. The order of First and Second is unimportant.
            </summary>
            <param name="val">The value to clamp.</param>
            <returns>The <c>val</c> if in Range, otherwise either First or Second.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.Range`1.IsIncreasing">
            <summary>
            Returns <c>true</c> if <see cref="P:Atalasoft.PdfDoc.Geometry.Range`1.Second"/> is greater than or equal to <see cref="P:Atalasoft.PdfDoc.Geometry.Range`1.First"/>.
            </summary>
            <value>
              <c>true</c> if this range is increasing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.Range`1.IsStrictlyIncreasing">
            <summary>
            Returns <c>true</c> if <see cref="P:Atalasoft.PdfDoc.Geometry.Range`1.Second"/> is greater than <see cref="P:Atalasoft.PdfDoc.Geometry.Range`1.First"/>.
            </summary>
            <value>
              <c>true</c> if this range is strictly increasing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.Range`1.IsDecreasing">
            <summary>
            Returns <c>true</c> if <see cref="P:Atalasoft.PdfDoc.Geometry.Range`1.Second"/> is less than or equal to <see cref="P:Atalasoft.PdfDoc.Geometry.Range`1.First"/>.
            </summary>
            <value>
              <c>true</c> if this range is decreasing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.Range`1.IsStrictlyDecreasing">
            <summary>
            Returns <c>true</c> if <see cref="P:Atalasoft.PdfDoc.Geometry.Range`1.Second"/> is less than <see cref="P:Atalasoft.PdfDoc.Geometry.Range`1.First"/>.
            </summary>
            <value>
              <c>true</c> if this range is strictly decreasing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.Range`1.First">
            <summary>
            Gets the first element in the range.
            </summary>
            <value>
            The first element.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.Range`1.Second">
            <summary>
            Gets the second element in the range.
            </summary>
            <value>
            The second element.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            <summary>
            This exception is thrown when a PdfDocument is opened with an incorrect
            password.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="M:Atalasoft.PdfDoc.IncorrectPasswordException.#ctor">
            <summary>
            Construct a new IncorrectPasswordException object with no message.
            </summary>
            <overloads>
            Construct a new IncorrectPasswordException object from the specified
            paramaters.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.IncorrectPasswordException.#ctor(System.String)">
            <summary>
            Construct a new IncorrectPasswordException object with the specified
            message.
            </summary>
            <overloads>
            Construct a new IncorrectPasswordException object from the specified
            paramaters.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.IncorrectPasswordException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a new IncorrectPasswordException object with the specified message
            and inner exception.
            </summary>
            <overloads>
            Construct a new IncorrectPasswordException object from the specified
            paramaters.
            </overloads>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.CloneTask`1">
            <summary>
            Performs an arbitrary task.  This task MAY NOT THROW EXCEPTIONS under any circumstances.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1Encodable.GetDerEncoded">
             Return the DER encoding of the object, null if the DER encoding can not be made.
            
             @return a DER byte array, null otherwise.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Asn1InputStream">
            a general purpose ASN.1 decoder - note: this class differs from the
            others in that it returns null after it has read the last object in
            the stream. If an ASN.1 Null is encountered a Der/BER Null object is
            returned.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1InputStream.#ctor(System.IO.Stream,System.Int32)">
             Create an ASN1InputStream where no DER object will be longer than limit.
            
             @param input stream containing ASN.1 encoded data.
             @param limit maximum size of a DER encoded object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1InputStream.#ctor(System.Byte[])">
             Create an ASN1InputStream based on the input byte array. The length of DER objects in
             the stream is automatically limited to the length of the input array.
            
             @param input array containing ASN.1 encoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1InputStream.BuildObject(System.Int32,System.Int32,System.Int32)">
            build an object given its tag and the number of bytes to construct it from.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Asn1Null">
            A Null object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1Object.FromByteArray(System.Byte[])">
            <summary>Create a base ASN.1 object from a byte array.</summary>
            <param name="data">The byte array to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">If there is a problem parsing the data.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1Object.FromStream(System.IO.Stream)">
            <summary>Read a base ASN.1 object from a stream.</summary>
            <param name="inStr">The stream to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">If there is a problem parsing the data.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1OctetString.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Octet string from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1OctetString.GetInstance(System.Object)">
             return an Octet string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1OctetString.#ctor(System.Byte[])">
            @param string the octets making up the octet string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1Sequence.GetInstance(System.Object)">
             return an Asn1Sequence from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1Sequence.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 sequence from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             sequence - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sequences you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicitly true if the object is meant to be explicitly tagged,
                      false otherwise.
             @exception ArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.Asn1Sequence.Item(System.Int32)">
             return the object at the sequence position indicated by index.
            
             @param index the sequence number (starting at zero) of the object
             @return the object at the sequence position indicated by index.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1Set.GetInstance(System.Object)">
             return an ASN1Set from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1Set.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 set from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             set - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sets you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicitly true if the object is meant to be explicitly tagged
                      false otherwise.
             @exception ArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1Set.LessThanOrEqual(System.Byte[],System.Byte[])">
            return true if a &lt;= b (arrays are assumed padded with zeros).
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.Asn1Set.Item(System.Int32)">
             return the object at the set position indicated by index.
            
             @param index the set number (starting at zero) of the object
             @return the object at the set position indicated by index.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Asn1TaggedObject">
            ASN.1 TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1TaggedObject.#ctor(System.Int32,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1TaggedObject.#ctor(System.Boolean,System.Int32,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            @param explicitly true if the object is explicitly tagged.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1TaggedObject.IsExplicit">
            return whether or not the object may be explicitly tagged.
            <p>
            Note: if the object has been read from an input stream, the only
            time you can be sure if isExplicit is returning the true state of
            affairs is if it returns false. An implicitly tagged object may appear
            to be explicitly tagged, so you need to understand the context under
            which the reading was done as well, see GetObject below.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1TaggedObject.GetObject">
            return whatever was following the tag.
            <p>
            Note: tagged objects are generally context dependent if you're
            trying to extract a tagged object you should be going via the
            appropriate GetInstance method.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Asn1TaggedObject.GetObjectParser(System.Int32,System.Boolean)">
            Return the object held in this tagged object as a parser assuming it has
            the type of the passed in tag. If the object doesn't have a parser
            associated with it, the base object is returned.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerApplicationSpecific">
            Base class for an application specific object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerApplicationSpecific.GetObject">
             Return the enclosed object assuming explicit tagging.
            
             @return  the resulting object
             @throws IOException if reconstruction fails.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerApplicationSpecific.GetObject(System.Int32)">
             Return the enclosed object assuming implicit tagging.
            
             @param derTagNo the type tag that should be applied to the object's contents.
             @return  the resulting object
             @throws IOException if reconstruction fails.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.BerNull">
            A BER Null object.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerNull">
            A Null object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerOctetString.#ctor(System.Byte[])">
            <param name="str">The octets making up the octet string.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerOctetString.ToBytes(System.Collections.IEnumerable)">
            convert a vector of octet strings into a single byte string
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerOctetString.#ctor(System.Byte[])">
            <param name="str">The octets making up the octet string.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerOctetString.GetEnumerator">
            return the DER octets that make up this string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerSequence.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerSequence.#ctor(LibOrg.BouncyCastle.Asn1.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerSequence.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerSequence.#ctor(LibOrg.BouncyCastle.Asn1.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerSet">
            A Der encoded set object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerSet.#ctor">
            create an empty set
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerSet.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            @param obj - a single object that makes up the set.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerSet.#ctor(LibOrg.BouncyCastle.Asn1.Asn1EncodableVector)">
            @param v - a vector of objects making up the set.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerSet.#ctor">
            create an empty sequence
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerSet.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            create a set containing one object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerSet.#ctor(LibOrg.BouncyCastle.Asn1.Asn1EncodableVector)">
            create a set containing a vector of objects.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.BerTaggedObject">
            BER TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerTaggedObject">
            DER TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Int32,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Boolean,System.Int32,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            @param explicitly true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Int32,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Boolean,System.Int32,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            @param explicitly true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent.ToAsn1Object">
            <pre>
            CAKeyUpdAnnContent ::= SEQUENCE {
                                        oldWithNew   CmpCertificate, -- old pub signed with new priv
                                        newWithOld   CmpCertificate, -- new pub signed with old priv
                                        newWithNew   CmpCertificate  -- new pub signed with new priv
             }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CertConfirmContent.ToAsn1Object">
            <pre>
            CertConfirmContent ::= SEQUENCE OF CertStatus
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.ToAsn1Object">
            <pre>
            CertifiedKeyPair ::= SEQUENCE {
                                             certOrEncCert       CertOrEncCert,
                                             privateKey      [0] EncryptedValue      OPTIONAL,
                                             -- see [CRMF] for comment on encoding
                                             publicationInfo [1] PKIPublicationInfo  OPTIONAL
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IAsn1Choice">
            Marker interface for CHOICE objects - if you implement this in a roll-your-own
            object, any attempt to tag the object implicitly will convert the tag to an
            explicit one as the encoding rules require.
            <p>
            If you use this interface your class should also implement the getInstance
            pattern which takes a tag object and the tagging mode used. 
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CertOrEncCert.ToAsn1Object">
            <pre>
            CertOrEncCert ::= CHOICE {
                                 certificate     [0] CMPCertificate,
                                 encryptedCert   [1] EncryptedValue
                      }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CertRepMessage.ToAsn1Object">
            <pre>
            CertRepMessage ::= SEQUENCE {
                                     caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                        OPTIONAL,
                                     response         SEQUENCE OF CertResponse
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CertResponse.ToAsn1Object">
            <pre>
            CertResponse ::= SEQUENCE {
                                       certReqId           INTEGER,
                                       -- to match this response with corresponding request (a value
                                       -- of -1 is to be used if certReqId is not specified in the
                                       -- corresponding request)
                                       status              PKIStatusInfo,
                                       certifiedKeyPair    CertifiedKeyPair    OPTIONAL,
                                       rspInfo             OCTET STRING        OPTIONAL
                                       -- analogous to the id-regInfo-utf8Pairs string defined
                                       -- for regInfo in CertReqMsg [CRMF]
                        }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CertStatus.ToAsn1Object">
            <pre>
            CertStatus ::= SEQUENCE {
                              certHash    OCTET STRING,
                              -- the hash of the certificate, using the same hash algorithm
                              -- as is used to create and verify the certificate signature
                              certReqId   INTEGER,
                              -- to match this confirmation with the corresponding req/rep
                              statusInfo  PKIStatusInfo OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.Challenge.ToAsn1Object">
             <pre>
             Challenge ::= SEQUENCE {
                             owf                 AlgorithmIdentifier  OPTIONAL,
            
                             -- MUST be present in the first Challenge; MAY be omitted in
                             -- any subsequent Challenge in POPODecKeyChallContent (if
                             -- omitted, then the owf used in the immediately preceding
                             -- Challenge is to be used).
            
                             witness             OCTET STRING,
                             -- the result of applying the one-way function (owf) to a
                             -- randomly-generated INTEGER, A.  [Note that a different
                             -- INTEGER MUST be used for each Challenge.]
                             challenge           OCTET STRING
                             -- the encryption (under the public key for which the cert.
                             -- request is being made) of Rand, where Rand is specified as
                             --   Rand ::= SEQUENCE {
                             --      int      INTEGER,
                             --       - the randomly-generated INTEGER A (above)
                             --      sender   GeneralName
                             --       - the sender's name (as included in PKIHeader)
                             --   }
                  }
             </pre>
             @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CmpCertificate.#ctor(LibOrg.BouncyCastle.Asn1.X509.AttributeCertificate)">
            Note: the addition of attribute certificates is a BC extension.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CmpCertificate.ToAsn1Object">
             <pre>
             CMPCertificate ::= CHOICE {
                        x509v3PKCert        Certificate
                        x509v2AttrCert      [1] AttributeCertificate
              }
             </pre>
             Note: the addition of attribute certificates is a BC extension.
            
             @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.CrlAnnContent.ToAsn1Object">
            <pre>
            CrlAnnContent ::= SEQUENCE OF CertificateList
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.ErrorMsgContent.ToAsn1Object">
            <pre>
            ErrorMsgContent ::= SEQUENCE {
                                   pKIStatusInfo          PKIStatusInfo,
                                   errorCode              INTEGER           OPTIONAL,
                                   -- implementation-specific error codes
                                   errorDetails           PKIFreeText       OPTIONAL
                                   -- implementation-specific error details
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.GenMsgContent.ToAsn1Object">
            <pre>
            GenMsgContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.GenRepContent.ToAsn1Object">
            <pre>
            GenRepContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cmp.InfoTypeAndValue">
             Example InfoTypeAndValue contents include, but are not limited
             to, the following (un-comment in this ASN.1 module and use as
             appropriate for a given environment):
             <pre>
               id-it-caProtEncCert    OBJECT IDENTIFIER ::= {id-it 1}
                  CAProtEncCertValue      ::= CMPCertificate
               id-it-signKeyPairTypes OBJECT IDENTIFIER ::= {id-it 2}
                 SignKeyPairTypesValue   ::= SEQUENCE OF AlgorithmIdentifier
               id-it-encKeyPairTypes  OBJECT IDENTIFIER ::= {id-it 3}
                 EncKeyPairTypesValue    ::= SEQUENCE OF AlgorithmIdentifier
               id-it-preferredSymmAlg OBJECT IDENTIFIER ::= {id-it 4}
                  PreferredSymmAlgValue   ::= AlgorithmIdentifier
               id-it-caKeyUpdateInfo  OBJECT IDENTIFIER ::= {id-it 5}
                  CAKeyUpdateInfoValue    ::= CAKeyUpdAnnContent
               id-it-currentCRL       OBJECT IDENTIFIER ::= {id-it 6}
                  CurrentCRLValue         ::= CertificateList
               id-it-unsupportedOIDs  OBJECT IDENTIFIER ::= {id-it 7}
                  UnsupportedOIDsValue    ::= SEQUENCE OF OBJECT IDENTIFIER
               id-it-keyPairParamReq  OBJECT IDENTIFIER ::= {id-it 10}
                  KeyPairParamReqValue    ::= OBJECT IDENTIFIER
               id-it-keyPairParamRep  OBJECT IDENTIFIER ::= {id-it 11}
                  KeyPairParamRepValue    ::= AlgorithmIdentifer
               id-it-revPassphrase    OBJECT IDENTIFIER ::= {id-it 12}
                  RevPassphraseValue      ::= EncryptedValue
               id-it-implicitConfirm  OBJECT IDENTIFIER ::= {id-it 13}
                  ImplicitConfirmValue    ::= NULL
               id-it-confirmWaitTime  OBJECT IDENTIFIER ::= {id-it 14}
                  ConfirmWaitTimeValue    ::= GeneralizedTime
               id-it-origPKIMessage   OBJECT IDENTIFIER ::= {id-it 15}
                  OrigPKIMessageValue     ::= PKIMessages
               id-it-suppLangTags     OBJECT IDENTIFIER ::= {id-it 16}
                  SuppLangTagsValue       ::= SEQUENCE OF UTF8String
            
             where
            
               id-pkix OBJECT IDENTIFIER ::= {
                  iso(1) identified-organization(3)
                  dod(6) internet(1) security(5) mechanisms(5) pkix(7)}
             and
                  id-it   OBJECT IDENTIFIER ::= {id-pkix 4}
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.ToAsn1Object">
            <pre>
            InfoTypeAndValue ::= SEQUENCE {
                                    infoType               OBJECT IDENTIFIER,
                                    infoValue              ANY DEFINED BY infoType  OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.KeyRecRepContent.ToAsn1Object">
            <pre>
            KeyRecRepContent ::= SEQUENCE {
                                    status                  PKIStatusInfo,
                                    newSigCert          [0] CMPCertificate OPTIONAL,
                                    caCerts             [1] SEQUENCE SIZE (1..MAX) OF
                                                                      CMPCertificate OPTIONAL,
                                    keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF
                                                                      CertifiedKeyPair OPTIONAL
                         }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.OobCertHash.ToAsn1Object">
            <pre>
            OobCertHash ::= SEQUENCE {
                                 hashAlg     [0] AlgorithmIdentifier     OPTIONAL,
                                 certId      [1] CertId                  OPTIONAL,
                                 hashVal         BIT STRING
                                 -- hashVal is calculated over the Der encoding of the
                                 -- self-signed certificate with the identifier certID.
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PbmParameter.ToAsn1Object">
            <pre>
             PbmParameter ::= SEQUENCE {
                                   salt                OCTET STRING,
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this string to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   owf                 AlgorithmIdentifier,
                                   -- AlgId for a One-Way Function (SHA-1 recommended)
                                   iterationCount      INTEGER,
                                   -- number of times the OWF is applied
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this integer to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   mac                 AlgorithmIdentifier
                                   -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],
               }   -- or HMAC [RFC2104, RFC2202])
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiBody.#ctor(System.Int32,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            Creates a new PkiBody.
            @param type one of the TYPE_* constants
            @param content message content
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiBody.ToAsn1Object">
            <pre>
            PkiBody ::= CHOICE {       -- message-specific body elements
                   ir       [0]  CertReqMessages,        --Initialization Request
                   ip       [1]  CertRepMessage,         --Initialization Response
                   cr       [2]  CertReqMessages,        --Certification Request
                   cp       [3]  CertRepMessage,         --Certification Response
                   p10cr    [4]  CertificationRequest,   --imported from [PKCS10]
                   popdecc  [5]  POPODecKeyChallContent, --pop Challenge
                   popdecr  [6]  POPODecKeyRespContent,  --pop Response
                   kur      [7]  CertReqMessages,        --Key Update Request
                   kup      [8]  CertRepMessage,         --Key Update Response
                   krr      [9]  CertReqMessages,        --Key Recovery Request
                   krp      [10] KeyRecRepContent,       --Key Recovery Response
                   rr       [11] RevReqContent,          --Revocation Request
                   rp       [12] RevRepContent,          --Revocation Response
                   ccr      [13] CertReqMessages,        --Cross-Cert. Request
                   ccp      [14] CertRepMessage,         --Cross-Cert. Response
                   ckuann   [15] CAKeyUpdAnnContent,     --CA Key Update Ann.
                   cann     [16] CertAnnContent,         --Certificate Ann.
                   rann     [17] RevAnnContent,          --Revocation Ann.
                   crlann   [18] CRLAnnContent,          --CRL Announcement
                   pkiconf  [19] PKIConfirmContent,      --Confirmation
                   nested   [20] NestedMessageContent,   --Nested Message
                   genm     [21] GenMsgContent,          --General Message
                   genp     [22] GenRepContent,          --General Response
                   error    [23] ErrorMsgContent,        --Error Message
                   certConf [24] CertConfirmContent,     --Certificate confirm
                   pollReq  [25] PollReqContent,         --Polling request
                   pollRep  [26] PollRepContent          --Polling response
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiConfirmContent.ToAsn1Object">
            <pre>
            PkiConfirmContent ::= NULL
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cmp.PkiFailureInfo">
            <pre>
            PKIFailureInfo ::= BIT STRING {
            badAlg               (0),
              -- unrecognized or unsupported Algorithm Identifier
            badMessageCheck      (1), -- integrity check failed (e.g., signature did not verify)
            badRequest           (2),
              -- transaction not permitted or supported
            badTime              (3), -- messageTime was not sufficiently close to the system time, as defined by local policy
            badCertId            (4), -- no certificate could be found matching the provided criteria
            badDataFormat        (5),
              -- the data submitted has the wrong format
            wrongAuthority       (6), -- the authority indicated in the request is different from the one creating the response token
            incorrectData        (7), -- the requester's data is incorrect (for notary services)
            missingTimeStamp     (8), -- when the timestamp is missing but should be there (by policy)
            badPOP               (9)  -- the proof-of-possession failed
            timeNotAvailable    (14),
              -- the TSA's time source is not available
            unacceptedPolicy    (15),
              -- the requested TSA policy is not supported by the TSA
            unacceptedExtension (16),
              -- the requested extension is not supported by the TSA
             addInfoNotAvailable (17)
               -- the additional information requested could not be understood
               -- or is not available
             systemFailure       (25)
               -- the request cannot be handled due to system failure
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IAsn1String">
            basic interface for Der string objects.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBitString.GetPadBits(System.Int32)">
            return the correct number of pad bits for a bit string defined in
            a 32 bit constant
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBitString.GetBytes(System.Int32)">
            return the correct number of bytes for a bit string defined in
            a 32 bit constant
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBitString.GetInstance(System.Object)">
             return a Bit string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBitString.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Bit string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBitString.#ctor(System.Byte[],System.Int32)">
            @param data the octets making up the bit string.
            @param padBits the number of extra bits at the end of the string.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.DerBitString.IntValue">
            @return the value of the bit string as an int (truncating if necessary)
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiFailureInfo.#ctor(System.Int32)">
            Basic constructor.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiFreeText.ToAsn1Object">
            <pre>
            PkiFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String
            </pre>
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.Cmp.PkiFreeText.Size">
             Return the number of string elements present.
            
             @return number of elements present.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.Cmp.PkiFreeText.Item(System.Int32)">
             Return the UTF8STRING at index.
            
             @param index index of the string of interest
             @return the string at index.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.Cmp.PkiHeader.NULL_NAME">
            Value for a "null" recipient or sender.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiHeader.ToAsn1Object">
            <pre>
             PkiHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.Build">
            <pre>
             PKIHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiMessage.#ctor(LibOrg.BouncyCastle.Asn1.Cmp.PkiHeader,LibOrg.BouncyCastle.Asn1.Cmp.PkiBody,LibOrg.BouncyCastle.Asn1.DerBitString,LibOrg.BouncyCastle.Asn1.Cmp.CmpCertificate[])">
             Creates a new PkiMessage.
            
             @param header message header
             @param body message body
             @param protection message protection (may be null)
             @param extraCerts extra certificates (may be null)
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiMessage.ToAsn1Object">
            <pre>
            PkiMessage ::= SEQUENCE {
                             header           PKIHeader,
                             body             PKIBody,
                             protection   [0] PKIProtection OPTIONAL,
                             extraCerts   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiMessages.ToAsn1Object">
            <pre>
            PkiMessages ::= SEQUENCE SIZE (1..MAX) OF PkiMessage
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32)">
            @param status
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32,LibOrg.BouncyCastle.Asn1.Cmp.PkiFreeText)">
            @param status
            @param statusString
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PkiStatusInfo.ToAsn1Object">
             <pre>
             PkiStatusInfo ::= SEQUENCE {
                 status        PKIStatus,                (INTEGER)
                 statusString  PkiFreeText     OPTIONAL,
                 failInfo      PkiFailureInfo  OPTIONAL  (BIT STRING)
             }
            
             PKIStatus:
               granted                (0), -- you got exactly what you asked for
               grantedWithMods        (1), -- you got something like what you asked for
               rejection              (2), -- you don't get it, more information elsewhere in the message
               waiting                (3), -- the request body part has not yet been processed, expect to hear more later
               revocationWarning      (4), -- this message contains a warning that a revocation is imminent
               revocationNotification (5), -- notification that a revocation has occurred
               keyUpdateWarning       (6)  -- update already done for the oldCertId specified in CertReqMsg
            
             PkiFailureInfo:
               badAlg           (0), -- unrecognized or unsupported Algorithm Identifier
               badMessageCheck  (1), -- integrity check failed (e.g., signature did not verify)
               badRequest       (2), -- transaction not permitted or supported
               badTime          (3), -- messageTime was not sufficiently close to the system time, as defined by local policy
               badCertId        (4), -- no certificate could be found matching the provided criteria
               badDataFormat    (5), -- the data submitted has the wrong format
               wrongAuthority   (6), -- the authority indicated in the request is different from the one creating the response token
               incorrectData    (7), -- the requester's data is incorrect (for notary services)
               missingTimeStamp (8), -- when the timestamp is missing but should be there (by policy)
               badPOP           (9)  -- the proof-of-possession failed
            
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PollRepContent.ToAsn1Object">
            <pre>
            PollRepContent ::= SEQUENCE OF SEQUENCE {
                    certReqId              INTEGER,
                    checkAfter             INTEGER,  -- time in seconds
                    reason                 PKIFreeText OPTIONAL
                }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PollReqContent.ToAsn1Object">
            <pre>
            PollReqContent ::= SEQUENCE OF SEQUENCE {
                                   certReqId              INTEGER
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PopoDecKeyChallContent.ToAsn1Object">
            <pre>
            PopoDecKeyChallContent ::= SEQUENCE OF Challenge
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.PopoDecKeyRespContent.ToAsn1Object">
            <pre>
            PopoDecKeyRespContent ::= SEQUENCE OF INTEGER
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.ProtectedPart.ToAsn1Object">
            <pre>
            ProtectedPart ::= SEQUENCE {
                               header    PKIHeader,
                               body      PKIBody
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.RevAnnContent.ToAsn1Object">
            <pre>
            RevAnnContent ::= SEQUENCE {
                  status              PKIStatus,
                  certId              CertId,
                  willBeRevokedAt     GeneralizedTime,
                  badSinceDate        GeneralizedTime,
                  crlDetails          Extensions  OPTIONAL
                   -- extra CRL details (e.g., crl number, reason, location, etc.)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.RevDetails.ToAsn1Object">
            <pre>
            RevDetails ::= SEQUENCE {
                             certDetails         CertTemplate,
                              -- allows requester to specify as much as they can about
                              -- the cert. for which revocation is requested
                              -- (e.g., for cases in which serialNumber is not available)
                              crlEntryDetails     Extensions       OPTIONAL
                              -- requested crlEntryExtensions
                        }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.RevRepContent.ToAsn1Object">
            <pre>
            RevRepContent ::= SEQUENCE {
                   status       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,
                   -- in same order as was sent in RevReqContent
                   revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId OPTIONAL,
                   -- IDs for which revocation was requested
                   -- (same order as status)
                   crls     [1] SEQUENCE SIZE (1..MAX) OF CertificateList OPTIONAL
                   -- the resulting CRLs (there may be more than one)
              }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cmp.RevReqContent.ToAsn1Object">
            <pre>
            RevReqContent ::= SEQUENCE OF RevDetails
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.Attribute.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.Attribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attribute ::= SEQUENCE {
                attrType OBJECT IDENTIFIER,
                attrValues SET OF AttributeValue
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.Attributes.ToAsn1Object">
            <pre>
            Attributes ::=
              SET SIZE(1..MAX) OF Attribute -- according to RFC 5652
            </pre>
            @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.AttributeTable.GetAll(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
             Return all the attributes matching the OBJECT IDENTIFIER oid. The vector will be
             empty if there are no attributes of the required type present.
            
             @param oid type of attribute required.
             @return a vector of all the attributes found of type oid.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.AttributeTable.Add(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
             Return a new table with the passed in attribute added.
            
             @param attrType
             @param attrValue
             @return
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.Cms.AttributeTable.Item(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            <summary>Return the first attribute matching the given OBJECT IDENTIFIER</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.AuthenticatedData.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthenticatedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.AuthenticatedData.GetInstance(System.Object)">
             return an AuthenticatedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.AuthenticatedData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             AuthenticatedData ::= SEQUENCE {
                   version CMSVersion,
                   originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                   recipientInfos RecipientInfos,
                   macAlgorithm MessageAuthenticationCodeAlgorithm,
                   digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
                   encapContentInfo EncapsulatedContentInfo,
                   authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
                   mac MessageAuthenticationCode,
                   unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }
            
             AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             MessageAuthenticationCode ::= OCTET STRING
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cms.AuthenticatedDataParser">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             AuthenticatedData ::= SEQUENCE {
                   version CMSVersion,
                   originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                   recipientInfos RecipientInfos,
                   macAlgorithm MessageAuthenticationCodeAlgorithm,
                   digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
                   encapContentInfo EncapsulatedContentInfo,
                   authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
                   mac MessageAuthenticationCode,
                   unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }
            
             AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             MessageAuthenticationCode ::= OCTET STRING
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.AuthEnvelopedData.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthEnvelopedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.AuthEnvelopedData.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.AuthEnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            AuthEnvelopedData ::= SEQUENCE {
              version CMSVersion,
              originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
              recipientInfos RecipientInfos,
              authEncryptedContentInfo EncryptedContentInfo,
              authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,
              mac MessageAuthenticationCode,
              unauthAttrs [2] IMPLICIT UnauthAttributes OPTIONAL }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser">
            Produce an object suitable for an Asn1OutputStream.
            
            <pre>
            AuthEnvelopedData ::= SEQUENCE {
              version CMSVersion,
              originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
              recipientInfos RecipientInfos,
              authEncryptedContentInfo EncryptedContentInfo,
              authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,
              mac MessageAuthenticationCode,
              unauthAttrs [2] IMPLICIT UnauthAttributes OPTIONAL }
            </pre>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_ri">
            The other Revocation Info arc
            id-ri OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
                                              dod(6) internet(1) security(5) mechanisms(5) pkix(7) ri(16) }
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cms.CompressedData">
            RFC 3274 - CMS Compressed Data.
            <pre>
            CompressedData ::= Sequence {
             version CMSVersion,
             compressionAlgorithm CompressionAlgorithmIdentifier,
             encapContentInfo EncapsulatedContentInfo
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.CompressedData.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a CompressedData object from a tagged object.
            
             @param ato the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.CompressedData.GetInstance(System.Object)">
             return a CompressedData object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cms.CompressedDataParser">
            RFC 3274 - CMS Compressed Data.
            <pre>
            CompressedData ::= SEQUENCE {
             version CMSVersion,
             compressionAlgorithm CompressionAlgorithmIdentifier,
             encapContentInfo EncapsulatedContentInfo
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.ContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= Sequence {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cms.ContentInfoParser">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= SEQUENCE {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthEnvelopedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            MQVuserKeyingMaterial ::= SEQUENCE {
              ephemeralPublicKey OriginatorPublicKey,
              addedukm [0] EXPLICIT UserKeyingMaterial OPTIONAL  }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.EncryptedContentInfo.GetInstance(System.Object)">
             return an EncryptedContentInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.EncryptedContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EncryptedContentInfo ::= Sequence {
                contentType ContentType,
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cms.EncryptedContentInfoParser">
            <pre>
            EncryptedContentInfo ::= SEQUENCE {
                contentType ContentType,
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.EncryptedData.ToAsn1Object">
            <pre>
                  EncryptedData ::= SEQUENCE {
                                version CMSVersion,
                                encryptedContentInfo EncryptedContentInfo,
                                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.EnvelopedData.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an EnvelopedData object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.EnvelopedData.GetInstance(System.Object)">
             return an EnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.EnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EnvelopedData ::= Sequence {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cms.EnvelopedDataParser">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EnvelopedData ::= SEQUENCE {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KekIdentifier.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KekIdentifier object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KekIdentifier.GetInstance(System.Object)">
             return a KekIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KekIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekIdentifier ::= Sequence {
                keyIdentifier OCTET STRING,
                date GeneralizedTime OPTIONAL,
                other OtherKeyAttribute OPTIONAL
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KekRecipientInfo.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KekRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KekRecipientInfo.GetInstance(System.Object)">
             return a KekRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KekRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 4
                kekID KekIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an KeyAgreeRecipientIdentifier object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(System.Object)">
             return an KeyAgreeRecipientIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyAgreeRecipientIdentifier ::= CHOICE {
                issuerAndSerialNumber IssuerAndSerialNumber,
                rKeyId [0] IMPLICIT RecipientKeyIdentifier
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KeyAgreeRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(System.Object)">
             return a KeyAgreeRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.ToAsn1Object">
                     * Produce an object suitable for an Asn1OutputStream.
                     * <pre>
                     * KeyAgreeRecipientInfo ::= Sequence {
                     *     version CMSVersion,  -- always set to 3
                     *     originator [0] EXPLICIT OriginatorIdentifierOrKey,
                     *     ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
                     *     keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                     *     recipientEncryptedKeys RecipientEncryptedKeys
                     * }
            		 *
            		 * UserKeyingMaterial ::= OCTET STRING
                     * </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.GetInstance(System.Object)">
             return a KeyTransRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyTransRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 0 or 2
                rid RecipientIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.MetaData.ToAsn1Object">
            <pre>
            MetaData ::= SEQUENCE {
              hashProtected        BOOLEAN,
              fileName             UTF8String OPTIONAL,
              mediaType            IA5String OPTIONAL,
              otherMetaData        Attributes OPTIONAL
            }
            </pre>
            @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorIdentifierOrKey object from a tagged object.
            
             @param o the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(System.Object)">
             return an OriginatorIdentifierOrKey object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             OriginatorIdentifierOrKey ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier,
                 originatorKey [1] OriginatorPublicKey
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OriginatorInfo.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OriginatorInfo.GetInstance(System.Object)">
             return an OriginatorInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OriginatorInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorInfo ::= Sequence {
                certs [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OriginatorPublicKey.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorPublicKey object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OriginatorPublicKey.GetInstance(System.Object)">
             return an OriginatorPublicKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OriginatorPublicKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorPublicKey ::= Sequence {
                algorithm AlgorithmIdentifier,
                publicKey BIT STRING
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OtherKeyAttribute.GetInstance(System.Object)">
             return an OtherKeyAttribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OtherKeyAttribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherKeyAttribute ::= Sequence {
                keyAttrId OBJECT IDENTIFIER,
                keyAttr ANY DEFINED BY keyAttrId OPTIONAL
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OtherRecipientInfo.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a OtherRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OtherRecipientInfo.GetInstance(System.Object)">
             return a OtherRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OtherRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherRecipientInfo ::= Sequence {
               oriType OBJECT IDENTIFIER,
               oriValue ANY DEFINED BY oriType }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a OtherRevocationInfoFormat object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(System.Object)">
             return a OtherRevocationInfoFormat object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.ToAsn1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OtherRevocationInfoFormat ::= SEQUENCE {
                 otherRevInfoFormat OBJECT IDENTIFIER,
                 otherRevInfo ANY DEFINED BY otherRevInfoFormat }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a PasswordRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.GetInstance(System.Object)">
             return a PasswordRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            PasswordRecipientInfo ::= Sequence {
              version CMSVersion,   -- Always set to 0
              keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier
                                        OPTIONAL,
             keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
             encryptedKey EncryptedKey }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an RecipientEncryptedKey object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.GetInstance(System.Object)">
             return a RecipientEncryptedKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientEncryptedKey ::= SEQUENCE {
                rid KeyAgreeRecipientIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.RecipientIdentifier.GetInstance(System.Object)">
             return a RecipientIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.RecipientIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.RecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientInfo ::= CHOICE {
                ktri KeyTransRecipientInfo,
                kari [1] KeyAgreeRecipientInfo,
                kekri [2] KekRecipientInfo,
                pwri [3] PasswordRecipientInfo,
                ori [4] OtherRecipientInfo }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a RecipientKeyIdentifier object from a tagged object.
            
             @param _ato the tagged object holding the object we want.
             @param _explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.GetInstance(System.Object)">
             return a RecipientKeyIdentifier object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientKeyIdentifier ::= Sequence {
                 subjectKeyIdentifier SubjectKeyIdentifier,
                 date GeneralizedTime OPTIONAL,
                 other OtherKeyAttribute OPTIONAL
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.ScvpReqRes.ToAsn1Object">
            <pre>
               ScvpReqRes ::= SEQUENCE {
               request  [0] EXPLICIT ContentInfo OPTIONAL,
               response     ContentInfo }
            </pre>
            @return  the ASN.1 primitive representation.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cms.SignedData">
            a signed data object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.SignedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SignedData ::= Sequence {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Cms.SignedDataParser">
            <pre>
            SignedData ::= SEQUENCE {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.SignerIdentifier.GetInstance(System.Object)">
             return a SignerIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.SignerIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             SignerIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  SignerIdentifier sid,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is Generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.Time.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.TimeStampAndCrl.ToAsn1Object">
            <pre>
            TimeStampAndCRL ::= SEQUENCE {
                timeStamp   TimeStampToken,          -- according to RFC 3161
                crl         CertificateList OPTIONAL -- according to RFC 5280
             }
            </pre>
            @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.TimeStampedData.ToAsn1Object">
            <pre>
            TimeStampedData ::= SEQUENCE {
              version              INTEGER { v1(1) },
              dataUri              IA5String OPTIONAL,
              metaData             MetaData OPTIONAL,
              content              OCTET STRING OPTIONAL,
              temporalEvidence     Evidence
            }
            </pre>
            @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence.ToAsn1Object">
            <pre>
            TimeStampTokenEvidence ::=
               SEQUENCE SIZE(1..MAX) OF TimeStampAndCrl
            </pre>
            @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue.ToAsn1Object">
            <pre>
            AttributeTypeAndValue ::= SEQUENCE {
                      type         OBJECT IDENTIFIER,
                      value        ANY DEFINED BY type }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertId.ToAsn1Object">
            <pre>
            CertId ::= SEQUENCE {
                            issuer           GeneralName,
                            serialNumber     INTEGER }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertReqMessages.ToAsn1Object">
            <pre>
            CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertReqMsg.#ctor(LibOrg.BouncyCastle.Asn1.Crmf.CertRequest,LibOrg.BouncyCastle.Asn1.Crmf.ProofOfPossession,LibOrg.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue[])">
            Creates a new CertReqMsg.
            @param certReq CertRequest
            @param popo may be null
            @param regInfo may be null
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertReqMsg.ToAsn1Object">
            <pre>
            CertReqMsg ::= SEQUENCE {
                               certReq   CertRequest,
                               pop       ProofOfPossession  OPTIONAL,
                               -- content depends upon key type
                               regInfo   SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertRequest.ToAsn1Object">
            <pre>
            CertRequest ::= SEQUENCE {
                                 certReqId     INTEGER,          -- ID for matching request and reply
                                 certTemplate  CertTemplate,  -- Selected fields of cert to be issued
                                 controls      Controls OPTIONAL }   -- Attributes affecting issuance
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertTemplate.ToAsn1Object">
            <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetVersion(System.Int32)">
            Sets the X.509 version. Note: for X509v3, use 2 here. 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetIssuerUID(LibOrg.BouncyCastle.Asn1.DerBitString)">
            Sets the issuer unique ID (deprecated in X.509v3) 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetSubjectUID(LibOrg.BouncyCastle.Asn1.DerBitString)">
            Sets the subject unique ID (deprecated in X.509v3) 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.Build">
            <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.Controls.ToAsn1Object">
            <pre>
            Controls  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.EncKeyWithID.ToAsn1Object">
            <pre>
            EncKeyWithID ::= SEQUENCE {
                 privateKey           PrivateKeyInfo,
                 identifier CHOICE {
                    string               UTF8String,
                    generalName          GeneralName
                } OPTIONAL
            }
            </pre>
            @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.EncryptedKey.ToAsn1Object">
            <pre>
               EncryptedKey ::= CHOICE {
                   encryptedValue        EncryptedValue, -- deprecated
                   envelopedData     [0] EnvelopedData }
                   -- The encrypted private key MUST be placed in the envelopedData
                   -- encryptedContentInfo encryptedContent OCTET STRING.
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.EncryptedValue.ToAsn1Object">
            <pre>
            EncryptedValue ::= SEQUENCE {
                                intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,
                                -- the intended algorithm for which the value will be used
                                symmAlg       [1] AlgorithmIdentifier  OPTIONAL,
                                -- the symmetric algorithm used to encrypt the value
                                encSymmKey    [2] BIT STRING           OPTIONAL,
                                -- the (encrypted) symmetric key used to encrypt the value
                                keyAlg        [3] AlgorithmIdentifier  OPTIONAL,
                                -- algorithm used to encrypt the symmetric key
                                valueHint     [4] OCTET STRING         OPTIONAL,
                                -- a brief description or identifier of the encValue content
                                -- (may be meaningful only to the sending entity, and used only
                                -- if EncryptedValue might be re-examined by the sending entity
                                -- in the future)
                                encValue       BIT STRING }
                                -- the encrypted value itself
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.OptionalValidity.ToAsn1Object">
            <pre>
            OptionalValidity ::= SEQUENCE {
                                   notBefore  [0] Time OPTIONAL,
                                   notAfter   [1] Time OPTIONAL } --at least one MUST be present
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.ToAsn1Object">
            <pre>
             PkiArchiveOptions ::= CHOICE {
                 encryptedPrivKey     [0] EncryptedKey,
                 -- the actual value of the private key
                 keyGenParameters     [1] KeyGenParameters,
                 -- parameters which allow the private key to be re-generated
                 archiveRemGenPrivKey [2] BOOLEAN }
                 -- set to TRUE if sender wishes receiver to archive the private
                 -- key of a key pair that the receiver generates in response to
                 -- this request; set to FALSE if no archival is desired.
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.ToAsn1Object">
            <pre>
            PkiPublicationInfo ::= SEQUENCE {
                             action     INTEGER {
                                            dontPublish (0),
                                            pleasePublish (1) },
                             pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo OPTIONAL }
            -- pubInfos MUST NOT be present if action is "dontPublish"
            -- (if action is "pleasePublish" and pubInfos is omitted,
            -- "dontCare" is assumed)
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Crmf.PKMacValue">
            Password-based MAC value for use with POPOSigningKeyInput.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PKMacValue.#ctor(LibOrg.BouncyCastle.Asn1.Cmp.PbmParameter,LibOrg.BouncyCastle.Asn1.DerBitString)">
            Creates a new PKMACValue.
            @param params parameters for password-based MAC
            @param value MAC of the DER-encoded SubjectPublicKeyInfo
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PKMacValue.#ctor(LibOrg.BouncyCastle.Asn1.X509.AlgorithmIdentifier,LibOrg.BouncyCastle.Asn1.DerBitString)">
            Creates a new PKMACValue.
            @param aid CMPObjectIdentifiers.passwordBasedMAC, with PBMParameter
            @param value MAC of the DER-encoded SubjectPublicKeyInfo
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PKMacValue.ToAsn1Object">
            <pre>
            PKMACValue ::= SEQUENCE {
                 algId  AlgorithmIdentifier,
                 -- algorithm value shall be PasswordBasedMac 1.2.840.113533.7.66.13
                 -- parameter value is PBMParameter
                 value  BIT STRING }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PopoPrivKey.ToAsn1Object">
            <pre>
            PopoPrivKey ::= CHOICE {
                   thisMessage       [0] BIT STRING,         -- Deprecated
                    -- possession is proven in this message (which contains the private
                    -- key itself (encrypted for the CA))
                   subsequentMessage [1] SubsequentMessage,
                    -- possession will be proven in a subsequent message
                   dhMAC             [2] BIT STRING,         -- Deprecated
                   agreeMAC          [3] PKMACValue,
                   encryptedKey      [4] EnvelopedData }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PopoSigningKey.#ctor(LibOrg.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput,LibOrg.BouncyCastle.Asn1.X509.AlgorithmIdentifier,LibOrg.BouncyCastle.Asn1.DerBitString)">
            Creates a new Proof of Possession object for a signing key.
            @param poposkIn the PopoSigningKeyInput structure, or null if the
                CertTemplate includes both subject and publicKey values.
            @param aid the AlgorithmIdentifier used to sign the proof of possession.
            @param signature a signature over the DER-encoded value of poposkIn,
                or the DER-encoded value of certReq if poposkIn is null.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PopoSigningKey.ToAsn1Object">
            <pre>
            PopoSigningKey ::= SEQUENCE {
                                 poposkInput           [0] PopoSigningKeyInput OPTIONAL,
                                 algorithmIdentifier   AlgorithmIdentifier,
                                 signature             BIT STRING }
             -- The signature (using "algorithmIdentifier") is on the
             -- DER-encoded value of poposkInput.  NOTE: If the CertReqMsg
             -- certReq CertTemplate contains the subject and publicKey values,
             -- then poposkInput MUST be omitted and the signature MUST be
             -- computed on the DER-encoded value of CertReqMsg certReq.  If
             -- the CertReqMsg certReq CertTemplate does not contain the public
             -- key and subject values, then poposkInput MUST be present and
             -- MUST be signed.  This strategy ensures that the public key is
             -- not present in both the poposkInput and CertReqMsg certReq
             -- CertTemplate fields.
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralName,LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
            Creates a new PopoSigningKeyInput with sender name as authInfo. 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.#ctor(LibOrg.BouncyCastle.Asn1.Crmf.PKMacValue,LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
            Creates a new PopoSigningKeyInput using password-based MAC. 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.ToAsn1Object">
            <pre>
            PopoSigningKeyInput ::= SEQUENCE {
                   authInfo             CHOICE {
                                            sender              [0] GeneralName,
                                            -- used only if an authenticated identity has been
                                            -- established for the sender (e.g., a DN from a
                                            -- previously-issued and currently-valid certificate
                                            publicKeyMac        PKMacValue },
                                            -- used if no authenticated GeneralName currently exists for
                                            -- the sender; publicKeyMac contains a password-based MAC
                                            -- on the DER-encoded value of publicKey
                   publicKey           SubjectPublicKeyInfo }  -- from CertTemplate
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.Sender">
            Returns the sender field, or null if authInfo is publicKeyMac 
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.PublicKeyMac">
            Returns the publicKeyMac field, or null if authInfo is sender 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor">
            Creates a ProofOfPossession with type raVerified. 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor(LibOrg.BouncyCastle.Asn1.Crmf.PopoSigningKey)">
            Creates a ProofOfPossession for a signing key. 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor(System.Int32,LibOrg.BouncyCastle.Asn1.Crmf.PopoPrivKey)">
            Creates a ProofOfPossession for key encipherment or agreement.
            @param type one of TYPE_KEY_ENCIPHERMENT or TYPE_KEY_AGREEMENT
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.ProofOfPossession.ToAsn1Object">
            <pre>
            ProofOfPossession ::= CHOICE {
                                      raVerified        [0] NULL,
                                      -- used if the RA has already verified that the requester is in
                                      -- possession of the private key
                                      signature         [1] PopoSigningKey,
                                      keyEncipherment   [2] PopoPrivKey,
                                      keyAgreement      [3] PopoPrivKey }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Crmf.SinglePubInfo.ToAsn1Object">
            <pre>
            SinglePubInfo ::= SEQUENCE {
                   pubMethod    INTEGER {
                      dontCare    (0),
                      x500        (1),
                      web         (2),
                      ldap        (3) },
                  pubLocation  GeneralName OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerInteger.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerInteger.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Integer from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.DerInteger.PositiveValue">
            in some cases positive values Get crammed into a space,
            that's not quite big enough...
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves">
            table of the available named parameters for GOST 3410-2001.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetByOid(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the ECDomainParameters object for the given OID, null if it
             isn't present.
            
             @param oid an object identifier representing a named parameters, if present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetName(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.CryptoPro.Gost28147Parameters.ToAsn1Object">
             <pre>
             Gost28147-89-Parameters ::=
                           SEQUENCE {
                                   iv                   Gost28147-89-IV,
                                   encryptionParamSet   OBJECT IDENTIFIER
                            }
            
               Gost28147-89-IV ::= OCTET STRING (SIZE (8))
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters">
            table of the available named parameters for GOST 3410-94.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters.GetByOid(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the GOST3410ParamSetParameters object for the given OID, null if it
             isn't present.
            
             @param oid an object identifier representing a named parameters, if present.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters.Names">
            returns an enumeration containing the name strings for parameters
            contained in this structure.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerBmpString">
            Der BMPString object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBmpString.GetInstance(System.Object)">
             return a BMP string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBmpString.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a BMP string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBmpString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBmpString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBoolean.GetInstance(System.Object)">
             return a bool from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBoolean.GetInstance(System.Boolean)">
            return a DerBoolean from the passed in bool.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerBoolean.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Boolean from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerEnumerated.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerEnumerated.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Enumerated from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerExternal">
            Class representing the DER-type External
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerExternal.#ctor(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,LibOrg.BouncyCastle.Asn1.DerInteger,LibOrg.BouncyCastle.Asn1.Asn1Object,LibOrg.BouncyCastle.Asn1.DerTaggedObject)">
            Creates a new instance of DerExternal
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param externalData The external data in its encoded form.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerExternal.#ctor(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,LibOrg.BouncyCastle.Asn1.DerInteger,LibOrg.BouncyCastle.Asn1.Asn1Object,System.Int32,LibOrg.BouncyCastle.Asn1.Asn1Object)">
            Creates a new instance of DerExternal.
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param encoding The encoding to be used for the external data
            @param externalData The external data
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.DerExternal.Encoding">
            The encoding of the content. Valid values are
            <ul>
            <li><code>0</code> single-ASN1-type</li>
            <li><code>1</code> OCTET STRING</li>
            <li><code>2</code> BIT STRING</li>
            </ul>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerGeneralizedTime">
            Generalized time object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerGeneralizedTime.GetInstance(System.Object)">
             return a generalized time from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerGeneralizedTime.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Generalized Time object from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerGeneralizedTime.#ctor(System.String)">
             The correct format for this is YYYYMMDDHHMMSS[.f]Z, or without the Z
             for local time, or Z+-HHMM on the end, for difference between local
             time and UTC time. The fractional second amount f must consist of at
             least one number with trailing zeroes removed.
            
             @param time the time string.
             @exception ArgumentException if string is an illegal format.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerGeneralizedTime.#ctor(System.DateTime)">
            base constructor from a local time object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerGeneralizedTime.GetTime">
            return the time - always in the form of
             YYYYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyyyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.DerGeneralizedTime.TimeString">
            Return the time.
            @return The time string as it appeared in the encoded object.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerIA5String">
            Der IA5String object - this is an ascii string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerIA5String.GetInstance(System.Object)">
             return a IA5 string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerIA5String.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an IA5 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerIA5String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerIA5String.#ctor(System.String)">
            basic constructor - without validation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerIA5String.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in an IA5String.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerIA5String.IsIA5String(System.String)">
             return true if the passed in String can be represented without
             loss as an IA5String, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerNumericString">
            Der NumericString object - this is an ascii string of characters {0,1,2,3,4,5,6,7,8,9, }.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerNumericString.GetInstance(System.Object)">
             return a Numeric string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerNumericString.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Numeric string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerNumericString.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerNumericString.#ctor(System.String)">
            basic constructor -  without validation..
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerNumericString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a NumericString.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerNumericString.IsNumericString(System.String)">
             Return true if the string can be represented as a NumericString ('0'..'9', ' ')
            
             @param str string to validate.
             @return true if numeric, fale otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerObjectIdentifier.GetInstance(System.Object)">
             return an Oid from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerObjectIdentifier.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an object Identifier from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerObjectIdentifier.On(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            Return  true if this oid is an extension of the passed in branch, stem.
            @param stem the arc or branch that is a possible parent.
            @return  true if the branch is on the passed in stem, false otherwise.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerPrintableString">
            Der PrintableString object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerPrintableString.GetInstance(System.Object)">
             return a printable string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerPrintableString.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Printable string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerPrintableString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerPrintableString.#ctor(System.String)">
            basic constructor - this does not validate the string
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerPrintableString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a PrintableString.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerPrintableString.IsPrintableString(System.String)">
             return true if the passed in String can be represented without
             loss as a PrintableString, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerT61String">
            Der T61String (also the teletex string) - 8-bit characters
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerT61String.GetInstance(System.Object)">
             return a T61 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerT61String.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an T61 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerT61String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerT61String.#ctor(System.String)">
            basic constructor - with string.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerUniversalString">
            Der UniversalString object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUniversalString.GetInstance(System.Object)">
             return a Universal string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUniversalString.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Universal string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUniversalString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerUnknownTag">
            We insert one of these when we find a tag we don't recognise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUnknownTag.#ctor(System.Int32,System.Byte[])">
            @param tag the tag value.
            @param data the contents octets.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerUtcTime">
            UTC time object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtcTime.GetInstance(System.Object)">
             return an UTC Time from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtcTime.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an UTC Time from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtcTime.#ctor(System.String)">
            The correct format for this is YYMMDDHHMMSSZ (it used to be that seconds were
            never encoded. When you're creating one of these objects from scratch, that's
            what you want to use, otherwise we'll try to deal with whatever Gets read from
            the input stream... (this is why the input format is different from the GetTime()
            method output).
            <p>
            @param time the time string.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtcTime.#ctor(System.DateTime)">
            base constructor from a DateTime object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtcTime.ToDateTime">
             return the time as a date based on whatever a 2 digit year will return. For
             standardised processing use ToAdjustedDateTime().
            
             @return the resulting date
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtcTime.ToAdjustedDateTime">
             return the time as an adjusted date
             in the range of 1950 - 2049.
            
             @return a date in the range of 1950 to 2049.
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.DerUtcTime.TimeString">
            return the time - always in the form of
             YYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
            <p>
            <b>Note:</b> In some cases, due to the local date processing, this
            may lead to unexpected results. If you want to stick the normal
            convention of 1950 to 2049 use the GetAdjustedTime() method.</p>
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.DerUtcTime.AdjustedTimeString">
            <summary>
            Return a time string as an adjusted date with a 4 digit year.
            This goes in the range of 1950 - 2049.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerUtf8String">
            Der UTF8String object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtf8String.GetInstance(System.Object)">
             return an UTF8 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtf8String.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an UTF8 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtf8String.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerUtf8String.#ctor(System.String)">
            basic constructor
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.DerVisibleString">
            Der VisibleString object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerVisibleString.GetInstance(System.Object)">
             return a Visible string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerVisibleString.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Visible string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerVisibleString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.DerVisibleString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.CertificateValues">
            <remarks>
            RFC 3126: 4.3.1 Certificate Values Attribute Definition
            <code>
            CertificateValues ::= SEQUENCE OF Certificate
            </code>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.ToAsn1Object">
            <pre>
            CommitmentTypeIndication ::= SEQUENCE {
                 commitmentTypeId   CommitmentTypeIdentifier,
                 commitmentTypeQualifier   SEQUENCE SIZE (1..MAX) OF
                         CommitmentTypeQualifier OPTIONAL }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier">
             Commitment type qualifiers, used in the Commitment-Type-Indication attribute (RFC3126).
            
             <pre>
               CommitmentTypeQualifier ::= SEQUENCE {
                   commitmentTypeIdentifier  CommitmentTypeIdentifier,
                   qualifier          ANY DEFINED BY commitmentTypeIdentifier OPTIONAL }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.#ctor(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param commitmentTypeIdentifier a <code>CommitmentTypeIdentifier</code> value
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.#ctor(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param commitmentTypeIdentifier a <code>CommitmentTypeIdentifier</code> value
             @param qualifier the qualifier, defined by the above field.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param as <code>CommitmentTypeQualifier</code> structure
             encoded as an Asn1Sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.ToAsn1Object">
             Returns a DER-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.CompleteCertificateRefs">
            <remarks>
            RFC 3126: 4.2.1 Complete Certificate Refs Attribute Definition
            <code>
            CompleteCertificateRefs ::= SEQUENCE OF OtherCertID
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.CompleteRevocationRefs">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CompleteRevocationRefs ::= SEQUENCE OF CrlOcspRef
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.CrlIdentifier">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlIdentifier ::= SEQUENCE 
            {
            	crlissuer		Name,
            	crlIssuedTime	UTCTime,
            	crlNumber		INTEGER OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.CrlListID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CRLListID ::= SEQUENCE 
            {
            	crls	SEQUENCE OF CrlValidatedID
            }
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.CrlOcspRef">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlOcspRef ::= SEQUENCE {
            	crlids		[0] CRLListID		OPTIONAL,
            	ocspids		[1] OcspListID		OPTIONAL,
            	otherRev	[2] OtherRevRefs	OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.CrlValidatedID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlValidatedID ::= SEQUENCE {
            	crlHash			OtherHash,
            	crlIdentifier	CrlIdentifier OPTIONAL}
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.OcspIdentifier">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspIdentifier ::= SEQUENCE {
            	ocspResponderID		ResponderID,
            		-- As in OCSP response data
            	producedAt			GeneralizedTime
            		-- As in OCSP response data
            }
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.OcspListID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspListID ::=  SEQUENCE {
            	ocspResponses	SEQUENCE OF OcspResponsesID
            }
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.OcspResponsesID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspResponsesID ::= SEQUENCE {
            	ocspIdentifier	OcspIdentifier,
            	ocspRepHash		OtherHash OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.OtherCertID">
            <remarks>
            <code>
            OtherCertID ::= SEQUENCE {
            	otherCertHash	OtherHash,
            	issuerSerial	IssuerSerial OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.OtherHash">
            <remarks>
            <code>
            OtherHash ::= CHOICE {
            	sha1Hash	OtherHashValue, -- This contains a SHA-1 hash
            	otherHash	OtherHashAlgAndValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue">
            <summary>
            Summary description for OtherHashAlgAndValue.
            </summary>
            <remarks>
            <code>
            OtherHashAlgAndValue ::= SEQUENCE {
            	hashAlgorithm	AlgorithmIdentifier,
            	hashValue		OtherHashValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.OtherRevRefs">
             <remarks>
             RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
             <code>
             OtherRevRefs ::= SEQUENCE 
             {
            		otherRevRefType      OtherRevRefType,
            		otherRevRefs         ANY DEFINED BY otherRevRefType
             }
            
             OtherRevRefType ::= OBJECT IDENTIFIER
             </code>
             </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.OtherRevVals">
             <remarks>
             RFC 3126: 4.3.2 Revocation Values Attribute Definition
             <code>
             OtherRevVals ::= SEQUENCE 
             {
            		otherRevValType      OtherRevValType,
            		otherRevVals         ANY DEFINED BY otherRevValType
             }
            
             OtherRevValType ::= OBJECT IDENTIFIER
             </code>
             </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.OtherSigningCertificate">
            <remarks>
            <code>
            OtherSigningCertificate ::= SEQUENCE {
            	certs		SEQUENCE OF OtherCertID,
            	policies	SEQUENCE OF PolicyInformation OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.RevocationValues">
            <remarks>
            RFC 5126: 6.3.4.  revocation-values Attribute Definition
            <code>
            RevocationValues ::=  SEQUENCE {
            	crlVals			[0] SEQUENCE OF CertificateList     OPTIONAL,
            	ocspVals		[1] SEQUENCE OF BasicOCSPResponse   OPTIONAL,
            	otherRevVals	[2] OtherRevVals OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.SignaturePolicyId">
            <remarks>
            <code>
            SignaturePolicyId ::= SEQUENCE {
            	sigPolicyIdentifier		SigPolicyId,
            	sigPolicyHash			SigPolicyHash,
            	sigPolicyQualifiers		SEQUENCE SIZE (1..MAX) OF SigPolicyQualifierInfo OPTIONAL
            }
            
            SigPolicyId ::= OBJECT IDENTIFIER
            
            SigPolicyHash ::= OtherHashAlgAndValue
            </code>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier">
            <remarks>
            <code>
            SignaturePolicyIdentifier ::= CHOICE {
            	SignaturePolicyId		SignaturePolicyId,
            	SignaturePolicyImplied	SignaturePolicyImplied
            }
            
            SignaturePolicyImplied ::= NULL
            </code>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Esf.SignerAttribute.ToAsn1Object">
            
             <pre>
              SignerAttribute ::= SEQUENCE OF CHOICE {
                  claimedAttributes   [0] ClaimedAttributes,
                  certifiedAttributes [1] CertifiedAttributes }
            
              ClaimedAttributes ::= SEQUENCE OF Attribute
              CertifiedAttributes ::= AttributeCertificate -- as defined in RFC 3281: see clause 4.1.
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.SignerLocation">
             Signer-Location attribute (RFC3126).
            
             <pre>
               SignerLocation ::= SEQUENCE {
                   countryName        [0] DirectoryString OPTIONAL,
                   localityName       [1] DirectoryString OPTIONAL,
                   postalAddress      [2] PostalAddress OPTIONAL }
            
               PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Esf.SignerLocation.ToAsn1Object">
             <pre>
               SignerLocation ::= SEQUENCE {
                   countryName        [0] DirectoryString OPTIONAL,
                   localityName       [1] DirectoryString OPTIONAL,
                   postalAddress      [2] PostalAddress OPTIONAL }
            
               PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString
            
               DirectoryString ::= CHOICE {
                     teletexString           TeletexString (SIZE (1..MAX)),
                     printableString         PrintableString (SIZE (1..MAX)),
                     universalString         UniversalString (SIZE (1..MAX)),
                     utf8String              UTF8String (SIZE (1.. MAX)),
                     bmpString               BMPString (SIZE (1..MAX)) }
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo">
            <remarks>
            <code>
            SigPolicyQualifierInfo ::= SEQUENCE {
            	sigPolicyQualifierId  SigPolicyQualifierId,
            	sigQualifier          ANY DEFINED BY sigPolicyQualifierId
            }
            
            SigPolicyQualifierId ::= OBJECT IDENTIFIER
            </code>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.ContentHints.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.ContentHints.ToAsn1Object">
            <pre>
            ContentHints ::= SEQUENCE {
              contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,
              contentType ContentType }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.ContentIdentifier.#ctor(LibOrg.BouncyCastle.Asn1.Asn1OctetString)">
            Create from OCTET STRING whose octets represent the identifier.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.ContentIdentifier.#ctor(System.Byte[])">
            Create from byte array representing the identifier.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.ContentIdentifier.ToAsn1Object">
            The definition of ContentIdentifier is
            <pre>
            ContentIdentifier ::=  OCTET STRING
            </pre>
            id-aa-contentIdentifier OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 7 }
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.EssCertID.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.EssCertID.ToAsn1Object">
            <pre>
            EssCertID ::= SEQUENCE {
                certHash Hash,
                issuerSerial IssuerSerial OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.EssCertIDv2.ToAsn1Object">
             <pre>
             EssCertIDv2 ::=  SEQUENCE {
                 hashAlgorithm     AlgorithmIdentifier
                          DEFAULT {algorithm id-sha256},
                 certHash          Hash,
                 issuerSerial      IssuerSerial OPTIONAL
             }
            
             Hash ::= OCTET STRING
            
             IssuerSerial ::= SEQUENCE {
                 issuer         GeneralNames,
                 serialNumber   CertificateSerialNumber
             }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.OtherCertID.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.OtherCertID.ToAsn1Object">
             <pre>
             OtherCertID ::= SEQUENCE {
                 otherCertHash    OtherHash,
                 issuerSerial     IssuerSerial OPTIONAL }
            
             OtherHash ::= CHOICE {
                 sha1Hash     OCTET STRING,
                 otherHash    OtherHashAlgAndValue }
            
             OtherHashAlgAndValue ::= SEQUENCE {
                 hashAlgorithm    AlgorithmIdentifier,
                 hashValue        OCTET STRING }
            
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.OtherSigningCertificate.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            constructors
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.OtherSigningCertificate.ToAsn1Object">
            The definition of OtherSigningCertificate is
            <pre>
            OtherSigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF OtherCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-ets-otherSigCert OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 19 }
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.SigningCertificate.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            constructors
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.SigningCertificate.ToAsn1Object">
            The definition of SigningCertificate is
            <pre>
            SigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 12 }
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ess.SigningCertificateV2.ToAsn1Object">
            The definition of SigningCertificateV2 is
            <pre>
            SigningCertificateV2 ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertIDv2,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificateV2 OBJECT IDENTIFIER ::= { iso(1)
               member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
               smime(16) id-aa(2) 47 }
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Icao.CscaMasterList">
             The CscaMasterList object. This object can be wrapped in a
             CMSSignedData to be published in LDAP.
            
             <pre>
             CscaMasterList ::= SEQUENCE {
               version                CscaMasterListVersion,
               certList               SET OF Certificate }
               
             CscaMasterListVersion :: INTEGER {v0(0)}
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Icao.DataGroupHash">
             The DataGroupHash object.
             <pre>
             DataGroupHash  ::=  SEQUENCE {
                  dataGroupNumber         DataGroupNumber,
                  dataGroupHashValue     OCTET STRING }
            
             DataGroupNumber ::= INTEGER {
                     dataGroup1    (1),
                     dataGroup1    (2),
                     dataGroup1    (3),
                     dataGroup1    (4),
                     dataGroup1    (5),
                     dataGroup1    (6),
                     dataGroup1    (7),
                     dataGroup1    (8),
                     dataGroup1    (9),
                     dataGroup1    (10),
                     dataGroup1    (11),
                     dataGroup1    (12),
                     dataGroup1    (13),
                     dataGroup1    (14),
                     dataGroup1    (15),
                     dataGroup1    (16) }
            
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Icao.LdsSecurityObject">
             The LDSSecurityObject object (V1.8).
             <pre>
             LDSSecurityObject ::= SEQUENCE {
               version                LDSSecurityObjectVersion,
               hashAlgorithm          DigestAlgorithmIdentifier,
               dataGroupHashValues    SEQUENCE SIZE (2..ub-DataGroups) OF DataHashGroup,
               ldsVersionInfo         LDSVersionInfo OPTIONAL
                 -- if present, version MUST be v1 }
            
             DigestAlgorithmIdentifier ::= AlgorithmIdentifier,
            
             LDSSecurityObjectVersion :: INTEGER {V0(0)}
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Icao.LdsVersionInfo.ToAsn1Object">
            <pre>
            LDSVersionInfo ::= SEQUENCE {
               ldsVersion PRINTABLE STRING
               unicodeVersion PRINTABLE STRING
             }
            </pre>
            @return
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttCPAccredited">
            The id-isismtt-cp-accredited OID indicates that the certificate is a
            qualified certificate according to Directive 1999/93/EC of the European
            Parliament and of the Council of 13 December 1999 on a Community
            Framework for Electronic Signatures, which additionally conforms the
            special requirements of the SigG and has been issued by an accredited CA.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDateOfCertGen">
             Certificate extensionDate of certificate generation
             
             <pre>
            		DateOfCertGenSyntax ::= GeneralizedTime
             </pre>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATProcuration">
            Attribute to indicate that the certificate holder may sign in the name of
            a third person. May also be used as extension in a certificate.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdmission">
            Attribute to indicate admissions to certain professions. May be used as
            attribute in attribute certificate or as extension in a certificate
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATMonetaryLimit">
            Monetary limit for transactions. The QcEuMonetaryLimit QC statement MUST
            be used in new certificates in place of the extension/attribute
            MonetaryLimit since January 1, 2004. For the sake of backward
            compatibility with certificates already in use, SigG conforming
            components MUST support MonetaryLimit (as well as QcEuLimitValue).
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDeclarationOfMajority">
            A declaration of majority. May be used as attribute in attribute
            certificate or as extension in a certificate
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATIccsn">
             
             Serial number of the smart card containing the corresponding private key
             
             <pre>
            		ICCSNSyntax ::= OCTET STRING (SIZE(8..20))
             </pre>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATPKReference">
             
             Reference for a file of a smartcard that stores the public key of this
             certificate and that is used as �security anchor�.
             
             <pre>
            		PKReferenceSyntax ::= OCTET STRING (SIZE(20))
             </pre>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRestriction">
             Some other restriction regarding the usage of this certificate. May be
             used as attribute in attribute certificate or as extension in a
             certificate.
             
             <pre>
            		RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
             
             @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Restriction
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRetrieveIfAllowed">
             
             (Single)Request extension: Clients may include this extension in a
             (single) Request to request the responder to send the certificate in the
             response message along with the status information. Besides the LDAP
             service, this extension provides another mechanism for the distribution
             of certificates, which MAY optionally be provided by certificate
             repositories.
             
             <pre>
            		RetrieveIfAllowed ::= BOOLEAN
             </pre>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRequestedCertificate">
            SingleOCSPResponse extension: The certificate requested by the client by
            inserting the RetrieveIfAllowed extension in the request, will be
            returned in this extension.
            
            @see LibOrg.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNamingAuthorities">
            Base ObjectIdentifier for naming authorities
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertInDirSince">
             SingleOCSPResponse extension: Date, when certificate has been published
             in the directory and status information has become available. Currently,
             accrediting authorities enforce that SigG-conforming OCSP servers include
             this extension in the responses.
             
             <pre>
            		CertInDirSince ::= GeneralizedTime
             </pre>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertHash">
             Hash of a certificate in OCSP.
            
             @see LibOrg.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNameAtBirth">
             <pre>
            		NameAtBirth ::= DirectoryString(SIZE(1..64)
             </pre>
             
             Used in
             {@link LibOrg.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes SubjectDirectoryAttributes}
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdditionalInformation">
            Some other information of non-restrictive nature regarding the usage of
            this certificate. May be used as attribute in atribute certificate or as
            extension in a certificate.
            
            <pre>
                          AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
            </pre>
            
            @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATLiabilityLimitationFlag">
             Indicates that an attribute certificate exists, which limits the
             usability of this public key certificate. Whenever verifying a signature
             with the help of this certificate, the content of the corresponding
             attribute certificate should be concerned. This extension MUST be
             included in a PKC, if a corresponding attribute certificate (having the
             PKC as base certificate) contains some attribute that restricts the
             usability of the PKC too. Attribute certificates with restricting content
             MUST always be included in the signed document.
             
             <pre>
            		LiabilityLimitationFlagSyntax ::= BOOLEAN
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash">
            ISIS-MTT PROFILE: The responder may include this extension in a response to
            send the hash of the requested certificate to the responder. This hash is
            cryptographically bound to the certificate and serves as evidence that the
            certificate is known to the responder (i.e. it has been issued and is present
            in the directory). Hence, this extension is a means to provide a positive
            statement of availability as described in T8.[8]. As explained in T13.[1],
            clients may rely on this information to be able to validate signatures after
            the expiry of the corresponding certificate. Hence, clients MUST support this
            extension. If a positive statement of availability is to be delivered, this
            extension syntax and OID MUST be used.
            <p/>
            <p/>
            <pre>
                CertHash ::= SEQUENCE {
                  hashAlgorithm AlgorithmIdentifier,
                  certificateHash OCTET STRING
                }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type CertHash:
             <p/>
             <pre>
                 CertHash ::= SEQUENCE {
                   hashAlgorithm AlgorithmIdentifier,
                   certificateHash OCTET STRING
                 }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.#ctor(LibOrg.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
             Constructor from a given details.
            
             @param hashAlgorithm   The hash algorithm identifier.
             @param certificateHash The hash of the whole DER encoding of the certificate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 CertHash ::= SEQUENCE {
                   hashAlgorithm AlgorithmIdentifier,
                   certificateHash OCTET STRING
                 }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate">
            ISIS-MTT-Optional: The certificate requested by the client by inserting the
            RetrieveIfAllowed extension in the request, will be returned in this
            extension.
            <p/>
            ISIS-MTT-SigG: The signature act allows publishing certificates only then,
            when the certificate owner gives his isExplicit permission. Accordingly, there
            may be �nondownloadable� certificates, about which the responder must provide
            status information, but MUST NOT include them in the response. Clients may
            get therefore the following three kind of answers on a single request
            including the RetrieveIfAllowed extension:
            <ul>
            <li> a) the responder supports the extension and is allowed to publish the
            certificate: RequestedCertificate returned including the requested
            certificate</li>
            <li>b) the responder supports the extension but is NOT allowed to publish
            the certificate: RequestedCertificate returned including an empty OCTET
            STRING</li>
            <li>c) the responder does not support the extension: RequestedCertificate is
            not included in the response</li>
            </ul>
            Clients requesting RetrieveIfAllowed MUST be able to handle these cases. If
            any of the OCTET STRING options is used, it MUST contain the DER encoding of
            the requested certificate.
            <p/>
            <pre>
                       RequestedCertificate ::= CHOICE {
                         Certificate Certificate,
                         publicKeyCertificate [0] EXPLICIT OCTET STRING,
                         attributeCertificate [1] EXPLICIT OCTET STRING
                       }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.#ctor(LibOrg.BouncyCastle.Asn1.X509.X509CertificateStructure)">
             Constructor from a given details.
             <p/>
             Only one parameter can be given. All other must be <code>null</code>.
            
             @param certificate Given as Certificate
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                        RequestedCertificate ::= CHOICE {
                          Certificate Certificate,
                          publicKeyCertificate [0] EXPLICIT OCTET STRING,
                          attributeCertificate [1] EXPLICIT OCTET STRING
                        }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax">
            Some other information of non-restrictive nature regarding the usage of this
            certificate.
            
            <pre>
               AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.#ctor(System.String)">
             Constructor from a given details.
            
             @param information The describtion of the information.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
               AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Admissions">
             An Admissions structure.
             <p/>
             <pre>
                        Admissions ::= SEQUENCE
                        {
                          admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                          namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                          professionInfos SEQUENCE OF ProfessionInfo
                        }
             <p/>
             </pre>
            
             @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax
             @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo
             @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Admissions.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                        Admissions ::= SEQUENCE
                        {
                          admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                          namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                          professionInfos SEQUENCE OF ProfessionInfo
                        }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Admissions.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralName,LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority,LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo[])">
             Constructor from a given details.
             <p/>
             Parameter <code>professionInfos</code> is mandatory.
            
             @param admissionAuthority The admission authority.
             @param namingAuthority    The naming authority.
             @param professionInfos    The profession infos.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Admissions.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   Admissions ::= SEQUENCE
                   {
                     admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                     namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                     professionInfos SEQUENCE OF ProfessionInfo
                   }
             <p/>
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax">
             Attribute to indicate admissions to certain professions.
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
             <p/>
             <p/>
             ISIS-MTT PROFILE: The relatively complex structure of AdmissionSyntax
             supports the following concepts and requirements:
             <ul>
             <li> External institutions (e.g. professional associations, chambers, unions,
             administrative bodies, companies, etc.), which are responsible for granting
             and verifying professional admissions, are indicated by means of the data
             field admissionAuthority. An admission authority is indicated by a
             GeneralName object. Here an X.501 directory name (distinguished name) can be
             indicated in the field directoryName, a URL address can be indicated in the
             field uniformResourceIdentifier, and an object identifier can be indicated in
             the field registeredId.</li>
             <li> The names of authorities which are responsible for the administration of
             title registers are indicated in the data field namingAuthority. The name of
             the authority can be identified by an object identifier in the field
             namingAuthorityId, by means of a text string in the field
             namingAuthorityText, by means of a URL address in the field
             namingAuthorityUrl, or by a combination of them. For example, the text string
             can contain the name of the authority, the country and the name of the title
             register. The URL-option refers to a web page which contains lists with
             �officially� registered professions (text and possibly OID) as well as
             further information on these professions. Object identifiers for the
             component namingAuthorityId are grouped under the OID-branch
             id-isis-at-namingAuthorities and must be applied for.</li>
             <li>See http://www.teletrust.de/anwend.asp?Id=30200&amp;Sprache=E_&amp;HomePG=0
             for an application form and http://www.teletrust.de/links.asp?id=30220,11
             for an overview of registered naming authorities.</li>
             <li> By means of the data type ProfessionInfo certain professions,
             specializations, disciplines, fields of activity, etc. are identified. A
             profession is represented by one or more text strings, resp. profession OIDs
             in the fields professionItems and professionOIDs and by a registration number
             in the field registrationNumber. An indication in text form must always be
             present, whereas the other indications are optional. The component
             addProfessionInfo may contain additional applicationspecific information in
             DER-encoded form.</li>
             </ul>
             <p/>
             By means of different namingAuthority-OIDs or profession OIDs hierarchies of
             professions, specializations, disciplines, fields of activity, etc. can be
             expressed. The issuing admission authority should always be indicated (field
             admissionAuthority), whenever a registration number is presented. Still,
             information on admissions can be given without indicating an admission or a
             naming authority by the exclusive use of the component professionItems. In
             this case the certification authority is responsible for the verification of
             the admission information.
             <p/>
             <p/>
             <p/>
             This attribute is single-valued. Still, several admissions can be captured in
             the sequence structure of the component contentsOfAdmissions of
             AdmissionSyntax or in the component professionInfos of Admissions. The
             component admissionAuthority of AdmissionSyntax serves as default value for
             the component admissionAuthority of Admissions. Within the latter component
             the default value can be overwritten, in case that another authority is
             responsible. The component namingAuthority of Admissions serves as a default
             value for the component namingAuthority of ProfessionInfo. Within the latter
             component the default value can be overwritten, in case that another naming
             authority needs to be recorded.
             <p/>
             The length of the string objects is limited to 128 characters. It is
             recommended to indicate a namingAuthorityURL in all issued attribute
             certificates. If a namingAuthorityURL is indicated, the field professionItems
             of ProfessionInfo should contain only registered titles. If the field
             professionOIDs exists, it has to contain the OIDs of the professions listed
             in professionItems in the same order. In general, the field professionInfos
             should contain only one entry, unless the admissions that are to be listed
             are logically connected (e.g. they have been issued under the same admission
             number).
            
             @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Admissions
             @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo
             @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralName,LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from given details.
            
             @param admissionAuthority   The admission authority.
             @param contentsOfAdmissions The admissions.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.GetContentsOfAdmissions">
            @return Returns the contentsOfAdmissions.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.AdmissionAuthority">
            @return Returns the admissionAuthority if present, null otherwise.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority">
            A declaration of majority.
            <p/>
            <pre>
                      DeclarationOfMajoritySyntax ::= CHOICE
                      {
                        notYoungerThan [0] IMPLICIT INTEGER,
                        fullAgeAtCountry [1] IMPLICIT SEQUENCE
                        {
                          fullAge BOOLEAN DEFAULT TRUE,
                          country PrintableString (SIZE(2))
                        }
                        dateOfBirth [2] IMPLICIT GeneralizedTime
                      }
            </pre>
            <p/>
            fullAgeAtCountry indicates the majority of the owner with respect to the laws
            of a specific country.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                       DeclarationOfMajoritySyntax ::= CHOICE
                       {
                         notYoungerThan [0] IMPLICIT INTEGER,
                         fullAgeAtCountry [1] IMPLICIT SEQUENCE
                         {
                           fullAge BOOLEAN DEFAULT TRUE,
                           country PrintableString (SIZE(2))
                         }
                         dateOfBirth [2] IMPLICIT GeneralizedTime
                       }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.NotYoungerThan">
            @return notYoungerThan if that's what we are, -1 otherwise
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit">
            Monetary limit for transactions. The QcEuMonetaryLimit QC statement MUST be
            used in new certificates in place of the extension/attribute MonetaryLimit
            since January 1, 2004. For the sake of backward compatibility with
            certificates already in use, components SHOULD support MonetaryLimit (as well
            as QcEuLimitValue).
            <p/>
            Indicates a monetary limit within which the certificate holder is authorized
            to act. (This value DOES NOT express a limit on the liability of the
            certification authority).
            <p/>
            <pre>
               MonetaryLimitSyntax ::= SEQUENCE
               {
                 currency PrintableString (SIZE(3)),
                 amount INTEGER,
                 exponent INTEGER
               }
            </pre>
            <p/>
            currency must be the ISO code.
            <p/>
            value = amount�10*exponent
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.#ctor(System.String,System.Int32,System.Int32)">
             Constructor from a given details.
             <p/>
             <p/>
             value = amount�10^exponent
            
             @param currency The currency. Must be the ISO code.
             @param amount   The amount
             @param exponent The exponent
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                MonetaryLimitSyntax ::= SEQUENCE
                {
                  currency PrintableString (SIZE(3)),
                  amount INTEGER,
                  exponent INTEGER
                }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority">
            Names of authorities which are responsible for the administration of title
            registers.
            
            <pre>
                        NamingAuthority ::= SEQUENCE 
                        {
                          namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                          namingAuthorityUrl IA5String OPTIONAL,
                          namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                        }
            </pre>
            @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax
            
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.IdIsisMttATNamingAuthoritiesRechtWirtschaftSteuern">
            Profession OIDs should always be defined under the OID branch of the
            responsible naming authority. At the time of this writing, the work group
            �Recht, Wirtschaft, Steuern� (�Law, Economy, Taxes�) is registered as the
            first naming authority under the OID id-isismtt-at-namingAuthorities.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             <p/>
             <pre>
                         NamingAuthority ::= SEQUENCE
                         {
                           namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                           namingAuthorityUrl IA5String OPTIONAL,
                           namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                         }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.#ctor(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.String,LibOrg.BouncyCastle.Asn1.X500.DirectoryString)">
             Constructor from given details.
             <p/>
             All parameters can be combined.
            
             @param namingAuthorityID   ObjectIdentifier for naming authority.
             @param namingAuthorityUrl  URL for naming authority.
             @param namingAuthorityText Textual representation of naming authority.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                         NamingAuthority ::= SEQUENCE
                         {
                           namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                           namingAuthorityUrl IA5String OPTIONAL,
                           namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                         }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityID">
            @return Returns the namingAuthorityID.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityText">
            @return Returns the namingAuthorityText.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityUrl">
            @return Returns the namingAuthorityUrl.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax">
            Attribute to indicate that the certificate holder may sign in the name of a
            third person.
            <p>
            ISIS-MTT PROFILE: The corresponding ProcurationSyntax contains either the
            name of the person who is represented (subcomponent thirdPerson) or a
            reference to his/her base certificate (in the component signingFor,
            subcomponent certRef), furthermore the optional components country and
            typeSubstitution to indicate the country whose laws apply, and respectively
            the type of procuration (e.g. manager, procuration, custody).
            </p>
            <p>
            ISIS-MTT PROFILE: The GeneralName MUST be of type directoryName and MAY only
            contain: - RFC3039 attributes, except pseudonym (countryName, commonName,
            surname, givenName, serialNumber, organizationName, organizationalUnitName,
            stateOrProvincename, localityName, postalAddress) and - SubjectDirectoryName
            attributes (title, dateOfBirth, placeOfBirth, gender, countryOfCitizenship,
            countryOfResidence and NameAtBirth).
            </p>
            <pre>
                          ProcurationSyntax ::= SEQUENCE {
                            country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                            typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                            signingFor [3] EXPLICIT SigningFor 
                          }
                          
                          SigningFor ::= CHOICE 
                          { 
                            thirdPerson GeneralName,
                            certRef IssuerSerial 
                          }
            </pre>
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                           ProcurationSyntax ::= SEQUENCE {
                             country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                             typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                             signingFor [3] EXPLICIT SigningFor
                           }
             <p/>
                           SigningFor ::= CHOICE
                           {
                             thirdPerson GeneralName,
                             certRef IssuerSerial
                           }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,LibOrg.BouncyCastle.Asn1.X500.DirectoryString,LibOrg.BouncyCastle.Asn1.X509.IssuerSerial)">
             Constructor from a given details.
             <p/>
             <p/>
             Either <code>generalName</code> or <code>certRef</code> MUST be
             <code>null</code>.
            
             @param country            The country code whose laws apply.
             @param typeOfSubstitution The type of procuration.
             @param certRef            Reference to certificate of the person who is represented.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,LibOrg.BouncyCastle.Asn1.X500.DirectoryString,LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
             Constructor from a given details.
             <p/>
             <p/>
             Either <code>generalName</code> or <code>certRef</code> MUST be
             <code>null</code>.
            
             @param country            The country code whose laws apply.
             @param typeOfSubstitution The type of procuration.
             @param thirdPerson        The GeneralName of the person who is represented.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                           ProcurationSyntax ::= SEQUENCE {
                             country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                             typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                             signingFor [3] EXPLICIT SigningFor
                           }
             <p/>
                           SigningFor ::= CHOICE
                           {
                             thirdPerson GeneralName,
                             certRef IssuerSerial
                           }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo">
            Professions, specializations, disciplines, fields of activity, etc.
            
            <pre>
                          ProfessionInfo ::= SEQUENCE 
                          {
                            namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                            professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                            professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                            registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                            addProfessionInfo OCTET STRING OPTIONAL 
                          }
            </pre>
            
            @see LibOrg.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwltin">
            Rechtsanw�ltin
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwalt">
            Rechtsanwalt
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsbeistand">
            Rechtsbeistand
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberaterin">
            Steuerberaterin
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberater">
            Steuerberater
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigte">
            Steuerbevollm�chtigte
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigter">
            Steuerbevollm�chtigter
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarin">
            Notarin
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notar">
            Notar
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreterin">
            Notarvertreterin
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreter">
            Notarvertreter
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalterin">
            Notariatsverwalterin
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalter">
            Notariatsverwalter
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprferin">
            Wirtschaftspr�ferin
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprfer">
            Wirtschaftspr�fer
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.VereidigteBuchprferin">
            Vereidigte Buchpr�ferin
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.VereidigterBuchprfer">
            Vereidigter Buchpr�fer
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwltin">
            Patentanw�ltin
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwalt">
            Patentanwalt
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             <p/>
             <pre>
                           ProfessionInfo ::= SEQUENCE
                           {
                             namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                             professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                             professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                             registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                             addProfessionInfo OCTET STRING OPTIONAL
                           }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.#ctor(LibOrg.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority,LibOrg.BouncyCastle.Asn1.X500.DirectoryString[],LibOrg.BouncyCastle.Asn1.DerObjectIdentifier[],System.String,LibOrg.BouncyCastle.Asn1.Asn1OctetString)">
             Constructor from given details.
             <p/>
             <code>professionItems</code> is mandatory, all other parameters are
             optional.
            
             @param namingAuthority    The naming authority.
             @param professionItems    Directory strings of the profession.
             @param professionOids     DERObjectIdentfier objects for the
                                       profession.
             @param registrationNumber Registration number.
             @param addProfessionInfo  Additional infos in encoded form.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                           ProfessionInfo ::= SEQUENCE
                           {
                             namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                             professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                             professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                             registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                             addProfessionInfo OCTET STRING OPTIONAL
                           }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionItems">
            @return Returns the professionItems.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionOids">
            @return Returns the professionOids.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.AddProfessionInfo">
            @return Returns the addProfessionInfo.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.NamingAuthority">
            @return Returns the namingAuthority.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.RegistrationNumber">
            @return Returns the registrationNumber.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Restriction">
            Some other restriction regarding the usage of this certificate.
            <p/>
            <pre>
             RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Restriction.#ctor(LibOrg.BouncyCastle.Asn1.X500.DirectoryString)">
             Constructor from DirectoryString.
             <p/>
             The DirectoryString is of type RestrictionSyntax:
             <p/>
             <pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
            
             @param restriction A IAsn1String.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Restriction.#ctor(System.String)">
             Constructor from a given details.
            
             @param restriction The description of the restriction.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.IsisMtt.X509.Restriction.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             <p/>
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Misc.Cast5CbcParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            cast5CBCParameters ::= Sequence {
                                      iv         OCTET STRING DEFAULT 0,
                                             -- Initialization vector
                                      keyLength  Integer
                                             -- Key length, in bits
                                 }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Misc.IdeaCbcPar.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            IDEA-CBCPar ::= Sequence {
                                 iv    OCTET STRING OPTIONAL -- exactly 8 octets
                             }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Misc.NetscapeCertType">
            The NetscapeCertType object.
            <pre>
               NetscapeCertType ::= BIT STRING {
                    SSLClient               (0),
                    SSLServer               (1),
                    S/MIME                  (2),
                    Object Signing          (3),
                    Reserved                (4),
                    SSL CA                  (5),
                    S/MIME CA               (6),
                    Object Signing CA       (7) }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Misc.NetscapeCertType.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (X509NetscapeCertType.sslCA | X509NetscapeCertType.smimeCA)
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Mozilla.PublicKeyAndChallenge">
             This is designed to parse
             the PublicKeyAndChallenge created by the KEYGEN tag included by
             Mozilla based browsers.
              <pre>
              PublicKeyAndChallenge ::= SEQUENCE {
                spki SubjectPublicKeyInfo,
                challenge IA5STRING
              }
            
              </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Nist.NistNamedCurves">
            Utility class for fetching curves using their NIST names as published in FIPS-PUB 186-3
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Nist.NistNamedCurves.GetByOid(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Nist.NistNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Nist.NistNamedCurves.GetName(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.Nist.NistNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers">
            <summary>From RFC 3657</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            BasicOcspResponse       ::= Sequence {
                 tbsResponseData      ResponseData,
                 signatureAlgorithm   AlgorithmIdentifier,
                 signature            BIT STRING,
                 certs                [0] EXPLICIT Sequence OF Certificate OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.CertID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CertID          ::=     Sequence {
                hashAlgorithm       AlgorithmIdentifier,
                issuerNameHash      OCTET STRING, -- Hash of Issuer's DN
                issuerKeyHash       OCTET STRING, -- Hash of Issuers public key
                serialNumber        CertificateSerialNumber }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.CertStatus.#ctor">
            create a CertStatus object with a tag of zero.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.CertStatus.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             CertStatus ::= CHOICE {
                             good        [0]     IMPLICIT Null,
                             revoked     [1]     IMPLICIT RevokedInfo,
                             unknown     [2]     IMPLICIT UnknownInfo }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.CrlID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CrlID ::= Sequence {
                crlUrl               [0]     EXPLICIT IA5String OPTIONAL,
                crlNum               [1]     EXPLICIT Integer OPTIONAL,
                crlTime              [2]     EXPLICIT GeneralizedTime OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.OcspRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspRequest     ::=     Sequence {
                tbsRequest                  TBSRequest,
                optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.OcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspResponse ::= Sequence {
                responseStatus         OcspResponseStatus,
                responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.#ctor(System.Int32)">
            The OcspResponseStatus enumeration.
            <pre>
            OcspResponseStatus ::= Enumerated {
                successful            (0),  --Response has valid confirmations
                malformedRequest      (1),  --Illegal confirmation request
                internalError         (2),  --Internal error in issuer
                tryLater              (3),  --Try again later
                                            --(4) is not used
                sigRequired           (5),  --Must sign the request
                unauthorized          (6)   --Request unauthorized
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.Request.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Request         ::=     Sequence {
                reqCert                     CertID,
                singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.ResponderID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponderID ::= CHOICE {
                 byName          [1] Name,
                 byKey           [2] KeyHash }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.ResponseBytes.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseBytes ::=       Sequence {
                responseType   OBJECT IDENTIFIER,
                response       OCTET STRING }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.ResponseData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseData ::= Sequence {
                version              [0] EXPLICIT Version DEFAULT v1,
                responderID              ResponderID,
                producedAt               GeneralizedTime,
                responses                Sequence OF SingleResponse,
                responseExtensions   [1] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.RevokedInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RevokedInfo ::= Sequence {
                 revocationTime              GeneralizedTime,
                 revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.ServiceLocator.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ServiceLocator ::= Sequence {
                issuer    Name,
                locator   AuthorityInfoAccessSyntax OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.Signature.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Signature       ::=     Sequence {
                signatureAlgorithm      AlgorithmIdentifier,
                signature               BIT STRING,
                certs               [0] EXPLICIT Sequence OF Certificate OPTIONAL}
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.SingleResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             SingleResponse ::= Sequence {
                     certID                       CertID,
                     certStatus                   CertStatus,
                     thisUpdate                   GeneralizedTime,
                     nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,
                     singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Ocsp.TbsRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            TBSRequest      ::=     Sequence {
                version             [0]     EXPLICIT Version DEFAULT v1,
                requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
                requestList                 Sequence OF Request,
                requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.OidTokenizer">
            class for breaking up an Oid into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.AttributePkcs.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.AttributePkcs.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Pkcs.CertificationRequest">
            Pkcs10 Certfication request object.
            <pre>
            CertificationRequest ::= Sequence {
              certificationRequestInfo  CertificationRequestInfo,
              signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
              signature                 BIT STRING
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo">
             Pkcs10 CertificationRequestInfo object.
             <pre>
              CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.ContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= Sequence {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Pkcs.EncryptedData">
             The EncryptedData object.
             <pre>
                  EncryptedData ::= Sequence {
                       version Version,
                       encryptedContentInfo EncryptedContentInfo
                  }
            
            
                  EncryptedContentInfo ::= Sequence {
                      contentType ContentType,
                      contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
                      encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
                }
            
                EncryptedContent ::= OCTET STRING
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             EncryptedPrivateKeyInfo ::= Sequence {
                  encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},
                  encryptedData EncryptedData
             }
            
             EncryptedData ::= OCTET STRING
            
             KeyEncryptionAlgorithms ALGORITHM-IDENTIFIER ::= {
                      ... -- For local profiles
             }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AlgorithmIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
                 AlgorithmIdentifier ::= Sequence {
                                       algorithm OBJECT IDENTIFIER,
                                       parameters ANY DEFINED BY algorithm OPTIONAL }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.MacData.ToAsn1Object">
            <pre>
            MacData ::= SEQUENCE {
                mac      DigestInfo,
                macSalt  OCTET STRING,
                iterations INTEGER DEFAULT 1
                -- Note: The default is for historic reasons and its use is deprecated. A
                -- higher value, like 1024 is recommended.
            </pre>
            @return the basic DERObject construction.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Pkcs.Pfx">
            the infamous Pfx from Pkcs12
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.ToAsn1Object">
             write out an RSA private key with its associated information
             as described in Pkcs8.
             <pre>
                  PrivateKeyInfo ::= Sequence {
                                          version Version,
                                          privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},
                                          privateKey PrivateKey,
                                          attributes [0] IMPLICIT Attributes OPTIONAL
                                      }
                  Version ::= Integer {v1(0)} (v1,...)
            
                  PrivateKey ::= OCTET STRING
            
                  Attributes ::= Set OF Attr
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.#ctor">
            The default version
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.ToAsn1Object">
             <pre>
              RSAES-OAEP-params ::= SEQUENCE {
                 hashAlgorithm      [0] OAEP-PSSDigestAlgorithms     DEFAULT sha1,
                 maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                 pSourceAlgorithm   [2] PKCS1PSourceAlgorithms  DEFAULT pSpecifiedEmpty
               }
            
               OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-sha1 PARAMETERS NULL   }|
                 { OID id-sha256 PARAMETERS NULL }|
                 { OID id-sha384 PARAMETERS NULL }|
                 { OID id-sha512 PARAMETERS NULL },
                 ...  -- Allows for future expansion --
               }
               PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
               }
               PKCS1PSourceAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-pSpecified PARAMETERS OCTET STRING },
                 ...  -- Allows for future expansion --
              }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.ToAsn1Object">
             This outputs the key in Pkcs1v2 format.
             <pre>
                  RsaPrivateKey ::= Sequence {
                                      version Version,
                                      modulus Integer, -- n
                                      publicExponent Integer, -- e
                                      privateExponent Integer, -- d
                                      prime1 Integer, -- p
                                      prime2 Integer, -- q
                                      exponent1 Integer, -- d mod (p-1)
                                      exponent2 Integer, -- d mod (q-1)
                                      coefficient Integer -- (inverse of q) mod p
                                  }
            
                  Version ::= Integer
             </pre>
             <p>This routine is written to output Pkcs1 version 0, private keys.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.#ctor">
            The default version
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.ToAsn1Object">
             <pre>
             RSASSA-PSS-params ::= SEQUENCE {
               hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,
                maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                saltLength         [2] INTEGER  DEFAULT 20,
                trailerField       [3] TrailerField  DEFAULT trailerFieldBC
              }
            
             OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                { OID id-sha1 PARAMETERS NULL   }|
                { OID id-sha256 PARAMETERS NULL }|
                { OID id-sha384 PARAMETERS NULL }|
                { OID id-sha512 PARAMETERS NULL },
                ...  -- Allows for future expansion --
             }
            
             PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
               { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
             }
            
             TrailerField ::= INTEGER { trailerFieldBC(1) }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Pkcs.SignedData">
            a Pkcs#7 signed data object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.SignedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             SignedData ::= Sequence {
                 version Version,
                 digestAlgorithms DigestAlgorithmIdentifiers,
                 contentInfo ContentInfo,
                 certificates
                     [0] IMPLICIT ExtendedCertificatesAndCertificates
                              OPTIONAL,
                 crls
                     [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                 signerInfos SignerInfos }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Pkcs.SignerInfo">
            a Pkcs#7 signer info object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Pkcs.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  issuerAndSerialNumber IssuerAndSerialNumber,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure">
            the elliptic curve private key object from SEC 1
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.ToAsn1Object">
            ECPrivateKey ::= SEQUENCE {
                version INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
                privateKey OCTET STRING,
                parameters [0] Parameters OPTIONAL,
                publicKey [1] BIT STRING OPTIONAL }
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByOid(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Sec.SecNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Sec.SecNamedCurves.GetName(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.Sec.SecNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.EllipticCurve">
            EllipticCurve OBJECT IDENTIFIER ::= {
                  iso(1) identified-organization(3) certicom(132) curve(0)
            }
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapabilities">
            Handler class for dealing with S/MIME Capabilities
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapabilities.PreferSignedData">
            general preferences
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapabilities.DesCbc">
            encryption algorithms preferences
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapabilities.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapabilities.GetCapabilitiesForOid(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            returns an ArrayList with 0 or more objects of all the capabilities
            matching the passed in capability Oid. If the Oid passed is null the
            entire set is returned.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapabilities.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapabilities ::= Sequence OF SMIMECapability
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AttributeX509.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AttributeX509.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapability.PreferSignedData">
            general preferences
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapability.DesCbc">
            encryption algorithms preferences
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapability.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapability ::= Sequence {
                capabilityID OBJECT IDENTIFIER,
                parameters ANY DEFINED BY capabilityID OPTIONAL
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Smime.SmimeCapabilityVector">
            Handler for creating a vector S/MIME Capabilities
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute">
            The SmimeEncryptionKeyPreference object.
            <pre>
            SmimeEncryptionKeyPreference ::= CHOICE {
                issuerAndSerialNumber   [0] IssuerAndSerialNumber,
                receipentKeyId          [1] RecipientKeyIdentifier,
                subjectAltKeyIdentifier [2] SubjectKeyIdentifier
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute.#ctor(LibOrg.BouncyCastle.Asn1.Asn1OctetString)">
            @param sKeyId the subjectKeyIdentifier value (normally the X.509 one)
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves">
            elliptic curves defined in "ECC Brainpool Standard Curves and Curve Generation"
            http://www.ecc-brainpool.org/download/draft_pkix_additional_ecc_dp.txt
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetByOid(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetName(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Tsp.Accuracy.ToAsn1Object">
            <pre>
            Accuracy ::= SEQUENCE {
                        seconds        INTEGER              OPTIONAL,
                        millis     [0] INTEGER  (1..999)    OPTIONAL,
                        micros     [1] INTEGER  (1..999)    OPTIONAL
                        }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Tsp.MessageImprint.GetInstance(System.Object)">
            @param o
            @return a MessageImprint object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Tsp.MessageImprint.ToAsn1Object">
            <pre>
               MessageImprint ::= SEQUENCE  {
                  hashAlgorithm                AlgorithmIdentifier,
                  hashedMessage                OCTET STRING  }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Tsp.TimeStampReq.ToAsn1Object">
            <pre>
            TimeStampReq ::= SEQUENCE  {
             version                      INTEGER  { v1(1) },
             messageImprint               MessageImprint,
               --a hash algorithm OID and the hash value of the data to be
               --time-stamped
             reqPolicy             TSAPolicyId              OPTIONAL,
             nonce                 INTEGER                  OPTIONAL,
             certReq               BOOLEAN                  DEFAULT FALSE,
             extensions            [0] IMPLICIT Extensions  OPTIONAL
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Tsp.TimeStampResp.ToAsn1Object">
            <pre>
            TimeStampResp ::= SEQUENCE  {
              status                  PkiStatusInfo,
              timeStampToken          TimeStampToken     OPTIONAL  }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Tsp.TstInfo.ToAsn1Object">
             <pre>
            
                 TstInfo ::= SEQUENCE  {
                    version                      INTEGER  { v1(1) },
                    policy                       TSAPolicyId,
                    messageImprint               MessageImprint,
                      -- MUST have the same value as the similar field in
                      -- TimeStampReq
                    serialNumber                 INTEGER,
                     -- Time-Stamping users MUST be ready to accommodate integers
                     -- up to 160 bits.
                    genTime                      GeneralizedTime,
                    accuracy                     Accuracy                 OPTIONAL,
                    ordering                     BOOLEAN             DEFAULT FALSE,
                    nonce                        INTEGER                  OPTIONAL,
                      -- MUST be present if the similar field was present
                      -- in TimeStampReq.  In that case it MUST have the same value.
                    tsa                          [0] GeneralName          OPTIONAL,
                    extensions                   [1] IMPLICIT Extensions   OPTIONAL  }
            
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Utilities.Asn1Dump.AsString(System.String,System.Boolean,LibOrg.BouncyCastle.Asn1.Asn1Object,System.Text.StringBuilder)">
             dump a Der object as a formatted string with indentation
            
             @param obj the Asn1Object to be dumped out.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Utilities.Asn1Dump.DumpAsString(LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
             dump out a DER object as a formatted string, in non-verbose mode
            
             @param obj the Asn1Encodable to be dumped out.
             @return  the resulting string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.Utilities.Asn1Dump.DumpAsString(LibOrg.BouncyCastle.Asn1.Asn1Encodable,System.Boolean)">
             Dump out the object as a string
            
             @param obj the Asn1Encodable to be dumped out.
             @param verbose  if true, dump out the contents of octet and bit strings.
             @return  the resulting string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X500.DirectoryString.ToAsn1Object">
            <pre>
             DirectoryString ::= CHOICE {
               teletexString               TeletexString (SIZE (1..MAX)),
               printableString             PrintableString (SIZE (1..MAX)),
               universalString             UniversalString (SIZE (1..MAX)),
               utf8String                  UTF8String (SIZE (1..MAX)),
               bmpString                   BMPString (SIZE (1..MAX))  }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.AccessDescription">
            The AccessDescription object.
            <pre>
            AccessDescription  ::=  SEQUENCE {
                  accessMethod          OBJECT IDENTIFIER,
                  accessLocation        GeneralName  }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AccessDescription.#ctor(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
            create an AccessDescription with the oid and location provided.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.AccessDescription.AccessMethod">
            
             @return the access method.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.AccessDescription.AccessLocation">
            
             @return the access location
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AttCertIssuer.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralNames)">
            <summary>
            Don't use this one if you are trying to be RFC 3281 compliant.
            Use it for v1 attribute certificates only.
            </summary>
            <param name="names">Our GeneralNames structure</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AttCertIssuer.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertIssuer ::= CHOICE {
                  v1Form   GeneralNames,  -- MUST NOT be used in this
                                          -- profile
                  v2Form   [0] V2Form     -- v2 only
             }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AttCertValidityPeriod.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertValidityPeriod  ::= Sequence {
                  notBeforeTime  GeneralizedTime,
                  notAfterTime   GeneralizedTime
             }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AttributeCertificate.GetInstance(System.Object)">
            @param obj
            @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AttributeCertificate.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttributeCertificate ::= Sequence {
                  acinfo               AttributeCertificateInfo,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING
             }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AttributeCertificateInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              AttributeCertificateInfo ::= Sequence {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           Sequence OF Attr,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
              }
            
              AttCertVersion ::= Integer { v2(1) }
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.AuthorityInformationAccess">
             The AuthorityInformationAccess object.
             <pre>
             id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }
            
             AuthorityInfoAccessSyntax  ::=
                  Sequence SIZE (1..MAX) OF AccessDescription
             AccessDescription  ::=  Sequence {
                   accessMethod          OBJECT IDENTIFIER,
                   accessLocation        GeneralName  }
            
             id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
             id-ad-caIssuers OBJECT IDENTIFIER ::= { id-ad 2 }
             id-ad-ocsp OBJECT IDENTIFIER ::= { id-ad 1 }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AuthorityInformationAccess.#ctor(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
            create an AuthorityInformationAccess with the oid and location provided.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier">
             The AuthorityKeyIdentifier object.
             <pre>
             id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }
            
               AuthorityKeyIdentifier ::= Sequence {
                  keyIdentifier             [0] IMPLICIT KeyIdentifier           OPTIONAL,
                  authorityCertIssuer       [1] IMPLICIT GeneralNames            OPTIONAL,
                  authorityCertSerialNumber [2] IMPLICIT CertificateSerialNumber OPTIONAL  }
            
               KeyIdentifier ::= OCTET STRING
             </pre>
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
                     *
                     * Calulates the keyidentifier using a SHA1 hash over the BIT STRING
                     * from SubjectPublicKeyInfo as defined in RFC2459.
                     *
                     * Example of making a AuthorityKeyIdentifier:
                     * <pre>
            	     *   SubjectPublicKeyInfo apki = new SubjectPublicKeyInfo((ASN1Sequence)new ASN1InputStream(
            		 *       publicKey.getEncoded()).readObject());
                     *   AuthorityKeyIdentifier aki = new AuthorityKeyIdentifier(apki);
                     * </pre>
                     *
                     *
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo,LibOrg.BouncyCastle.Asn1.X509.GeneralNames,LibOrg.BouncyCastle.Math.BigInteger)">
            create an AuthorityKeyIdentifier with the GeneralNames tag and
            the serial number provided as well.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralNames,LibOrg.BouncyCastle.Math.BigInteger)">
            create an AuthorityKeyIdentifier with the GeneralNames tag and
            the serial number provided.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[])">
            create an AuthorityKeyIdentifier with a precomputed key identifier
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[],LibOrg.BouncyCastle.Asn1.X509.GeneralNames,LibOrg.BouncyCastle.Math.BigInteger)">
            create an AuthorityKeyIdentifier with a precomupted key identifier
            and the GeneralNames tag and the serial number provided as well.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.BasicConstraints.#ctor(System.Int32)">
             create a cA=true object for the given path length constraint.
            
             @param pathLenConstraint
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.BasicConstraints.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            BasicConstraints := Sequence {
               cA                  Boolean DEFAULT FALSE,
               pathLenConstraint   Integer (0..MAX) OPTIONAL
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.CertificateList">
             PKIX RFC-2459
            
             The X.509 v2 CRL syntax is as follows.  For signature calculation,
             the data that is to be signed is ASN.1 Der encoded.
            
             <pre>
             CertificateList  ::=  Sequence  {
                  tbsCertList          TbsCertList,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING  }
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.CertificatePair">
             This class helps to support crossCerfificatePairs in a LDAP directory
             according RFC 2587
            
             <pre>
                 crossCertificatePairATTRIBUTE::={
                   WITH SYNTAX   CertificatePair
                   EQUALITY MATCHING RULE certificatePairExactMatch
                   ID joint-iso-ccitt(2) ds(5) attributeType(4) crossCertificatePair(40)}
             </pre>
            
             <blockquote> The forward elements of the crossCertificatePair attribute of a
             CA's directory entry shall be used to store all, except self-issued
             certificates issued to this CA. Optionally, the reverse elements of the
             crossCertificatePair attribute, of a CA's directory entry may contain a
             subset of certificates issued by this CA to other CAs. When both the forward
             and the reverse elements are present in a single attribute value, issuer name
             in one certificate shall match the subject name in the other and vice versa,
             and the subject public key in one certificate shall be capable of verifying
             the digital signature on the other certificate and vice versa.
            
             When a reverse element is present, the forward element value and the reverse
             element value need not be stored in the same attribute value; in other words,
             they can be stored in either a single attribute value or two attribute
             values. </blockquote>
            
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.CertificatePair.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type CertificatePair:
             <p/>
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.CertificatePair.#ctor(LibOrg.BouncyCastle.Asn1.X509.X509CertificateStructure,LibOrg.BouncyCastle.Asn1.X509.X509CertificateStructure)">
             Constructor from a given details.
            
             @param forward Certificates issued to this CA.
             @param reverse Certificates issued by this CA to other CAs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.CertificatePair.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
            
             @return a DERObject
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.CertificatePair.Forward">
            @return Returns the forward.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.CertificatePair.Reverse">
            @return Returns the reverse.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.CertificatePolicies.#ctor(LibOrg.BouncyCastle.Asn1.X509.PolicyInformation)">
            Construct a CertificatePolicies object containing one PolicyInformation.
            
            @param name the name to be contained.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.CertificatePolicies.ToAsn1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            CertificatePolicies ::= SEQUENCE SIZE {1..MAX} OF PolicyInformation
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.CertPolicyID">
             CertPolicyId, used in the CertificatePolicies and PolicyMappings
             X509V3 Extensions.
            
             <pre>
                 CertPolicyId ::= OBJECT IDENTIFIER
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.CrlDistPoint.GetDistributionPoints">
             Return the distribution points making up the sequence.
            
             @return DistributionPoint[]
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.CrlDistPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CrlDistPoint ::= Sequence SIZE {1..MAX} OF DistributionPoint
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.CrlNumber">
            The CRLNumber object.
            <pre>
            CRLNumber::= Integer(0..MAX)
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.CrlReason">
            The CRLReason enumeration.
            <pre>
            CRLReason ::= Enumerated {
             unspecified             (0),
             keyCompromise           (1),
             cACompromise            (2),
             affiliationChanged      (3),
             superseded              (4),
             cessationOfOperation    (5),
             certificateHold         (6),
             removeFromCRL           (8),
             privilegeWithdrawn      (9),
             aACompromise           (10)
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.DigestInfo">
            The DigestInfo object.
            <pre>
            DigestInfo::=Sequence{
                     digestAlgorithm  AlgorithmIdentifier,
                     digest OCTET STRING }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.DisplayText">
             <code>DisplayText</code> class, used in
             <code>CertificatePolicies</code> X509 V3 extensions (in policy qualifiers).
            
             <p>It stores a string in a chosen encoding.
             <pre>
             DisplayText ::= CHOICE {
                  ia5String        IA5String      (SIZE (1..200)),
                  visibleString    VisibleString  (SIZE (1..200)),
                  bmpString        BMPString      (SIZE (1..200)),
                  utf8String       UTF8String     (SIZE (1..200)) }
             </pre></p>
             @see PolicyQualifierInfo
             @see PolicyInformation
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.DisplayText.ContentTypeIA5String">
             Constant corresponding to ia5String encoding.
            
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.DisplayText.ContentTypeBmpString">
             Constant corresponding to bmpString encoding.
            
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.DisplayText.ContentTypeUtf8String">
             Constant corresponding to utf8String encoding.
            
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.DisplayText.ContentTypeVisibleString">
             Constant corresponding to visibleString encoding.
            
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.DisplayText.DisplayTextMaximumSize">
             Describe constant <code>DisplayTextMaximumSize</code> here.
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.DisplayText.#ctor(System.Int32,System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param type the desired encoding type for the text.
             @param text the text to store. Strings longer than 200
             characters are truncated.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.DisplayText.#ctor(System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param text the text to encapsulate. Strings longer than 200
             characters are truncated.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.DisplayText.#ctor(LibOrg.BouncyCastle.Asn1.IAsn1String)">
             Creates a new <code>DisplayText</code> instance.
             <p>Useful when reading back a <code>DisplayText</code> class
             from it's Asn1Encodable form.</p>
            
             @param contents an <code>Asn1Encodable</code> instance.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.DisplayText.GetString">
             Returns the stored <code>string</code> object.
            
             @return the stored text as a <code>string</code>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.DistributionPoint">
            The DistributionPoint object.
            <pre>
            DistributionPoint ::= Sequence {
                 distributionPoint [0] DistributionPointName OPTIONAL,
                 reasons           [1] ReasonFlags OPTIONAL,
                 cRLIssuer         [2] GeneralNames OPTIONAL
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.DistributionPointName">
            The DistributionPointName object.
            <pre>
            DistributionPointName ::= CHOICE {
                fullName                 [0] GeneralNames,
                nameRelativeToCRLIssuer  [1] RDN
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.ExtendedKeyUsage">
            The extendedKeyUsage object.
            <pre>
                 extendedKeyUsage ::= Sequence SIZE (1..MAX) OF KeyPurposeId
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.ExtendedKeyUsage.GetAllUsages">
            Returns all extended key usages.
            The returned ArrayList contains DerObjectIdentifier instances.
            @return An ArrayList with all key purposes.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.GeneralName">
             The GeneralName object.
             <pre>
             GeneralName ::= CHOICE {
                  otherName                       [0]     OtherName,
                  rfc822Name                      [1]     IA5String,
                  dNSName                         [2]     IA5String,
                  x400Address                     [3]     ORAddress,
                  directoryName                   [4]     Name,
                  ediPartyName                    [5]     EDIPartyName,
                  uniformResourceIdentifier       [6]     IA5String,
                  iPAddress                       [7]     OCTET STRING,
                  registeredID                    [8]     OBJECT IDENTIFIER}
            
             OtherName ::= Sequence {
                  type-id    OBJECT IDENTIFIER,
                  value      [0] EXPLICIT ANY DEFINED BY type-id }
            
             EDIPartyName ::= Sequence {
                  nameAssigner            [0]     DirectoryString OPTIONAL,
                  partyName               [1]     DirectoryString }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.GeneralName.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Object,System.Int32)">
             When the subjectAltName extension contains an Internet mail address,
             the address MUST be included as an rfc822Name. The format of an
             rfc822Name is an "addr-spec" as defined in RFC 822 [RFC 822].
            
             When the subjectAltName extension contains a domain name service
             label, the domain name MUST be stored in the dNSName (an IA5String).
             The name MUST be in the "preferred name syntax," as specified by RFC
             1034 [RFC 1034].
            
             When the subjectAltName extension contains a URI, the name MUST be
             stored in the uniformResourceIdentifier (an IA5String). The name MUST
             be a non-relative URL, and MUST follow the URL syntax and encoding
             rules specified in [RFC 1738].  The name must include both a scheme
             (e.g., "http" or "ftp") and a scheme-specific-part.  The scheme-
             specific-part must include a fully qualified domain name or IP
             address as the host.
            
             When the subjectAltName extension contains a iPAddress, the address
             MUST be stored in the octet string in "network byte order," as
             specified in RFC 791 [RFC 791]. The least significant bit (LSB) of
             each octet is the LSB of the corresponding byte in the network
             address. For IP Version 4, as specified in RFC 791, the octet string
             MUST contain exactly four octets.  For IP Version 6, as specified in
             RFC 1883, the octet string MUST contain exactly sixteen octets [RFC
             1883].
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.GeneralName.#ctor(System.Int32,System.String)">
             Create a GeneralName for the given tag from the passed in string.
             <p>
             This constructor can handle:
             <ul>
             <li>rfc822Name</li>
             <li>iPAddress</li>
             <li>directoryName</li>
             <li>dNSName</li>
             <li>uniformResourceIdentifier</li>
             <li>registeredID</li>
             </ul>
             For x400Address, otherName and ediPartyName there is no common string
             format defined.
             </p><p>
             Note: A directory name can be encoded in different ways into a byte
             representation. Be aware of this if the byte representation is used for
             comparing results.
             </p>
            
             @param tag tag number
             @param name string representation of name
             @throws ArgumentException if the string encoding is not correct or
                         not supported.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.GeneralNames.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
            <summary>Construct a GeneralNames object containing one GeneralName.</summary>
            <param name="name">The name to be contained.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.GeneralNames.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            GeneralNames ::= Sequence SIZE {1..MAX} OF GeneralName
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.GeneralSubtree">
             Class for containing a restriction object subtrees in NameConstraints. See
             RFC 3280.
            
             <pre>
            
                   GeneralSubtree ::= SEQUENCE
                   {
                     baseName                    GeneralName,
                     minimum         [0]     BaseDistance DEFAULT 0,
                     maximum         [1]     BaseDistance OPTIONAL
                   }
             </pre>
            
             @see LibOrg.BouncyCastle.asn1.x509.NameConstraints
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.GeneralSubtree.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralName,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
             Constructor from a given details.
            
             According RFC 3280, the minimum and maximum fields are not used with any
             name forms, thus minimum MUST be zero, and maximum MUST be absent.
             <p>
             If minimum is <code>null</code>, zero is assumed, if
             maximum is <code>null</code>, maximum is absent.</p>
            
             @param baseName
                        A restriction.
             @param minimum
                        Minimum
            
             @param maximum
                        Maximum
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.GeneralSubtree.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                   GeneralSubtree ::= SEQUENCE
                   {
                     baseName                    GeneralName,
                     minimum         [0]     BaseDistance DEFAULT 0,
                     maximum         [1]     BaseDistance OPTIONAL
                   }
             </pre>
            
             @return a DERObject
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.Holder">
            The Holder object.
            <p>
            For an v2 attribute certificate this is:
            
            <pre>
                       Holder ::= SEQUENCE {
                             baseCertificateID   [0] IssuerSerial OPTIONAL,
                                      -- the issuer and serial number of
                                      -- the holder's Public Key Certificate
                             entityName          [1] GeneralNames OPTIONAL,
                                      -- the name of the claimant or role
                             objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                                      -- used to directly authenticate the holder,
                                      -- for example, an executable
                       }
            </pre>
            </p>
            <p>
            For an v1 attribute certificate this is:
            
            <pre>
                    subject CHOICE {
                     baseCertificateID [0] IssuerSerial,
                     -- associated with a Public Key Certificate
                     subjectName [1] GeneralNames },
                     -- associated with a name
            </pre>
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Holder.#ctor(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject)">
            Constructor for a holder for an v1 attribute certificate.
            
            @param tagObj The ASN.1 tagged holder object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Holder.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor for a holder for an v2 attribute certificate. *
            
            @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Holder.#ctor(LibOrg.BouncyCastle.Asn1.X509.IssuerSerial,System.Int32)">
            Constructs a holder from a IssuerSerial.
            @param baseCertificateID The IssuerSerial.
            @param version The version of the attribute certificate. 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Holder.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralNames)">
            Constructs a holder with an entityName for v2 attribute certificates or
            with a subjectName for v1 attribute certificates.
            
            @param entityName The entity or subject name.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Holder.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralNames,System.Int32)">
            Constructs a holder with an entityName for v2 attribute certificates or
            with a subjectName for v1 attribute certificates.
            
            @param entityName The entity or subject name.
            @param version The version of the attribute certificate. 
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Holder.#ctor(LibOrg.BouncyCastle.Asn1.X509.ObjectDigestInfo)">
            Constructs a holder from an object digest info.
            
            @param objectDigestInfo The object digest info object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Holder.ToAsn1Object">
            The Holder object.
            <pre>
             Holder ::= Sequence {
                   baseCertificateID   [0] IssuerSerial OPTIONAL,
                            -- the issuer and serial number of
                            -- the holder's Public Key Certificate
                   entityName          [1] GeneralNames OPTIONAL,
                            -- the name of the claimant or role
                   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                            -- used to directly authenticate the holder,
                            -- for example, an executable
             }
            </pre>
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.Holder.Version">
            Returns 1 for v2 attribute certificates or 0 for v1 attribute
            certificates. 
            @return The version of the attribute certificate.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.Holder.EntityName">
            Returns the entityName for an v2 attribute certificate or the subjectName
            for an v1 attribute certificate.
            
            @return The entityname or subjectname.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.IetfAttrSyntax">
            Implementation of <code>IetfAttrSyntax</code> as specified by RFC3281.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.IetfAttrSyntax.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.IetfAttrSyntax.ToAsn1Object">
            
             <pre>
            
              IetfAttrSyntax ::= Sequence {
                policyAuthority [0] GeneralNames OPTIONAL,
                values Sequence OF CHOICE {
                  octets OCTET STRING,
                  oid OBJECT IDENTIFIER,
                  string UTF8String
                }
              }
            
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.IssuerSerial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             IssuerSerial  ::=  Sequence {
                  issuer         GeneralNames,
                  serial         CertificateSerialNumber,
                  issuerUid      UniqueIdentifier OPTIONAL
             }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.IssuingDistributionPoint">
            <pre>
            IssuingDistributionPoint ::= SEQUENCE { 
              distributionPoint          [0] DistributionPointName OPTIONAL, 
              onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE, 
              onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE, 
              onlySomeReasons            [3] ReasonFlags OPTIONAL, 
              indirectCRL                [4] BOOLEAN DEFAULT FALSE,
              onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.IssuingDistributionPoint.#ctor(LibOrg.BouncyCastle.Asn1.X509.DistributionPointName,System.Boolean,System.Boolean,LibOrg.BouncyCastle.Asn1.X509.ReasonFlags,System.Boolean,System.Boolean)">
            Constructor from given details.
            
            @param distributionPoint
                       May contain an URI as pointer to most current CRL.
            @param onlyContainsUserCerts Covers revocation information for end certificates.
            @param onlyContainsCACerts Covers revocation information for CA certificates.
            
            @param onlySomeReasons
                       Which revocation reasons does this point cover.
            @param indirectCRL
                       If <code>true</code> then the CRL contains revocation
                       information about certificates ssued by other CAs.
            @param onlyContainsAttributeCerts Covers revocation information for attribute certificates.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.IssuingDistributionPoint.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor from Asn1Sequence
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.IssuingDistributionPoint.DistributionPoint">
            @return Returns the distributionPoint.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.IssuingDistributionPoint.OnlySomeReasons">
            @return Returns the onlySomeReasons.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.KeyPurposeID">
            The KeyPurposeID object.
            <pre>
                KeyPurposeID ::= OBJECT IDENTIFIER
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.KeyUsage">
             The KeyUsage object.
             <pre>
                id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
            
                KeyUsage ::= BIT STRING {
                     digitalSignature        (0),
                     nonRepudiation          (1),
                     keyEncipherment         (2),
                     dataEncipherment        (3),
                     keyAgreement            (4),
                     keyCertSign             (5),
                     cRLSign                 (6),
                     encipherOnly            (7),
                     decipherOnly            (8) }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.KeyUsage.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (KeyUsage.keyEncipherment | KeyUsage.dataEncipherment)
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.NameConstraints.#ctor(System.Collections.IList,System.Collections.IList)">
             Constructor from a given details.
            
             <p>permitted and excluded are Vectors of GeneralSubtree objects.</p>
            
             @param permitted Permitted subtrees
             @param excluded Excluded subtrees
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.NoticeReference">
             <code>NoticeReference</code> class, used in
             <code>CertificatePolicies</code> X509 V3 extensions
             (in policy qualifiers).
            
             <pre>
              NoticeReference ::= Sequence {
                  organization     DisplayText,
                  noticeNumbers    Sequence OF Integer }
            
             </pre>
            
             @see PolicyQualifierInfo
             @see PolicyInformation
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.NoticeReference.#ctor(System.String,System.Collections.IList)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param orgName a <code>string</code> value
             @param numbers a <code>ArrayList</code> value
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.NoticeReference.#ctor(System.String,LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param orgName a <code>string</code> value
             @param numbers an <code>Asn1Sequence</code> value
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.NoticeReference.#ctor(System.Int32,System.String,LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param displayTextType an <code>int</code> value
             @param orgName a <code>string</code> value
             @param numbers an <code>Asn1Sequence</code> value
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.NoticeReference.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>NoticeReference</code> instance.
             <p>Useful for reconstructing a <code>NoticeReference</code>
             instance from its encodable/encoded form.</p>
            
             @param as an <code>Asn1Sequence</code> value obtained from either
             calling @{link ToAsn1Object()} for a <code>NoticeReference</code>
             instance or from parsing it from a Der-encoded stream.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.NoticeReference.ToAsn1Object">
             Describe <code>ToAsn1Object</code> method here.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.ObjectDigestInfo">
            ObjectDigestInfo ASN.1 structure used in v2 attribute certificates.
            
            <pre>
             
               ObjectDigestInfo ::= SEQUENCE {
                    digestedObjectType  ENUMERATED {
                            publicKey            (0),
                            publicKeyCert        (1),
                            otherObjectTypes     (2) },
                                    -- otherObjectTypes MUST NOT
                                    -- be used in this profile
                    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                    digestAlgorithm     AlgorithmIdentifier,
                    objectDigest        BIT STRING
               }
              
            </pre>
            
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.ObjectDigestInfo.PublicKey">
            The public key is hashed.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.ObjectDigestInfo.PublicKeyCert">
            The public key certificate is hashed.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.ObjectDigestInfo.OtherObjectDigest">
            An other object is hashed.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.ObjectDigestInfo.#ctor(System.Int32,System.String,LibOrg.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
            Constructor from given details.
            <p>
            If <code>digestedObjectType</code> is not {@link #publicKeyCert} or
            {@link #publicKey} <code>otherObjectTypeID</code> must be given,
            otherwise it is ignored.</p>
            
            @param digestedObjectType The digest object type.
            @param otherObjectTypeID The object type ID for
                       <code>otherObjectDigest</code>.
            @param digestAlgorithm The algorithm identifier for the hash.
            @param objectDigest The hash value.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.ObjectDigestInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            <pre>
             
               ObjectDigestInfo ::= SEQUENCE {
                    digestedObjectType  ENUMERATED {
                            publicKey            (0),
                            publicKeyCert        (1),
                            otherObjectTypes     (2) },
                                    -- otherObjectTypes MUST NOT
                                    -- be used in this profile
                    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                    digestAlgorithm     AlgorithmIdentifier,
                    objectDigest        BIT STRING
               }
              
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.PolicyMappings">
             PolicyMappings V3 extension, described in RFC3280.
             <pre>
                PolicyMappings ::= Sequence SIZE (1..MAX) OF Sequence {
                  issuerDomainPolicy      CertPolicyId,
                  subjectDomainPolicy     CertPolicyId }
             </pre>
            
             @see <a href="http://www.faqs.org/rfc/rfc3280.txt">RFC 3280, section 4.2.1.6</a>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.PolicyMappings.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>PolicyMappings</code> instance.
            
             @param seq an <code>Asn1Sequence</code> constructed as specified
             in RFC 3280
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.PolicyMappings.#ctor(System.Collections.IDictionary)">
             Creates a new <code>PolicyMappings</code> instance.
            
             @param mappings a <code>HashMap</code> value that maps
             <code>string</code> oids
             to other <code>string</code> oids.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.PolicyQualifierID">
             PolicyQualifierId, used in the CertificatePolicies
             X509V3 extension.
            
             <pre>
                id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }
                id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
                id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
              PolicyQualifierId ::=
                   OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.PolicyQualifierInfo">
             Policy qualifiers, used in the X509V3 CertificatePolicies
             extension.
            
             <pre>
               PolicyQualifierInfo ::= Sequence {
                   policyQualifierId  PolicyQualifierId,
                   qualifier          ANY DEFINED BY policyQualifierId }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.PolicyQualifierInfo.#ctor(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param policyQualifierId a <code>PolicyQualifierId</code> value
             @param qualifier the qualifier, defined by the above field.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.PolicyQualifierInfo.#ctor(System.String)">
             Creates a new <code>PolicyQualifierInfo</code> containing a
             cPSuri qualifier.
            
             @param cps the CPS (certification practice statement) uri as a
             <code>string</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.PolicyQualifierInfo.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param as <code>PolicyQualifierInfo</code> X509 structure
             encoded as an Asn1Sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.PolicyQualifierInfo.ToAsn1Object">
             Returns a Der-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.PrivateKeyUsagePeriod">
            <remarks>
            <pre>
            PrivateKeyUsagePeriod ::= SEQUENCE
            {
            notBefore       [0]     GeneralizedTime OPTIONAL,
            notAfter        [1]     GeneralizedTime OPTIONAL }
            </pre>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.Qualified.BiometricData">
            The BiometricData object.
            <pre>
            BiometricData  ::=  SEQUENCE {
                  typeOfBiometricData  TypeOfBiometricData,
                  hashAlgorithm        AlgorithmIdentifier,
                  biometricDataHash    OCTET STRING,
                  sourceDataUri        IA5String OPTIONAL  }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode">
            The Iso4217CurrencyCode object.
            <pre>
            Iso4217CurrencyCode  ::=  CHOICE {
                  alphabetic              PrintableString (SIZE 3), --Recommended
                  numeric              INTEGER (1..999) }
            -- Alphabetic or numeric currency code as defined in ISO 4217
            -- It is recommended that the Alphabetic form is used
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.Qualified.MonetaryValue">
            The MonetaryValue object.
            <pre>
            MonetaryValue  ::=  SEQUENCE {
                  currency              Iso4217CurrencyCode,
                  amount               INTEGER,
                  exponent             INTEGER }
            -- value = amount * 10^exponent
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.Qualified.QCStatement">
            The QCStatement object.
            <pre>
            QCStatement ::= SEQUENCE {
              statementId        OBJECT IDENTIFIER,
              statementInfo      ANY DEFINED BY statementId OPTIONAL}
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation">
             The SemanticsInformation object.
             <pre>
                   SemanticsInformation ::= SEQUENCE {
                     semanticsIdentifier        OBJECT IDENTIFIER   OPTIONAL,
                     nameRegistrationAuthorities NameRegistrationAuthorities
                                                                     OPTIONAL }
                     (WITH COMPONENTS {..., semanticsIdentifier PRESENT}|
                      WITH COMPONENTS {..., nameRegistrationAuthorities PRESENT})
            
                 NameRegistrationAuthorities ::=  SEQUENCE SIZE (1..MAX) OF
                     GeneralName
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData">
             The TypeOfBiometricData object.
             <pre>
             TypeOfBiometricData ::= CHOICE {
               predefinedBiometricType   PredefinedBiometricType,
               biometricDataOid          OBJECT IDENTIFIER }
            
             PredefinedBiometricType ::= INTEGER {
               picture(0),handwritten-signature(1)}
               (picture|handwritten-signature)
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.ReasonFlags">
            The ReasonFlags object.
            <pre>
            ReasonFlags ::= BIT STRING {
               unused(0),
               keyCompromise(1),
               cACompromise(2),
               affiliationChanged(3),
               superseded(4),
               cessationOfOperation(5),
               certficateHold(6)
            }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.ReasonFlags.#ctor(System.Int32)">
            @param reasons - the bitwise OR of the Key Reason flags giving the
            allowed uses for the key.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax">
             Implementation of the RoleSyntax object as specified by the RFC3281.
            
             <pre>
             RoleSyntax ::= SEQUENCE {
                             roleAuthority  [0] GeneralNames OPTIONAL,
                             roleName       [1] GeneralName
                       }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.GetInstance(System.Object)">
            RoleSyntax factory method.
            @param obj the object used to construct an instance of <code>
            RoleSyntax</code>. It must be an instance of <code>RoleSyntax
            </code> or <code>Asn1Sequence</code>.
            @return the instance of <code>RoleSyntax</code> built from the
            supplied object.
            @throws java.lang.ArgumentException if the object passed
            to the factory is not an instance of <code>RoleSyntax</code> or
            <code>Asn1Sequence</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralNames,LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
            Constructor.
            @param roleAuthority the role authority of this RoleSyntax.
            @param roleName    the role name of this RoleSyntax.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
            Constructor. Invoking this constructor is the same as invoking
            <code>new RoleSyntax(null, roleName)</code>.
            @param roleName    the role name of this RoleSyntax.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(System.String)">
            Utility constructor. Takes a <code>string</code> argument representing
            the role name, builds a <code>GeneralName</code> to hold the role name
            and calls the constructor that takes a <code>GeneralName</code>.
            @param roleName
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor that builds an instance of <code>RoleSyntax</code> by
            extracting the encoded elements from the <code>Asn1Sequence</code>
            object supplied.
            @param seq    an instance of <code>Asn1Sequence</code> that holds
            the encoded elements used to build this <code>RoleSyntax</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.GetRoleNameAsString">
            Gets the role name as a <code>java.lang.string</code> object.
            @return    the role name of this RoleSyntax represented as a
            <code>string</code> object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.GetRoleAuthorityAsString">
            Gets the role authority as a <code>string[]</code> object.
            @return the role authority of this RoleSyntax represented as a
            <code>string[]</code> array.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.ToAsn1Object">
             Implementation of the method <code>ToAsn1Object</code> as
             required by the superclass <code>ASN1Encodable</code>.
            
             <pre>
             RoleSyntax ::= SEQUENCE {
                             roleAuthority  [0] GeneralNames OPTIONAL,
                             roleName       [1] GeneralName
                       }
             </pre>
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.RoleAuthority">
            Gets the role authority of this RoleSyntax.
            @return    an instance of <code>GeneralNames</code> holding the
            role authority of this RoleSyntax.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.RoleSyntax.RoleName">
            Gets the role name of this RoleSyntax.
            @return    an instance of <code>GeneralName</code> holding the
            role name of this RoleSyntax.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.RsaPublicKeyStructure.ToAsn1Object">
            This outputs the key in Pkcs1v2 format.
            <pre>
                 RSAPublicKey ::= Sequence {
                                     modulus Integer, -- n
                                     publicExponent Integer, -- e
                                 }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym">
            Structure for a name or pseudonym.
            
            <pre>
                  NameOrPseudonym ::= CHOICE {
                	   surAndGivenName SEQUENCE {
                	     surName DirectoryString,
                	     givenName SEQUENCE OF DirectoryString 
                    },
                	   pseudonym DirectoryString 
                  }
            </pre>
            
            @see LibOrg.BouncyCastle.asn1.x509.sigi.PersonalData
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(LibOrg.BouncyCastle.Asn1.X500.DirectoryString)">
            Constructor from DERString.
            <p/>
            The sequence is of type NameOrPseudonym:
            <p/>
            <pre>
                  NameOrPseudonym ::= CHOICE {
                	   surAndGivenName SEQUENCE {
                	     surName DirectoryString,
                	     givenName SEQUENCE OF DirectoryString
                    },
                	   pseudonym DirectoryString
                  }
            </pre>
            @param pseudonym pseudonym value to use.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type NameOrPseudonym:
             <p/>
             <pre>
                   NameOrPseudonym ::= CHOICE {
                 	   surAndGivenName SEQUENCE {
                 	     surName DirectoryString,
                 	     givenName SEQUENCE OF DirectoryString
                     },
                 	   pseudonym DirectoryString
                   }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(System.String)">
             Constructor from a given details.
            
             @param pseudonym The pseudonym.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(LibOrg.BouncyCastle.Asn1.X500.DirectoryString,LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from a given details.
            
             @param surname   The surname.
             @param givenName A sequence of directory strings making up the givenName
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   NameOrPseudonym ::= CHOICE {
                 	   surAndGivenName SEQUENCE {
                 	     surName DirectoryString,
                 	     givenName SEQUENCE OF DirectoryString
                     },
                 	   pseudonym DirectoryString
                   }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.SigI.PersonalData">
             Contains personal data for the otherName field in the subjectAltNames
             extension.
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @see LibOrg.BouncyCastle.asn1.x509.sigi.NameOrPseudonym
             @see LibOrg.BouncyCastle.asn1.x509.sigi.SigIObjectIdentifiers
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SigI.PersonalData.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type NameOrPseudonym:
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SigI.PersonalData.#ctor(LibOrg.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Asn1.DerGeneralizedTime,LibOrg.BouncyCastle.Asn1.X500.DirectoryString,System.String,LibOrg.BouncyCastle.Asn1.X500.DirectoryString)">
             Constructor from a given details.
            
             @param nameOrPseudonym  Name or pseudonym.
             @param nameDistinguisher Name distinguisher.
             @param dateOfBirth      Date of birth.
             @param placeOfBirth     Place of birth.
             @param gender           Gender.
             @param postalAddress    Postal Address.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SigI.PersonalData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers">
            Object Identifiers of SigI specifciation (German Signature Law
            Interoperability specification).
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKP">
            Key purpose IDs for German SigI (Signature Interoperability
            Specification)
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICP">
            Certificate policy IDs for German SigI (Signature Interoperability
            Specification)
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigION">
            Other Name IDs for German SigI (Signature Interoperability Specification)
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKPDirectoryService">
            To be used for for the generation of directory service certificates.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIONPersonalData">
            ID for PersonalData
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICPSigConform">
            Certificate is conform to german signature law.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes">
             This extension may contain further X.500 attributes of the subject. See also
             RFC 3039.
            
             <pre>
                 SubjectDirectoryAttributes ::= Attributes
                 Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                 Attribute ::= SEQUENCE
                 {
                   type AttributeType
                   values SET OF AttributeValue
                 }
            
                 AttributeType ::= OBJECT IDENTIFIER
                 AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @see LibOrg.BouncyCastle.asn1.x509.X509Name for AttributeType ObjectIdentifiers.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
            
             The sequence is of type SubjectDirectoryAttributes:
            
             <pre>
                  SubjectDirectoryAttributes ::= Attributes
                  Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                  Attribute ::= SEQUENCE
                  {
                    type AttributeType
                    values SET OF AttributeValue
                  }
            
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @param seq
                        The ASN.1 sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.#ctor(System.Collections.IList)">
             Constructor from an ArrayList of attributes.
            
             The ArrayList consists of attributes of type {@link Attribute Attribute}
            
             @param attributes The attributes.
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                  SubjectDirectoryAttributes ::= Attributes
                  Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                  Attribute ::= SEQUENCE
                  {
                    type AttributeType
                    values SET OF AttributeValue
                  }
            
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @return a DERObject
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.Attributes">
            @return Returns the attributes.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.SubjectKeyIdentifier">
            The SubjectKeyIdentifier object.
            <pre>
            SubjectKeyIdentifier::= OCTET STRING
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.#ctor(LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
             Calculates the keyIdentifier using a SHA1 hash over the BIT STRING
             from SubjectPublicKeyInfo as defined in RFC3280.
            
             @param spki the subject public key info.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.CreateSha1KeyIdentifier(LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
            Return a RFC 3280 type 1 key identifier. As in:
            <pre>
            (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
            value of the BIT STRING subjectPublicKey (excluding the tag,
            length, and number of unused bits).
            </pre>
            @param keyInfo the key info object containing the subjectPublicKey field.
            @return the key identifier.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.CreateTruncatedSha1KeyIdentifier(LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
            Return a RFC 3280 type 2 key identifier. As in:
            <pre>
            (2) The keyIdentifier is composed of a four bit type field with
            the value 0100 followed by the least significant 60 bits of the
            SHA-1 hash of the value of the BIT STRING subjectPublicKey.
            </pre>
            @param keyInfo the key info object containing the subjectPublicKey field.
            @return the key identifier.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo">
            The object that contains the public key stored in a certficate.
            <p>
            The GetEncoded() method in the public keys in the JCE produces a DER
            encoded one of these.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.GetPublicKey">
             for when the public key is an encoded object - if the bitstring
             can't be decoded this routine raises an IOException.
            
             @exception IOException - if the bit string doesn't represent a Der
             encoded object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SubjectPublicKeyInfo ::= Sequence {
                                     algorithm AlgorithmIdentifier,
                                     publicKey BIT STRING }
            </pre>
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.PublicKeyData">
            for when the public key is raw bits...
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.Target">
            Target structure used in target information extension for attribute
            certificates from RFC 3281.
            
            <pre>
                Target  ::= CHOICE {
                  targetName          [0] GeneralName,
                  targetGroup         [1] GeneralName,
                  targetCert          [2] TargetCert
                }
            </pre>
            
            <p>
            The targetCert field is currently not supported and must not be used
            according to RFC 3281.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Target.GetInstance(System.Object)">
            Creates an instance of a Target from the given object.
            <p>
            <code>obj</code> can be a Target or a {@link Asn1TaggedObject}</p>
            
            @param obj The object.
            @return A Target instance.
            @throws ArgumentException if the given object cannot be
                        interpreted as Target.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Target.#ctor(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject)">
            Constructor from Asn1TaggedObject.
            
            @param tagObj The tagged object.
            @throws ArgumentException if the encoding is wrong.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Target.#ctor(LibOrg.BouncyCastle.Asn1.X509.Target.Choice,LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
             Constructor from given details.
             <p>
             Exactly one of the parameters must be not <code>null</code>.</p>
            
             @param type the choice type to apply to the name.
             @param name the general name.
             @throws ArgumentException if type is invalid.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Target.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                Target  ::= CHOICE {
                  targetName          [0] GeneralName,
                  targetGroup         [1] GeneralName,
                  targetCert          [2] TargetCert
                }
            </pre>
            
            @return an Asn1Object
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.Target.TargetGroup">
            @return Returns the targetGroup.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.Target.TargetName">
            @return Returns the targetName.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.TargetInformation">
            Target information extension for attributes certificates according to RFC
            3281.
            
            <pre>
                      SEQUENCE OF Targets
            </pre>
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.TargetInformation.GetInstance(System.Object)">
            Creates an instance of a TargetInformation from the given object.
            <p>
            <code>obj</code> can be a TargetInformation or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A TargetInformation instance.
            @throws ArgumentException if the given object cannot be interpreted as TargetInformation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.TargetInformation.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor from a Asn1Sequence.
            
            @param seq The Asn1Sequence.
            @throws ArgumentException if the sequence does not contain
                        correctly encoded Targets elements.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.TargetInformation.GetTargetsObjects">
            Returns the targets in this target information extension.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.TargetInformation.#ctor(LibOrg.BouncyCastle.Asn1.X509.Targets)">
            Constructs a target information from a single targets element. 
            According to RFC 3281 only one targets element must be produced.
            
            @param targets A Targets instance.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.TargetInformation.#ctor(LibOrg.BouncyCastle.Asn1.X509.Target[])">
             According to RFC 3281 only one targets element must be produced. If
             multiple targets are given they must be merged in
             into one targets element.
            
             @param targets An array with {@link Targets}.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.TargetInformation.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                     SEQUENCE OF Targets
            </pre>
            
            <p>
            According to RFC 3281 only one targets element must be produced. If
            multiple targets are given in the constructor they are merged into one
            targets element. If this was produced from a
            {@link LibOrg.BouncyCastle.Asn1.Asn1Sequence} the encoding is kept.</p>
            
            @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.Targets">
            Targets structure used in target information extension for attribute
            certificates from RFC 3281.
            
            <pre>
                       Targets ::= SEQUENCE OF Target
                      
                       Target  ::= CHOICE {
                         targetName          [0] GeneralName,
                         targetGroup         [1] GeneralName,
                         targetCert          [2] TargetCert
                       }
                      
                       TargetCert  ::= SEQUENCE {
                         targetCertificate    IssuerSerial,
                         targetName           GeneralName OPTIONAL,
                         certDigestInfo       ObjectDigestInfo OPTIONAL
                       }
            </pre>
            
            @see LibOrg.BouncyCastle.asn1.x509.Target
            @see LibOrg.BouncyCastle.asn1.x509.TargetInformation
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Targets.GetInstance(System.Object)">
            Creates an instance of a Targets from the given object.
            <p>
            <code>obj</code> can be a Targets or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A Targets instance.
            @throws ArgumentException if the given object cannot be interpreted as Target.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Targets.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor from Asn1Sequence.
            
            @param targets The ASN.1 SEQUENCE.
            @throws ArgumentException if the contents of the sequence are
                        invalid.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Targets.#ctor(LibOrg.BouncyCastle.Asn1.X509.Target[])">
            Constructor from given targets.
            <p>
            The ArrayList is copied.</p>
            
            @param targets An <code>ArrayList</code> of {@link Target}s.
            @see Target
            @throws ArgumentException if the ArrayList contains not only Targets.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Targets.GetTargets">
            Returns the targets in an <code>ArrayList</code>.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Targets.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                       Targets ::= SEQUENCE OF Target
            </pre>
            
            @return an Asn1Object
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.TbsCertificateStructure">
            The TbsCertificate object.
            <pre>
            TbsCertificate ::= Sequence {
                 version          [ 0 ]  Version DEFAULT v1(0),
                 serialNumber            CertificateSerialNumber,
                 signature               AlgorithmIdentifier,
                 issuer                  Name,
                 validity                Validity,
                 subject                 Name,
                 subjectPublicKeyInfo    SubjectPublicKeyInfo,
                 issuerUniqueID    [ 1 ] IMPLICIT UniqueIdentifier OPTIONAL,
                 subjectUniqueID   [ 2 ] IMPLICIT UniqueIdentifier OPTIONAL,
                 extensions        [ 3 ] Extensions OPTIONAL
                 }
            </pre>
            <p>
            Note: issuerUniqueID and subjectUniqueID are both deprecated by the IETF. This class
            will parse them, but you really shouldn't be creating new ones.</p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.TbsCertificateList">
            PKIX RFC-2459 - TbsCertList object.
            <pre>
            TbsCertList  ::=  Sequence  {
                 version                 Version OPTIONAL,
                                              -- if present, shall be v2
                 signature               AlgorithmIdentifier,
                 issuer                  Name,
                 thisUpdate              Time,
                 nextUpdate              Time OPTIONAL,
                 revokedCertificates     Sequence OF Sequence  {
                      userCertificate         CertificateSerialNumber,
                      revocationDate          Time,
                      crlEntryExtensions      Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }  OPTIONAL,
                 crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is Generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Time.ToDateTime">
            <summary>
            Return our time as DateTime.
            </summary>
            <returns>A date time.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.Time.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.UserNotice">
             <code>UserNotice</code> class, used in
             <code>CertificatePolicies</code> X509 extensions (in policy
             qualifiers).
             <pre>
             UserNotice ::= Sequence {
                  noticeRef        NoticeReference OPTIONAL,
                  explicitText     DisplayText OPTIONAL}
            
             </pre>
            
             @see PolicyQualifierId
             @see PolicyInformation
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.UserNotice.#ctor(LibOrg.BouncyCastle.Asn1.X509.NoticeReference,LibOrg.BouncyCastle.Asn1.X509.DisplayText)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param explicitText a <code>DisplayText</code> value
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.UserNotice.#ctor(LibOrg.BouncyCastle.Asn1.X509.NoticeReference,System.String)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param str the explicitText field as a string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.UserNotice.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>UserNotice</code> instance.
             <p>Useful from reconstructing a <code>UserNotice</code> instance
             from its encodable/encoded form.
            
             @param as an <code>ASN1Sequence</code> value obtained from either
             calling @{link toASN1Object()} for a <code>UserNotice</code>
             instance or from parsing it from a DER-encoded stream.</p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator">
             Generator for Version 1 TbsCertificateStructures.
             <pre>
             TbsCertificate ::= Sequence {
                  version          [ 0 ]  Version DEFAULT v1(0),
                  serialNumber            CertificateSerialNumber,
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  validity                Validity,
                  subject                 Name,
                  subjectPublicKeyInfo    SubjectPublicKeyInfo,
                  }
             </pre>
            
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator">
             Generator for Version 2 AttributeCertificateInfo
             <pre>
             AttributeCertificateInfo ::= Sequence {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           Sequence OF Attr,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
             }
             </pre>
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.AddAttribute(LibOrg.BouncyCastle.Asn1.X509.AttributeX509)">
            @param attribute
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.V2Form.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             V2Form ::= Sequence {
                  issuerName            GeneralNames  OPTIONAL,
                  baseCertificateID     [0] IssuerSerial  OPTIONAL,
                  objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL
                    -- issuerName MUST be present in this profile
                    -- baseCertificateID and objectDigestInfo MUST NOT
                    -- be present in this profile
             }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.V2TbsCertListGenerator">
             Generator for Version 2 TbsCertList structures.
             <pre>
              TbsCertList  ::=  Sequence  {
                   version                 Version OPTIONAL,
                                                -- if present, shall be v2
                   signature               AlgorithmIdentifier,
                   issuer                  Name,
                   thisUpdate              Time,
                   nextUpdate              Time OPTIONAL,
                   revokedCertificates     Sequence OF Sequence  {
                        userCertificate         CertificateSerialNumber,
                        revocationDate          Time,
                        crlEntryExtensions      Extensions OPTIONAL
                                                      -- if present, shall be v2
                                             }  OPTIONAL,
                   crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                                      -- if present, shall be v2
                                             }
             </pre>
            
             <b>Note: This class may be subject to change</b>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator">
             Generator for Version 3 TbsCertificateStructures.
             <pre>
             TbsCertificate ::= Sequence {
                  version          [ 0 ]  Version DEFAULT v1(0),
                  serialNumber            CertificateSerialNumber,
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  validity                Validity,
                  subject                 Name,
                  subjectPublicKeyInfo    SubjectPublicKeyInfo,
                  issuerUniqueID    [ 1 ] IMPLICIT UniqueIdentifier OPTIONAL,
                  subjectUniqueID   [ 2 ] IMPLICIT UniqueIdentifier OPTIONAL,
                  extensions        [ 3 ] Extensions OPTIONAL
                  }
             </pre>
            
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.X509CertificateStructure">
            an X509Certificate structure.
            <pre>
             Certificate ::= Sequence {
                 tbsCertificate          TbsCertificate,
                 signatureAlgorithm      AlgorithmIdentifier,
                 signature               BIT STRING
             }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.X509DefaultEntryConverter">
            The default converter for X509 DN entries when going from their
            string value to ASN.1 strings.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.X509NameEntryConverter">
                 * It turns out that the number of standard ways the fields in a DN should be
                 * encoded into their ASN.1 counterparts is rapidly approaching the
                 * number of machines on the internet. By default the X509Name class
                 * will produce UTF8Strings in line with the current recommendations (RFC 3280).
                 * <p>
                 * An example of an encoder look like below:
                 * <pre>
                 * public class X509DirEntryConverter
                 *     : X509NameEntryConverter
                 * {
                 *     public Asn1Object GetConvertedValue(
                 *         DerObjectIdentifier  oid,
                 *         string               value)
                 *     {
                 *         if (str.Length() != 0 &amp;&amp; str.charAt(0) == '#')
                 *         {
                 *             return ConvertHexEncoded(str, 1);
                 *         }
                 *         if (oid.Equals(EmailAddress))
                 *         {
                 *             return new DerIA5String(str);
                 *         }
                 *         else if (CanBePrintable(str))
                 *         {
                 *             return new DerPrintableString(str);
                 *         }
                 *         else if (CanBeUTF8(str))
                 *         {
                 *             return new DerUtf8String(str);
                 *         }
                 *         else
                 *         {
                 *             return new DerBmpString(str);
                 *         }
                 *     }
                 * }
            	 * </pre>
            	 * </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509NameEntryConverter.ConvertHexEncoded(System.String,System.Int32)">
             Convert an inline encoded hex string rendition of an ASN.1
             object back into its corresponding ASN.1 object.
            
             @param str the hex encoded object
             @param off the index at which the encoding starts
             @return the decoded object
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509NameEntryConverter.CanBePrintable(System.String)">
            return true if the passed in string can be represented without
            loss as a PrintableString, false otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509NameEntryConverter.GetConvertedValue(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.String)">
             Convert the passed in string value into the appropriate ASN.1
             encoded object.
            
             @param oid the oid associated with the value in the DN.
             @param value the value of the particular DN component.
             @return the ASN.1 equivalent for the value.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509DefaultEntryConverter.GetConvertedValue(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.String)">
             Apply default conversion for the given value depending on the oid
             and the character range of the value.
            
             @param oid the object identifier for the DN entry
             @param value the value associated with it
             @return the ASN.1 equivalent for the string value.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.X509Extension">
            an object for the elements in the X.509 V3 extension block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extension.ConvertValueToObject(LibOrg.BouncyCastle.Asn1.X509.X509Extension)">
            <sumary>Convert the value of the passed in extension to an object.</sumary>
            <param name="ext">The extension to parse.</param>
            <returns>The object the value string contains.</returns>
            <exception cref="T:System.ArgumentException">If conversion is not possible.</exception>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.SubjectDirectoryAttributes">
            Subject Directory Attributes
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.SubjectKeyIdentifier">
            Subject Key Identifier
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.KeyUsage">
            Key Usage
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.PrivateKeyUsagePeriod">
            Private Key Usage Period
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.SubjectAlternativeName">
            Subject Alternative Name
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.IssuerAlternativeName">
            Issuer Alternative Name
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.BasicConstraints">
            Basic Constraints
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.CrlNumber">
            CRL Number
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.ReasonCode">
            Reason code
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.InstructionCode">
            Hold Instruction Code
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.InvalidityDate">
            Invalidity Date
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.DeltaCrlIndicator">
            Delta CRL indicator
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.IssuingDistributionPoint">
            Issuing Distribution Point
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.CertificateIssuer">
            Certificate Issuer
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.NameConstraints">
            Name Constraints
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.CrlDistributionPoints">
            CRL Distribution Points
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.CertificatePolicies">
            Certificate Policies
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.PolicyMappings">
            Policy Mappings
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.AuthorityKeyIdentifier">
            Authority Key Identifier
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.PolicyConstraints">
            Policy Constraints
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.ExtendedKeyUsage">
            Extended Key Usage
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.FreshestCrl">
            Freshest CRL
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.InhibitAnyPolicy">
            Inhibit Any Policy
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.AuthorityInfoAccess">
            Authority Info Access
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.SubjectInfoAccess">
            Subject Info Access
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.LogoType">
            Logo Type
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.BiometricInfo">
            BiometricInfo
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.QCStatements">
            QCStatements
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.AuditIdentity">
            Audit identity extension in attribute certificates.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.NoRevAvail">
            NoRevAvail extension in attribute certificates.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.TargetInformation">
            TargetInformation extension in attribute certificates.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
            
             the extensions are a list of constructed sequences, either with (Oid, OctetString) or (Oid, Boolean, OctetString)
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.IDictionary)">
            constructor from a table of extensions.
            <p>
            it's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.IList,System.Collections.IDictionary)">
            Constructor from a table of extensions with ordering.
            <p>
            It's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.IList,System.Collections.IList)">
             Constructor from two vectors
            
             @param objectIDs an ArrayList of the object identifiers.
             @param values an ArrayList of the extension values.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.Hashtable)">
            constructor from a table of extensions.
            <p>
            it's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.ArrayList,System.Collections.Hashtable)">
            Constructor from a table of extensions with ordering.
            <p>
            It's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
             Constructor from two vectors
            
             @param objectIDs an ArrayList of the object identifiers.
             @param values an ArrayList of the extension values.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.GetExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the extension represented by the object identifier
             passed in.
            
             @return the extension if it's present, null otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.ToAsn1Object">
             <pre>
                 Extensions        ::=   SEQUENCE SIZE (1..MAX) OF Extension
            
                 Extension         ::=   SEQUENCE {
                    extnId            EXTENSION.&amp;id ({ExtensionSet}),
                    critical          BOOLEAN DEFAULT FALSE,
                    extnValue         OCTET STRING }
             </pre>
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.X509Extensions.ExtensionOids">
            return an Enumeration of the extension field's object ids.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.X509ExtensionsGenerator">
            <remarks>Generator for X.509 extensions</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.Reset">
            <summary>Reset the generator</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.AddExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>
            Add an extension with the given oid and the passed in value to be included
            in the OCTET STRING associated with the extension.
            </summary>
            <param name="oid">OID for the extension.</param>
            <param name="critical">True if critical, false otherwise.</param>
            <param name="extValue">The ASN.1 object to be included in the extension.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.AddExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            <summary>
            Add an extension with the given oid and the passed in byte array to be wrapped
            in the OCTET STRING associated with the extension.
            </summary>
            <param name="oid">OID for the extension.</param>
            <param name="critical">True if critical, false otherwise.</param>
            <param name="extValue">The byte array to be wrapped.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.Generate">
            <summary>Generate an X509Extensions object based on the current state of the generator.</summary>
            <returns>An <c>X509Extensions</c> object</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.IsEmpty">
            <summary>Return true if there are no extension present in this generator.</summary>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.X509Name">
             <pre>
                 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
            
                 RelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue
            
                 AttributeTypeAndValue ::= SEQUENCE {
                                               type  OBJECT IDENTIFIER,
                                               value ANY }
             </pre>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.C">
            country code - StringType(SIZE(2))
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.O">
            organization - StringType(SIZE(1..64))
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.OU">
            organizational unit name - StringType(SIZE(1..64))
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.T">
            Title
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.CN">
            common name - StringType(SIZE(1..64))
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.Street">
            street - StringType(SIZE(1..64))
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.SerialNumber">
            device serial number name - StringType(SIZE(1..64))
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.L">
            locality name - StringType(SIZE(1..64))
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.ST">
            state, or province name - StringType(SIZE(1..64))
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.Surname">
            Naming attributes of type X520name
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.BusinessCategory">
            businessCategory - DirectoryString(SIZE(1..128)
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.PostalCode">
            postalCode - DirectoryString(SIZE(1..40)
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.DnQualifier">
            dnQualifier - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.Pseudonym">
            RFC 3039 Pseudonym - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.DateOfBirth">
            RFC 3039 DateOfBirth - GeneralizedTime - YYYYMMDD000000Z
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.PlaceOfBirth">
            RFC 3039 PlaceOfBirth - DirectoryString(SIZE(1..128)
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.Gender">
            RFC 3039 DateOfBirth - PrintableString (SIZE(1)) -- "M", "F", "m" or "f"
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.CountryOfCitizenship">
            RFC 3039 CountryOfCitizenship - PrintableString (SIZE (2)) -- ISO 3166
            codes only
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.CountryOfResidence">
            RFC 3039 CountryOfCitizenship - PrintableString (SIZE (2)) -- ISO 3166
            codes only
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.NameAtBirth">
            ISIS-MTT NameAtBirth - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.PostalAddress">
            RFC 3039 PostalAddress - SEQUENCE SIZE (1..6) OF
            DirectoryString(SIZE(1..30))
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.DmdName">
            RFC 2256 dmdName
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.TelephoneNumber">
            id-at-telephoneNumber
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.Name">
            id-at-name
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.EmailAddress">
            Email address (RSA PKCS#9 extension) - IA5String.
            <p>Note: if you're trying to be ultra orthodox, don't use this! It shouldn't be in here.</p>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.UnstructuredName">
            more from PKCS#9
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.E">
            email address in Verisign certificates
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.UID">
            LDAP User id.
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.DefaultSymbols">
            default look up table translating OID values into their common symbols following
            the convention in RFC 2253 with a few extras
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.RFC2253Symbols">
            look up table translating OID values into their common symbols following the convention in RFC 2253
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.RFC1779Symbols">
             look up table translating OID values into their common symbols following the convention in RFC 1779
            
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X509.X509Name.DefaultLookup">
            look up table translating common symbols into their OIDS.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.GetInstance(LibOrg.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             Return a X509Name based on the passed in tagged object.
            
             @param obj tag object holding name.
             @param explicitly true if explicitly tagged false otherwise.
             @return the X509Name
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence
            
             the principal will be a list of constructed sets, each containing an (OID, string) pair.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IDictionary)">
            Constructor from a table of attributes with ordering.
            <p>
            it's is assumed the table contains OID/string pairs, and the contents
            of the table are copied into an internal table as part of the
            construction process. The ordering ArrayList should contain the OIDs
            in the order they are meant to be encoded or printed in ToString.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IDictionary,LibOrg.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Constructor from a table of attributes with ordering.
            <p>
            it's is assumed the table contains OID/string pairs, and the contents
            of the table are copied into an internal table as part of the
            construction process. The ordering ArrayList should contain the OIDs
            in the order they are meant to be encoded or printed in ToString.</p>
            <p>
            The passed in converter will be used to convert the strings into their
            ASN.1 counterparts.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IList)">
            Takes two vectors one of the oids and the other of the values.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IList,LibOrg.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Takes two vectors one of the oids and the other of the values.
            <p>
            The passed in converter will be used to convert the strings into their
            ASN.1 counterparts.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.String,LibOrg.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. If reverse
            is true, create the encoded version of the sequence starting from the
            last element in the string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.String,LibOrg.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter. If reverse is true the ASN.1 sequence representing the DN will
            be built by starting at the end of the string, rather than the start.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.IDictionary,System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. lookUp
            should provide a table of lookups, indexed by lowercase only strings and
            yielding a DerObjectIdentifier, other than that OID. and numeric oids
            will be processed automatically.
            <br/>
            If reverse is true, create the encoded version of the sequence
            starting from the last element in the string.
            @param reverse true if we should start scanning from the end (RFC 2553).
            @param lookUp table of names and their oids.
            @param dirName the X.500 string to be parsed.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.IDictionary,System.String,LibOrg.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. lookUp
            should provide a table of lookups, indexed by lowercase only strings and
            yielding a DerObjectIdentifier, other than that OID. and numeric oids
            will be processed automatically. The passed in converter is used to convert the
            string values to the right of each equals sign to their ASN.1 counterparts.
            <br/>
            @param reverse true if we should start scanning from the end, false otherwise.
            @param lookUp table of names and oids.
            @param dirName the string dirName
            @param converter the converter to convert string values into their ASN.1 equivalents
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.GetOids">
            return an ArrayList of the oids in the name, in the order they were found.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.GetOidList">
            return an IList of the oids in the name, in the order they were found.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.GetValues">
            return an ArrayList of the values found in the name, in the order they
            were found.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.GetValueList">
            return an IList of the values found in the name, in the order they
            were found.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.GetValues(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            return an ArrayList of the values found in the name, in the order they
            were found, with the DN label corresponding to passed in oid.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.GetValueList(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            return an IList of the values found in the name, in the order they
            were found, with the DN label corresponding to passed in oid.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.Equivalent(LibOrg.BouncyCastle.Asn1.X509.X509Name,System.Boolean)">
            <param name="other">The X509Name object to test equivalency against.</param>
            <param name="inOrder">If true, the order of elements must be the same,
            as well as the values associated with each element.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.Equivalent(LibOrg.BouncyCastle.Asn1.X509.X509Name)">
            test for equivalence - note: case is ignored.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X509.X509Name.ToString(System.Boolean,System.Collections.IDictionary)">
             convert the structure to a string - if reverse is true the
             oids and values are listed out starting with the last element
             in the sequence (ala RFC 2253), otherwise the string will begin
             with the first element of the structure. If no string definition
             for the oid is found in oidSymbols the string value of the oid is
             added. Two standard symbol tables are provided DefaultSymbols, and
             RFC2253Symbols as part of this class.
            
             @param reverse if true start at the end of the sequence and work back.
             @param oidSymbols look up table strings for oids.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X509.X509Name.DefaultReverse">
            determines whether or not strings should be processed and printed
            from back to front.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X509.X509NameTokenizer">
            class for breaking up an X500 Name into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X9.KeySpecificInfo">
            ASN.1 def for Diffie-Hellman key exchange KeySpecificInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.KeySpecificInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             KeySpecificInfo ::= Sequence {
                 algorithm OBJECT IDENTIFIER,
                 counter OCTET STRING SIZE (4..4)
             }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X9.OtherInfo">
            ANS.1 def for Diffie-Hellman key exchange OtherInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.OtherInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             OtherInfo ::= Sequence {
                 keyInfo KeySpecificInfo,
                 partyAInfo [0] OCTET STRING OPTIONAL,
                 suppPubInfo [2] OCTET STRING
             }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X9.X962NamedCurves">
            table of the current named curves defined in X.962 EC-DSA.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X962NamedCurves.GetByOid(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X962NamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X962NamedCurves.GetName(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:LibOrg.BouncyCastle.Asn1.X9.X962NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X962Parameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Parameters ::= CHOICE {
               ecParameters ECParameters,
               namedCurve   CURVES.&amp;id({CurveNames}),
               implicitlyCA Null
            }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X9.X9Curve">
            ASN.1 def for Elliptic-Curve Curve structure. See
            X9.62, for further details.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X9Curve.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             Curve ::= Sequence {
                 a               FieldElement,
                 b               FieldElement,
                 seed            BIT STRING      OPTIONAL
             }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X9.X9ECParameters">
            ASN.1 def for Elliptic-Curve ECParameters structure. See
            X9.62, for further details.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X9ECParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECParameters ::= Sequence {
                 version         Integer { ecpVer1(1) } (ecpVer1),
                 fieldID         FieldID {{FieldTypes}},
                 curve           X9Curve,
                 base            X9ECPoint,
                 order           Integer,
                 cofactor        Integer OPTIONAL
             }
            </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X9.X9ECPoint">
            class for describing an ECPoint as a Der object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X9ECPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECPoint ::= OCTET STRING
            </pre>
            <p>
            Octet string produced using ECPoint.GetEncoded().</p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X9.X9FieldElement">
            Class for processing an ECFieldElement as a DER object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X9FieldElement.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             FieldElement ::= OCTET STRING
            </pre>
            <p>
            <ol>
            <li> if <i>q</i> is an odd prime then the field element is
            processed as an Integer and converted to an octet string
            according to x 9.62 4.3.1.</li>
            <li> if <i>q</i> is 2<sup>m</sup> then the bit string
            contained in the field element is converted into an octet
            string with the same ordering padded at the front if necessary.
            </li>
            </ol>
            </p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Asn1.X9.X9FieldID">
            ASN.1 def for Elliptic-Curve Field ID structure. See
            X9.62, for further details.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X9FieldID.#ctor(LibOrg.BouncyCastle.Math.BigInteger)">
            Constructor for elliptic curves over prime fields
            <code>F<sub>2</sub></code>.
            @param primeP The prime <code>p</code> defining the prime field.
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X9FieldID.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructor for elliptic curves over binary fields
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>..
        </member>
        <member name="M:LibOrg.BouncyCastle.Asn1.X9.X9FieldID.ToAsn1Object">
            Produce a Der encoding of the following structure.
            <pre>
             FieldID ::= Sequence {
                 fieldType       FIELD-ID.&amp;id({IOSet}),
                 parameters      FIELD-ID.&amp;Type({IOSet}{&#64;fieldType})
             }
            </pre>
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.IdDsaWithSha1">
            id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)
                  us(840) x9-57 (10040) x9cm(4) 3 }
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.X9x63Scheme">
            X9.63
        </member>
        <member name="F:LibOrg.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ansi_x9_42">
            X9.42
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.ArmoredInputStream">
            reader for Base64 armored objects - read the headers and then start returning
            bytes when the data is reached. An IOException is thrown if the CRC check
            fails.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredInputStream.Decode(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
             decode the base 64 encoded input data.
            
             @return the offset the data starts in out.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream)">
             Create a stream for reading a PGP armoured message, parsing up to a header
             and then reading the data that follows.
            
             @param input
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredInputStream.#ctor(System.IO.Stream,System.Boolean)">
             Create an armoured input stream which will assume the data starts
             straight away, or parse for headers first depending on the value of
             hasHeaders.
            
             @param input
             @param hasHeaders true if headers are to be looked for, false otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredInputStream.IsClearText">
            @return true if we are inside the clear text section of a PGP
            signed message.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredInputStream.IsEndOfStream">
            @return true if the stream is actually at end of file.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredInputStream.GetArmorHeaderLine">
            Return the armor header line (if there is one)
            @return the armor header line, null if none present.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredInputStream.GetArmorHeaders">
            Return the armor headers (the lines after the armor header line),
            @return an array of armor headers, null if there aren't any.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.ArmoredOutputStream">
            Basic output stream.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredOutputStream.Encode(System.IO.Stream,System.Int32[],System.Int32)">
            encode the input data producing a base 64 encoded byte array.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredOutputStream.SetHeader(System.String,System.String)">
             Set an additional header entry.
            
             @param name the name of the header entry.
             @param v the value of the header entry.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredOutputStream.ResetHeaders">
            Reset the headers to only contain a Version string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredOutputStream.BeginClearText(LibOrg.BouncyCastle.Bcpg.HashAlgorithmTag)">
            Start a clear text signed message.
            @param hashAlgorithm
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ArmoredOutputStream.Close">
            <b>Note</b>: close does nor close the underlying stream. So it is possible to write
            multiple objects using armoring to a single stream.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Attr.ImageAttrib">
            <remarks>Basic type for a image attribute packet.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.UserAttributeSubpacket">
            Basic type for a user attribute sub-packet.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.UserAttributeSubpacket.GetData">
            return the generic data making up the packet.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.BcpgInputStream">
            <remarks>Reader for PGP objects.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.BcpgInputStream.NextPacketTag">
            <summary>Returns the next packet tag in the stream.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.BcpgInputStream.PartialInputStream">
            <summary>
            A stream that overlays our input stream, allowing the user to only read a segment of it.
            NB: dataLength will be negative if the segment length is in the upper range above 2**31.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.BcpgObject">
            <remarks>Base class for a PGP object.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.BcpgOutputStream">
            <remarks>Basic output stream.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream)">
            <summary>Create a stream representing a general packet.</summary>
            <param name="outStr">Output stream to write to.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,LibOrg.BouncyCastle.Bcpg.PacketTag)">
            <summary>Create a stream representing an old style partial object.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">The packet tag for the object.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,LibOrg.BouncyCastle.Bcpg.PacketTag,System.Int64,System.Boolean)">
            <summary>Create a stream representing a general packet.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">Packet tag.</param>
            <param name="length">Size of chunks making up the packet.</param>
            <param name="oldFormat">If true, the header is written out in old format.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,LibOrg.BouncyCastle.Bcpg.PacketTag,System.Int64)">
            <summary>Create a new style partial input stream buffered into chunks.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">Packet tag.</param>
            <param name="length">Size of chunks making up the packet.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.BcpgOutputStream.#ctor(System.IO.Stream,LibOrg.BouncyCastle.Bcpg.PacketTag,System.Byte[])">
            <summary>Create a new style partial input stream buffered into chunks.</summary>
            <param name="outStr">Output stream to write to.</param>
            <param name="tag">Packet tag.</param>
            <param name="buffer">Buffer to use for collecting chunks.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.BcpgOutputStream.Flush">
            <summary>Flush the underlying stream.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.BcpgOutputStream.Finish">
            <summary>Finish writing out the current packet without closing the underlying stream.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.CompressedDataPacket">
            <remarks>Generic compressed data object.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.InputStreamPacket.GetInputStream">
            <summary>Note: you can only read from this once...</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.CompressedDataPacket.Algorithm">
            <summary>The algorithm tag value.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.CompressionAlgorithmTag">
            <remarks>Basic tags for compression algorithms.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.ContainedPacket">
            <remarks>Basic type for a PGP packet.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.DsaPublicBcpgKey">
            <remarks>Base class for a DSA public key.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.IBcpgKey">
            <remarks>Base interface for a PGP key.</remarks>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.IBcpgKey.Format">
            <summary>
            The base format for this key - in the case of the symmetric keys it will generally
            be raw indicating that the key is just a straight byte representation, for an asymmetric
            key the format will be PGP, indicating the key is a string of MPIs encoded in PGP format.
            </summary>
            <returns>"RAW" or "PGP".</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.DsaPublicBcpgKey.#ctor(LibOrg.BouncyCastle.Bcpg.BcpgInputStream)">
            <param name="bcpgIn">The stream to read the packet from.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.DsaPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.DsaPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.DsaSecretBcpgKey">
            <remarks>Base class for a DSA secret key.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.DsaSecretBcpgKey.#ctor(LibOrg.BouncyCastle.Bcpg.BcpgInputStream)">
            @param in
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.DsaSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.DsaSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.DsaSecretBcpgKey.X">
            @return x
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.ElGamalPublicBcpgKey">
            <remarks>Base class for an ElGamal public key.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.ElGamalPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.ElGamalSecretBcpgKey">
            <remarks>Base class for an ElGamal secret key.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.#ctor(LibOrg.BouncyCastle.Bcpg.BcpgInputStream)">
            @param in
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.#ctor(LibOrg.BouncyCastle.Math.BigInteger)">
            @param x
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.ElGamalSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.ExperimentalPacket">
            <remarks>Basic packet for an experimental packet.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.HashAlgorithmTag">
            <remarks>Basic tags for hash algorithms.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.LiteralDataPacket">
            <remarks>Generic literal data packet.</remarks>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.LiteralDataPacket.Format">
            <summary>The format tag value.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.LiteralDataPacket.ModificationTime">
            <summary>The modification time of the file in milli-seconds (since Jan 1, 1970 UTC)</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.MarkerPacket">
            <remarks>Basic type for a marker packet.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.ModDetectionCodePacket">
            <remarks>Basic packet for a modification detection code packet.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.MPInteger">
            <remarks>A multiple precision integer</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OnePassSignaturePacket">
            <remarks>Generic signature object</remarks>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OnePassSignaturePacket.KeyAlgorithm">
            <summary>The encryption algorithm tag.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OnePassSignaturePacket.HashAlgorithm">
            <summary>The hash algorithm tag.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.PacketTag">
            <remarks>Basic PGP packet tag types.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.PublicKeyAlgorithmTag">
            <remarks>Public Key Algorithm tag numbers.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.PublicKeyEncSessionPacket">
            <remarks>Basic packet for a PGP public key.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.PublicKeyPacket">
            <remarks>Basic packet for a PGP public key.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.PublicKeyPacket.#ctor(LibOrg.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.DateTime,LibOrg.BouncyCastle.Bcpg.IBcpgKey)">
            <summary>Construct a version 4 public key packet.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.PublicSubkeyPacket">
            <remarks>Basic packet for a PGP public subkey</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.PublicSubkeyPacket.#ctor(LibOrg.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.DateTime,LibOrg.BouncyCastle.Bcpg.IBcpgKey)">
            <summary>Construct a version 4 public subkey packet.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.RsaPublicBcpgKey">
            <remarks>Base class for an RSA public key.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.RsaPublicBcpgKey.#ctor(LibOrg.BouncyCastle.Bcpg.BcpgInputStream)">
            <summary>Construct an RSA public key from the passed in stream.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.RsaPublicBcpgKey.#ctor(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            <param name="n">The modulus.</param>
            <param name="e">The public exponent.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.RsaPublicBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.RsaPublicBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.RsaSecretBcpgKey">
            <remarks>Base class for an RSA secret (or priate) key.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.RsaSecretBcpgKey.GetEncoded">
            <summary>Return the standard PGP encoding of the key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.RsaSecretBcpgKey.Format">
            <summary>The format, as a string, always "PGP".</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.S2k">
            <remarks>The string to key specifier class.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.S2k.GetIV">
            <summary>The IV for the key generation algorithm.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.S2k.HashAlgorithm">
            <summary>The hash algorithm.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.S2k.IterationCount">
            <summary>The iteration count</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.S2k.ProtectionMode">
            <summary>The protection mode - only if GnuDummyS2K</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.SecretKeyPacket">
            <remarks>Basic packet for a PGP secret key.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.SecretSubkeyPacket">
            <remarks>Basic packet for a PGP secret key.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.SignaturePacket">
            <remarks>Generic signature packet.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int64,LibOrg.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,LibOrg.BouncyCastle.Bcpg.HashAlgorithmTag,LibOrg.BouncyCastle.Bcpg.SignatureSubpacket[],LibOrg.BouncyCastle.Bcpg.SignatureSubpacket[],System.Byte[],LibOrg.BouncyCastle.Bcpg.MPInteger[])">
             Generate a version 4 signature packet.
            
             @param signatureType
             @param keyAlgorithm
             @param hashAlgorithm
             @param hashedData
             @param unhashedData
             @param fingerprint
             @param signature
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.SignaturePacket.#ctor(System.Int32,System.Int32,System.Int64,LibOrg.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,LibOrg.BouncyCastle.Bcpg.HashAlgorithmTag,System.Int64,System.Byte[],LibOrg.BouncyCastle.Bcpg.MPInteger[])">
             Generate a version 2/3 signature packet.
            
             @param signatureType
             @param keyAlgorithm
             @param hashAlgorithm
             @param fingerprint
             @param signature
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.SignaturePacket.GetSignatureTrailer">
             return the signature trailer that must be included with the data
             to reconstruct the signature
            
             @return byte[]
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.SignaturePacket.GetSignature">
            		* return the signature as a set of integers - note this is normalised to be the
                    * ASN.1 encoding of what appears in the signature packet.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.SignaturePacket.GetSignatureBytes">
            Return the byte encoding of the signature section.
            @return uninterpreted signature bytes.
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.SignaturePacket.KeyId">
            return the keyId
            @return the keyId that created the signature.
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.SignaturePacket.CreationTime">
            <summary>Return the creation time in milliseconds since 1 Jan., 1970 UTC.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.SignatureSubpacket">
            <remarks>Basic type for a PGP Signature sub-packet.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.SignatureSubpacket.GetData">
            <summary>Return the generic data making up the packet.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.SignatureSubpacketsParser">
            reader for signature sub-packets
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.SignatureSubpacketTag">
            Basic PGP signature sub-packet tag types.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.EmbeddedSignature">
            Packet embedded signature
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.Exportable">
            packet giving signature creation time.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.IssuerKeyId">
            packet giving signature creation time.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.KeyExpirationTime">
            packet giving time after creation at which the key expires.
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.Sig.KeyExpirationTime.Time">
             Return the number of seconds after creation time a key is valid for.
            
             @return second count for key validity.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.KeyFlags">
            Packet holding the key flag values.
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.Sig.KeyFlags.Flags">
            <summary>
            Return the flag values contained in the first 4 octets (note: at the moment
            the standard only uses the first one).
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.NotationData">
            Class provided a NotationData object according to
            RFC2440, Chapter 5.2.3.15. Notation Data
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.PreferredAlgorithms">
            packet giving signature creation time.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.PrimaryUserId">
            packet giving whether or not the signature is signed using the primary user ID for the key.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.Revocable">
            packet giving whether or not is revocable.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.RevocationKey">
            <summary>
            Represents revocation key OpenPGP signature sub packet.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.RevocationReason">
            <summary>
            Represents revocation reason OpenPGP signature sub packet.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.SignatureCreationTime">
            packet giving signature creation time.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.SignatureExpirationTime">
            packet giving signature expiration time.
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.Sig.SignatureExpirationTime.Time">
            return time in seconds before signature expires after creation time.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.SignerUserId">
            packet giving the User ID of the signer.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.Sig.TrustSignature">
            packet giving trust.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.SymmetricEncDataPacket">
            <remarks>Basic type for a symmetric key encrypted packet.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag">
            Basic tags for symmetric key algorithms
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket">
            Basic type for a symmetric encrypted session key packet
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.GetSecKeyData">
            @return byte[]
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.EncAlgorithm">
            @return int
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.S2k">
            @return S2k
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.SymmetricKeyEncSessionPacket.Version">
            @return int
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.TrustPacket">
            <summary>Basic type for a trust packet.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.UserAttributePacket">
            Basic type for a user attribute packet.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.UserAttributeSubpacketsParser">
            reader for user attribute sub-packets
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.UserAttributeSubpacketTag">
            Basic PGP user attribute sub-packet tag types.
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.UserIdPacket">
            Basic type for a user ID packet.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsAttributeTableParameter">
            <remarks>
            The 'Signature' parameter is only available when generating unsigned attributes.
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsAuthenticatedData">
            containing class for an CMS Authenticated Data object
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedData.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedData.GetAuthAttrs">
            return a table of the digested attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedData.GetUnauthAttrs">
            return a table of the undigested attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsAuthenticatedData.MacAlgOid">
            return the object identifier for the content MAC algorithm.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsAuthenticatedData.ContentInfo">
            return the ContentInfo 
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataGenerator">
             General class for generating a CMS authenticated-data message.
            
             A simple example of usage.
            
             <pre>
                  CMSAuthenticatedDataGenerator  fact = new CMSAuthenticatedDataGenerator();
            
                  fact.addKeyTransRecipient(cert);
            
                  CMSAuthenticatedData         data = fact.generate(content, algorithm, "BC");
             </pre>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsEnvelopedGenerator">
             General class for generating a CMS enveloped-data message.
            
             A simple example of usage.
            
             <pre>
                  CMSEnvelopedDataGenerator  fact = new CMSEnvelopedDataGenerator();
            
                  fact.addKeyTransRecipient(cert);
            
                  CMSEnvelopedData         data = fact.generate(content, algorithm, "BC");
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedGenerator.#ctor(LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKeyTransRecipient(LibOrg.BouncyCastle.X509.X509Certificate)">
             add a recipient.
            
             @param cert recipient's public key certificate
             @exception ArgumentException if there is a problem with the certificate
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKeyTransRecipient(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])">
             add a recipient
            
             @param key the public key used by the recipient
             @param subKeyId the identifier for the recipient's public key
             @exception ArgumentException if there is a problem with the key
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKekRecipient(System.String,LibOrg.BouncyCastle.Crypto.Parameters.KeyParameter,System.Byte[])">
            add a KEK recipient.
            @param key the secret key to use for wrapping
            @param keyIdentifier the byte string that identifies the key
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKekRecipient(System.String,LibOrg.BouncyCastle.Crypto.Parameters.KeyParameter,LibOrg.BouncyCastle.Asn1.Cms.KekIdentifier)">
            add a KEK recipient.
            @param key the secret key to use for wrapping
            @param keyIdentifier the byte string that identifies the key
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKeyAgreementRecipient(System.String,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String)">
             Add a key agreement based recipient.
            
             @param agreementAlgorithm key agreement algorithm to use.
             @param senderPrivateKey private key to initialise sender side of agreement with.
             @param senderPublicKey sender public key to include with message.
             @param recipientCert recipient's public key certificate.
             @param cekWrapAlgorithm OID for key wrapping algorithm to use.
             @exception SecurityUtilityException if the algorithm requested cannot be found
             @exception InvalidKeyException if the keys are inappropriate for the algorithm specified
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedGenerator.AddKeyAgreementRecipients(System.String,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Collections.ICollection,System.String)">
             Add multiple key agreement based recipients (sharing a single KeyAgreeRecipientInfo structure).
            
             @param agreementAlgorithm key agreement algorithm to use.
             @param senderPrivateKey private key to initialise sender side of agreement with.
             @param senderPublicKey sender public key to include with message.
             @param recipientCerts recipients' public key certificates.
             @param cekWrapAlgorithm OID for key wrapping algorithm to use.
             @exception SecurityUtilityException if the algorithm requested cannot be found
             @exception InvalidKeyException if the keys are inappropriate for the algorithm specified
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedGenerator.#ctor">
            base constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedGenerator.#ctor(LibOrg.BouncyCastle.Security.SecureRandom)">
             constructor allowing specific source of randomness
            
             @param rand instance of SecureRandom to use
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.#ctor">
            base constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.#ctor(LibOrg.BouncyCastle.Security.SecureRandom)">
            constructor allowing specific source of randomness
            @param rand instance of SecureRandom to use
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.Generate(LibOrg.BouncyCastle.Cms.CmsProcessable,System.String,LibOrg.BouncyCastle.Crypto.CipherKeyGenerator)">
            generate an enveloped object that contains an CMS Enveloped Data
            object using the given provider and the passed in key generator.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataGenerator.Generate(LibOrg.BouncyCastle.Cms.CmsProcessable,System.String)">
            generate an authenticated object that contains an CMS Authenticated Data object
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataParser">
             Parsing class for an CMS Authenticated Data object from an input stream.
             <p>
             Note: that because we are in a streaming mode only one recipient can be tried and it is important
             that the methods on the parser are called in the appropriate order.
             </p>
             <p>
             Example of use - assuming the first recipient matches the private key we have.
             <pre>
                  CMSAuthenticatedDataParser     ad = new CMSAuthenticatedDataParser(inputStream);
            
                  RecipientInformationStore  recipients = ad.getRecipientInfos();
            
                  Collection  c = recipients.getRecipients();
                  Iterator    it = c.iterator();
            
                  if (it.hasNext())
                  {
                      RecipientInformation   recipient = (RecipientInformation)it.next();
            
                      CMSTypedStream recData = recipient.getContentStream(privateKey, "BC");
            
                      processDataStream(recData.getContentStream());
            
                      if (!Arrays.equals(ad.getMac(), recipient.getMac())
                      {
                          System.err.println("Data corrupted!!!!");
                      }
                  }
              </pre>
              Note: this class does not introduce buffering - if you are processing large files you should create
              the parser with:
              <pre>
                      CMSAuthenticatedDataParser     ep = new CMSAuthenticatedDataParser(new BufferedInputStream(inputStream, bufSize));
              </pre>
              where bufSize is a suitably large buffer size.
             </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsContentInfoParser.Close">
            Close the underlying data stream.
            @throws IOException if the close fails.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetAuthAttrs">
            return a table of the unauthenticated attributes indexed by
            the OID of the attribute.
            @exception java.io.IOException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataParser.GetUnauthAttrs">
            return a table of the unauthenticated attributes indexed by
            the OID of the attribute.
            @exception java.io.IOException
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataParser.MacAlgOid">
            return the object identifier for the mac algorithm.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataParser.MacAlgParams">
            return the ASN.1 encoded encryption algorithm parameters, or null if
            there aren't any.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator">
             General class for generating a CMS authenticated-data message stream.
             <p>
             A simple example of usage.
             <pre>
                  CMSAuthenticatedDataStreamGenerator edGen = new CMSAuthenticatedDataStreamGenerator();
            
                  edGen.addKeyTransRecipient(cert);
            
                  ByteArrayOutputStream  bOut = new ByteArrayOutputStream();
            
                  OutputStream out = edGen.open(
                                          bOut, CMSAuthenticatedDataGenerator.AES128_CBC, "BC");*
                  out.write(data);
            
                  out.close();
             </pre>
             </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.#ctor">
            base constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.#ctor(LibOrg.BouncyCastle.Security.SecureRandom)">
            constructor allowing specific source of randomness
            @param rand instance of SecureRandom to use
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.SetBerEncodeRecipients(System.Boolean)">
            Use a BER Set to store the recipient information
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String,LibOrg.BouncyCastle.Crypto.CipherKeyGenerator)">
            generate an enveloped object that contains an CMS Enveloped Data
            object using the given provider and the passed in key generator.
            @throws java.io.IOException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String)">
            generate an enveloped object that contains an CMS Enveloped Data object
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsAuthenticatedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Int32)">
            generate an enveloped object that contains an CMS Enveloped Data object
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsAuthEnvelopedData">
            containing class for an CMS AuthEnveloped Data object
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsCompressedData">
            containing class for an CMS Compressed Data object
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsCompressedData.GetContent">
             Return the uncompressed content.
            
             @return the uncompressed content
             @throws CmsException if there is an exception uncompressing the data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsCompressedData.GetContent(System.Int32)">
             Return the uncompressed content, throwing an exception if the data size
             is greater than the passed in limit. If the content is exceeded getCause()
             on the CMSException will contain a StreamOverflowException
            
             @param limit maximum number of bytes to read
             @return the content read
             @throws CMSException if there is an exception uncompressing the data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsCompressedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsCompressedData.ContentInfo">
            return the ContentInfo 
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsCompressedDataGenerator">
                * General class for generating a compressed CMS message.
                * <p>
                * A simple example of usage.</p>
                * <p>
                * <pre>
                *      CMSCompressedDataGenerator fact = new CMSCompressedDataGenerator();
                *      CMSCompressedData data = fact.Generate(content, algorithm);
                * </pre>
            	* </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsCompressedDataGenerator.Generate(LibOrg.BouncyCastle.Cms.CmsProcessable,System.String)">
            Generate an object that contains an CMS Compressed Data
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsCompressedDataParser">
             Class for reading a CMS Compressed Data stream.
             <pre>
                 CMSCompressedDataParser cp = new CMSCompressedDataParser(inputStream);
            
                 process(cp.GetContent().GetContentStream());
             </pre>
              Note: this class does not introduce buffering - if you are processing large files you should create
              the parser with:
              <pre>
                  CMSCompressedDataParser     ep = new CMSCompressedDataParser(new BufferedInputStream(inputStream, bufSize));
              </pre>
              where bufSize is a suitably large buffer size.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsCompressedDataStreamGenerator">
             General class for generating a compressed CMS message stream.
             <p>
             A simple example of usage.
             </p>
             <pre>
                  CMSCompressedDataStreamGenerator gen = new CMSCompressedDataStreamGenerator();
            
                  Stream cOut = gen.Open(outputStream, CMSCompressedDataStreamGenerator.ZLIB);
            
                  cOut.Write(data);
            
                  cOut.Close();
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.#ctor">
            base constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsCompressedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsEnvelopedData">
            containing class for an CMS Enveloped Data object
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedData.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedData.GetUnprotectedAttributes">
            return a table of the unprotected attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsEnvelopedData.EncryptionAlgOid">
            return the object identifier for the content encryption algorithm.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsEnvelopedData.ContentInfo">
            return the ContentInfo 
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataGenerator">
             <remarks>
             General class for generating a CMS enveloped-data message.
            
             A simple example of usage.
            
             <pre>
                  CmsEnvelopedDataGenerator  fact = new CmsEnvelopedDataGenerator();
            
                  fact.AddKeyTransRecipient(cert);
            
                  CmsEnvelopedData         data = fact.Generate(content, algorithm);
             </pre>
             </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataGenerator.#ctor(LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataGenerator.Generate(LibOrg.BouncyCastle.Cms.CmsProcessable,System.String,LibOrg.BouncyCastle.Crypto.CipherKeyGenerator)">
            <summary>
            Generate an enveloped object that contains a CMS Enveloped Data
            object using the passed in key generator.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataGenerator.Generate(LibOrg.BouncyCastle.Cms.CmsProcessable,System.String)">
            <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataGenerator.Generate(LibOrg.BouncyCastle.Cms.CmsProcessable,System.String,System.Int32)">
            <summary>Generate an enveloped object that contains an CMS Enveloped Data object.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataParser">
             Parsing class for an CMS Enveloped Data object from an input stream.
             <p>
             Note: that because we are in a streaming mode only one recipient can be tried and it is important
             that the methods on the parser are called in the appropriate order.
             </p>
             <p>
             Example of use - assuming the first recipient matches the private key we have.
             <pre>
                  CmsEnvelopedDataParser     ep = new CmsEnvelopedDataParser(inputStream);
            
                  RecipientInformationStore  recipients = ep.GetRecipientInfos();
            
                  Collection  c = recipients.getRecipients();
                  Iterator    it = c.iterator();
            
                  if (it.hasNext())
                  {
                      RecipientInformation   recipient = (RecipientInformation)it.next();
            
                      CMSTypedStream recData = recipient.getContentStream(privateKey);
            
                      processDataStream(recData.getContentStream());
                  }
              </pre>
              Note: this class does not introduce buffering - if you are processing large files you should create
              the parser with:
              <pre>
                      CmsEnvelopedDataParser     ep = new CmsEnvelopedDataParser(new BufferedInputStream(inputStream, bufSize));
              </pre>
              where bufSize is a suitably large buffer size.
             </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataParser.GetRecipientInfos">
            return a store of the intended recipients for this message
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataParser.GetUnprotectedAttributes">
            return a table of the unprotected attributes indexed by
            the OID of the attribute.
            @throws IOException
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataParser.EncryptionAlgOid">
            return the object identifier for the content encryption algorithm.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataParser.EncryptionAlgParams">
            return the ASN.1 encoded encryption algorithm parameters, or null if
            there aren't any.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator">
             General class for generating a CMS enveloped-data message stream.
             <p>
             A simple example of usage.
             <pre>
                  CmsEnvelopedDataStreamGenerator edGen = new CmsEnvelopedDataStreamGenerator();
            
                  edGen.AddKeyTransRecipient(cert);
            
                  MemoryStream  bOut = new MemoryStream();
            
                  Stream out = edGen.Open(
                                          bOut, CMSEnvelopedDataGenerator.AES128_CBC);*
                  out.Write(data);
            
                  out.Close();
             </pre>
             </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.#ctor(LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.SetBufferSize(System.Int32)">
            <summary>Set the underlying string size for encapsulated data.</summary>
            <param name="bufferSize">Length of octet strings to buffer the data.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.SetBerEncodeRecipients(System.Boolean)">
            <summary>Use a BER Set to store the recipient information.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String,LibOrg.BouncyCastle.Crypto.CipherKeyGenerator)">
            <summary>
            Generate an enveloped object that contains an CMS Enveloped Data
            object using the passed in key generator.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String)">
            generate an enveloped object that contains an CMS Enveloped Data object
            @throws IOException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsEnvelopedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Int32)">
            generate an enveloped object that contains an CMS Enveloped Data object
            @throws IOException
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.ICipherParameters">
            all parameter classes implement this.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsProcessable.Write(System.IO.Stream)">
            <summary>
            Generic routine to copy out the data we want processed.
            </summary>
            <remarks>
            This routine may be called multiple times.
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsProcessableByteArray">
            a holding class for a byte array of data to be processed.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsProcessableByteArray.GetContent">
            <returns>A clone of the byte array</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsProcessableFile">
            a holding class for a file of data to be processed.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsProcessableFile.GetContent">
            <returns>The file handle</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsSignedData">
             general class for handling a pkcs7-signature message.
            
             A simple example of usage - note, in the example below the validity of
             the certificate isn't verified, just the fact that one of the certs
             matches the given signer...
            
             <pre>
              IX509Store              certs = s.GetCertificates();
              SignerInformationStore  signers = s.GetSignerInfos();
            
              foreach (SignerInformation signer in signers.GetSigners())
              {
                  ArrayList       certList = new ArrayList(certs.GetMatches(signer.SignerID));
                  X509Certificate cert = (X509Certificate) certList[0];
            
                  if (signer.Verify(cert.GetPublicKey()))
                  {
                      verified++;
                  }
              }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.#ctor(System.Collections.IDictionary,System.Byte[])">
             Content with detached signature, digests precomputed
            
             @param hashes a map of precomputed digests for content indexed by name of hash.
             @param sigBlock the signature object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.#ctor(LibOrg.BouncyCastle.Cms.CmsProcessable,System.IO.Stream)">
             base constructor - content with detached signature.
            
             @param signedContent the content that was signed.
             @param sigData the signature object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.#ctor(System.IO.Stream)">
            base constructor - with encapsulated content
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.GetSignerInfos">
            return the collection of signers that are associated with the
            signatures for the message.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.GetAttributeCertificates(System.String)">
             return a X509Store containing the attribute certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of attribute certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.GetCertificates(System.String)">
             return a X509Store containing the public key certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of public key certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.GetCrls(System.String)">
             return a X509Store containing CRLs, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of CRLs
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.ReplaceSigners(LibOrg.BouncyCastle.Cms.CmsSignedData,LibOrg.BouncyCastle.Cms.SignerInformationStore)">
             Replace the signerinformation store associated with this
             CmsSignedData object with the new one passed in. You would
             probably only want to do this if you wanted to change the unsigned
             attributes associated with a signer, or perhaps delete one.
            
             @param signedData the signed data object to be used as a base.
             @param signerInformationStore the new signer information store to use.
             @return a new signed data object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedData.ReplaceCertificatesAndCrls(LibOrg.BouncyCastle.Cms.CmsSignedData,LibOrg.BouncyCastle.X509.Store.IX509Store,LibOrg.BouncyCastle.X509.Store.IX509Store,LibOrg.BouncyCastle.X509.Store.IX509Store)">
             Replace the certificate and CRL information associated with this
             CmsSignedData object with the new one passed in.
            
             @param signedData the signed data object to be used as a base.
             @param x509Certs the new certificates to be used.
             @param x509Crls the new CRLs to be used.
             @return a new signed data object.
             @exception CmsException if there is an error processing the stores
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsSignedData.Version">
            <summary>Return the version number for this object.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsSignedData.SignedContentType">
            <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsSignedData.ContentInfo">
            return the ContentInfo
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator">
                 * general class for generating a pkcs7-signature message.
                 * <p>
                 * A simple example of usage.
                 *
                 * <pre>
                 *      IX509Store certs...
                 *      IX509Store crls...
                 *      CmsSignedDataGenerator gen = new CmsSignedDataGenerator();
                 *
                 *      gen.AddSigner(privKey, cert, CmsSignedGenerator.DigestSha1);
                 *      gen.AddCertificates(certs);
                 *      gen.AddCrls(crls);
                 *
                 *      CmsSignedData data = gen.Generate(content);
                 * </pre>
            	 * </p>
        </member>
        <member name="F:LibOrg.BouncyCastle.Cms.CmsSignedGenerator.Data">
            Default type for the signed data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedGenerator.#ctor(LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedGenerator.AddAttributeCertificates(LibOrg.BouncyCastle.X509.Store.IX509Store)">
             Add the attribute certificates contained in the passed in store to the
             generator.
            
             @param store a store of Version 2 attribute certificates
             @throws CmsException if an error occurse processing the store.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedGenerator.AddSigners(LibOrg.BouncyCastle.Cms.SignerInformationStore)">
             Add a store of precalculated signers to the generator.
            
             @param signerStore store of signers
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedGenerator.GetGeneratedDigests">
             Return a map of oids and byte arrays representing the digests calculated on the content during
             the last generate.
            
             @return a map of oids (as String objects) and byte[] representing digests.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.#ctor(LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String)">
                    * add a signer - no attributes other than the default ones will be
                    * provided here.
            		*
            		* @param key signing key to use
            		* @param cert certificate containing corresponding public key
            		* @param digestOID digest algorithm OID
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,System.String)">
             add a signer, specifying the digest encryption algorithm to use - no attributes other than the default ones will be
             provided here.
            
             @param key signing key to use
             @param cert certificate containing corresponding public key
             @param encryptionOID digest encryption algorithm OID
             @param digestOID digest algorithm OID
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String)">
            add a signer, specifying the digest encryption algorithm to use - no attributes other than the default ones will be
            provided here.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
                    * add a signer with extra signed/unsigned attributes.
            		*
            		* @param key signing key to use
            		* @param cert certificate containing corresponding public key
            		* @param digestOID digest algorithm OID
            		* @param signedAttr table of attributes to be included in signature
            		* @param unsignedAttr table of attributes to be included as unsigned
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,System.String,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
             add a signer, specifying the digest encryption algorithm, with extra signed/unsigned attributes.
            
             @param key signing key to use
             @param cert certificate containing corresponding public key
             @param encryptionOID digest encryption algorithm OID
             @param digestOID digest algorithm OID
             @param signedAttr table of attributes to be included in signature
             @param unsignedAttr table of attributes to be included as unsigned
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
            	     * add a signer with extra signed/unsigned attributes.
            		 *
            		 * @param key signing key to use
            		 * @param subjectKeyID subjectKeyID of corresponding public key
            		 * @param digestOID digest algorithm OID
            		 * @param signedAttr table of attributes to be included in signature
            		 * @param unsignedAttr table of attributes to be included as unsigned
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
             add a signer, specifying the digest encryption algorithm, with extra signed/unsigned attributes.
            
             @param key signing key to use
             @param subjectKeyID subjectKeyID of corresponding public key
             @param encryptionOID digest encryption algorithm OID
             @param digestOID digest algorithm OID
             @param signedAttr table of attributes to be included in signature
             @param unsignedAttr table of attributes to be included as unsigned
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,LibOrg.BouncyCastle.Cms.CmsAttributeTableGenerator,LibOrg.BouncyCastle.Cms.CmsAttributeTableGenerator)">
            add a signer with extra signed/unsigned attributes based on generators.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,System.String,LibOrg.BouncyCastle.Cms.CmsAttributeTableGenerator,LibOrg.BouncyCastle.Cms.CmsAttributeTableGenerator)">
            add a signer, specifying the digest encryption algorithm, with extra signed/unsigned attributes based on generators.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,LibOrg.BouncyCastle.Cms.CmsAttributeTableGenerator,LibOrg.BouncyCastle.Cms.CmsAttributeTableGenerator)">
            add a signer with extra signed/unsigned attributes based on generators.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String,LibOrg.BouncyCastle.Cms.CmsAttributeTableGenerator,LibOrg.BouncyCastle.Cms.CmsAttributeTableGenerator)">
            add a signer, including digest encryption algorithm, with extra signed/unsigned attributes based on generators.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.Generate(LibOrg.BouncyCastle.Cms.CmsProcessable)">
            generate a signed object that for a CMS Signed Data object
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.Generate(System.String,LibOrg.BouncyCastle.Cms.CmsProcessable,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object  - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.Generate(LibOrg.BouncyCastle.Cms.CmsProcessable,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data".
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataGenerator.GenerateCounterSigners(LibOrg.BouncyCastle.Cms.SignerInformation)">
             generate a set of one or more SignerInformation objects representing counter signatures on
             the passed in SignerInformation object.
            
             @param signer the signer to be countersigned
             @param sigProvider the provider to be used for counter signing.
             @return a store containing the signers.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsSignedDataParser">
             Parsing class for an CMS Signed Data object from an input stream.
             <p>
             Note: that because we are in a streaming mode only one signer can be tried and it is important
             that the methods on the parser are called in the appropriate order.
             </p>
             <p>
             A simple example of usage for an encapsulated signature.
             </p>
             <p>
             Two notes: first, in the example below the validity of
             the certificate isn't verified, just the fact that one of the certs
             matches the given signer, and, second, because we are in a streaming
             mode the order of the operations is important.
             </p>
             <pre>
                  CmsSignedDataParser     sp = new CmsSignedDataParser(encapSigData);
            
                  sp.GetSignedContent().Drain();
            
                  IX509Store              certs = sp.GetCertificates();
                  SignerInformationStore  signers = sp.GetSignerInfos();
            
                  foreach (SignerInformation signer in signers.GetSigners())
                  {
                      ArrayList       certList = new ArrayList(certs.GetMatches(signer.SignerID));
                      X509Certificate cert = (X509Certificate) certList[0];
            
                      Console.WriteLine("verify returns: " + signer.Verify(cert));
                  }
             </pre>
              Note also: this class does not introduce buffering - if you are processing large files you should create
              the parser with:
              <pre>
                      CmsSignedDataParser     ep = new CmsSignedDataParser(new BufferedInputStream(encapSigData, bufSize));
              </pre>
              where bufSize is a suitably large buffer size.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.#ctor(System.IO.Stream)">
            base constructor - with encapsulated content
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.#ctor(LibOrg.BouncyCastle.Cms.CmsTypedStream,System.IO.Stream)">
             base constructor
            
             @param signedContent the content that was signed.
             @param sigData the signature object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.GetSignerInfos">
            return the collection of signers that are associated with the
            signatures for the message.
            @throws CmsException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.GetAttributeCertificates(System.String)">
             return a X509Store containing the attribute certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of attribute certificates
             @exception LibOrg.BouncyCastle.x509.NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.GetCertificates(System.String)">
             return a X509Store containing the public key certificates, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of public key certificates
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.GetCrls(System.String)">
             return a X509Store containing CRLs, if any, contained
             in this message.
            
             @param type type of store to create
             @return a store of CRLs
             @exception NoSuchStoreException if the store type isn't available.
             @exception CmsException if a general exception prevents creation of the X509Store
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.ReplaceSigners(System.IO.Stream,LibOrg.BouncyCastle.Cms.SignerInformationStore,System.IO.Stream)">
            Replace the signerinformation store associated with the passed
            in message contained in the stream original with the new one passed in.
            You would probably only want to do this if you wanted to change the unsigned
            attributes associated with a signer, or perhaps delete one.
            <p>
            The output stream is returned unclosed.
            </p>
            @param original the signed data stream to be used as a base.
            @param signerInformationStore the new signer information store to use.
            @param out the stream to Write the new signed data object to.
            @return out.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.ReplaceCertificatesAndCrls(System.IO.Stream,LibOrg.BouncyCastle.X509.Store.IX509Store,LibOrg.BouncyCastle.X509.Store.IX509Store,LibOrg.BouncyCastle.X509.Store.IX509Store,System.IO.Stream)">
            Replace the certificate and CRL information associated with this
            CMSSignedData object with the new one passed in.
            <p>
            The output stream is returned unclosed.
            </p>
            @param original the signed data stream to be used as a base.
            @param certsAndCrls the new certificates and CRLs to be used.
            @param out the stream to Write the new signed data object to.
            @return out.
            @exception CmsException if there is an error processing the CertStore
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.Version">
             Return the version number for the SignedData object
            
             @return the version number
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.CmsSignedDataParser.SignedContentType">
            <summary>
            Return the <c>DerObjectIdentifier</c> associated with the encapsulated
            content info structure carried in the signed data.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator">
             General class for generating a pkcs7-signature message stream.
             <p>
             A simple example of usage.
             </p>
             <pre>
                  IX509Store                   certs...
                  CmsSignedDataStreamGenerator gen = new CmsSignedDataStreamGenerator();
            
                  gen.AddSigner(privateKey, cert, CmsSignedDataStreamGenerator.DIGEST_SHA1);
            
                  gen.AddCertificates(certs);
            
                  Stream sigOut = gen.Open(bOut);
            
                  sigOut.Write(Encoding.UTF8.GetBytes("Hello World!"));
            
                  sigOut.Close();
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.#ctor(LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Constructor allowing specific source of randomness</summary>
            <param name="rand">Instance of <c>SecureRandom</c> to use.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.SetBufferSize(System.Int32)">
             Set the underlying string size for encapsulated data
            
             @param bufferSize length of octet strings to buffer the data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,System.String)">
            add a signer, specifying the digest encryption algorithm - no attributes other than the default ones will be
            provided here.
            @throws NoSuchProviderException
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
            add a signer with extra signed/unsigned attributes.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,System.String,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
            add a signer with extra signed/unsigned attributes - specifying digest
            encryption algorithm.
            @throws NoSuchProviderException
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,System.String)">
            add a signer - no attributes other than the default ones will be
            provided here.
            @throws NoSuchProviderException
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.AddSigner(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[],System.String,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
            add a signer with extra signed/unsigned attributes.
            @throws NoSuchAlgorithmException
            @throws InvalidKeyException
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream)">
            generate a signed object that for a CMS Signed Data object
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data".
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.Boolean,System.IO.Stream)">
            generate a signed object that for a CMS Signed Data
            object using the given provider - if encapsulate is true a copy
            of the message will be included in the signature with the
            default content type "data". If dataOutputStream is non null the data
            being signed will be written to the stream as it is processed.
            @param out stream the CMS object is to be written to.
            @param encapsulate true if data should be encapsulated.
            @param dataOutputStream output stream to copy the data being signed to.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean)">
            generate a signed object that for a CMS Signed Data
            object - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedDataStreamGenerator.Open(System.IO.Stream,System.String,System.Boolean,System.IO.Stream)">
            generate a signed object that for a CMS Signed Data
            object using the given provider - if encapsulate is true a copy
            of the message will be included in the signature. The content type
            is set according to the OID represented by the string signedContentType.
            @param out stream the CMS object is to be written to.
            @param signedContentType OID for data to be signed.
            @param encapsulate true if data should be encapsulated.
            @param dataOutputStream output stream to copy the data being signed to.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedHelper.GetDigestAlgName(System.String)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.CmsSignedHelper.GetEncryptionAlgName(System.String)">
            Return the digest encryption algorithm using one of the standard
            JCA string representations rather than the algorithm identifier (if
            possible).
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator">
            Default authenticated attributes generator.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.#ctor">
            Initialise to use all defaults
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.#ctor(LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
             Initialise with some extra attributes or overrides.
            
             @param attributeTable initial attribute table to use.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.CreateStandardAttributeTable(System.Collections.IDictionary)">
             Create a standard attribute table from the passed in parameters - this will
             normally include contentType and messageDigest. If the constructor
             using an AttributeTable was used, entries in it for contentType and
             messageDigest will override the generated ones.
            
             @param parameters source parameters for table generation.
            
             @return a filled in IDictionary of attributes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.DefaultAuthenticatedAttributeTableGenerator.GetAttributes(System.Collections.IDictionary)">
            @param parameters source parameters
            @return the populated attribute table
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator">
            Default signed attributes generator.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.#ctor">
            Initialise to use all defaults
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.#ctor(LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
             Initialise with some extra attributes or overrides.
            
             @param attributeTable initial attribute table to use.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.createStandardAttributeTable(System.Collections.IDictionary)">
             Create a standard attribute table from the passed in parameters - this will
             normally include contentType, signingTime, and messageDigest. If the constructor
             using an AttributeTable was used, entries in it for contentType, signingTime, and
             messageDigest will override the generated ones.
            
             @param parameters source parameters for table generation.
            
             @return a filled in Hashtable of attributes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.DefaultSignedAttributeTableGenerator.GetAttributes(System.Collections.IDictionary)">
            @param parameters source parameters
            @return the populated attribute table
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.RecipientInfoGenerator.Generate(LibOrg.BouncyCastle.Crypto.Parameters.KeyParameter,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>
            Generate a RecipientInfo object for the given key.
            </summary>
            <param name="contentEncryptionKey">
            A <see cref="T:LibOrg.BouncyCastle.Crypto.Parameters.KeyParameter"/>
            </param>
            <param name="random">
            A <see cref="T:LibOrg.BouncyCastle.Security.SecureRandom"/>
            </param>
            <returns>
            A <see cref="T:LibOrg.BouncyCastle.Asn1.Cms.RecipientInfo"/>
            </returns>
            <exception cref="T:LibOrg.BouncyCastle.Security.GeneralSecurityException"></exception>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.KekRecipientInformation">
            the RecipientInfo class for a recipient who has been sent a message
            encrypted using a secret key known to the other side.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.RecipientInformation.GetMac">
             Return the MAC calculated for the content stream. Note: this call is only meaningful once all
             the content has been read.
            
             @return  byte array containing the mac.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.RecipientInformation.KeyEncryptionAlgOid">
                    * return the object identifier for the key encryption algorithm.
                    * 
            		* @return OID for key encryption algorithm.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.RecipientInformation.KeyEncryptionAlgParams">
                    * return the ASN.1 encoded key encryption algorithm parameters, or null if
                    * there aren't any.
                    * 
            		* @return ASN.1 encoding of key encryption algorithm parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.KekRecipientInformation.GetContentStream(LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            decrypt the content and return an input stream.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.KeyAgreeRecipientInformation">
            the RecipientInfo class for a recipient who has been sent a message
            encrypted using key agreement.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.KeyAgreeRecipientInformation.GetContentStream(LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            decrypt the content and return an input stream.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.KeyTransRecipientInformation">
            the KeyTransRecipientInformation class for a recipient who has been sent a secret
            key encrypted using their public key that needs to be used to
            extract the message.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.KeyTransRecipientInformation.GetContentStream(LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            decrypt the content and return it as a byte array.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.OriginatorID">
            a basic index for an originator.
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CertStoreSelector.Policy">
            <summary>
            An <code>ISet</code> of <code>DerObjectIdentifier</code> objects.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.OriginatorInformation.GetCertificates">
             Return the certificates stored in the underlying OriginatorInfo object.
            
             @return a Store of X509CertificateHolder objects.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.OriginatorInformation.GetCrls">
             Return the CRLs stored in the underlying OriginatorInfo object.
            
             @return a Store of X509CRLHolder objects.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.OriginatorInformation.ToAsn1Structure">
             Return the underlying ASN.1 object defining this SignerInformation object.
            
             @return a OriginatorInfo.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.PasswordRecipientInformation">
            the RecipientInfo class for a recipient who has been sent a message
            encrypted using a password.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.PasswordRecipientInformation.GetContentStream(LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            decrypt the content and return an input stream.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.PasswordRecipientInformation.KeyDerivationAlgorithm">
             return the object identifier for the key derivation algorithm, or null
             if there is none present.
            
             @return OID for key derivation algorithm, if present.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.Pkcs5Scheme2PbeKey">
            <summary>
            PKCS5 scheme-2 - password converted to bytes assuming ASCII.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.Pkcs5Scheme2Utf8PbeKey">
            PKCS5 scheme-2 - password converted to bytes using UTF-8.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.RecipientInformationStore.GetFirstRecipient(LibOrg.BouncyCastle.Cms.RecipientID)">
             Return the first RecipientInformation object that matches the
             passed in selector. Null if there are no matches.
            
             @param selector to identify a recipient
             @return a single RecipientInformation object. Null if none matches.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.RecipientInformationStore.GetRecipients">
             Return all recipients in the collection
            
             @return a collection of recipients.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.RecipientInformationStore.GetRecipients(LibOrg.BouncyCastle.Cms.RecipientID)">
             Return possible empty collection with recipients matching the passed in RecipientID
            
             @param selector a recipient id to select against.
             @return a collection of RecipientInformation objects.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.RecipientInformationStore.Count">
             Return the number of recipients in the collection.
            
             @return number of recipients identified.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.SignerID">
            a basic index for a signer.
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.SignerInformation">
            an expanded SignerInfo block from a CMS Signed message
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformation.GetContentDigest">
            return the content digest that was calculated during verification.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformation.GetSignature">
            return the encoded signature
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformation.GetCounterSignatures">
            Return a SignerInformationStore containing the counter signatures attached to this
            signer. If no counter signatures are present an empty store is returned.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformation.GetEncodedSignedAttributes">
            return the DER encoding of the signed attributes.
            @throws IOException if an encoding error occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformation.Verify(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            verify that the given public key successfully handles and confirms the
            signature associated with this signer.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformation.Verify(LibOrg.BouncyCastle.X509.X509Certificate)">
            verify that the given certificate successfully handles and confirms
            the signature associated with this signer and, if a signingTime
            attribute is available, that the certificate was valid at the time the
            signature was generated.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformation.ToSignerInfo">
             Return the base ASN.1 CMS structure that this object contains.
            
             @return an object containing a CMS SignerInfo structure.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformation.ReplaceUnsignedAttributes(LibOrg.BouncyCastle.Cms.SignerInformation,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
             Return a signer information object with the passed in unsigned
             attributes replacing the ones that are current associated with
             the object passed in.
            
             @param signerInformation the signerInfo to be used as the basis.
             @param unsignedAttributes the unsigned attributes to add.
             @return a copy of the original SignerInformationObject with the changed attributes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformation.AddCounterSigners(LibOrg.BouncyCastle.Cms.SignerInformation,LibOrg.BouncyCastle.Cms.SignerInformationStore)">
             Return a signer information object with passed in SignerInformationStore representing counter
             signatures attached as an unsigned attribute.
            
             @param signerInformation the signerInfo to be used as the basis.
             @param counterSigners signer info objects carrying counter signature.
             @return a copy of the original SignerInformationObject with the changed attributes.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.SignerInformation.Version">
            return the version number for this objects underlying SignerInfo structure.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.SignerInformation.DigestAlgOid">
            return the object identifier for the signature.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.SignerInformation.DigestAlgParams">
            return the signature parameters, or null if there aren't any.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.SignerInformation.EncryptionAlgOid">
            return the object identifier for the signature.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.SignerInformation.EncryptionAlgParams">
            return the signature/encryption algorithm parameters, or null if
            there aren't any.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.SignerInformation.SignedAttributes">
            return a table of the signed attributes - indexed by
            the OID of the attribute.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.SignerInformation.UnsignedAttributes">
            return a table of the unsigned attributes indexed by
            the OID of the attribute.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformationStore.GetFirstSigner(LibOrg.BouncyCastle.Cms.SignerID)">
             Return the first SignerInformation object that matches the
             passed in selector. Null if there are no matches.
            
             @param selector to identify a signer
             @return a single SignerInformation object. Null if none matches.
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformationStore.GetSigners">
            <returns>An ICollection of all signers in the collection</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Cms.SignerInformationStore.GetSigners(LibOrg.BouncyCastle.Cms.SignerID)">
             Return possible empty collection with signers matching the passed in SignerID
            
             @param selector a signer id to select against.
             @return a collection of SignerInformation objects.
        </member>
        <member name="P:LibOrg.BouncyCastle.Cms.SignerInformationStore.Count">
            <summary>The number of signers in the collection.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Cms.SimpleAttributeTableGenerator">
            Basic generator that just returns a preconstructed attribute table
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Agreement.DHAgreement">
            a Diffie-Hellman key exchange engine.
            <p>
            note: This uses MTI/A0 key agreement in order to make the key agreement
            secure against passive attacks. If you're doing Diffie-Hellman and both
            parties have long term public keys you should look at using this. For
            further information have a look at RFC 2631.</p>
            <p>
            It's possible to extend this to more than two parties as well, for the moment
            that is left as an exercise for the reader.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.DHAgreement.CalculateMessage">
            calculate our initial message.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.DHAgreement.CalculateAgreement(LibOrg.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters,LibOrg.BouncyCastle.Math.BigInteger)">
            given a message from a given party and the corresponding public key
            calculate the next message in the agreement sequence. In this case
            this will represent the shared secret.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Agreement.DHBasicAgreement">
            a Diffie-Hellman key agreement class.
            <p>
            note: This is only the basic algorithm, it doesn't take advantage of
            long term public keys if they are available. See the DHAgreement class
            for a "better" implementation.</p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IBasicAgreement">
            The basic interface that basic Diffie-Hellman implementations
            conforms to.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IBasicAgreement.Init(LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            initialise the agreement engine.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IBasicAgreement.GetFieldSize">
            return the field size for the agreement algorithm in bytes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IBasicAgreement.CalculateAgreement(LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            given a public key from a given party calculate the next
            message in the agreement sequence.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.DHBasicAgreement.CalculateAgreement(LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            given a short term public key from a given party calculate the next
            message in the agreement sequence.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement">
             P1363 7.2.1 ECSVDP-DH
            
             ECSVDP-DH is Elliptic Curve Secret Value Derivation Primitive,
             Diffie-Hellman version. It is based on the work of [DH76], [Mil86],
             and [Kob87]. This primitive derives a shared secret value from one
             party's private key and another party's public key, where both have
             the same set of EC domain parameters. If two parties correctly
             execute this primitive, they will produce the same output. This
             primitive can be invoked by a scheme to derive a shared secret key;
             specifically, it may be used with the schemes ECKAS-DH1 and
             DL/ECKAS-DH2. It assumes that the input keys are valid (see also
             Section 7.2.2).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Agreement.ECDHCBasicAgreement">
             P1363 7.2.2 ECSVDP-DHC
            
             ECSVDP-DHC is Elliptic Curve Secret Value Derivation Primitive,
             Diffie-Hellman version with cofactor multiplication. It is based on
             the work of [DH76], [Mil86], [Kob87], [LMQ98] and [Kal98a]. This
             primitive derives a shared secret value from one party's private key
             and another party's public key, where both have the same set of EC
             domain parameters. If two parties correctly execute this primitive,
             they will produce the same output. This primitive can be invoked by a
             scheme to derive a shared secret key; specifically, it may be used
             with the schemes ECKAS-DH1 and DL/ECKAS-DH2. It does not assume the
             validity of the input public key (see also Section 7.2.1).
             <p>
             Note: As stated P1363 compatibility mode with ECDH can be preset, and
             in this case the implementation doesn't have a ECDH compatibility mode
             (if you want that just use ECDHBasicAgreement and note they both implement
             BasicAgreement!).</p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IDerivationParameters">
            Parameters for key/byte stream derivation classes
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Agreement.Kdf.DHKekGenerator">
            RFC 2631 Diffie-hellman KEK derivation function.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IDerivationFunction">
            base interface for general purpose byte derivation functions.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.IDerivationFunction.Digest">
            return the message digest used as the basis for the function
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Agreement.Kdf.ECDHKekGenerator">
            X9.63 based key derivation function for ECDH CMS.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6Client">
            Implements the client side SRP-6a protocol. Note that this class is stateful, and therefore NOT threadsafe.
            This implementation of SRP is based on the optimized message sequence put forth by Thomas Wu in the paper
            "SRP-6: Improvements and Refinements to the Secure Remote Password Protocol, 2002"
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.Init(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Crypto.IDigest,LibOrg.BouncyCastle.Security.SecureRandom)">
            Initialises the client to begin new authentication attempt
            @param N The safe prime associated with the client's verifier
            @param g The group parameter associated with the client's verifier
            @param digest The digest algorithm associated with the client's verifier
            @param random For key generation
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.GenerateClientCredentials(System.Byte[],System.Byte[],System.Byte[])">
            Generates client's credentials given the client's salt, identity and password
            @param salt The salt used in the client's verifier.
            @param identity The user's identity (eg. username)
            @param password The user's password
            @return Client's public value to send to server
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.CalculateSecret(LibOrg.BouncyCastle.Math.BigInteger)">
            Generates client's verification message given the server's credentials
            @param serverB The server's credentials
            @return Client's verification message for the server
            @throws CryptoException If server's credentials are invalid
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6Server">
            Implements the server side SRP-6a protocol. Note that this class is stateful, and therefore NOT threadsafe.
            This implementation of SRP is based on the optimized message sequence put forth by Thomas Wu in the paper
            "SRP-6: Improvements and Refinements to the Secure Remote Password Protocol, 2002"
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.Init(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Crypto.IDigest,LibOrg.BouncyCastle.Security.SecureRandom)">
            Initialises the server to accept a new client authentication attempt
            @param N The safe prime associated with the client's verifier
            @param g The group parameter associated with the client's verifier
            @param v The client's verifier
            @param digest The digest algorithm associated with the client's verifier
            @param random For key generation
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.GenerateServerCredentials">
            Generates the server's credentials that are to be sent to the client.
            @return The server's public value to the client
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.CalculateSecret(LibOrg.BouncyCastle.Math.BigInteger)">
            Processes the client's credentials. If valid the shared secret is generated and returned.
            @param clientA The client's credentials
            @return A shared secret BigInteger
            @throws CryptoException If client's credentials are invalid
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator">
            Generates new SRP verifier for user
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.Init(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Crypto.IDigest)">
            Initialises generator to create new verifiers
            @param N The safe prime to use (see DHParametersGenerator)
            @param g The group parameter to use (see DHParametersGenerator)
            @param digest The digest to use. The same digest type will need to be used later for the actual authentication
            attempt. Also note that the final session key size is dependent on the chosen digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.GenerateVerifier(System.Byte[],System.Byte[],System.Byte[])">
            Creates a new SRP verifier
            @param salt The salt to use, generally should be large and random
            @param identity The user's identifying information (eg. username)
            @param password The user's password
            @return A new verifier for use in future SRP authentication
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.AsymmetricCipherKeyPair">
            a holding class for public/private parameter pairs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.AsymmetricCipherKeyPair.#ctor(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
             basic constructor.
            
             @param publicParam a public key parameters object.
             @param privateParam the corresponding private key parameters.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.AsymmetricCipherKeyPair.Public">
             return the public key parameters.
            
             @return the public key parameters.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.AsymmetricCipherKeyPair.Private">
             return the private key parameters.
            
             @return the private key parameters.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.BufferedAeadBlockCipher">
            The AEAD block ciphers already handle buffering internally, so this class
            just takes care of implementing IBufferedCipher methods.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IBufferedCipher">
            <remarks>Block cipher engines are expected to conform to this interface.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IBufferedCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IBufferedCipher.Reset">
            <summary>
            Reset the cipher. After resetting the cipher is in the same state
            as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.IBufferedCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAeadBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAeadBlockCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAeadBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAeadBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if neccessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAeadBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAeadBlockCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher">
            a buffer wrapper for an asymmetric block cipher, allowing input
            to be accumulated in a piecemeal fashion until final processing.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher)">
             base constructor.
            
             @param cipher the cipher this buffering object wraps.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.GetBufferPosition">
             return the amount of data sitting in the buffer.
            
             @return the amount of data sitting in the buffer.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the buffer and the underlying cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.DoFinal">
             process the contents of the buffer using the underlying
             cipher.
            
             @return the result of the encryption/decryption process on the
             buffer.
             @exception InvalidCipherTextException if we are given a garbage block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.Reset">
            <summary>Reset the buffer</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion. The BufferedBlockCipher outputs a block only when the
            buffer is full and more data is being added, or on a doFinal.
            <p>
            Note: in the case where the underlying cipher is either a CFB cipher or an
            OFB one the last block may not be a multiple of the block size.
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.#ctor">
            constructor for subclasses
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             Create a buffered block cipher without padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             false otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if neccessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.BufferedBlockCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.CipherKeyGenerator">
            The base class for symmetric, or secret, cipher key generators.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.CipherKeyGenerator.Init(LibOrg.BouncyCastle.Crypto.KeyGenerationParameters)">
             initialise the key generator.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey">
             Generate a secret key.
            
             @return a byte array containing the key value.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.DataLengthException">
            this exception is thrown if a buffer that is meant to have output
            copied into it turns out to be too short, or if we've been given
            insufficient input. In general this exception will Get thrown rather
            than an ArrayOutOfBounds exception.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.DataLengthException.#ctor">
            base constructor.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.DataLengthException.#ctor(System.String)">
             create a DataLengthException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.Gost3411Digest">
            implementation of GOST R 34.11-94
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Gost3411Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Gost3411Digest.#ctor(System.Byte[])">
            Constructor to allow use of a particular sbox with GOST28147
            @see GOST28147Engine#getSBox(String)
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Gost3411Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.Gost3411Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Digests.Gost3411Digest.C2">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.LongDigest">
            Base class for SHA-384 and SHA-512.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.LongDigest.#ctor">
            Constructor for variable length word
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.LongDigest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.LongDigest)">
            Copy constructor.  We are using copy constructors in place
            of the object.Clone() interface as this interface is not
            supported by J2ME.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.LongDigest.AdjustByteCounts">
            adjust the byte counts so that byteCount2 represents the
            upper long (less 3 bits) word of the byte count.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.MD2Digest">
            implementation of MD2
            as outlined in RFC1319 by B.Kaliski from RSA Laboratories April 1992
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.MD2Digest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param out the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.MD2Digest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.MD2Digest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param in the input byte to be entered.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.MD2Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param in the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Digests.MD2Digest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.MD4Digest">
            implementation of MD4 as RFC 1320 by R. Rivest, MIT Laboratory for
            Computer Science and RSA Data Security, Inc.
            <p>
            <b>NOTE</b>: This algorithm is only included for backwards compatibility
            with legacy applications, it's not secure, don't use it for anything new!</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.MD4Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.MD4Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.MD4Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.MD4Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.MD5Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.RipeMD128Digest">
            implementation of RipeMD128
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD128Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD128Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.RipeMD128Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD128Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.RipeMD160Digest">
            implementation of RipeMD see,
            http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD160Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD160Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.RipeMD160Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD160Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.RipeMD256Digest">
            <remarks>
            <p>Implementation of RipeMD256.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD128.</p>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD256Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD256Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.RipeMD256Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD256Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.RipeMD320Digest">
            <remarks>
            <p>Implementation of RipeMD 320.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD160.</p>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD320Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD320Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.RipeMD320Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.RipeMD320Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.Sha1Digest">
             implementation of SHA-1 as outlined in "Handbook of Applied Cryptography", pages 346 - 349.
            
             It is interesting to ponder why the, apart from the extra IV, the other difference here from MD5
             is the "endianness" of the word processing!
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha1Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.Sha1Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha1Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.Sha224Digest">
            SHA-224 as described in RFC 3874
            <pre>
                    block  word  digest
            SHA-1   512    32    160
            SHA-224 512    32    224
            SHA-256 512    32    256
            SHA-384 1024   64    384
            SHA-512 1024   64    512
            </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha224Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha224Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.Sha224Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha224Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.Sha256Digest">
             Draft FIPS 180-2 implementation of SHA-256. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha256Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.Sha256Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha256Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.Sha384Digest">
             Draft FIPS 180-2 implementation of SHA-384. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha384Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.Sha384Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha384Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.Sha3Digest">
            <summary>
            Implementation of SHA-3 based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha3Digest.GetByteLength">
             Return the size of block that the compression function is applied to in bytes.
            
             @return internal byte length of a block.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.Sha512Digest">
             Draft FIPS 180-2 implementation of SHA-512. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha512Digest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.Sha512Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha512Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.Sha512tDigest">
            FIPS 180-4 implementation of SHA-512/t
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha512tDigest.#ctor(System.Int32)">
            Standard constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha512tDigest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.Sha512tDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.Sha512tDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.ShortenedDigest">
            Wrapper class that reduces the output length of a particular digest to
            only the first n bytes of the digest function.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.ShortenedDigest.#ctor(LibOrg.BouncyCastle.Crypto.IDigest,System.Int32)">
             Base constructor.
            
             @param baseDigest underlying digest to use.
             @param length length in bytes of the output of doFinal.
             @exception ArgumentException if baseDigest is null, or length is greater than baseDigest.GetDigestSize().
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.TigerDigest">
            implementation of Tiger based on:
            <a href="http://www.cs.technion.ac.il/~biham/Reports/Tiger">
             http://www.cs.technion.ac.il/~biham/Reports/Tiger</a>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.TigerDigest.#ctor">
            Standard constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.TigerDigest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.TigerDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.TigerDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Digests.WhirlpoolDigest">
             Implementation of WhirlpoolDigest, based on Java source published by Barreto
             and Rijmen.
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.WhirlpoolDigest.#ctor(LibOrg.BouncyCastle.Crypto.Digests.WhirlpoolDigest)">
            Copy constructor. This will copy the state of the provided message
            digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Digests.WhirlpoolDigest.Reset">
            Reset the chaining variables
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding">
            ISO 9796-1 padding. Note in the light of recent results you should
            only use this with RSA (rather than the "simpler" Rabin keys) and you
            should never use it with anything other than a hash (ie. even if the
            message is small don't sign the message, sign it's hash) or some "random"
            value. See your favorite search engine for details.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher">
            <remarks>Base interface for a public/private key block cipher.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher.GetInputBlockSize">
            <returns>The maximum size, in bytes, an input block may be.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher.GetOutputBlockSize">
            <returns>The maximum size, in bytes, an output block will be.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="inLen">The length of the input block.</param>
            <exception cref="T:LibOrg.BouncyCastle.Crypto.InvalidCipherTextException">Input decrypts improperly.</exception>
            <exception cref="T:LibOrg.BouncyCastle.Crypto.DataLengthException">Input is too large for the cipher.</exception>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.GetInputBlockSize">
            return the input block size. The largest message we can process
            is (key_size_in_bits + 3)/16, which in our world comes to
            key_size_in_bytes / 2.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.GetOutputBlockSize">
            return the maximum possible size for the output.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.SetPadBits(System.Int32)">
            set the number of bits in the next message to be treated as
            pad bits.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.GetPadBits">
            retrieve the number of pad bits in the last decoded message.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not a valid ISO 9796 bit string
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Encodings.OaepEncoding">
            Optimal Asymmetric Encryption Padding (OAEP) - see PKCS 1 V 2.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.OaepEncoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block turns out to
            be badly formatted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.OaepEncoding.ItoOSP(System.Int32,System.Byte[])">
            int to octet string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.OaepEncoding.maskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            mask generator function, as described in PKCS1v2.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Encodings.Pkcs1Encoding">
            this does your basic Pkcs 1 v1.5 padding - whether or not you should be using this
            depends on your application - see Pkcs1 Version 2 for details.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabledProperty">
            some providers fail to include the leading zero in PKCS1 encoded blocks. If you need to
            work with one of these set the system property LibOrg.BouncyCastle.Pkcs1.Strict to false.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.#ctor(LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher)">
            Basic constructor.
            @param cipher
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not in Pkcs1 format.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabled">
            The same effect can be achieved by setting the static property directly
            <p>
            The static property is checked during construction of the encoding object, it is set to
            true by default.
            </p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.AesEngine">
             an implementation of the AES (Rijndael), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor, they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations, 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each, for a total of 2Kbytes,
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first.
            
             The slowest version uses no static tables at all and computes the values in each round.
             </p>
             <p>
             This file contains the middle performance version with 2Kbytes of static tables for round precomputation.
             </p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IBlockCipher">
            <remarks>Base interface for a symmetric key block cipher.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="outBuf">The output buffer.</param>
            <param name="outOff">The offset into <paramref>outBuf</paramref> to write the output block.</param>
            <exception cref="T:LibOrg.BouncyCastle.Crypto.DataLengthException">If input block is wrong size, or outBuf too small.</exception>
            <returns>The number of bytes processed and produced.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IBlockCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.IBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.IBlockCipher.IsPartialBlockOkay">
            <summary>Indicates whether this cipher can handle partial blocks.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.AesEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.AesEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.AesEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.AesFastEngine">
             an implementation of the AES (Rijndael)), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor), they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations), 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each), for a total of 2Kbytes),
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first
            
             The slowest version uses no static tables at all and computes the values in each round
             </p>
             <p>
             This file contains the fast version with 8Kbytes of static tables for round precomputation
             </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.AesFastEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.AesFastEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.AesFastEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.AesLightEngine">
             an implementation of the AES (Rijndael), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor, they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations, 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each, for a total of 2Kbytes,
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first
            
             The slowest version uses no static tables at all and computes the values
             in each round.
             </p>
             <p>
             This file contains the slowest performance version with no static tables
             for round precomputation, but it has the smallest foot print.
             </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.AesLightEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.AesLightEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.AesLightEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.AesWrapEngine">
            <remarks>
            An implementation of the AES Key Wrapper from the NIST Key Wrap Specification.
            <p/>
            For further details see: <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine">
            <remarks>
            An implementation of the AES Key Wrapper from the NIST Key Wrap
            Specification as described in RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc3394.txt">http://www.ietf.org/rfc/rfc3394.txt</a>
            and  <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.IWrapper.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.BlowfishEngine">
            A class that provides Blowfish key encryption operations,
            such as encoding data and generating keys.
            All the algorithms herein are from Applied Cryptography
            and implement a simplified cryptography interface.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.BlowfishEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a Blowfish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.BlowfishEngine.ProcessTable(System.UInt32,System.UInt32,System.UInt32[])">
            apply the encryption cycle to each value pair in the table.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.BlowfishEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Encrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.BlowfishEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.CamelliaEngine">
            Camellia - based on RFC 3713.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.CamelliaLightEngine">
            Camellia - based on RFC 3713, smaller implementation, about half the size of CamelliaEngine.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.CamelliaWrapEngine">
            <remarks>
            An implementation of the Camellia key wrapper based on RFC 3657/RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc3657.txt">http://www.ietf.org/rfc/rfc3657.txt</a>.
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.Cast5Engine">
             A class that provides CAST key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC's
            
             RFC2144 - Cast5 (64bit block, 40-128bit key)
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast5Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a CAST cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast5Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast5Engine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast5Engine.F1(System.UInt32,System.UInt32,System.Int32)">
             The first of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast5Engine.F2(System.UInt32,System.UInt32,System.Int32)">
             The second of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast5Engine.F3(System.UInt32,System.UInt32,System.Int32)">
             The third of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast5Engine.CAST_Encipher(System.UInt32,System.UInt32,System.UInt32[])">
             Does the 16 rounds to encrypt the block.
            
             @param L0    the LH-32bits of the plaintext block
             @param R0    the RH-32bits of the plaintext block
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.Cast6Engine">
             A class that provides CAST6 key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC
            
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast6Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast6Engine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast6Engine.CAST_Encipher(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
             Does the 12 quad rounds rounds to encrypt the block.
            
             @param A    the 00-31  bits of the plaintext block
             @param B    the 32-63  bits of the plaintext block
             @param C    the 64-95  bits of the plaintext block
             @param D    the 96-127 bits of the plaintext block
             @param result the resulting ciphertext
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Cast6Engine.CAST_Decipher(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
             Does the 12 quad rounds rounds to decrypt the block.
            
             @param A    the 00-31  bits of the ciphertext block
             @param B    the 32-63  bits of the ciphertext block
             @param C    the 64-95  bits of the ciphertext block
             @param D    the 96-127 bits of the ciphertext block
             @param result the resulting plaintext
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.DesEdeEngine">
            <remarks>A class that provides a basic DESede (or Triple DES) engine.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.DesEngine">
            <remarks>A class that provides a basic DES engine.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.DesEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a DES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.DesEngine.bytebit">
            what follows is mainly taken from "Applied Cryptography", by
            Bruce Schneier, however it also bears great resemblance to Richard
            Outerbridge's D3DES...
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.DesEngine.GenerateWorkingKey(System.Boolean,System.Byte[])">
             Generate an integer based working key based on our secret key
             and what we processing we are planning to do.
            
             Acknowledgements for this routine go to James Gillogly and Phil Karn.
                     (whoever, and wherever they are!).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.DesEngine.DesFunc(System.Int32[],System.Byte[],System.Int32,System.Byte[],System.Int32)">
            the DES engine.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.DesEdeEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a DESede cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine">
                * Wrap keys according to
                * <a href="http://www.ietf.org/internet-drafts/draft-ietf-smime-key-wrap-01.txt">
                * draft-ietf-smime-key-wrap-01.txt</a>.
                * <p>
                * Note:
                * <ul>
                * <li>this is based on a draft, and as such is subject to change - don't use this class for anything requiring long term storage.</li>
                * <li>if you are using this to wrap triple-des keys you need to set the
                * parity bits on the key and, if it's a two-key triple-des key, pad it
                * yourself.</li>
                * </ul>
            	* </p>
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.engine">
            Field engine 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.param">
            Field param 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.iv">
            Field iv 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.ElGamalEngine">
            this does your basic ElGamal algorithm.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.ElGamalEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the ElGamal engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary ElGamal key parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.ElGamalEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For ElGamal this is always one byte less than the size of P on
             encryption, and twice the length as the size of P on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.ElGamalEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For ElGamal this is always one byte less than the size of P on
             decryption, and twice the length as the size of P on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.ElGamalEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic ElGamal algorithm.
            
             @param in the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param length the length of the data to be processed.
             @return the result of the ElGamal process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.Gost28147Engine">
            implementation of GOST 28147-89
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Gost28147Engine.#ctor">
            standard constructor.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Gost28147Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise an Gost28147 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Gost28147Engine.GetSBox(System.String)">
            Return the S-Box associated with SBoxName
            @param sBoxName name of the S-Box
            @return byte array representing the S-Box
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.HC128Engine">
             HC-128 is a software-efficient stream cipher created by Hongjun Wu. It
             generates keystream from a 128-bit secret key and a 128-bit initialization
             vector.
             <p>
             http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc128_p3.pdf
             </p><p>
             It is a third phase candidate in the eStream contest, and is patent-free.
             No attacks are known as of today (April 2007). See
            
             http://www.ecrypt.eu.org/stream/hcp3.html
             </p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IStreamCipher">
            <summary>The interface stream ciphers conform to.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IStreamCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
            <exception cref="T:System.ArgumentException">
            If the parameters argument is inappropriate.
            </exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IStreamCipher.ReturnByte(System.Byte)">
            <summary>encrypt/decrypt a single byte returning the result.</summary>
            <param name="input">the byte to be processed.</param>
            <returns>the result of processing the input byte.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process a block of bytes from <c>input</c> putting the result into <c>output</c>.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inOff">
            The offset into <c>input</c> where the data to be processed starts.
            </param>
            <param name="length">The number of bytes to be processed.</param>
            <param name="output">The output buffer the processed bytes go into.</param>
            <param name="outOff">
            The offset into <c>output</c> the processed data starts at.
            </param>
            <exception cref="T:LibOrg.BouncyCastle.Crypto.DataLengthException">If the output buffer is too small.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IStreamCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.IStreamCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.HC128Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise a HC-128 cipher.
            
             @param forEncryption whether or not we are for encryption. Irrelevant, as
                                  encryption and decryption are the same.
             @param params        the parameters required to set up the cipher.
             @throws ArgumentException if the params argument is
                                              inappropriate (ie. the key is not 128 bit long).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.HC256Engine">
            HC-256 is a software-efficient stream cipher created by Hongjun Wu. It 
            generates keystream from a 256-bit secret key and a 256-bit initialization 
            vector.
            <p>
            http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc256_p3.pdf
            </p><p>
            Its brother, HC-128, is a third phase candidate in the eStream contest.
            The algorithm is patent-free. No attacks are known as of today (April 2007). 
            See
            
            http://www.ecrypt.eu.org/stream/hcp3.html
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.HC256Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise a HC-256 cipher.
            
             @param forEncryption whether or not we are for encryption. Irrelevant, as
                                  encryption and decryption are the same.
             @param params        the parameters required to set up the cipher.
             @throws ArgumentException if the params argument is
                                              inappropriate (ie. the key is not 256 bit long).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.IesEngine">
            support class for constructing intergrated encryption ciphers
            for doing basic message exchanges on top of key agreement ciphers
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.IesEngine.#ctor(LibOrg.BouncyCastle.Crypto.IBasicAgreement,LibOrg.BouncyCastle.Crypto.IDerivationFunction,LibOrg.BouncyCastle.Crypto.IMac)">
             set up for use with stream mode, where the key derivation function
             is used to provide a stream of bytes to xor with the message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.IesEngine.#ctor(LibOrg.BouncyCastle.Crypto.IBasicAgreement,LibOrg.BouncyCastle.Crypto.IDerivationFunction,LibOrg.BouncyCastle.Crypto.IMac,LibOrg.BouncyCastle.Crypto.BufferedBlockCipher)">
             set up for use in conjunction with a block cipher to handle the
             message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
             @param cipher the cipher to used for encrypting the message
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.IesEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters,LibOrg.BouncyCastle.Crypto.ICipherParameters,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the encryptor.
            
             @param forEncryption whether or not this is encryption/decryption.
             @param privParam our private key parameters
             @param pubParam the recipient's/sender's public key parameters
             @param param encoding and derivation parameters.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.IsaacEngine">
            Implementation of Bob Jenkin's ISAAC (Indirection Shift Accumulate Add and Count).
            see: http://www.burtleburtle.net/bob/rand/isaacafa.html
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.IsaacEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise an ISAAC cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.NaccacheSternEngine">
            NaccacheStern Engine. For details on this cipher, please see
            http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NaccacheSternEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initializes this algorithm. Must be called before all other Functions.
            
             @see LibOrg.BouncyCastle.crypto.AsymmetricBlockCipher#init(bool,
                  LibOrg.BouncyCastle.crypto.CipherParameters)
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NaccacheSternEngine.GetInputBlockSize">
             Returns the input block size of this algorithm.
            
             @see LibOrg.BouncyCastle.crypto.AsymmetricBlockCipher#GetInputBlockSize()
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NaccacheSternEngine.GetOutputBlockSize">
             Returns the output block size of this algorithm.
            
             @see LibOrg.BouncyCastle.crypto.AsymmetricBlockCipher#GetOutputBlockSize()
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NaccacheSternEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single Block using the Naccache-Stern algorithm.
            
             @see LibOrg.BouncyCastle.crypto.AsymmetricBlockCipher#ProcessBlock(byte[],
                  int, int)
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NaccacheSternEngine.Encrypt(LibOrg.BouncyCastle.Math.BigInteger)">
             Encrypts a BigInteger aka Plaintext with the public key.
            
             @param plain
                        The BigInteger to encrypt
             @return The byte[] representation of the encrypted BigInteger (i.e.
                     crypted.toByteArray())
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NaccacheSternEngine.AddCryptedBlocks(System.Byte[],System.Byte[])">
             Adds the contents of two encrypted blocks mod sigma
            
             @param block1
                        the first encrypted block
             @param block2
                        the second encrypted block
             @return encrypt((block1 + block2) mod sigma)
             @throws InvalidCipherTextException
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NaccacheSternEngine.ProcessData(System.Byte[])">
             Convenience Method for data exchange with the cipher.
            
             Determines blocksize and splits data to blocksize.
            
             @param data the data to be processed
             @return the data after it went through the NaccacheSternEngine.
             @throws InvalidCipherTextException
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NaccacheSternEngine.chineseRemainder(System.Collections.IList,System.Collections.IList)">
             Computes the integer x that is expressed through the given primes and the
             congruences with the chinese remainder theorem (CRT).
            
             @param congruences
                        the congruences c_i
             @param primes
                        the primes p_i
             @return an integer x for that x % p_i == c_i
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.NoekeonEngine">
            A Noekeon engine, using direct-key mode.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NoekeonEngine.#ctor">
            Create an instance of the Noekeon encryption algorithm
            and set some defaults
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NoekeonEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.NoekeonEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.NullEngine">
            The no-op engine that just copies bytes through, irrespective of whether encrypting and decrypting.
            Provided for the sake of completeness.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RC2Engine">
            an implementation of RC2 as described in RFC 2268
                 "A Description of the RC2(r) Encryption Algorithm" R. Rivest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC2Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC2 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC2Engine.RotateWordLeft(System.Int32,System.Int32)">
            return the result rotating the 16 bit number in x left by y
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine">
            Wrap keys according to RFC 3217 - RC2 mechanism
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.engine">
            Field engine 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.parameters">
            Field param 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.iv">
            Field iv 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Engines.RC2WrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC4Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC4 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RC532Engine">
            The specification for RC5 came from the <code>RC5 Encryption Algorithm</code>
            publication in RSA CryptoBytes, Spring of 1995.
            <em>http://www.rsasecurity.com/rsalabs/cryptobytes</em>.
            <p>
            This implementation has a word size of 32 bits.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC532Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC532Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC532Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC532Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given block starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param  in     in byte buffer containing data to encrypt
             @param  inOff  offset into src buffer
             @param  out     out buffer where encrypted data is written
             @param  outOff  offset into out buffer
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC532Engine.RotateLeft(System.Int32,System.Int32)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(32)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % 32
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC532Engine.RotateRight(System.Int32,System.Int32)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(32)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % 32
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RC564Engine">
            The specification for RC5 came from the <code>RC5 Encryption Algorithm</code>
            publication in RSA CryptoBytes, Spring of 1995.
            <em>http://www.rsasecurity.com/rsalabs/cryptobytes</em>.
            <p>
            This implementation is set to work with a 64 bit word size.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC564Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC564Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC5-64 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC564Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC564Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given block starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param  in      in byte buffer containing data to encrypt
             @param  inOff   offset into src buffer
             @param  out     out buffer where encrypted data is written
             @param  outOff  offset into out buffer
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC564Engine.RotateLeft(System.Int64,System.Int64)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % wordSize
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC564Engine.RotateRight(System.Int64,System.Int64)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RC6Engine">
            An RC6 engine.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC6Engine.#ctor">
            Create an instance of the RC6 encryption algorithm
            and set some defaults
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC6Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC6Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param inKey the key to be used
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC6Engine.RotateLeft(System.Int32,System.Int32)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RC6Engine.RotateRight(System.Int32,System.Int32)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.Rfc3211WrapEngine">
            an implementation of the RFC 3211 Key Wrap
            Specification.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine">
            an implementation of Rijndael, based on the documentation and reference implementation
            by Paulo Barreto, Vincent Rijmen, for v2.0 August '99.
            <p>
            Note: this implementation is based on information prior to readonly NIST publication.
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.Mul0x2(System.Int32)">
            multiply two elements of GF(2^m)
            needed for MixColumn and InvMixColumn
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.KeyAddition(System.Int64[])">
            xor corresponding text input and round key input bytes
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.ShiftRow(System.Byte[])">
            Row 0 remains unchanged
            The other three rows are shifted a variable amount
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.Substitution(System.Byte[])">
            Replace every byte of the input by the byte at that place
            in the nonlinear S-box
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.MixColumn">
            Mix the bytes of every column in a linear way
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.InvMixColumn">
            Mix the bytes of every column in a linear way
            This is the opposite operation of Mixcolumn
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.GenerateWorkingKey(System.Byte[])">
            Calculate the necessary round keys
            The number of calculations depends on keyBits and blockBits
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.#ctor(System.Int32)">
             basic constructor - set the cipher up for a given blocksize
            
             @param blocksize the blocksize in bits, must be 128, 192, or 256.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RijndaelEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a Rijndael cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindedEngine">
            this does your basic RSA algorithm with blinding
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindedEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindedEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindedEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindedEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindingEngine">
            This does your basic RSA Chaum's blinding and unblinding as outlined in
            "Handbook of Applied Cryptography", page 475. You need to use this if you are
            trying to get another party to generate signatures without them being aware
            of the message they are signing.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindingEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the blinding engine.
            
             @param forEncryption true if we are encrypting (blinding), false otherwise.
             @param param         the necessary RSA key parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindingEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindingEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaBlindingEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the RSA blinding algorithm.
            
             @param in    the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @throws DataLengthException the input block is too large.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RsaCoreEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaCoreEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaCoreEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaCoreEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.RsaEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.RsaEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.Salsa20Engine">
            Implementation of Daniel J. Bernstein's Salsa20 stream cipher, Snuffle 2005
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.Salsa20Engine.StateSize">
            Constants 
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.Salsa20Engine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a Salsa20 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.SeedEngine">
            Implementation of the SEED algorithm as described in RFC 4009
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.SeedWrapEngine">
            <remarks>
            An implementation of the SEED key wrapper based on RFC 4010/RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc4010.txt">http://www.ietf.org/rfc/rfc4010.txt</a>.
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine">
                * Serpent is a 128-bit 32-round block cipher with variable key lengths,
                * including 128, 192 and 256 bit keys conjectured to be at least as
                * secure as three-key triple-DES.
                * <p>
                * Serpent was designed by Ross Anderson, Eli Biham and Lars Knudsen as a
                * candidate algorithm for the NIST AES Quest.>
            	* </p>
                * <p>
                * For full details see the <a href="http://www.cl.cam.ac.uk/~rja14/serpent.html">The Serpent home page</a>
            	* </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a Serpent cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.MakeWorkingKey(System.Byte[])">
             Expand a user-supplied key material into a session key.
            
             @param key  The user-key bytes (multiples of 4) to use.
             @exception ArgumentException
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt one block of plaintext.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt one block of ciphertext.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Sb0(System.Int32,System.Int32,System.Int32,System.Int32)">
            S0 - { 3, 8,15, 1,10, 6, 5,11,14,13, 4, 2, 7, 0, 9,12 } - 15 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Ib0(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvSO - {13, 3,11, 0,10, 6, 5,12, 1,14, 4, 7,15, 9, 8, 2 } - 15 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Sb1(System.Int32,System.Int32,System.Int32,System.Int32)">
            S1 - {15,12, 2, 7, 9, 0, 5,10, 1,11,14, 8, 6,13, 3, 4 } - 14 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Ib1(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS1 - { 5, 8, 2,14,15, 6,12, 3,11, 4, 7, 9, 1,13,10, 0 } - 14 steps.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Sb2(System.Int32,System.Int32,System.Int32,System.Int32)">
            S2 - { 8, 6, 7, 9, 3,12,10,15,13, 1,14, 4, 0,11, 5, 2 } - 16 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Ib2(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS2 - {12, 9,15, 4,11,14, 1, 2, 0, 3, 6,13, 5, 8,10, 7 } - 16 steps.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Sb3(System.Int32,System.Int32,System.Int32,System.Int32)">
            S3 - { 0,15,11, 8,12, 9, 6, 3,13, 1, 2, 4,10, 7, 5,14 } - 16 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Ib3(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS3 - { 0, 9,10, 7,11,14, 6,13, 3, 5,12, 2, 4, 8,15, 1 } - 15 terms
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Sb4(System.Int32,System.Int32,System.Int32,System.Int32)">
            S4 - { 1,15, 8, 3,12, 0,11, 6, 2, 5, 4,10, 9,14, 7,13 } - 15 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Ib4(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS4 - { 5, 0, 8, 3,10, 9, 7,14, 2,12,11, 6, 4,15,13, 1 } - 15 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Sb5(System.Int32,System.Int32,System.Int32,System.Int32)">
            S5 - {15, 5, 2,11, 4,10, 9,12, 0, 3,14, 8,13, 6, 7, 1 } - 16 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Ib5(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS5 - { 8,15, 2, 9, 4, 1,13,14,11, 6, 5, 3, 7,12,10, 0 } - 16 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Sb6(System.Int32,System.Int32,System.Int32,System.Int32)">
            S6 - { 7, 2,12, 5, 8, 4, 6,11,14, 9, 1,15,13, 3,10, 0 } - 15 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Ib6(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS6 - {15,10, 1,13, 5, 3, 6, 0, 4, 9,14, 7, 2,12, 8,11 } - 15 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Sb7(System.Int32,System.Int32,System.Int32,System.Int32)">
            S7 - { 1,13,15, 0,14, 8, 2,11, 7, 4,12,10, 9, 3, 5, 6 } - 16 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.Ib7(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS7 - { 3, 0, 6,13, 9,14,15, 8, 5,12,11, 7,10, 1, 4, 2 } - 17 terms.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.LT">
            Apply the linear transformation to the register set.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SerpentEngine.InverseLT">
            Apply the inverse of the linear transformation to the register set.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.SkipjackEngine">
            a class that provides a basic SKIPJACK engine.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SkipjackEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a SKIPJACK cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SkipjackEngine.G(System.Int32,System.Int32)">
            The G permutation
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.SkipjackEngine.H(System.Int32,System.Int32)">
            the inverse of the G permutation.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.TeaEngine">
            An TEA engine.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.TeaEngine.#ctor">
            Create an instance of the TEA encryption algorithm
            and set some defaults
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.TeaEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.TeaEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.TwofishEngine">
             A class that provides Twofish encryption operations.
            
             This Java implementation is based on the Java reference
             implementation provided by Bruce Schneier and developed
             by Raif S. Naffah.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.TwofishEngine.P_00">
            Define the fixed p0/p1 permutations used in keyed S-box lookup.
            By changing the following constant definitions, the S-boxes will
            automatically Get changed in the Twofish engine.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Engines.TwofishEngine.gSubKeys">
            gSubKeys[] and gSBox[] are eventually used in the
            encryption and decryption methods.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.TwofishEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise a Twofish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.TwofishEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
             The input will be an exact multiple of our blocksize.
            
             encryptBlock uses the pre-calculated gSBox[] and subKey[]
             arrays.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.TwofishEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.TwofishEngine.RS_MDS_Encode(System.Int32,System.Int32)">
             Use (12, 8) Reed-Solomon code over GF(256) to produce
             a key S-box 32-bit entity from 2 key material 32-bit
             entities.
            
             @param    k0 first 32-bit entity
             @param    k1 second 32-bit entity
             @return     Remainder polynomial Generated using RS code
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.TwofishEngine.RS_rem(System.Int32)">
                    * Reed-Solomon code parameters: (12,8) reversible code:
            		* <p>
                    * <pre>
                    * G(x) = x^4 + (a+1/a)x^3 + ax^2 + (a+1/a)x + 1
                    * </pre>
                    * where a = primitive root of field generator 0x14D
            		* </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.VmpcEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            initialise a VMPC cipher.
            
            @param forEncryption
               whether or not we are for encryption.
            @param params
               the parameters required to set up the cipher.
            @exception ArgumentException
               if the params argument is inappropriate.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Engines.XteaEngine">
            An XTEA engine.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.XteaEngine.#ctor">
            Create an instance of the TEA encryption algorithm
            and set some defaults
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.XteaEngine.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Engines.XteaEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator">
            Basic KDF generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on ISO 18033/P1363a.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.#ctor(System.Int32,LibOrg.BouncyCastle.Crypto.IDigest)">
             Construct a KDF Parameters generator.
            
             @param counterStart value of counter.
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes generated from
             the derivation function.
            
             @throws ArgumentException if the size of the request will cause an overflow.
             @throws DataLengthException if the out buffer is too small.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.Digest">
            return the underlying digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.DesKeyGenerator.engineInit(LibOrg.BouncyCastle.Crypto.KeyGenerationParameters)">
             initialise the key generator - if strength is set to zero
             the key generated will be 64 bits in size, otherwise
             strength can be 64 or 56 bits (if you don't count the parity bits).
            
             @param param the parameters to be used for key generation
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.DesEdeKeyGenerator.engineInit(LibOrg.BouncyCastle.Crypto.KeyGenerationParameters)">
             initialise the key generator - if strength is set to zero
             the key Generated will be 192 bits in size, otherwise
             strength can be 128 or 192 (or 112 or 168 if you don't count
             parity bits), depending on whether you wish to do 2-key or 3-key
             triple DES.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.DHBasicKeyPairGenerator">
             a basic Diffie-Hellman key pair generator.
            
             This generates keys consistent for use with the basic algorithm for
             Diffie-Hellman.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator">
            interface that a public/private key pair generator should conform to.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator.Init(LibOrg.BouncyCastle.Crypto.KeyGenerationParameters)">
             intialise the key pair generator.
            
             @param the parameters the key pair is to be initialised with.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator.GenerateKeyPair">
             return an AsymmetricCipherKeyPair containing the Generated keys.
            
             @return an AsymmetricCipherKeyPair containing the Generated keys.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.DHKeyPairGenerator">
             a Diffie-Hellman key pair generator.
            
             This generates keys consistent for use in the MTI/A0 key agreement protocol
             as described in "Handbook of Applied Cryptography", Pages 516-519.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.DHParametersGenerator.GenerateParameters">
            which Generates the p and g values from the given parameters,
            returning the DHParameters object.
            <p>
            Note: can take a while...</p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.DsaKeyPairGenerator">
                 * a DSA key pair generator.
                 *
                 * This Generates DSA keys in line with the method described
            	 * in <i>FIPS 186-3 B.1 FFC Key Pair Generation</i>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.DsaParametersGenerator">
            Generate suitable parameters for DSA, in line with FIPS 186-2, or FIPS 186-3.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.DsaParametersGenerator.Init(System.Int32,System.Int32,LibOrg.BouncyCastle.Security.SecureRandom)">
             initialise the key generator.
            
             @param size size of the key (range 2^512 -> 2^1024 - 64 bit increments)
             @param certainty measure of robustness of prime (for FIPS 186-2 compliance this should be at least 80).
             @param random random byte source.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.DsaParametersGenerator.Init(LibOrg.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters)">
             Initialise the key generator for DSA 2.
             <p>
                 Use this init method if you need to generate parameters for DSA 2 keys.
             </p>
            
             @param params  DSA 2 key generation parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.DsaParametersGenerator.GenerateParameters">
            which Generates the p and g values from the given parameters,
            returning the DsaParameters object.
            <p>
            Note: can take a while...</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.DsaParametersGenerator.GenerateParameters_FIPS186_3">
            generate suitable parameters for DSA, in line with
            <i>FIPS 186-3 A.1 Generation of the FFC Primes p and q</i>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.ECKeyPairGenerator.GenerateKeyPair">
            Given the domain parameters this routine Generates an EC key
            pair in accordance with X9.62 section 5.2.1 pages 26, 27.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.ElGamalKeyPairGenerator">
            a ElGamal key pair generator.
            <p>
            This Generates keys consistent for use with ElGamal as described in
            page 164 of "Handbook of Applied Cryptography".</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.ElGamalParametersGenerator.GenerateParameters">
                     * which Generates the p and g values from the given parameters,
                     * returning the ElGamalParameters object.
                     * <p>
                     * Note: can take a while...
            		 * </p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.Gost3410KeyPairGenerator">
            a GOST3410 key pair generator.
            This generates GOST3410 keys in line with the method described
            in GOST R 34.10-94.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator">
            generate suitable parameters for GOST3410.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.Init(System.Int32,System.Int32,LibOrg.BouncyCastle.Security.SecureRandom)">
             initialise the key generator.
            
             @param size size of the key
             @param typeProcedure type procedure A,B = 1;  A',B' - else
             @param random random byte source.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.procedure_C(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            Procedure C
            procedure generates the a value from the given p,q,
            returning the a value.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.GenerateParameters">
            which generates the p , q and a values from the given parameters,
            returning the Gost3410Parameters object.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.Kdf1BytesGenerator">
            KFD2 generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on IEEE P1363/ISO 18033.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Kdf1BytesGenerator.#ctor(LibOrg.BouncyCastle.Crypto.IDigest)">
             Construct a KDF1 byte generator.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.Kdf2BytesGenerator">
            KDF2 generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on IEEE P1363/ISO 18033.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Kdf2BytesGenerator.#ctor(LibOrg.BouncyCastle.Crypto.IDigest)">
             Construct a KDF2 bytes generator. Generates key material
             according to IEEE P1363 or ISO 18033 depending on the initialisation.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator">
            Generator for MGF1 as defined in Pkcs 1v2
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.#ctor(LibOrg.BouncyCastle.Crypto.IDigest)">
            @param digest the digest to be used as the source of Generated bytes
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.ItoOSP(System.Int32,System.Byte[])">
            int to octet string.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes Generated from
             the derivation function.
            
             @throws DataLengthException if the out buffer is too small.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.Digest">
            return the underlying digest.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator">
             Key generation parameters for NaccacheStern cipher. For details on this cipher, please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator.permuteList(System.Collections.IList,LibOrg.BouncyCastle.Security.SecureRandom)">
             Generates a permuted ArrayList from the original one. The original List
             is not modified
            
             @param arr
                        the ArrayList to be permuted
             @param rand
                        the source of Randomness for permutation
             @return a new IList with the permuted elements.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator.findFirstPrimes(System.Int32)">
             Finds the first 'count' primes starting with 3
            
             @param count
                        the number of primes to find
             @return a vector containing the found primes as Integer
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator">
            Generator for PBE derived keys and ivs as usd by OpenSSL.
            <p>
            The scheme is a simple extension of PKCS 5 V2.0 Scheme 1 using MD5 with an
            iteration count of 1.
            </p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator">
            super class for all Password Based Encyrption (Pbe) parameter generator classes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.#ctor">
            base constructor.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.Init(System.Byte[],System.Byte[],System.Int32)">
             initialise the Pbe generator.
            
             @param password the password converted into bytes (see below).
             @param salt the salt to be mixed with the password.
             @param iterationCount the number of iterations the "mixing" function
             is to be applied for.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.GetPassword">
             return the password byte array.
            
             @return the password byte array.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.GetSalt">
             return the salt byte array.
            
             @return the salt byte array.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate derived parameters for a key of length keySize.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate derived parameters for a key of length keySize, and
             an initialisation vector (IV) of length ivSize.
            
             @param keySize the length, in bits, of the key required.
             @param ivSize the length, in bits, of the iv required.
             @return a parameters object representing a key and an IV.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate derived parameters for a key of length keySize, specifically
             for use with a MAC.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs5PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             Pkcs5 (ascii, no padding)
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs5PasswordToUtf8Bytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             PKCS5 (UTF-8, no padding)
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs12PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             Pkcs12 (unicode, big endian, 2 zero pad bytes at the end).
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.PbeParametersGenerator.IterationCount">
             return the iteration count.
            
             @return the iteration count.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.#ctor">
            Construct a OpenSSL Parameters generator. 
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.Init(System.Byte[],System.Byte[])">
            Initialise - note the iteration count for this algorithm is fixed at 1.
            
            @param password password to use.
            @param salt salt to use.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedKey(System.Int32)">
            the derived key function, the ith hash of the password and the salt.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
             @exception ArgumentException if keySize + ivSize is larger than the base hash size.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 12 V1.0.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-12/index.html">
            RSA's Pkcs12 Page</a>
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.#ctor(LibOrg.BouncyCastle.Crypto.IDigest)">
             Construct a Pkcs 12 Parameters generator.
            
             @param digest the digest to be used as the source of derived keys.
             @exception ArgumentException if an unknown digest is passed in.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.Adjust(System.Byte[],System.Int32,System.Byte[])">
            add a + b + 1, returning the result in a. The a value is treated
            as a BigInteger of length (b.Length * 8) bits. The result is
            modulo 2^b.Length in case of overflow.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedKey(System.Int32,System.Int32)">
            generation of a derived key ala Pkcs12 V1.0.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 5 V2.0 Scheme 1.
            Note this generator is limited to the size of the hash produced by the
            digest used to drive it.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-5/index.html">
            RSA's Pkcs5 Page</a>
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.#ctor(LibOrg.BouncyCastle.Crypto.IDigest)">
             Construct a Pkcs 5 Scheme 1 Parameters generator.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedKey">
            the derived key function, the ith hash of the mPassword and the mSalt.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the mPassword, mSalt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the mPassword, mSalt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
             @exception ArgumentException if keySize + ivSize is larger than the base hash size.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the mPassword,
             mSalt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 5 V2.0 Scheme 2.
            This generator uses a SHA-1 HMac as the calculation function.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-5/index.html">
            RSA's Pkcs5 Page</a></p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.#ctor">
            construct a Pkcs5 Scheme 2 Parameters generator.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator">
            Generate a random factor suitable for use with RSA blind signatures
            as outlined in Chaum's blinding and unblinding as outlined in
            "Handbook of Applied Cryptography", page 475.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator.Init(LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the factor generator
            
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator.GenerateBlindingFactor">
             Generate a suitable blind factor for the public key the generator was initialised with.
            
             @return a random blind factor
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator">
            an RSA key pair generator.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IDsa">
            interface for classes implementing the Digital Signature Algorithm
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IDsa.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the signer for signature generation or signature
             verification.
            
             @param forSigning true if we are generating a signature, false
             otherwise.
             @param param key parameters for signature generation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IDsa.GenerateSignature(System.Byte[])">
             sign the passed in message (usually the output of a hash function).
            
             @param message the message to be signed.
             @return two big integers representing the r and s values respectively.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IDsa.VerifySignature(System.Byte[],LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
             verify the message message against the signature values r and s.
            
             @param message the message that was supposed to have been signed.
             @param r the r signature value.
             @param s the s signature value.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.IMac">
            The base interface for implementations of message authentication codes (MACs).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IMac.Init(LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the MAC.
            
             @param param the key and other data required by the MAC.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IMac.GetMacSize">
             Return the block size for this MAC (in bytes).
            
             @return the block size for this MAC in bytes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IMac.Update(System.Byte)">
             add a single byte to the mac for processing.
            
             @param in the byte to be processed.
             @exception InvalidOperationException if the MAC is not initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            @param in the array containing the input.
            @param inOff the index in the array the data begins at.
            @param len the length of the input starting at inOff.
            @exception InvalidOperationException if the MAC is not initialised.
            @exception DataLengthException if there isn't enough data in in.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IMac.DoFinal(System.Byte[],System.Int32)">
            Compute the final stage of the MAC writing the output to the out
            parameter.
            <p>
            doFinal leaves the MAC in the same state it was after the last init.
            </p>
            @param out the array the MAC is to be output to.
            @param outOff the offset into the out buffer the output is to start at.
            @exception DataLengthException if there isn't enough space in out.
            @exception InvalidOperationException if the MAC is not initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.IMac.Reset">
            Reset the MAC. At the end of resetting the MAC should be in the
            in the same state it was after the last init (if there was one).
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.IMac.AlgorithmName">
             Return the name of the algorithm the MAC implements.
            
             @return the name of the algorithm the MAC implements.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.InvalidCipherTextException">
            this exception is thrown whenever we find something we don't expect in a
            message.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.InvalidCipherTextException.#ctor">
            base constructor.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.InvalidCipherTextException.#ctor(System.String)">
             create a InvalidCipherTextException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.ISigner.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.ISigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.ISigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.ISigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.ISigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.ISigner.Reset">
            reset the internal state
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.ISigner.AlgorithmName">
             Return the name of the algorithm the signer implements.
            
             @return the name of the algorithm the signer implements.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.ISignerWithRecovery">
            Signer with message recovery.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.ISignerWithRecovery.HasFullMessage">
             Returns true if the signer has recovered the full message as
             part of signature verification.
            
             @return true if full message recovered.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.ISignerWithRecovery.GetRecoveredMessage">
             Returns a reference to what message was recovered (if any).
            
             @return full/partial message, null if nothing.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.ISignerWithRecovery.UpdateWithRecoveredMessage(System.Byte[])">
             Perform an update with the recovered message before adding any other data. This must
             be the first update method called, and calling it will result in the signer assuming
             that further calls to update will include message content past what is recoverable.
            
             @param signature the signature that we are in the process of verifying.
             @throws IllegalStateException
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.KeyGenerationParameters">
            The base class for parameters to key generators.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.KeyGenerationParameters.#ctor(LibOrg.BouncyCastle.Security.SecureRandom,System.Int32)">
             initialise the generator with a source of randomness
             and a strength (in bits).
            
             @param random the random byte source.
             @param strength the size, in bits, of the keys we want to produce.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.KeyGenerationParameters.Random">
             return the random source associated with this
             generator.
            
             @return the generators random source.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.KeyGenerationParameters.Strength">
             return the bit strength for keys produced by this generator,
            
             @return the strength of the keys this generator produces (in bits).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Macs.CbcBlockCipherMac">
            standard CBC Block Cipher MAC - if no padding is specified the default of
            pad of zeroes is used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32,LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Macs.MacCFBBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Int32)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CFB mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param cfbBitSize the size of an output block produced by the CFB mode.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Int32,LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CFB mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param cfbBitSize the size of an output block produced by the CFB mode.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding a padding to be used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Macs.CMac">
            CMAC - as specified at www.nuee.nagoya-u.ac.jp/labs/tiwata/omac/omac.html
            <p>
            CMAC is analogous to OMAC1 - see also en.wikipedia.org/wiki/CMAC
            </p><p>
            CMAC is a NIST recomendation - see 
            csrc.nist.gov/CryptoToolkit/modes/800-38_Series_Publications/SP800-38B.pdf
            </p><p>
            CMAC/OMAC1 is a blockcipher-based message authentication code designed and
            analyzed by Tetsu Iwata and Kaoru Kurosawa.
            </p><p>
            CMAC/OMAC1 is a simple variant of the CBC MAC (Cipher Block Chaining Message 
            Authentication Code). OMAC stands for One-Key CBC MAC.
            </p><p>
            It supports 128- or 64-bits block ciphers, with any key size, and returns
            a MAC with dimension less or equal to the block size of the underlying 
            cipher.
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             create a standard MAC based on a CBC block cipher (64 or 128 bit block).
             This will produce an authentication code the length of the block size
             of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CMac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
             create a standard MAC based on a block cipher with the size of the
             MAC been given in bits.
             <p/>
             Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
             or 16 bits if being used as a data authenticator (FIPS Publication 113),
             and in general should be less than the size of the block cipher as it reduces
             the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            
             @param cipher        the cipher to be used as the basis of the MAC generation.
             @param macSizeInBits the size of the MAC in bits, must be a multiple of 8 and @lt;= 128.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.CMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Macs.Gost28147Mac">
            implementation of GOST 28147-89 MAC
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Macs.HMac">
             HMAC implementation based on RFC2104
            
             H(K XOR opad, H(K XOR ipad, text))
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.HMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac">
             DES based CBC Block Cipher MAC according to ISO9797, algorithm 3 (ANSI X9.19 Retail MAC)
            
             This could as well be derived from CBCBlockCipherMac, but then the property mac in the base
             class must be changed to protected
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             create a Retail-MAC based on a CBC block cipher. This will produce an
             authentication code of the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation. This must
             be DESEngine.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
             create a Retail-MAC based on a CBC block cipher. This will produce an
             authentication code of the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
            create a Retail-MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses single DES CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32,LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses single DES CBC mode as the basis for the
            MAC generation. The final block is decrypted and then encrypted using the
            middle and right part of the key.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Macs.SipHash">
            <summary>
            Implementation of SipHash as specified in "SipHash: a fast short-input PRF", by Jean-Philippe
            Aumasson and Daniel J. Bernstein (https://131002.net/siphash/siphash.pdf).
            </summary>
            <remarks>
            "SipHash is a family of PRFs SipHash-c-d where the integer parameters c and d are the number of
            compression rounds and the number of finalization rounds. A compression round is identical to a
            finalization round and this round function is called SipRound. Given a 128-bit key k and a
            (possibly empty) byte string m, SipHash-c-d returns a 64-bit value..."
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.SipHash.#ctor">
            <summary>SipHash-2-4</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Macs.SipHash.#ctor(System.Int32,System.Int32)">
            <summary>SipHash-c-d</summary>
            <param name="c">the number of compression rounds</param>
            <param name="d">the number of finalization rounds</param>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.MaxBytesExceededException">
            <summary>
            This exception is thrown whenever a cipher requires a change of key, iv
            or similar after x amount of bytes enciphered
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher">
            implements Cipher-Block-Chaining (CBC) mode on top of a simple cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of chaining.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher.GetBlockSize">
             return the block size of the underlying cipher.
            
             @return the block size of the underlying cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the decrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Modes.CbcBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CBC".
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.CcmBlockCipher">
            Implements the Counter with Cipher Block Chaining mode (CCM) detailed in
            NIST Special Publication 800-38C.
            <p>
            <b>Note</b>: this mode is a packet mode - it needs all the data up front.
            </p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher">
            <summary>
            A block cipher mode that includes authenticated encryption with a streaming mode
            and optional associated data.</summary>
            <see cref="T:LibOrg.BouncyCastle.Crypto.Parameters.AeadParameters"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <remarks>Parameter can either be an AeadParameters or a ParametersWithIV object.</remarks>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.ProcessAadByte(System.Byte)">
            <summary>Add a single byte to the associated data check.</summary>
            <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
            <param name="input">The byte to be processed.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Add a sequence of bytes to the associated data check.</summary>
            <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
            <param name="inBytes">The input byte array.</param>
            <param name="inOff">The offset into the input array where the data to be processed starts.</param>
            <param name="len">The number of bytes to be processed.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             Encrypt/decrypt a single byte.
            
             @param input the byte to be processed.
             @param outBytes the output buffer the processed byte goes into.
             @param outOff the offset into the output byte array the processed data starts at.
             @return the number of bytes written to out.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             Process a block of bytes from in putting the result into out.
            
             @param inBytes the input byte array.
             @param inOff the offset into the in array where the data to be processed starts.
             @param len the number of bytes to be processed.
             @param outBytes the output buffer the processed bytes go into.
             @param outOff the offset into the output byte array the processed data starts at.
             @return the number of bytes written to out.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Finish the operation either appending or verifying the MAC at the end of the data.
            
             @param outBytes space for any resulting output data.
             @param outOff offset into out to start copying the data at.
             @return number of bytes written into out.
             @throws InvalidOperationException if the cipher is in an inappropriate state.
             @throws InvalidCipherTextException if the MAC fails to match.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetMac">
             Return the value of the MAC associated with the last stream processed.
            
             @return MAC for plaintext data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetUpdateOutputSize(System.Int32)">
             Return the size of the output buffer required for a ProcessBytes
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to ProcessBytes
             with len bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetOutputSize(System.Int32)">
             Return the size of the output buffer required for a ProcessBytes plus a
             DoFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to ProcessBytes and DoFinal
             with len bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Modes.IAeadBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CcmBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CcmBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CcmBlockCipher.GetMac">
             Returns a byte array containing the mac calculated as part of the
             last encrypt or decrypt operation.
            
             @return the last mac calculated.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Modes.CfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.CtsBlockCipher">
            A Cipher Text Stealing (CTS) mode cipher. CTS allows block ciphers to
            be used to produce cipher text which is the same outLength as the plain text.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CtsBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             Create a buffered block cipher that uses Cipher Text Stealing
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CtsBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update of 'length' bytes.
            
             @param length the outLength of the input.
             @return the space required to accommodate a call to update
             with length bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CtsBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of length bytes.
            
             @param length the outLength of the input.
             @return the space required to accommodate a call to update and doFinal
             with length bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CtsBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if neccessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CtsBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param length the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.CtsBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if cipher text decrypts wrongly (in
             case the exception will never Get thrown).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.EaxBlockCipher">
            A Two-Pass Authenticated-Encryption Scheme Optimized for Simplicity and 
            Efficiency - by M. Bellare, P. Rogaway, D. Wagner.
            
            http://www.cs.ucdavis.edu/~rogaway/papers/eax.pdf
            
            EAX is an AEAD scheme based on CTR and OMAC1/CMAC, that uses a single block 
            cipher to encrypt and authenticate data. It's on-line (the length of a 
            message isn't needed to begin processing it), has good performances, it's
            simple and provably secure (provided the underlying block cipher is secure).
            
            Of course, this implementations is NOT thread-safe.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.EaxBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             Constructor that accepts an instance of a block cipher engine.
            
             @param cipher the engine to use
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.GcmBlockCipher">
            <summary>
            Implements the Galois/Counter mode (GCM) detailed in
            NIST Special Publication 800-38D.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.GOfbBlockCipher">
            implements the GOST 28147 OFB counter mode (GCTR).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.GOfbBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             counter mode (must have a 64 bit block size).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.GOfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.GOfbBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param encrypting if true the cipher is initialised for
              encryption, if false for decryption.
             @param parameters the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.GOfbBlockCipher.GetBlockSize">
             return the block size we are operating at (in bytes).
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.GOfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.GOfbBlockCipher.Reset">
            reset the feedback vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Modes.GOfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/GCTR"
             and the block size in bits
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.OcbBlockCipher">
            An implementation of the "work in progress" Internet-Draft <a
            href="http://tools.ietf.org/html/draft-irtf-cfrg-ocb-03">The OCB Authenticated-Encryption
            Algorithm</a>, licensed per:
            
            <blockquote><p><a href="http://www.cs.ucdavis.edu/~rogaway/ocb/license1.pdf">License for
            Open-Source Software Implementations of OCB</a> (Jan 9, 2013) - 'License 1'<br/>
            Under this license, you are authorized to make, use, and distribute open-source software
            implementations of OCB. This license terminates for you if you sue someone over their open-source
            software implementation of OCB claiming that you have a patent covering their implementation.
            </p><p>
            This is a non-binding summary of a legal document (the link above). The parameters of the license
            are specified in the license document and that document is controlling.</p></blockquote>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.OfbBlockCipher">
            implements a Output-FeedBack (OFB) mode on top of a simple cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OfbBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OfbBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OfbBlockCipher.GetBlockSize">
             return the block size we are operating at (in bytes).
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OfbBlockCipher.Reset">
            reset the feedback vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Modes.OfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/OFB"
             and the block size in bits
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher">
                * Implements OpenPGP's rather strange version of Cipher-FeedBack (CFB) mode
                * on top of a simple cipher. This class assumes the IV has been prepended
                * to the data stream already, and just accomodates the reset after
                * (blockSize + 2) bytes have been read.
                * <p>
                * For further info see <a href="http://www.ietf.org/rfc/rfc2440.html">RFC 2440</a>.
            	* </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param parameters the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.EncryptByte(System.Byte,System.Int32)">
            Encrypt one byte of data according to CFB mode.
            @param data the byte to encrypt
            @param blockOff offset in the current block
            @returns the encrypted byte
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB IV mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB IV mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/PGPCFB"
             and the block size in bits.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Modes.SicBlockCipher">
            Implements the Segmented Integer Counter (SIC) mode on top of a simple
            block cipher.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.SicBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param c the block cipher to be used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Modes.SicBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding">
            Block cipher padders are expected to conform to this interface
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.Init(LibOrg.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param param parameters, if any required.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
            @exception InvalidCipherTextException if the padding is badly formed
            or invalid.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Paddings.ISO10126d2Padding">
            A padder that adds ISO10126-2 padding to a block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.Init(LibOrg.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if available.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Paddings.ISO7816d4Padding">
            A padder that adds the padding according to the scheme referenced in
            ISO 7814-4 - scheme 2 from ISO 9797-1. The first byte is 0x80, rest is 0x00
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.Init(LibOrg.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.PaddingName">
             Return the name of the algorithm the padder implements.
            
             @return the name of the algorithm the padder implements.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion with padding. The PaddedBufferedBlockCipher
            outputs a block only when the buffer is full and more data is being added,
            or on a doFinal (unless the current block in the buffer is a pad block).
            The default padding mechanism used is the one outlined in Pkcs5/Pkcs7.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher,LibOrg.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
             Create a buffered block cipher with the desired padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             @param padding the padding type.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             Create a buffered block cipher Pkcs7 padding
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.GetOutputSize(System.Int32)">
             return the minimum size of the output buffer required for an update
             plus a doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if neccessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer. If the buffer is currently
             full and padding needs to be added a call to doFinal will produce
             2 * GetBlockSize() bytes.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output or we are decrypting and the input is not block size aligned.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Paddings.Pkcs7Padding">
            A padder that adds Pkcs7/Pkcs5 padding to a block.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.Pkcs7Padding.Init(LibOrg.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.Pkcs7Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.Pkcs7Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Paddings.Pkcs7Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Paddings.TbcPadding">
            <summary> A padder that adds Trailing-Bit-Compliment padding to a block.
            <p>
            This padding pads the block out compliment of the last bit
            of the plain text.
            </p>
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.TbcPadding.Init(LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary> Initialise the padder.</summary>
            <param name="random">- a SecureRandom if available.
            </param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.TbcPadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            <p>
            Note: this assumes that the last block of plain text is always
            passed to it inside in. i.e. if inOff is zero, indicating the
            entire block is to be overwritten with padding the value of in
            should be the same as the last block of plain text.
            </p>
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.TbcPadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Paddings.TbcPadding.PaddingName">
            <summary> Return the name of the algorithm the cipher implements.</summary>
            <returns> the name of the algorithm the cipher implements.
            </returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Paddings.X923Padding">
            A padder that adds X9.23 padding to a block - if a SecureRandom is
            passed in random padding is assumed, otherwise padding with zeros is used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.X923Padding.Init(LibOrg.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if one is available.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.X923Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.X923Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Paddings.X923Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Paddings.ZeroBytePadding">
            <summary> A padder that adds Null byte padding to a block.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.ZeroBytePadding.Init(LibOrg.BouncyCastle.Security.SecureRandom)">
             <summary> Initialise the padder.
            
             </summary>
             <param name="random">- a SecureRandom if available.
             </param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.ZeroBytePadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Paddings.ZeroBytePadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Paddings.ZeroBytePadding.PaddingName">
             <summary> Return the name of the algorithm the cipher implements.
            
             </summary>
             <returns> the name of the algorithm the cipher implements.
             </returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.AeadParameters.#ctor(LibOrg.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[])">
             Base constructor.
            
             @param key key to be used by underlying cipher
             @param macSize macSize in bits
             @param nonce nonce to be used
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.AeadParameters.#ctor(LibOrg.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[],System.Byte[])">
             Base constructor.
            
             @param key key to be used by underlying cipher
             @param macSize macSize in bits
             @param nonce nonce to be used
             @param associatedText associated text, if any
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.CcmParameters.#ctor(LibOrg.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[],System.Byte[])">
            Base constructor.
            
            @param key key to be used by underlying cipher
            @param macSize macSize in bits
            @param nonce nonce to be used
            @param associatedText associated text, if any
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.DesParameters.IsWeakKey(System.Byte[],System.Int32)">
            DES has 16 weak keys.  This method will check
            if the given DES key material is weak or semi-weak.
            Key material that is too short is regarded as weak.
            <p>
            See <a href="http://www.counterpane.com/applied.html">"Applied
            Cryptography"</a> by Bruce Schneier for more information.
            </p>
            @return true if the given DES key material is weak or semi-weak,
                false otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.DesParameters.SetOddParity(System.Byte[])">
             DES Keys use the LSB as the odd parity bit.  This can
             be used to check for corrupt keys.
            
             @param bytes the byte array to set the parity on.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32,System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
             @param length number of bytes making up the key
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Parameters.DHParameters.M">
            <summary>The minimum bitlength of the private value.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Parameters.DHParameters.L">
            <summary>The bitlength of the private value.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.#ctor(System.Int32,System.Int32,System.Int32,LibOrg.BouncyCastle.Security.SecureRandom)">
             Construct without a usage index, this will do a random construction of G.
            
             @param L desired length of prime P in bits (the effective key size).
             @param N desired length of prime Q in bits.
             @param certainty certainty level for prime number generation.
             @param random the source of randomness to use.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.#ctor(System.Int32,System.Int32,System.Int32,LibOrg.BouncyCastle.Security.SecureRandom,System.Int32)">
             Construct for a specific usage index - this has the effect of using verifiable canonical generation of G.
            
             @param L desired length of prime P in bits (the effective key size).
             @param N desired length of prime Q in bits.
             @param certainty certainty level for prime number generation.
             @param random the source of randomness to use.
             @param usageIndex a valid usage index.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Parameters.ElGamalParameters.G">
            return the generator - g
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Parameters.ElGamalParameters.L">
            return private value limit - l
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Parameters.IesParameters">
            parameters for using an integrated cipher in stream mode.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.IesParameters.#ctor(System.Byte[],System.Byte[],System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.IesWithCipherParameters.#ctor(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
            @param cipherKeySize the size of the associated Cipher key (in bits).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Parameters.Iso18033KdfParameters">
            parameters for Key derivation functions for ISO-18033
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Parameters.KdfParameters">
            parameters for Key derivation functions for IEEE P1363a
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Parameters.MgfParameters">
            <remarks>Parameters for mask derivation functions.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters">
             Parameters for NaccacheStern public private key generation. For details on
             this cipher, please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.#ctor(LibOrg.BouncyCastle.Security.SecureRandom,System.Int32,System.Int32,System.Int32)">
             Parameters for generating a NaccacheStern KeyPair.
            
             @param random
                        The source of randomness
             @param strength
                        The desired strength of the Key in Bits
             @param certainty
                        the probability that the generated primes are not really prime
                        as integer: 2^(-certainty) is then the probability
             @param countSmallPrimes
                        How many small key factors are desired
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.#ctor(LibOrg.BouncyCastle.Security.SecureRandom,System.Int32,System.Int32,System.Int32,System.Boolean)">
             Parameters for a NaccacheStern KeyPair.
            
             @param random
                        The source of randomness
             @param strength
                        The desired strength of the Key in Bits
             @param certainty
                        the probability that the generated primes are not really prime
                        as integer: 2^(-certainty) is then the probability
             @param cntSmallPrimes
                        How many small key factors are desired
             @param debug
                        Turn debugging on or off (reveals secret information, use with
                        caution)
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.Certainty">
            @return Returns the certainty.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.CountSmallPrimes">
            @return Returns the countSmallPrimes.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters">
             Public key parameters for NaccacheStern cipher. For details on this cipher,
             please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.#ctor(System.Boolean,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,System.Int32)">
            @param privateKey
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.G">
            @return Returns the g.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.LowerSigmaBound">
            @return Returns the lowerSigmaBound.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.Modulus">
            @return Returns the n.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternPrivateKeyParameters">
             Private key parameters for NaccacheStern cipher. For details on this cipher,
             please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Parameters.NaccacheSternPrivateKeyParameters.#ctor(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,System.Int32,System.Collections.IList,LibOrg.BouncyCastle.Math.BigInteger)">
             Constructs a NaccacheSternPrivateKey
            
             @param g
                        the public enryption parameter g
             @param n
                        the public modulus n = p*q
             @param lowerSigmaBound
                        the public lower sigma bound up to which data can be encrypted
             @param smallPrimes
                        the small primes, of which sigma is constructed in the right
                        order
             @param phi_n
                        the private modulus phi(n) = (p-1)(q-1)
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Parameters.ParametersWithSalt">
            <summary> Cipher parameters with a fixed salt value associated with them.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator">
            <summary>
            Uses Microsoft's RNGCryptoServiceProvider
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Prng.IRandomGenerator">
            <remarks>Generic interface for objects generating random bytes.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Prng.DigestRandomGenerator">
            Random generation based on the digest with counter. Calling AddSeedMaterial will
            always increase the entropy of the hash.
            <p>
            Internal access to the digest is synchronized so a single one of these can be shared.
            </p>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Prng.ReversedWindowGenerator">
            <remarks>
            Takes bytes generated by an underling RandomGenerator and reverses the order in
            each small window (of configurable size).
            <p>
            Access to internals is synchronized so a single one of these can be shared.
            </p>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Prng.ReversedWindowGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Prng.ReversedWindowGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Prng.ReversedWindowGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Prng.ReversedWindowGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Prng.ThreadedSeedGenerator">
            A thread based seed generator - one source of randomness.
            <p>
            Based on an idea from Marcus Lippert.
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Prng.ThreadedSeedGenerator.GenerateSeed(System.Int32,System.Boolean)">
            Generate seed bytes. Set fast to false for best quality.
            <p>
            If fast is set to true, the code should be round about 8 times faster when
            generating a long sequence of random bytes. 20 bytes of random values using
            the fast mode take less than half a second on a Nokia e70. If fast is set to false,
            it takes round about 2500 ms.
            </p>
            @param numBytes the number of bytes to generate
            @param fast true if fast mode should be used
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.P">
            <remarks>
            Permutation generated by code:
            <code>
            // First 1850 fractional digit of Pi number. 
            byte[] key = new BigInteger("14159265358979323846...5068006422512520511").ToByteArray();
            s = 0;
            P = new byte[256];
            for (int i = 0; i &lt; 256; i++) 
            {
                P[i] = (byte) i;
            }
            for (int m = 0; m &lt; 768; m++) 
            {
                s = P[(s + P[m &amp; 0xff] + key[m % key.length]) &amp; 0xff];
                byte temp = P[m &amp; 0xff];
                P[m &amp; 0xff] = P[s &amp; 0xff];
                P[s &amp; 0xff] = temp;
            } </code>
            </remarks>
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.s">
            <remarks>Value generated in the same way as <c>P</c>.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.DsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.DsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.DsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.DsaDigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.DsaDigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Signers.DsaSigner">
            The Digital Signature Algorithm - as described in "Handbook of Applied
            Cryptography", pages 452 - 453.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.DsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.DsaSigner.VerifySignature(System.Byte[],LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message for standard DSA the message should be a
            SHA-1 hash of the real message to be verified.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Signers.ECDsaSigner">
            EC-DSA as described in X9.62
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.ECDsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.ECDsaSigner.VerifySignature(System.Byte[],LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message (for standard DSA the message should be
            a SHA-1 hash of the real message to be verified).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Signers.ECGost3410Signer">
            GOST R 34.10-2001 Signature Algorithm
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.ECGost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional GOST3410 the message should be a GOST3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.ECGost3410Signer.VerifySignature(System.Byte[],LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            return true if the value r and s represent a GOST3410 signature for
            the passed in message (for standard GOST3410 the message should be
            a GOST3411 hash of the real message to be verified).
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Signers.ECNRSigner">
            EC-NR as described in IEEE 1363-2000
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.ECNRSigner.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with.  Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR it *must* be at least as long.
            
             @param digest  the digest to be signed.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.ECNRSigner.VerifySignature(System.Byte[],LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
             return true if the value r and s represent a signature for the
             message passed in. Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR, it *must* be at least as long.  But just in case the signer
             applied mod(n) to the longer digest, this implementation will
             apply mod(n) during verification.
            
             @param digest  the digest to be verified.
             @param r       the r value of the signature.
             @param s       the s value of the signature.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.GenericSigner.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the signer for signing or verification.
            
             @param forSigning
                        true if for signing, false otherwise
             @param parameters
                        necessary parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.GenericSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.GenericSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.GenericSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using the key
            we were initialised with.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.GenericSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described in
            the passed in array.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Signers.Gost3410Signer">
            Gost R 34.10-94 Signature Algorithm
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Gost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional Gost3410 the message should be a Gost3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Gost3410Signer.VerifySignature(System.Byte[],LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            return true if the value r and s represent a Gost3410 signature for
            the passed in message for standard Gost3410 the message should be a
            Gost3411 hash of the real message to be verified.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner">
            <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 2 and 3).
            <p>
            Note: the usual length for the salt is the length of the hash
            function used in bytes.</p>
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.GetRecoveredMessage">
            <summary>
            Return a reference to the recoveredMessage message.
            </summary>
            <returns>The full/partial recoveredMessage message.</returns>
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.ISignerWithRecovery.GetRecoveredMessage"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.#ctor(LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher,LibOrg.BouncyCastle.Crypto.IDigest,System.Int32,System.Boolean)">
            <summary>
            Generate a signer for the with either implicit or explicit trailers
            for ISO9796-2, scheme 2 or 3.
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification</param>
            <param name="digest">digest to use.</param>
            <param name="saltLength">length of salt in bytes.</param>
            <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.#ctor(LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher,LibOrg.BouncyCastle.Crypto.IDigest,System.Int32)">
             <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
             <param name="cipher">cipher to use.
             </param>
             <param name="digest">digest to sign with.
             </param>
             <param name="saltLength">length of salt in bytes.
             </param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the signer.</summary>
            <param name="forSigning">true if for signing, false if for verification.</param>
            <param name="parameters">parameters for signature generation/verification. If the
            parameters are for generation they should be a ParametersWithRandom,
            a ParametersWithSalt, or just an RsaKeyParameters object. If RsaKeyParameters
            are passed in a SecureRandom will be created.
            </param>
            <exception cref="T:System.ArgumentException">if wrong parameter type or a fixed
            salt is passed in which is the wrong length.
            </exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.IsSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays - constant time.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.GenerateSignature">
            <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.VerifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.HasFullMessage">
            <summary>
            Return true if the full message was recoveredMessage.
            </summary>
            <returns>true on full message recovery, false otherwise, or if not sure.</returns>
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.ISignerWithRecovery.HasFullMessage"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
            <summary> int to octet string.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.LtoOSP(System.Int64,System.Byte[])">
            <summary> long to octet string.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in Pkcs1v2.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer">
            <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 1)</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.GetRecoveredMessage">
            <summary>
            Return a reference to the recoveredMessage message.
            </summary>
            <returns>The full/partial recoveredMessage message.</returns>
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.ISignerWithRecovery.GetRecoveredMessage"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.#ctor(LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher,LibOrg.BouncyCastle.Crypto.IDigest,System.Boolean)">
            <summary>
            Generate a signer for the with either implicit or explicit trailers
            for ISO9796-2.
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification</param>
            <param name="digest">digest to use.</param>
            <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.#ctor(LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher,LibOrg.BouncyCastle.Crypto.IDigest)">
             <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
             <param name="cipher">cipher to use.
             </param>
             <param name="digest">digest to sign with.
             </param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.IsSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays - constant time.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.GenerateSignature">
            <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.VerifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.Iso9796d2Signer.HasFullMessage">
            <summary>
            Return true if the full message was recoveredMessage.
            </summary>
            <returns> true on full message recovery, false otherwise.</returns>
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.ISignerWithRecovery.HasFullMessage"/>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Signers.PssSigner">
            <summary> RSA-PSS as described in Pkcs# 1 v 2.1.
            <p>
            Note: the usual value for the salt length is the number of
            bytes in the hash function.</p>
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.PssSigner.#ctor(LibOrg.BouncyCastle.Crypto.IAsymmetricBlockCipher,LibOrg.BouncyCastle.Crypto.IDigest,System.Int32)">
            <summary>Basic constructor</summary>
            <param name="cipher">the asymmetric cipher to use.</param>
            <param name="digest">the digest to use.</param>
            <param name="saltLen">the length of the salt to use (in bytes).</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.PssSigner.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.PssSigner.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.PssSigner.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.PssSigner.GenerateSignature">
            <summary> Generate a signature for the message we've been loaded with using
            the key we were initialised with.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.PssSigner.VerifySignature(System.Byte[])">
            <summary> return true if the internal state represents the signature described
            in the passed in array.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.PssSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.PssSigner.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in Pkcs1v2.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.RsaDigestSigner.#cctor">
            <summary>
            Load oid table.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.RsaDigestSigner.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.RsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.RsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.RsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Signers.RsaDigestSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.StreamBlockCipher">
            a wrapper for block ciphers with a single byte block size, so that they
            can be treated like stream ciphers.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.StreamBlockCipher.#ctor(LibOrg.BouncyCastle.Crypto.IBlockCipher)">
             basic constructor.
            
             @param cipher the block cipher to be wrapped.
             @exception ArgumentException if the cipher has a block size other than
             one.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.StreamBlockCipher.Init(System.Boolean,LibOrg.BouncyCastle.Crypto.ICipherParameters)">
             initialise the underlying cipher.
            
             @param forEncryption true if we are setting up for encryption, false otherwise.
             @param param the necessary parameters for the underlying cipher to be initialised.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.StreamBlockCipher.ReturnByte(System.Byte)">
             encrypt/decrypt a single byte returning the result.
            
             @param in the byte to be processed.
             @return the result of processing the input byte.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.StreamBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process a block of bytes from in putting the result into out.
            
             @param in the input byte array.
             @param inOff the offset into the in array where the data to be processed starts.
             @param len the number of bytes to be processed.
             @param out the output buffer the processed bytes go into.
             @param outOff the offset into the output byte array the processed data stars at.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.StreamBlockCipher.Reset">
            reset the underlying cipher. This leaves it in the same state
            it was at after the last init (if there was one).
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.StreamBlockCipher.AlgorithmName">
             return the name of the algorithm we are wrapping.
            
             @return the name of the algorithm we are wrapping.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.AlertDescription">
            <summary>
            RFC 2246 7.2
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.AlertLevel">
            <summary>
            RFC 2246 7.2
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.AlwaysValidVerifyer">
            <remarks>
            A certificate verifyer, that will always return true.
            <pre>
            DO NOT USE THIS FILE UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING.
            </pre>
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.ICertificateVerifyer">
            <remarks>
            This should be implemented by any class which can find out, if a given
            certificate chain is being accepted by an client.
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.ICertificateVerifyer.IsValid(LibOrg.BouncyCastle.Asn1.X509.X509CertificateStructure[])">
            <param name="certs">The certs, which are part of the chain.</param>
            <returns>True, if the chain is accepted, false otherwise</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.AlwaysValidVerifyer.IsValid(LibOrg.BouncyCastle.Asn1.X509.X509CertificateStructure[])">
            <summary>Return true.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue">
            <remarks>
            A queue for bytes.
            <p>
            This file could be more optimized.
            </p>
            </remarks>
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue.DefaultCapacity">
            The initial size for our buffer.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue.NextTwoPow(System.Int32)">
            <returns>The smallest number which can be written as 2^x which is bigger than i.</returns>
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue.databuf">
            The buffer where we store our data.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue.skipped">
            How many bytes at the beginning of the buffer are skipped.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue.available">
            How many bytes in the buffer are valid data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue.Read(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Read data from the buffer.</summary>
            <param name="buf">The buffer where the read data will be copied to.</param>
            <param name="offset">How many bytes to skip at the beginning of buf.</param>
            <param name="len">How many bytes to read at all.</param>
            <param name="skip">How many bytes from our data to skip.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue.AddData(System.Byte[],System.Int32,System.Int32)">
            <summary>Add some data to our buffer.</summary>
            <param name="data">A byte-array to read data from.</param>
            <param name="offset">How many bytes to skip at the beginning of the array.</param>
            <param name="len">How many bytes to read from the array.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue.RemoveData(System.Int32)">
            <summary>Remove some bytes from our data from the beginning.</summary>
            <param name="i">How many bytes to remove.</param>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Tls.ByteQueue.Available">
            <summary>The number of bytes which are available in this buffer.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.Certificate">
            A representation for a certificate chain.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Tls.Certificate.certs">
            The certificates.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.Certificate.Parse(System.IO.Stream)">
             Parse the ServerCertificate message.
            
             @param inStr The stream where to parse from.
             @return A Certificate object with the certs, the server has sended.
             @throws IOException If something goes wrong during parsing.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.Certificate.Encode(System.IO.Stream)">
             Encodes version of the ClientCertificate message
            
             @param outStr stream to write the message to
             @throws IOException If something goes wrong
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.Certificate.#ctor(LibOrg.BouncyCastle.Asn1.X509.X509CertificateStructure[])">
             Private constructor from a cert array.
            
             @param certs The certs the chain should contain.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.Certificate.GetCerts">
            <returns>An array which contains the certs, this chain contains.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Tls.CertificateRequest.CertificateAuthorities">
            <returns>A <see cref="T:System.Collections.IList"/> of X509Name</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.CipherSuite">
            <summary>
            RFC 2246 A.5
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.ClientCertificateType">
            <summary>
            RFC 2246 7.4.4
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.CombinedHash">
            <remarks>A combined hash, which implements md5(m) || sha1(m).</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.CombinedHash.GetByteLength">
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.IDigest.GetByteLength"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.CombinedHash.GetDigestSize">
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.IDigest.GetDigestSize"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.CombinedHash.Update(System.Byte)">
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.IDigest.Update(System.Byte)"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.CombinedHash.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.CombinedHash.DoFinal(System.Byte[],System.Int32)">
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.IDigest.DoFinal(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.CombinedHash.Reset">
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.IDigest.Reset"/>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Tls.CombinedHash.AlgorithmName">
            <seealso cref="P:LibOrg.BouncyCastle.Crypto.IDigest.AlgorithmName"/>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.CompressionMethod">
            <summary>
            RFC 2246 6.1
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.ContentType">
            <summary>
            RFC 2246 6.2.1
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsAgreementCredentials.GenerateAgreement(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsCipherFactory.CreateCipher(LibOrg.BouncyCastle.Crypto.Tls.TlsClientContext,LibOrg.BouncyCastle.Crypto.Tls.EncryptionAlgorithm,LibOrg.BouncyCastle.Crypto.Tls.DigestAlgorithm)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateRC4Cipher(LibOrg.BouncyCastle.Crypto.Tls.TlsClientContext,System.Int32,LibOrg.BouncyCastle.Crypto.Tls.DigestAlgorithm)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateAesCipher(LibOrg.BouncyCastle.Crypto.Tls.TlsClientContext,System.Int32,LibOrg.BouncyCastle.Crypto.Tls.DigestAlgorithm)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateDesEdeCipher(LibOrg.BouncyCastle.Crypto.Tls.TlsClientContext,System.Int32,LibOrg.BouncyCastle.Crypto.Tls.DigestAlgorithm)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateDigest(LibOrg.BouncyCastle.Crypto.Tls.DigestAlgorithm)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.Init(LibOrg.BouncyCastle.Crypto.Tls.TlsClientContext)">
            <summary>
            Called at the start of a new TLS session, before any other methods.
            </summary>
            <param name="context">
            A <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler"/>
            </param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites">
            <summary>
            Get the list of cipher suites that this client supports.
            </summary>
            <returns>
            An array of <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.CipherSuite"/>, each specifying a supported cipher suite.
            </returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods">
            <summary>
            Get the list of compression methods that this client supports.
            </summary>
            <returns>
            An array of <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.CompressionMethod"/>, each specifying a supported compression method.
            </returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions">
            <summary>
            Get the (optional) table of client extensions to be included in (extended) client hello.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> (<see cref="T:LibOrg.BouncyCastle.Crypto.Tls.ExtensionType"/> -&gt; byte[]). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID(System.Byte[])">
            <summary>
            Reports the session ID once it has been determined.
            </summary>
            <param name="sessionID">
            A <see cref="T:System.Byte"/>
            </param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite(LibOrg.BouncyCastle.Crypto.Tls.CipherSuite)">
            <summary>
            Report the cipher suite that was selected by the server.
            </summary>
            <remarks>
            The protocol handler validates this value against the offered cipher suites
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites"/>
            </remarks>
            <param name="selectedCipherSuite">
            A <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.CipherSuite"/>
            </param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod(LibOrg.BouncyCastle.Crypto.Tls.CompressionMethod)">
            <summary>
            Report the compression method that was selected by the server.
            </summary>
            <remarks>
            The protocol handler validates this value against the offered compression methods
            <seealso cref="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods"/>
            </remarks>
            <param name="selectedCompressionMethod">
            A <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.CompressionMethod"/>
            </param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.NotifySecureRenegotiation(System.Boolean)">
            <summary>
            Report whether the server supports secure renegotiation
            </summary>
            <remarks>
            The protocol handler automatically processes the relevant extensions
            </remarks>
            <param name="secureRenegotiation">
            A <see cref="T:System.Boolean"/>, true if the server supports secure renegotiation
            </param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)">
            <summary>
            Report the extensions from an extended server hello.
            </summary>
            <remarks>
            Will only be called if we returned a non-null result from <see cref="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions"/>.
            </remarks>
            <param name="serverExtensions">
            A <see cref="T:System.Collections.IDictionary"/>  (<see cref="T:LibOrg.BouncyCastle.Crypto.Tls.ExtensionType"/> -&gt; byte[])
            </param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange">
            <summary>
            Return an implementation of <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange"/> to negotiate the key exchange
            part of the protocol.
            </summary>
            <returns>
            A <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange"/>
            </returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication">
            <summary>
            Return an implementation of <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.TlsAuthentication"/> to handle authentication
            part of the protocol.
            </summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetCompression">
            <summary>
            Return an implementation of <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.TlsCompression"/> to handle record compression.
            </summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsClient.GetCipher">
            <summary>
            Return an implementation of <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.TlsCipher"/> to use for encryption/decryption.
            </summary>
            <returns>
            A <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.TlsCipher"/>
            </returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsSignerCredentials.GenerateCertificateSignature(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.ECCurveType">
            <summary>
            RFC 4492 5.4
            </summary>
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Tls.ECCurveType.explicit_prime">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a prime field.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Tls.ECCurveType.explicit_char2">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a characteristic-2 field.
        </member>
        <member name="F:LibOrg.BouncyCastle.Crypto.Tls.ECCurveType.named_curve">
            Indicates that a named curve is used. This option SHOULD be used when applicable.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.ECPointFormat">
            <summary>
            RFC 4492 5.1.2
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.ExtensionType">
            <summary>
            RFC 4366 2.3
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.HandshakeType">
            <summary>
            RFC 2246 7.4
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.LegacyTlsAuthentication">
            <summary>
            A temporary class to wrap old CertificateVerifyer stuff for new TlsAuthentication.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsAuthentication.NotifyServerCertificate(LibOrg.BouncyCastle.Crypto.Tls.Certificate)">
            <summary>
            Called by the protocol handler to report the server certificate.
            </summary>
            <remarks>
            This method is responsible for certificate verification and validation
            </remarks>
            <param name="serverCertificate">The server <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.Certificate"/> received</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsAuthentication.GetClientCredentials(LibOrg.BouncyCastle.Crypto.Tls.CertificateRequest)">
            <summary>
            Return client credentials in response to server's certificate request
            </summary>
            <param name="certificateRequest">
            A <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.CertificateRequest"/> containing server certificate request details
            </param>
            <returns>
            A <see cref="T:LibOrg.BouncyCastle.Crypto.Tls.TlsCredentials"/> to be used for client authentication
            (or <c>null</c> for no client authentication)
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.LegacyTlsClient">
            <summary>
            A temporary class to use LegacyTlsAuthentication 
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.NamedCurve">
            <summary>
            RFC 4492 5.1.1
            The named curves defined here are those specified in SEC 2 [13]. Note that many of
            these curves are also recommended in ANSI X9.62 [7] and FIPS 186-2 [11]. Values 0xFE00
            through 0xFEFF are reserved for private use. Values 0xFF01 and 0xFF02 indicate that the
            client supports arbitrary prime and characteristic-2 curves, respectively (the curve
            parameters must be encoded explicitly in ECParameters).
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.RecordStream">
            <remarks>An implementation of the TLS 1.0 record layer.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.Ssl3Mac">
            HMAC implementation based on original internet draft for HMAC (RFC 2104)
            
            The difference is that padding is concatentated versus XORed with the key
            
            H(K + opad, H(K + ipad, text))
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.Ssl3Mac.#ctor(LibOrg.BouncyCastle.Crypto.IDigest)">
            Base constructor for one of the standard digest algorithms that the byteLength of
            the algorithm is know for. Behaviour is undefined for digests other than MD5 or SHA1.
            
            @param digest the digest.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.Ssl3Mac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsBlockCipher">
            <summary>
            A generic TLS 1.0 block cipher. This can be used for AES or 3DES for example.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsCipher.EncodePlaintext(LibOrg.BouncyCastle.Crypto.Tls.ContentType,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsCipher.DecodeCiphertext(LibOrg.BouncyCastle.Crypto.Tls.ContentType,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsDHKeyExchange">
            <summary>
            TLS 1.0 DH key exchange.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange">
            <summary>
            A generic interface for key exchange implementations in TLS 1.0.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange.SkipServerCertificate">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessServerCertificate(LibOrg.BouncyCastle.Crypto.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange.SkipServerKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessServerKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange.ValidateCertificateRequest(LibOrg.BouncyCastle.Crypto.Tls.CertificateRequest)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange.SkipClientCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessClientCredentials(LibOrg.BouncyCastle.Crypto.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange.GenerateClientKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsKeyExchange.GeneratePremasterSecret">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsECDheKeyExchange">
            ECDHE key exchange (see RFC 4492)
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsECDHKeyExchange">
            ECDH key exchange (see RFC 4492)
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsMac">
            <remarks>
            A generic TLS MAC implementation, which can be used with any kind of
            IDigest to act as an HMAC.
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsMac.#ctor(LibOrg.BouncyCastle.Crypto.IDigest,System.Byte[],System.Int32,System.Int32)">
             Generate a new instance of an TlsMac.
            
             @param digest    The digest to use.
             @param key_block A byte-array where the key for this mac is located.
             @param offset    The number of bytes to skip, before the key starts in the buffer.
             @param len       The length of the key.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsMac.GetMacSecret">
            @return the MAC write secret
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsMac.IncSequenceNumber">
            Increment the current write sequence number
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsMac.CalculateMac(LibOrg.BouncyCastle.Crypto.Tls.ContentType,System.Byte[],System.Int32,System.Int32)">
             Calculate the mac for some given data.
             <p/>
             TlsMac will keep track of the sequence number internally.
            
             @param type    The message type of the message.
             @param message A byte-buffer containing the message.
             @param offset  The number of bytes to skip, before the message starts.
             @param len     The length of the message.
             @return A new byte-buffer containing the mac value.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Tls.TlsMac.SequenceNumber">
            @return the current write sequence number
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Tls.TlsMac.Size">
            @return The Keysize of the mac.
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsNullCipher">
            <summary>
            A NULL cipher suite, for use during handshake.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler">
            <remarks>An implementation of all high level protocols in TLS 1.0.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.#ctor(System.IO.Stream,System.IO.Stream)">
            <remarks>Both streams can be the same object</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.#ctor(System.IO.Stream,System.IO.Stream,LibOrg.BouncyCastle.Security.SecureRandom)">
            <remarks>Both streams can be the same object</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.ProcessChangeCipherSpec(System.Byte[],System.Int32,System.Int32)">
             This method is called, when a change cipher spec message is received.
            
             @throws IOException If the message has an invalid content or the
                                 handshake is not in the correct state.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.Connect(LibOrg.BouncyCastle.Crypto.Tls.ICertificateVerifyer)">
            <summary>Connects to the remote system.</summary>
            <param name="verifyer">Will be used when a certificate is received to verify
            that this certificate is accepted by the client.</param>
            <exception cref="T:System.IO.IOException">If handshake was not successful</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.ReadApplicationData(System.Byte[],System.Int32,System.Int32)">
             Read data from the network. The method will return immediately, if there is
             still some data left in the buffer, or block until some application
             data has been read from the network.
            
             @param buf    The buffer where the data will be copied to.
             @param offset The position where the data will be placed in the buffer.
             @param len    The maximum number of bytes to read.
             @return The number of bytes read.
             @throws IOException If something goes wrong during reading data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.WriteData(System.Byte[],System.Int32,System.Int32)">
             Send some application data to the remote system.
             <p/>
             The method will handle fragmentation internally.
            
             @param buf    The buffer with the data.
             @param offset The position in the buffer where the data is placed.
             @param len    The length of the data.
             @throws IOException If something goes wrong during sending.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.FailWithError(LibOrg.BouncyCastle.Crypto.Tls.AlertLevel,LibOrg.BouncyCastle.Crypto.Tls.AlertDescription)">
             Terminate this connection with an alert.
             <p/>
             Can be used for normal closure too.
            
             @param alertLevel       The level of the alert, an be AlertLevel.fatal or AL_warning.
             @param alertDescription The exact alert message.
             @throws IOException If alert was fatal.
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.Close">
            <summary>Closes this connection</summary>
            <exception cref="T:System.IO.IOException">If something goes wrong during closing.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.AssertEmpty(System.IO.MemoryStream)">
             Make sure the Stream is now empty. Fail otherwise.
            
             @param is The Stream to check.
             @throws IOException If is is not empty.
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.OutputStream">
            <summary>A Stream which can be used to send data.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.InputStream">
            <summary>A Stream which can be used to read data.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Crypto.Tls.TlsProtocolHandler.Stream">
            <summary>The secure bidirectional stream for this connection</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsRsaKeyExchange">
            <summary>
            TLS 1.0 RSA key exchange.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsSrpKeyExchange">
            <summary>
            TLS 1.1 SRP key exchange.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Crypto.Tls.TlsUtilities">
            <remarks>Some helper functions for MicroTLS.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.AddMagnitudes(System.Int32[],System.Int32[])">
            return a = a + b - b preserved.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.CompareTo(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            unsigned comparison on two arrays - note the arrays may
            start with leading zeros.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.Divide(System.Int32[],System.Int32[])">
            return z = x / y - done in place (z value preserved, x contains the
            remainder)
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.IsProbablePrime(System.Int32)">
            return whether or not a BigInteger is probably prime with a
            probability of 1 - (1/2)**certainty.
            <p>From Knuth Vol 2, pg 395.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.ExtEuclid(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger@)">
             Calculate the numbers u1, u2, and u3 such that:
            
             u1 * a + u2 * b = u3
            
             where u3 is the greatest common divider of a and b.
             a and b using the extended Euclid algorithm (refer p. 323
             of The Art of Computer Programming vol 2, 2nd ed).
             This also seems to have the side effect of calculating
             some form of multiplicative inverse.
            
             @param a    First number to calculate gcd for
             @param b    Second number to calculate gcd for
             @param u1Out      the return object for the u1 value
             @param u2Out      the return object for the u2 value
             @return     The greatest common divisor of a and b
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.Square(System.Int32[],System.Int32[])">
            return w with w = x * x - w is assumed to have enough space.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.Multiply(System.Int32[],System.Int32[],System.Int32[])">
            return x with x = y * z - x is assumed to have enough space.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.GetMQuote">
            Calculate mQuote = -m^(-1) mod b with b = 2^32 (32 = word size)
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.MultiplyMonty(System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.UInt32,System.Boolean)">
            Montgomery multiplication: a = x * y * R^(-1) mod m
            <br/>
            Based algorithm 14.36 of Handbook of Applied Cryptography.
            <br/>
            <li> m, x, y should have length n </li>
            <li> a should have length (n + 1) </li>
            <li> b = 2^32, R = b^n </li>
            <br/>
            The result is put in x
            <br/>
            NOTE: the indices of x, y, m, a different in HAC and in Java
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.Remainder(System.Int32[],System.Int32[])">
            return x = x % y - done in place (y value preserved)
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.ShiftLeft(System.Int32[],System.Int32)">
            do a left shift - this returns a new array.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.ShiftRightInPlace(System.Int32,System.Int32[],System.Int32)">
            do a right shift - this does it in place.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.ShiftRightOneInPlace(System.Int32,System.Int32[])">
            do a right shift by one - this does it in place.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.BigInteger.Subtract(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            returns x = x - y - we assume x is >= y
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Abc.SimpleBigDecimal">
            Class representing a simple version of a big decimal. A
            <code>SimpleBigDecimal</code> is basically a
            {@link java.math.BigInteger BigInteger} with a few digits on the right of
            the decimal point. The number of (binary) digits on the right of the decimal
            point is called the <code>scale</code> of the <code>SimpleBigDecimal</code>.
            Unlike in {@link java.math.BigDecimal BigDecimal}, the scale is not adjusted
            automatically, but must be set manually. All <code>SimpleBigDecimal</code>s
            taking part in the same arithmetic operation must have equal scale. The
            result of a multiplication of two <code>SimpleBigDecimal</code>s returns a
            <code>SimpleBigDecimal</code> with double scale.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.SimpleBigDecimal.GetInstance(LibOrg.BouncyCastle.Math.BigInteger,System.Int32)">
            Returns a <code>SimpleBigDecimal</code> representing the same numerical
            value as <code>value</code>.
            @param value The value of the <code>SimpleBigDecimal</code> to be
            created. 
            @param scale The scale of the <code>SimpleBigDecimal</code> to be
            created. 
            @return The such created <code>SimpleBigDecimal</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.SimpleBigDecimal.#ctor(LibOrg.BouncyCastle.Math.BigInteger,System.Int32)">
            Constructor for <code>SimpleBigDecimal</code>. The value of the
            constructed <code>SimpleBigDecimal</code> Equals <code>bigInt / 
            2<sup>scale</sup></code>.
            @param bigInt The <code>bigInt</code> value parameter.
            @param scale The scale of the constructed <code>SimpleBigDecimal</code>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf">
            Class holding methods for point multiplication based on the window
            &#964;-adic nonadjacent form (WTNAF). The algorithms are based on the
            paper "Improved Algorithms for Arithmetic on Anomalous Binary Curves"
            by Jerome A. Solinas. The paper first appeared in the Proceedings of
            Crypto 1997.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Width">
            The window width of WTNAF. The standard value of 4 is slightly less
            than optimal for running time, but keeps space requirements for
            precomputation low. For typical curves, a value of 5 or 6 results in
            a better running time. When changing this value, the
            <code>&#945;<sub>u</sub></code>'s must be computed differently, see
            e.g. "Guide to Elliptic Curve Cryptography", Darrel Hankerson,
            Alfred Menezes, Scott Vanstone, Springer-Verlag New York Inc., 2004,
            p. 121-122
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Pow2Width">
            2<sup>4</sup>
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Alpha0">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Alpha0Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of TNAFs.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Alpha1">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Alpha1Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of TNAFs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Norm(System.SByte,LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Norm(System.SByte,LibOrg.BouncyCastle.Math.EC.Abc.SimpleBigDecimal,LibOrg.BouncyCastle.Math.EC.Abc.SimpleBigDecimal)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>, where <code>&#955; = u + v&#964;</code>
            and <code>u</code> and <code>u</code> are real numbers (elements of
            <code><b>R</b></code>). 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param u The real part of the element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>.
            @param v The <code>&#964;</code>-adic part of the element
            <code>&#955;</code> of <code><b>R</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Round(LibOrg.BouncyCastle.Math.EC.Abc.SimpleBigDecimal,LibOrg.BouncyCastle.Math.EC.Abc.SimpleBigDecimal,System.SByte)">
            Rounds an element <code>&#955;</code> of <code><b>R</b>[&#964;]</code>
            to an element of <code><b>Z</b>[&#964;]</code>, such that their difference
            has minimal norm. <code>&#955;</code> is given as
            <code>&#955; = &#955;<sub>0</sub> + &#955;<sub>1</sub>&#964;</code>.
            @param lambda0 The component <code>&#955;<sub>0</sub></code>.
            @param lambda1 The component <code>&#955;<sub>1</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve. Must
            equal 1 or -1.
            @return The rounded element of <code><b>Z</b>[&#964;]</code>.
            @throws ArgumentException if <code>lambda0</code> and
            <code>lambda1</code> do not have same scale.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.ApproximateDivisionByN(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,System.SByte,System.Int32,System.Int32)">
            Approximate division by <code>n</code>. For an integer
            <code>k</code>, the value <code>&#955; = s k / n</code> is
            computed to <code>c</code> bits of accuracy.
            @param k The parameter <code>k</code>.
            @param s The curve parameter <code>s<sub>0</sub></code> or
            <code>s<sub>1</sub></code>.
            @param vm The Lucas Sequence element <code>V<sub>m</sub></code>.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param m The bit length of the finite field
            <code><b>F</b><sub>m</sub></code>.
            @param c The number of bits of accuracy, i.e. the scale of the returned
            <code>SimpleBigDecimal</code>.
            @return The value <code>&#955; = s k / n</code> computed to
            <code>c</code> bits of accuracy.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.TauAdicNaf(System.SByte,LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement)">
            Computes the <code>&#964;</code>-adic NAF (non-adjacent form) of an
            element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The <code>&#964;</code>-adic NAF of <code>&#955;</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.Tau(LibOrg.BouncyCastle.Math.EC.F2mPoint)">
            Applies the operation <code>&#964;()</code> to an
            <code>F2mPoint</code>. 
            @param p The F2mPoint to which <code>&#964;()</code> is applied.
            @return <code>&#964;(p)</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.GetMu(LibOrg.BouncyCastle.Math.EC.F2mCurve)">
            Returns the parameter <code>&#956;</code> of the elliptic curve.
            @param curve The elliptic curve from which to obtain <code>&#956;</code>.
            The curve must be a Koblitz curve, i.e. <code>a</code> Equals
            <code>0</code> or <code>1</code> and <code>b</code> Equals
            <code>1</code>. 
            @return <code>&#956;</code> of the elliptic curve.
            @throws ArgumentException if the given ECCurve is not a Koblitz
            curve.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.GetLucas(System.SByte,System.Int32,System.Boolean)">
            Calculates the Lucas Sequence elements <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param k The index of the second element of the Lucas Sequence to be
            returned.
            @param doV If set to true, computes <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>, otherwise <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code>.
            @return An array with 2 elements, containing <code>U<sub>k-1</sub></code>
            and <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code>
            and <code>V<sub>k</sub></code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.GetTw(System.SByte,System.Int32)">
            Computes the auxiliary value <code>t<sub>w</sub></code>. If the width is
            4, then for <code>mu = 1</code>, <code>t<sub>w</sub> = 6</code> and for
            <code>mu = -1</code>, <code>t<sub>w</sub> = 10</code> 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param w The window width of the WTNAF.
            @return the auxiliary value <code>t<sub>w</sub></code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.GetSi(LibOrg.BouncyCastle.Math.EC.F2mCurve)">
            Computes the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction. 
            @param curve The elliptic curve for which to compute
            <code>s<sub>0</sub></code> and <code>s<sub>1</sub></code>.
            @throws ArgumentException if <code>curve</code> is not a
            Koblitz curve (Anomalous Binary Curve, ABC).
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.PartModReduction(LibOrg.BouncyCastle.Math.BigInteger,System.Int32,System.SByte,LibOrg.BouncyCastle.Math.BigInteger[],System.SByte,System.SByte)">
            Partial modular reduction modulo
            <code>(&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>.
            @param k The integer to be reduced.
            @param m The bitlength of the underlying finite field.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param s The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param c The precision (number of bits of accuracy) of the partial
            modular reduction.
            @return <code>&#961; := k partmod (&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.MultiplyRTnaf(LibOrg.BouncyCastle.Math.EC.F2mPoint,LibOrg.BouncyCastle.Math.BigInteger)">
            Multiplies a {@link LibOrg.BouncyCastle.math.ec.F2mPoint F2mPoint}
            by a <code>BigInteger</code> using the reduced <code>&#964;</code>-adic
            NAF (RTNAF) method.
            @param p The F2mPoint to Multiply.
            @param k The <code>BigInteger</code> by which to Multiply <code>p</code>.
            @return <code>k * p</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.MultiplyTnaf(LibOrg.BouncyCastle.Math.EC.F2mPoint,LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement)">
            Multiplies a {@link LibOrg.BouncyCastle.math.ec.F2mPoint F2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The F2mPoint to Multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return <code>&#955; * p</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.MultiplyFromTnaf(LibOrg.BouncyCastle.Math.EC.F2mPoint,System.SByte[])">
            Multiplies a {@link LibOrg.BouncyCastle.math.ec.F2mPoint F2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method, given the TNAF
            of <code>&#955;</code>.
            @param p The F2mPoint to Multiply.
            @param u The the TNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.TauAdicWNaf(System.SByte,LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement,System.SByte,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement[])">
            Computes the <code>[&#964;]</code>-adic window NAF of an element
            <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @param width The window width of the resulting WNAF.
            @param pow2w 2<sup>width</sup>.
            @param tw The auxiliary value <code>t<sub>w</sub></code>.
            @param alpha The <code>&#945;<sub>u</sub></code>'s for the window width.
            @return The <code>[&#964;]</code>-adic window NAF of
            <code>&#955;</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.Tnaf.GetPreComp(LibOrg.BouncyCastle.Math.EC.F2mPoint,System.SByte)">
            Does the precomputation for WTNAF multiplication.
            @param p The <code>ECPoint</code> for which to do the precomputation.
            @param a The parameter <code>a</code> of the elliptic curve.
            @return The precomputation array for <code>p</code>. 
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement">
            Class representing an element of <code><b>Z</b>[&#964;]</code>. Let
            <code>&#955;</code> be an element of <code><b>Z</b>[&#964;]</code>. Then
            <code>&#955;</code> is given as <code>&#955; = u + v&#964;</code>. The
            components <code>u</code> and <code>v</code> may be used directly, there
            are no accessor methods.
            Immutable class.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement.u">
            The &quot;real&quot; part of <code>&#955;</code>.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement.v">
            The &quot;<code>&#964;</code>-adic&quot; part of <code>&#955;</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement.#ctor(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            Constructor for an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param u The &quot;real&quot; part of <code>&#955;</code>.
            @param v The &quot;<code>&#964;</code>-adic&quot; part of
            <code>&#955;</code>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.ECCurve">
            <remarks>Base class for an elliptic curve.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.ECCurve.DecodePoint(System.Byte[])">
            Decode a point on this curve from its ASN.1 encoding. The different
            encodings are taken account of, including point compression for
            <code>F<sub>p</sub></code> (X9.62 s 4.2.1 pg 17).
            @return The decoded point.
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.FpCurve">
            Elliptic curve over Fp
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.F2mCurve">
            Elliptic curves over F2m. The Weierstrass equation is given by
            <code>y<sup>2</sup> + xy = x<sup>3</sup> + ax<sup>2</sup> + b</code>.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mCurve.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mCurve.k1">
            TPB: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            PPB: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mCurve.k2">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mCurve.k3">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mCurve.n">
            The order of the base point of the curve.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mCurve.h">
            The cofactor of the curve.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mCurve.infinity">
            The point at infinity on this curve.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mCurve.mu">
            The parameter <code>&#956;</code> of the elliptic curve if this is
            a Koblitz curve.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mCurve.si">
            The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param n The order of the main subgroup of the elliptic curve.
            @param h The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param n The order of the main subgroup of the elliptic curve.
            @param h The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mCurve.GetMu">
            Returns the parameter <code>&#956;</code> of the elliptic curve.
            @return <code>&#956;</code> of the elliptic curve.
            @throws ArgumentException if the given ECCurve is not a
            Koblitz curve.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mCurve.GetSi">
            @return the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mCurve.solveQuadradicEquation(LibOrg.BouncyCastle.Math.EC.ECFieldElement)">
             Solves a quadratic equation <code>z<sup>2</sup> + z = beta</code>(X9.62
             D.1.6) The other solution is <code>z + 1</code>.
            
             @param beta
                        The value to solve the qradratic equation for.
             @return the solution for <code>z<sup>2</sup> + z = beta</code> or
                     <code>null</code> if no solution exists.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mCurve.IsTrinomial">
             Return true if curve uses a Trinomial basis.
            
             @return true if curve Trinomial, false otherwise.
        </member>
        <member name="P:LibOrg.BouncyCastle.Math.EC.F2mCurve.IsKoblitz">
            Returns true if this is a Koblitz curve (ABC curve).
            @return true if this is a Koblitz curve (ABC curve), false otherwise
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.FpFieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation
            returns the right value - if none exists it returns null.
        </member>
        <member name="P:LibOrg.BouncyCastle.Math.EC.FpFieldElement.FieldName">
             return the field name for this field.
            
             @return the string "Fp".
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.F2mFieldElement">
            Class representing the Elements of the finite field
            <code>F<sub>2<sup>m</sup></sub></code> in polynomial basis (PB)
            representation. Both trinomial (Tpb) and pentanomial (Ppb) polynomial
            basis representations are supported. Gaussian normal basis (GNB)
            representation is not supported.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.Gnb">
            Indicates gaussian normal basis representation (GNB). Number chosen
            according to X9.62. GNB is not implemented at present.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.Tpb">
            Indicates trinomial basis representation (Tpb). Number chosen
            according to X9.62.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.Ppb">
            Indicates pentanomial basis representation (Ppb). Number chosen
            according to X9.62.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.representation">
            Tpb or Ppb.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.k1">
            Tpb: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            Ppb: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.k2">
            Tpb: Always set to <code>0</code><br/>
            Ppb: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.k3">
            Tpb: Always set to <code>0</code><br/>
            Ppb: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.x">
            The <code>IntArray</code> holding the bits.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.t">
            The number of <code>int</code>s required to hold <code>m</code> bits.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,LibOrg.BouncyCastle.Math.BigInteger)">
            Constructor for Ppb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.#ctor(System.Int32,System.Int32,LibOrg.BouncyCastle.Math.BigInteger)">
            Constructor for Tpb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.CheckFieldElements(LibOrg.BouncyCastle.Math.EC.ECFieldElement,LibOrg.BouncyCastle.Math.EC.ECFieldElement)">
            Checks, if the ECFieldElements <code>a</code> and <code>b</code>
            are elements of the same field <code>F<sub>2<sup>m</sup></sub></code>
            (having the same representation).
            @param a field element.
            @param b field element to be compared.
            @throws ArgumentException if <code>a</code> and <code>b</code>
            are not elements of the same field
            <code>F<sub>2<sup>m</sup></sub></code> (having the same
            representation).
        </member>
        <member name="P:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.Representation">
            @return the representation of the field
            <code>F<sub>2<sup>m</sup></sub></code>, either of
            {@link F2mFieldElement.Tpb} (trinomial
            basis representation) or
            {@link F2mFieldElement.Ppb} (pentanomial
            basis representation).
        </member>
        <member name="P:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.M">
            @return the degree <code>m</code> of the reduction polynomial
            <code>f(z)</code>.
        </member>
        <member name="P:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.K1">
            @return Tpb: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            Ppb: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.K2">
            @return Tpb: Always returns <code>0</code><br/>
            Ppb: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:LibOrg.BouncyCastle.Math.EC.F2mFieldElement.K3">
            @return Tpb: Always set to <code>0</code><br/>
            Ppb: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.ECPoint">
            base class for points on elliptic curves.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.ECPoint.SetPreCompInfo(LibOrg.BouncyCastle.Math.EC.Multiplier.PreCompInfo)">
            Sets the <code>PreCompInfo</code>. Used by <code>ECMultiplier</code>s
            to save the precomputation for this <code>ECPoint</code> to store the
            precomputation result for use by subsequent multiplication.
            @param preCompInfo The values precomputed by the
            <code>ECMultiplier</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.ECPoint.AssertECMultiplier">
            Sets the appropriate <code>ECMultiplier</code>, unless already set. 
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.ECPointBase.GetEncoded(System.Boolean)">
            return the field element encoded with point compression. (S 4.3.6)
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.ECPointBase.Multiply(LibOrg.BouncyCastle.Math.BigInteger)">
            Multiplies this <code>ECPoint</code> by the given number.
            @param k The multiplicator.
            @return <code>k * this</code>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.FpPoint">
            Elliptic curve points over Fp
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.FpPoint.#ctor(LibOrg.BouncyCastle.Math.EC.ECCurve,LibOrg.BouncyCastle.Math.EC.ECFieldElement,LibOrg.BouncyCastle.Math.EC.ECFieldElement)">
             Create a point which encodes with point compression.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.FpPoint.#ctor(LibOrg.BouncyCastle.Math.EC.ECCurve,LibOrg.BouncyCastle.Math.EC.ECFieldElement,LibOrg.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
             Create a point that encodes with or without point compresion.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
             @param withCompression if true encode with point compression
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.FpPoint.AssertECMultiplier">
            Sets the default <code>ECMultiplier</code>, unless already set. 
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.F2mPoint">
            Elliptic curve points over F2m
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mPoint.#ctor(LibOrg.BouncyCastle.Math.EC.ECCurve,LibOrg.BouncyCastle.Math.EC.ECFieldElement,LibOrg.BouncyCastle.Math.EC.ECFieldElement)">
            @param curve base curve
            @param x x point
            @param y y point
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mPoint.#ctor(LibOrg.BouncyCastle.Math.EC.ECCurve,LibOrg.BouncyCastle.Math.EC.ECFieldElement,LibOrg.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @param curve base curve
            @param x x point
            @param y y point
            @param withCompression true if encode with point compression.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mPoint.#ctor(LibOrg.BouncyCastle.Math.EC.ECCurve)">
            Constructor for point at infinity
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mPoint.CheckPoints(LibOrg.BouncyCastle.Math.EC.ECPoint,LibOrg.BouncyCastle.Math.EC.ECPoint)">
            Check, if two <code>ECPoint</code>s can be added or subtracted.
            @param a The first <code>ECPoint</code> to check.
            @param b The second <code>ECPoint</code> to check.
            @throws IllegalArgumentException if <code>a</code> and <code>b</code>
            cannot be added.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mPoint.AddSimple(LibOrg.BouncyCastle.Math.EC.F2mPoint)">
            Adds another <code>ECPoints.F2m</code> to <code>this</code> without
            checking if both points are on the same curve. Used by multiplication
            algorithms, because there all points are a multiple of the same point
            and hence the checks can be omitted.
            @param b The other <code>ECPoints.F2m</code> to add to
            <code>this</code>.
            @return <code>this + b</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mPoint.SubtractSimple(LibOrg.BouncyCastle.Math.EC.F2mPoint)">
            Subtracts another <code>ECPoints.F2m</code> from <code>this</code>
            without checking if both points are on the same curve. Used by
            multiplication algorithms, because there all points are a multiple
            of the same point and hence the checks can be omitted.
            @param b The other <code>ECPoints.F2m</code> to subtract from
            <code>this</code>.
            @return <code>this - b</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.F2mPoint.AssertECMultiplier">
            Sets the appropriate <code>ECMultiplier</code>, unless already set. 
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Multiplier.ECMultiplier">
            Interface for classes encapsulating a point multiplication algorithm
            for <code>ECPoint</code>s.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.ECMultiplier.Multiply(LibOrg.BouncyCastle.Math.EC.ECPoint,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.EC.Multiplier.PreCompInfo)">
            Multiplies the <code>ECPoint p</code> by <code>k</code>, i.e.
            <code>p</code> is added <code>k</code> times to itself.
            @param p The <code>ECPoint</code> to be multiplied.
            @param k The factor by which <code>p</code> i multiplied.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Multiplier.FpNafMultiplier">
            Class implementing the NAF (Non-Adjacent Form) multiplication algorithm.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.FpNafMultiplier.Multiply(LibOrg.BouncyCastle.Math.EC.ECPoint,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.EC.Multiplier.PreCompInfo)">
            D.3.2 pg 101
            @see LibOrg.BouncyCastle.math.ec.multiplier.ECMultiplier#multiply(LibOrg.BouncyCastle.math.ec.ECPoint, java.math.BigInteger)
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Multiplier.PreCompInfo">
            Interface for classes storing precomputation data for multiplication
            algorithms. Used as a Memento (see GOF patterns) for
            <code>WNafMultiplier</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.ReferenceMultiplier.Multiply(LibOrg.BouncyCastle.Math.EC.ECPoint,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.EC.Multiplier.PreCompInfo)">
            Simple shift-and-add multiplication. Serves as reference implementation
            to verify (possibly faster) implementations in
            {@link LibOrg.BouncyCastle.math.ec.ECPoint ECPoint}.
            
            @param p The point to multiply.
            @param k The factor by which to multiply.
            @return The result of the point multiplication <code>k * p</code>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Multiplier.WNafMultiplier">
            Class implementing the WNAF (Window Non-Adjacent Form) multiplication
            algorithm.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.WNafMultiplier.WindowNaf(System.SByte,LibOrg.BouncyCastle.Math.BigInteger)">
            Computes the Window NAF (non-adjacent Form) of an integer.
            @param width The width <code>w</code> of the Window NAF. The width is
            defined as the minimal number <code>w</code>, such that for any
            <code>w</code> consecutive digits in the resulting representation, at
            most one is non-zero.
            @param k The integer of which the Window NAF is computed.
            @return The Window NAF of the given width, such that the following holds:
            <code>k = &#8722;<sub>i=0</sub><sup>l-1</sup> k<sub>i</sub>2<sup>i</sup>
            </code>, where the <code>k<sub>i</sub></code> denote the elements of the
            returned <code>sbyte[]</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.WNafMultiplier.Multiply(LibOrg.BouncyCastle.Math.EC.ECPoint,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.EC.Multiplier.PreCompInfo)">
            Multiplies <code>this</code> by an integer <code>k</code> using the
            Window NAF method.
            @param k The integer by which <code>this</code> is multiplied.
            @return A new <code>ECPoint</code> which equals <code>this</code>
            multiplied by <code>k</code>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo">
            Class holding precomputation data for the WNAF (Window Non-Adjacent Form)
            algorithm.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.preComp">
            Array holding the precomputed <code>ECPoint</code>s used for the Window
            NAF multiplication in <code>
            {@link LibOrg.BouncyCastle.math.ec.multiplier.WNafMultiplier.multiply()
            WNafMultiplier.multiply()}</code>.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.twiceP">
            Holds an <code>ECPoint</code> representing twice(this). Used for the
            Window NAF multiplication in <code>
            {@link LibOrg.BouncyCastle.math.ec.multiplier.WNafMultiplier.multiply()
            WNafMultiplier.multiply()}</code>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier">
            Class implementing the WTNAF (Window
            <code>&#964;</code>-adic Non-Adjacent Form) algorithm.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier.Multiply(LibOrg.BouncyCastle.Math.EC.ECPoint,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.EC.Multiplier.PreCompInfo)">
            Multiplies a {@link LibOrg.BouncyCastle.math.ec.F2mPoint F2mPoint}
            by <code>k</code> using the reduced <code>&#964;</code>-adic NAF (RTNAF)
            method.
            @param p The F2mPoint to multiply.
            @param k The integer by which to multiply <code>k</code>.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier.MultiplyWTnaf(LibOrg.BouncyCastle.Math.EC.F2mPoint,LibOrg.BouncyCastle.Math.EC.Abc.ZTauElement,LibOrg.BouncyCastle.Math.EC.Multiplier.PreCompInfo,System.SByte,System.SByte)">
            Multiplies a {@link LibOrg.BouncyCastle.math.ec.F2mPoint F2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code> using
            the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The F2mPoint to multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @return <code>p</code> multiplied by <code>&#955;</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier.MultiplyFromWTnaf(LibOrg.BouncyCastle.Math.EC.F2mPoint,System.SByte[],LibOrg.BouncyCastle.Math.EC.Multiplier.PreCompInfo)">
            Multiplies a {@link LibOrg.BouncyCastle.math.ec.F2mPoint F2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the window <code>&#964;</code>-adic NAF (TNAF) method, given the
            WTNAF of <code>&#955;</code>.
            @param p The F2mPoint to multiply.
            @param u The the WTNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="T:LibOrg.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo">
            Class holding precomputation data for the WTNAF (Window
            <code>&#964;</code>-adic Non-Adjacent Form) algorithm.
        </member>
        <member name="F:LibOrg.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo.preComp">
            Array holding the precomputed <code>F2mPoint</code>s used for the
            WTNAF multiplication in <code>
            {@link LibOrg.BouncyCastle.math.ec.multiplier.WTauNafMultiplier.multiply()
            WTauNafMultiplier.multiply()}</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo.#ctor(LibOrg.BouncyCastle.Math.EC.F2mPoint[])">
            Constructor for <code>WTauNafPreCompInfo</code>
            @param preComp Array holding the precomputed <code>F2mPoint</code>s
            used for the WTNAF multiplication in <code>
            {@link LibOrg.BouncyCastle.math.ec.multiplier.WTauNafMultiplier.multiply()
            WTauNafMultiplier.multiply()}</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo.GetPreComp">
            @return the array holding the precomputed <code>F2mPoint</code>s
            used for the WTNAF multiplication in <code>
            {@link LibOrg.BouncyCastle.math.ec.multiplier.WTauNafMultiplier.multiply()
            WTauNafMultiplier.multiply()}</code>.
        </member>
        <member name="T:LibOrg.BouncyCastle.Ocsp.BasicOcspResp">
            <remarks>
            <code>
            BasicOcspResponse ::= SEQUENCE {
            	tbsResponseData		ResponseData,
            	signatureAlgorithm	AlgorithmIdentifier,
            	signature			BIT STRING,
            	certs				[0] EXPLICIT SEQUENCE OF Certificate OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.IX509Extension.GetCriticalExtensionOids">
            <summary>
            Get all critical extension values, by oid
            </summary>
            <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.IX509Extension.GetNonCriticalExtensionOids">
            <summary>
            Get all non-critical extension values, by oid
            </summary>
            <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509ExtensionBase.GetNonCriticalExtensionOids">
            <summary>
            Get non critical extensions.
            </summary>
            <returns>A set of non critical extension oids.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509ExtensionBase.GetCriticalExtensionOids">
            <summary>
            Get any critical extensions.
            </summary>
            <returns>A sorted list of critical entension.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509ExtensionBase.GetExtensionValue(System.String)">
            <summary>
            Get the value of a given extension.
            </summary>
            <param name="oid">The object ID of the extension. </param>
            <returns>An Asn1OctetString object if that extension is found or null if not.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspResp.GetTbsResponseData">
            <returns>The DER encoding of the tbsResponseData field.</returns>
            <exception cref="T:LibOrg.BouncyCastle.Ocsp.OcspException">In the event of an encoding error.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspResp.GetCertificates(System.String)">
            <returns>The certificates, if any, associated with the response.</returns>
            <exception cref="T:LibOrg.BouncyCastle.Ocsp.OcspException">In the event of an encoding error.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspResp.Verify(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Verify the signature against the tbsResponseData object we contain.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspResp.GetEncoded">
            <returns>The ASN.1 encoded representation of this object.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Ocsp.BasicOcspRespGenerator">
            Generator for basic OCSP response objects.
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspRespGenerator.#ctor(LibOrg.BouncyCastle.Ocsp.RespID)">
            basic constructor
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspRespGenerator.#ctor(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            construct with the responderID to be the SHA-1 keyHash of the passed in public key.
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspRespGenerator.AddResponse(LibOrg.BouncyCastle.Ocsp.CertificateID,LibOrg.BouncyCastle.Ocsp.CertificateStatus)">
             Add a response for a particular Certificate ID.
            
             @param certID certificate ID details
             @param certStatus status of the certificate - null if okay
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspRespGenerator.AddResponse(LibOrg.BouncyCastle.Ocsp.CertificateID,LibOrg.BouncyCastle.Ocsp.CertificateStatus,LibOrg.BouncyCastle.Asn1.X509.X509Extensions)">
             Add a response for a particular Certificate ID.
            
             @param certID certificate ID details
             @param certStatus status of the certificate - null if okay
             @param singleExtensions optional extensions
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspRespGenerator.AddResponse(LibOrg.BouncyCastle.Ocsp.CertificateID,LibOrg.BouncyCastle.Ocsp.CertificateStatus,System.DateTime,LibOrg.BouncyCastle.Asn1.X509.X509Extensions)">
             Add a response for a particular Certificate ID.
            
             @param certID certificate ID details
             @param nextUpdate date when next update should be requested
             @param certStatus status of the certificate - null if okay
             @param singleExtensions optional extensions
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspRespGenerator.AddResponse(LibOrg.BouncyCastle.Ocsp.CertificateID,LibOrg.BouncyCastle.Ocsp.CertificateStatus,System.DateTime,System.DateTime,LibOrg.BouncyCastle.Asn1.X509.X509Extensions)">
             Add a response for a particular Certificate ID.
            
             @param certID certificate ID details
             @param thisUpdate date this response was valid on
             @param nextUpdate date when next update should be requested
             @param certStatus status of the certificate - null if okay
             @param singleExtensions optional extensions
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.BasicOcspRespGenerator.SetResponseExtensions(LibOrg.BouncyCastle.Asn1.X509.X509Extensions)">
             Set the extensions for the response.
            
             @param responseExtensions the extension object to carry.
        </member>
        <member name="P:LibOrg.BouncyCastle.Ocsp.BasicOcspRespGenerator.SignatureAlgNames">
             Return an IEnumerable of the signature names supported by the generator.
            
             @return an IEnumerable containing recognised names.
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.CertificateID.#ctor(System.String,LibOrg.BouncyCastle.X509.X509Certificate,LibOrg.BouncyCastle.Math.BigInteger)">
            create from an issuer certificate and the serial number of the
            certificate it signed.
            @exception OcspException if any problems occur creating the id fields.
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.CertificateID.DeriveCertificateID(LibOrg.BouncyCastle.Ocsp.CertificateID,LibOrg.BouncyCastle.Math.BigInteger)">
             Create a new CertificateID for a new serial number derived from a previous one
             calculated for the same CA certificate.
            
             @param original the previously calculated CertificateID for the CA.
             @param newSerialNumber the serial number for the new certificate of interest.
            
             @return a new CertificateID for newSerialNumber
        </member>
        <member name="P:LibOrg.BouncyCastle.Ocsp.CertificateID.SerialNumber">
            return the serial number for the certificate associated
            with this request.
        </member>
        <member name="T:LibOrg.BouncyCastle.Ocsp.OcspReq">
             <pre>
             OcspRequest     ::=     SEQUENCE {
                   tbsRequest                  TBSRequest,
                   optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
            
               TBSRequest      ::=     SEQUENCE {
                   version             [0]     EXPLICIT Version DEFAULT v1,
                   requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
                   requestList                 SEQUENCE OF Request,
                   requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
            
               Signature       ::=     SEQUENCE {
                   signatureAlgorithm      AlgorithmIdentifier,
                   signature               BIT STRING,
                   certs               [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL}
            
               Version         ::=             INTEGER  {  v1(0) }
            
               Request         ::=     SEQUENCE {
                   reqCert                     CertID,
                   singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
            
               CertID          ::=     SEQUENCE {
                   hashAlgorithm       AlgorithmIdentifier,
                   issuerNameHash      OCTET STRING, -- Hash of Issuer's DN
                   issuerKeyHash       OCTET STRING, -- Hash of Issuers public key
                   serialNumber        CertificateSerialNumber }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.OcspReq.GetTbsRequest">
            Return the DER encoding of the tbsRequest field.
            @return DER encoding of tbsRequest
            @throws OcspException in the event of an encoding error.
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.OcspReq.GetCertificates(System.String)">
             If the request is signed return a possibly empty CertStore containing the certificates in the
             request. If the request is not signed the method returns null.
            
             @return null if not signed, a CertStore otherwise
             @throws OcspException
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.OcspReq.Verify(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            Verify the signature against the TBSRequest object we contain.
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.OcspReq.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="P:LibOrg.BouncyCastle.Ocsp.OcspReq.SignatureAlgOid">
            return the object identifier representing the signature algorithm
        </member>
        <member name="P:LibOrg.BouncyCastle.Ocsp.OcspReq.IsSigned">
             Return whether or not this request is signed.
            
             @return true if signed false otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.OcspReqGenerator.AddRequest(LibOrg.BouncyCastle.Ocsp.CertificateID)">
             Add a request for the given CertificateID.
            
             @param certId certificate ID of interest
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.OcspReqGenerator.AddRequest(LibOrg.BouncyCastle.Ocsp.CertificateID,LibOrg.BouncyCastle.Asn1.X509.X509Extensions)">
             Add a request with extensions
            
             @param certId certificate ID of interest
             @param singleRequestExtensions the extensions to attach to the request
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.OcspReqGenerator.SetRequestorName(LibOrg.BouncyCastle.Asn1.X509.X509Name)">
             Set the requestor name to the passed in X509Principal
            
             @param requestorName a X509Principal representing the requestor name.
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.OcspReqGenerator.Generate">
             Generate an unsigned request
            
             @return the OcspReq
             @throws OcspException
        </member>
        <member name="P:LibOrg.BouncyCastle.Ocsp.OcspReqGenerator.SignatureAlgNames">
             Return an IEnumerable of the signature names supported by the generator.
            
             @return an IEnumerable containing recognised names.
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.OcspResp.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:LibOrg.BouncyCastle.Ocsp.OCSPRespGenerator">
            base generator for an OCSP response - at the moment this only supports the
            generation of responses containing BasicOCSP responses.
        </member>
        <member name="F:LibOrg.BouncyCastle.Ocsp.OcspRespStatus.Successful">
            note 4 is not used.
        </member>
        <member name="T:LibOrg.BouncyCastle.Ocsp.RespID">
            Carrier for a ResponderID.
        </member>
        <member name="T:LibOrg.BouncyCastle.Ocsp.RevokedStatus">
            wrapper for the RevokedInfo object
        </member>
        <member name="P:LibOrg.BouncyCastle.Ocsp.RevokedStatus.RevocationReason">
            return the revocation reason. Note: this field is optional, test for it
            with hasRevocationReason() first.
            @exception InvalidOperationException if a reason is asked for and none is avaliable
        </member>
        <member name="M:LibOrg.BouncyCastle.Ocsp.SingleResp.GetCertStatus">
             Return the status object for the response - null indicates good.
            
             @return the status object for the response, null if it is good.
        </member>
        <member name="P:LibOrg.BouncyCastle.Ocsp.SingleResp.NextUpdate">
             return the NextUpdate value - note: this is an optional field so may
             be returned as null.
            
             @return nextUpdate, or null if not present.
        </member>
        <member name="T:LibOrg.BouncyCastle.Ocsp.UnknownStatus">
            wrapper for the UnknownInfo object
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData">
            <remarks>Compressed data objects</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData.GetInputStream">
            <summary>Get the raw input stream contained in the object.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData.GetDataStream">
            <summary>Return an uncompressed input stream which allows reading of the compressed data.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpCompressedData.Algorithm">
            <summary>The algorithm used for compression</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator">
            <remarks>Class for producing compressed data packets.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator.Open(System.IO.Stream)">
            <summary>
            <p>
            Return an output stream which will save the data being written to
            the compressed object.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
            <param name="outStr">Stream to be used for output.</param>
            <returns>A Stream for output of the compressed data.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator.Open(System.IO.Stream,System.Byte[])">
            <summary>
            <p>
            Return an output stream which will compress the data as it is written to it.
            The stream will be written out in chunks according to the size of the passed in buffer.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            <p>
            <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.
            </p>
            <p>
            <b>Note</b>: using this may break compatibility with RFC 1991 compliant tools.
            Only recent OpenPGP implementations are capable of accepting these streams.
            </p>
            </summary>
            <param name="outStr">Stream to be used for output.</param>
            <param name="buffer">The buffer to use.</param>
            <returns>A Stream for output of the compressed data.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpCompressedDataGenerator.Close">
            <summary>Close the compressed object.</summary>summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Apache.Bzip2.CBZip2OutputStream">
             An output stream that compresses into the BZip2 format (with the file
             header chars) into another stream.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            
             TODO:    Update to BZip2 1.0.1
             <b>NB:</b> note this class has been modified to add a leading BZ to the
             start of the BZIP2 stream to make it compatible with other PGP programs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Apache.Bzip2.CBZip2OutputStream.WriteByte(System.Byte)">
            
             modified by Oliver Merkel, 010128
            
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpDataValidationException">
            <remarks>
            Thrown if the IV at the start of a data stream indicates the wrong key is being used.
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpException">
            <remarks>Generic exception class for PGP encoding/decoding problems.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedData.GetInputStream">
            <summary>Return the raw input stream for the data stream.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedData.IsIntegrityProtected">
            <summary>Return true if the message is integrity protected.</summary>
            <returns>True, if there is a modification detection code namespace associated
            with this stream.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedData.Verify">
            <summary>Note: This can only be called after the message has been read.</summary>
            <returns>True, if the message verifies, false otherwise</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator">
            <remarks>Generator for encrypted objects.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(LibOrg.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Existing SecureRandom constructor.</summary>
            <param name="encAlgorithm">The symmetric algorithm to use.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(LibOrg.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Boolean,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Creates a cipher stream which will have an integrity packet associated with it.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.#ctor(LibOrg.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,LibOrg.BouncyCastle.Security.SecureRandom,System.Boolean)">
            <summary>Base constructor.</summary>
            <param name="encAlgorithm">The symmetric algorithm to use.</param>
            <param name="rand">Source of randomness.</param>
            <param name="oldFormat">PGP 2.6.x compatibility required.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethod(System.Char[])">
            <summary>
            Add a PBE encryption method to the encrypted object using the default algorithm (S2K_SHA1).
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethod(System.Char[],LibOrg.BouncyCastle.Bcpg.HashAlgorithmTag)">
            <summary>Add a PBE encryption method to the encrypted object.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.AddMethod(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Add a public key encrypted session key to the encrypted object.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Open(System.IO.Stream,System.Int64,System.Byte[])">
            <summary>
            <p>
            If buffer is non null stream assumed to be partial, otherwise the length will be used
            to output a fixed length packet.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Open(System.IO.Stream,System.Int64)">
            <summary>
            <p>
            Return an output stream which will encrypt the data as it is written to it.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Open(System.IO.Stream,System.Byte[])">
            <summary>
            <p>
            Return an output stream which will encrypt the data as it is written to it.
            The stream will be written out in chunks according to the size of the passed in buffer.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            <p>
            <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.
            </p>
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataGenerator.Close">
            <summary>
            <p>
            Close off the encrypted object - this is equivalent to calling Close() on the stream
            returned by the Open() method.
            </p>
            <p>
            <b>Note</b>: This does not close the underlying output stream, only the stream on top of
            it created by the Open() method.
            </p>
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpEncryptedDataList">
            <remarks>A holder for a list of PGP encryption method packets.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyFlags">
            <remarks>Key flag values for the KeyFlags subpacket.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair">
            <remarks>
            General class to handle JCA key pairs and convert them into OpenPGP ones.
            <p>
            A word for the unwary, the KeyId for an OpenPGP public key is calculated from
            a hash that includes the time of creation, if you pass a different date to the
            constructor below with the same public private key pair the KeyIs will not be the
            same as for previous generations of the key, so ideally you only want to do
            this once.
            </p>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair.#ctor(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Create a key pair from a PgpPrivateKey and a PgpPublicKey.</summary>
            <param name="pub">The public key.</param>
            <param name="priv">The private key.</param>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair.KeyId">
            <summary>The keyId associated with this key pair.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator">
            <remarks>
            Generator for a PGP master and subkey ring.
            This class will generate both the secret and public key rings
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,LibOrg.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>
            Create a new key ring generator using old style checksumming. It is recommended to use
            SHA1 checksumming where possible.
            </summary>
            <param name="certificationLevel">The certification level for keys on this ring.</param>
            <param name="masterKey">The master key pair.</param>
            <param name="id">The id to be associated with the ring.</param>
            <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
            <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
            <param name="hashedPackets">Packets to be included in the certification hash.</param>
            <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
            <param name="rand">input secured random.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.#ctor(System.Int32,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,System.String,LibOrg.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,System.Char[],System.Boolean,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>
            Create a new key ring generator.
            </summary>
            <param name="certificationLevel">The certification level for keys on this ring.</param>
            <param name="masterKey">The master key pair.</param>
            <param name="id">The id to be associated with the ring.</param>
            <param name="encAlgorithm">The algorithm to be used to protect secret keys.</param>
            <param name="passPhrase">The passPhrase to be used to protect secret keys.</param>
            <param name="useSha1">Checksum the secret keys with SHA1 rather than the older 16 bit checksum.</param>
            <param name="hashedPackets">Packets to be included in the certification hash.</param>
            <param name="unhashedPackets">Packets to be attached unhashed to the certification.</param>
            <param name="rand">input secured random.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair)">
            <summary>Add a subkey to the key ring to be generated with default certification.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.AddSubKey(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyPair,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector)">
            <summary>
            Add a subkey with specific hashed and unhashed packets associated with it and
            default certification.
            </summary>
            <param name="keyPair">Public/private key pair.</param>
            <param name="hashedPackets">Hashed packet values to be included in certification.</param>
            <param name="unhashedPackets">Unhashed packets values to be included in certification.</param>
            <exception cref="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.GenerateSecretKeyRing">
            <summary>Return the secret key ring.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyRingGenerator.GeneratePublicKeyRing">
            <summary>Return the public key ring that corresponds to the secret key ring.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpKeyValidationException">
            <remarks>
            Thrown if the key checksum is invalid.
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData">
            <summary>Class for processing literal data objects.</summary>
        </member>
        <member name="F:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.Console">
            <summary>The special name indicating a "for your eyes only" packet.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.GetRawFileName">
            Return the file name as an unintrepreted byte array.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.GetInputStream">
            <summary>The raw input stream for the data stream.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.GetDataStream">
            <summary>The input stream representing the data stream.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.Format">
            <summary>The format of the data stream - Binary or Text</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.FileName">
            <summary>The file name that's associated with the data stream.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralData.ModificationTime">
            <summary>The modification time for the file.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator">
            <remarks>Class for producing literal data packets.</remarks>
        </member>
        <member name="F:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Console">
            <summary>The special name indicating a "for your eyes only" packet.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.#ctor(System.Boolean)">
            <summary>
            Generates literal data objects in the old format.
            This is important if you need compatibility with PGP 2.6.x.
            </summary>
            <param name="oldFormat">If true, uses old format.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.String,System.Int64,System.DateTime)">
            <summary>
            <p>
            Open a literal data packet, returning a stream to store the data inside the packet.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
            <param name="outStr">The stream we want the packet in.</param>
            <param name="format">The format we are using.</param>
            <param name="name">The name of the 'file'.</param>
            <param name="length">The length of the data we will write.</param>
            <param name="modificationTime">The time of last modification we want stored.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.String,System.DateTime,System.Byte[])">
            <summary>
            <p>
            Open a literal data packet, returning a stream to store the data inside the packet,
            as an indefinite length stream. The stream is written out as a series of partial
            packets with a chunk size determined by the size of the passed in buffer.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            <p>
            <b>Note</b>: if the buffer is not a power of 2 in length only the largest power of 2
            bytes worth of the buffer will be used.</p>
            </summary>
            <param name="outStr">The stream we want the packet in.</param>
            <param name="format">The format we are using.</param>
            <param name="name">The name of the 'file'.</param>
            <param name="modificationTime">The time of last modification we want stored.</param>
            <param name="buffer">The buffer to use for collecting data to put into chunks.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Open(System.IO.Stream,System.Char,System.IO.FileInfo)">
            <summary>
            <p>
            Open a literal data packet for the passed in <c>FileInfo</c> object, returning
            an output stream for saving the file contents.
            </p>
            <p>
            The stream created can be closed off by either calling Close()
            on the stream or Close() on the generator. Closing the returned
            stream does not close off the Stream parameter <c>outStr</c>.
            </p>
            </summary>
            <param name="outStr">The stream we want the packet in.</param>
            <param name="format">The format we are using.</param>
            <param name="file">The <c>FileInfo</c> object containg the packet details.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpLiteralDataGenerator.Close">
            <summary>
            Close the literal data packet - this is equivalent to calling Close()
            on the stream returned by the Open() method.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpMarker">
            <remarks>
            A PGP marker packet - in general these should be ignored other than where
            the idea is to preserve the original input stream.
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory">
            <remarks>
            General class for reading a PGP object stream.
            <p>
            Note: if this class finds a PgpPublicKey or a PgpSecretKey it
            will create a PgpPublicKeyRing, or a PgpSecretKeyRing for each
            key found. If all you are trying to do is read a key ring file use
            either PgpPublicKeyRingBundle or PgpSecretKeyRingBundle.</p>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory.NextPgpObject">
            <summary>Return the next object in the stream, or null if the end is reached.</summary>
            <exception cref="T:System.IO.IOException">On a parse error</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpObjectFactory.AllPgpObjects">
            <summary>
            Return all available objects in a list.
            </summary>
            <returns>An <c>IList</c> containing all objects from this factory, in order.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature">
            <remarks>A one pass signature object.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.InitVerify(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Initialise the signature object for verification.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignature.Verify(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
            <summary>Verify the calculated signature against the passed in PgpSignature.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpOnePassSignatureList">
            <remarks>Holder for a list of PgpOnePassSignature objects.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPbeEncryptedData">
            <remarks>A password based encryption object.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPbeEncryptedData.GetInputStream">
            <summary>Return the raw input stream for the data stream.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPbeEncryptedData.GetDataStream(System.Char[])">
            <summary>Return the decrypted input stream, using the passed in passphrase.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey">
            <remarks>General class to contain a private key for use with other OpenPGP objects.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey.#ctor(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Int64)">
            <summary>
            Create a PgpPrivateKey from a regular private key and the ID of its
            associated public key.
            </summary>
            <param name="privateKey">Private key to use.</param>
            <param name="keyId">ID of the corresponding public key.</param>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey.KeyId">
            <summary>The keyId associated with the contained private key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey.Key">
            <summary>The contained private key.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey">
            <remarks>General class to handle a PGP public key object.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.#ctor(LibOrg.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.DateTime)">
            <summary>
            Create a PgpPublicKey from the passed in lightweight one.
            </summary>
            <remarks>
            Note: the time passed in affects the value of the key's keyId, so you probably only want
            to do this once for a lightweight key, or make sure you keep track of the time you used.
            </remarks>
            <param name="algorithm">Asymmetric algorithm type representing the public key.</param>
            <param name="pubKey">Actual public key to associate.</param>
            <param name="time">Date of creation.</param>
            <exception cref="T:System.ArgumentException">If <c>pubKey</c> is not public.</exception>
            <exception cref="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpException">On key creation problem.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.#ctor(LibOrg.BouncyCastle.Bcpg.PublicKeyPacket,LibOrg.BouncyCastle.Bcpg.TrustPacket,System.Collections.IList)">
            <summary>Constructor for a sub-key.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.#ctor(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Copy constructor.</summary>
            <param name="pubKey">The public key to copy.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetTrustData">
            <summary>Return the trust data associated with the public key, if present.</summary>
            <returns>A byte array with trust data, null otherwise.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetValidSeconds">
            <summary>The number of valid seconds from creation time - zero means no expiry.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetFingerprint">
            <summary>The fingerprint of the key</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetKey">
            <summary>The public key contained in the object.</summary>
            <returns>A lightweight public key.</returns>
            <exception cref="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpException">If the key algorithm is not recognised.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetUserIds">
            <summary>Allows enumeration of any user IDs associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetUserAttributes">
            <summary>Allows enumeration of any user attribute vectors associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>PgpUserAttributeSubpacketVector</c> objects.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForId(System.String)">
            <summary>Allows enumeration of any signatures associated with the passed in id.</summary>
            <param name="id">The ID to be matched.</param>
            <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesForUserAttribute(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector)">
            <summary>Allows enumeration of signatures associated with the passed in user attributes.</summary>
            <param name="userAttributes">The vector of user attributes to be matched.</param>
            <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignaturesOfType(System.Int32)">
            <summary>Allows enumeration of signatures of the passed in type that are on this key.</summary>
            <param name="signatureType">The type of the signature to be returned.</param>
            <returns>An <c>IEnumerable</c> of <c>PgpSignature</c> objects.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.GetSignatures">
            <summary>Allows enumeration of all signatures/certifications associated with this key.</summary>
            <returns>An <c>IEnumerable</c> with all signatures/certifications.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.IsRevoked">
            <summary>Check whether this (sub)key has a revocation signature on it.</summary>
            <returns>True, if this (sub)key has been revoked.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.AddCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.String,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
            <summary>Add a certification for an id to the given public key.</summary>
            <param name="key">The key the certification is to be added to.</param>
            <param name="id">The ID the certification is associated with.</param>
            <param name="certification">The new certification.</param>
            <returns>The re-certified key.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.AddCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
            <summary>Add a certification for the given UserAttributeSubpackets to the given public key.</summary>
            <param name="key">The key the certification is to be added to.</param>
            <param name="userAttributes">The attributes the certification is associated with.</param>
            <param name="certification">The new certification.</param>
            <returns>The re-certified key.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector)">
            <summary>
            Remove any certifications associated with a user attribute subpacket on a key.
            </summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="userAttributes">The attributes to be removed.</param>
            <returns>
            The re-certified key, or null if the user attribute subpacket was not found on the key.
            </returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.String)">
            <summary>Remove any certifications associated with a given ID on a key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="id">The ID that is to be removed.</param>
            <returns>The re-certified key, or null if the ID was not found on the key.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,System.String,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
            <summary>Remove a certification associated with a given ID on a key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="id">The ID that the certfication is to be removed from.</param>
            <param name="certification">The certfication to be removed.</param>
            <returns>The re-certified key, or null if the certification was not found.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
            <summary>Remove a certification associated with a given user attributes on a key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="userAttributes">The user attributes that the certfication is to be removed from.</param>
            <param name="certification">The certification to be removed.</param>
            <returns>The re-certified key, or null if the certification was not found.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.AddCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
            <summary>Add a revocation or some other key certification to a key.</summary>
            <param name="key">The key the revocation is to be added to.</param>
            <param name="certification">The key signature to be added.</param>
            <returns>The new changed public key object.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.RemoveCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature)">
            <summary>Remove a certification from the key.</summary>
            <param name="key">The key the certifications are to be removed from.</param>
            <param name="certification">The certfication to be removed.</param>
            <returns>The modified key, null if the certification was not found.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.Version">
            <summary>The version of this key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.CreationTime">
            <summary>The creation time of this key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.ValidDays">
            <summary>The number of valid days from creation time - zero means no expiry.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.KeyId">
            <summary>The keyId associated with the public key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.IsEncryptionKey">
            <summary>
            Check if this key has an algorithm type that makes it suitable to use for encryption.
            </summary>
            <remarks>
            Note: with version 4 keys KeyFlags subpackets should also be considered when present for
            determining the preferred use of the key.
            </remarks>
            <returns>
            <c>true</c> if this key algorithm is suitable for encryption.
            </returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.IsMasterKey">
            <summary>True, if this is a master key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.Algorithm">
            <summary>The algorithm code associated with the public key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey.BitStrength">
            <summary>The strength of the key in bits.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyEncryptedData">
            <remarks>A public key encrypted data object.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.GetSymmetricAlgorithm(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>
            Return the algorithm code for the symmetric algorithm used to encrypt the data.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.GetDataStream(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Return the decrypted data stream for the packet.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyEncryptedData.KeyId">
            <summary>The key ID for the key used to encrypt the data.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing">
            <remarks>
            Class to hold a single master public key and its subkeys.
            <p>
            Often PGP keyring files consist of multiple master keys, if you are trying to process
            or construct one of these you should use the <c>PgpPublicKeyRingBundle</c> class.
            </p>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKey">
            <summary>Return the first public key in the ring.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKey(System.Int64)">
            <summary>Return the public key referred to by the passed in key ID if it is present.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.GetPublicKeys">
            <summary>Allows enumeration of all the public keys.</summary>
            <returns>An <c>IEnumerable</c> of <c>PgpPublicKey</c> objects.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.InsertPublicKey(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Returns a new key ring with the public key passed in either added or
            replacing an existing one.
            </summary>
            <param name="pubRing">The public key ring to be modified.</param>
            <param name="pubKey">The public key to be inserted.</param>
            <returns>A new <c>PgpPublicKeyRing</c></returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing.RemovePublicKey(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Returns a new key ring with the public key passed in removed from the key ring.</summary>
            <param name="pubRing">The public key ring to be modified.</param>
            <param name="pubKey">The public key to be removed.</param>
            <returns>A new <c>PgpPublicKeyRing</c>, or null if pubKey is not found.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle">
            <remarks>
            Often a PGP key ring file is made up of a succession of master/sub-key key rings.
            If you want to read an entire public key file in one hit this is the class for you.
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.#ctor(System.IO.Stream)">
            <summary>Build a PgpPublicKeyRingBundle from the passed in input stream.</summary>
            <param name="inputStream">Input stream containing data.</param>
            <exception cref="T:System.IO.IOException">If a problem parsing the stream occurs.</exception>
            <exception cref="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpException">If an object is encountered which isn't a PgpPublicKeyRing.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings">
            <summary>Allow enumeration of the public key rings making up this collection.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetKeyRings(System.String,System.Boolean,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <param name="ignoreCase">If true, case is ignored in user ID comparisons.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetPublicKey(System.Int64)">
            <summary>Return the PGP public key associated with the given key id.</summary>
            <param name="keyId">The ID of the public key to return.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.GetPublicKeyRing(System.Int64)">
            <summary>Return the public key ring which contains the key referred to by keyId</summary>
            <param name="keyId">key ID to match against</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.Contains(System.Int64)">
            <summary>
            Return true if a key matching the passed in key ID is present, false otherwise.
            </summary>
            <param name="keyID">key ID to look for.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.AddPublicKeyRing(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle and
            the passed in public key ring.
            </summary>
            <param name="bundle">The <c>PgpPublicKeyRingBundle</c> the key ring is to be added to.</param>
            <param name="publicKeyRing">The key ring to be added.</param>
            <returns>A new <c>PgpPublicKeyRingBundle</c> merging the current one with the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is already present.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.RemovePublicKeyRing(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle with
            the passed in public key ring removed.
            </summary>
            <param name="bundle">The <c>PgpPublicKeyRingBundle</c> the key ring is to be removed from.</param>
            <param name="publicKeyRing">The key ring to be removed.</param>
            <returns>A new <c>PgpPublicKeyRingBundle</c> not containing the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is not present.</exception>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRingBundle.Count">
            <summary>Return the number of key rings in this collection.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey">
            <remarks>General class to handle a PGP secret key object.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ExtractPrivateKey(System.Char[])">
            <summary>Extract a <c>PgpPrivateKey</c> from this secret key's encrypted contents.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.CopyWithNewPassword(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey,System.Char[],System.Char[],LibOrg.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key, encrypted using a new password
            and the passed in algorithm.
            </summary>
            <param name="key">The PgpSecretKey to be copied.</param>
            <param name="oldPassPhrase">The current password for the key.</param>
            <param name="newPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.ReplacePublicKey(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Replace the passed the public key on the passed in secret key.</summary>
            <param name="secretKey">Secret key to change.</param>
            <param name="publicKey">New public key.</param>
            <returns>A new secret key.</returns>
            <exception cref="T:System.ArgumentException">If KeyId's do not match.</exception>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.IsSigningKey">
            <summary>
            Check if this key has an algorithm type that makes it suitable to use for signing.
            </summary>
            <remarks>
            Note: with version 4 keys KeyFlags subpackets should also be considered when present for
            determining the preferred use of the key.
            </remarks>
            <returns>
            <c>true</c> if this key algorithm is suitable for use with signing.
            </returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.IsMasterKey">
            <summary>True, if this is a master key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.KeyEncryptionAlgorithm">
            <summary>The algorithm the key is encrypted with.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.KeyId">
            <summary>The key ID of the public key associated with this key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.PublicKey">
            <summary>The public key associated with this key.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.UserIds">
            <summary>Allows enumeration of any user IDs associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey.UserAttributes">
            <summary>Allows enumeration of any user attribute vectors associated with the key.</summary>
            <returns>An <c>IEnumerable</c> of <c>string</c> objects.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing">
            <remarks>
            Class to hold a single master secret key and its subkeys.
            <p>
            Often PGP keyring files consist of multiple master keys, if you are trying to process
            or construct one of these you should use the <c>PgpSecretKeyRingBundle</c> class.
            </p>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetPublicKey">
            <summary>Return the public key for the master key.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetSecretKey">
            <summary>Return the master private key.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetSecretKeys">
            <summary>Allows enumeration of the secret keys.</summary>
            <returns>An <c>IEnumerable</c> of <c>PgpSecretKey</c> objects.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.GetExtraPublicKeys">
            <summary>
            Return an iterator of the public keys in the secret key ring that
            have no matching private key. At the moment only personal certificate data
            appears in this fashion.
            </summary>
            <returns>An <c>IEnumerable</c> of unattached, or extra, public keys.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.ReplacePublicKeys(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyRing)">
            <summary>
            Replace the public key set on the secret ring with the corresponding key off the public ring.
            </summary>
            <param name="secretRing">Secret ring to be changed.</param>
            <param name="publicRing">Public ring containing the new public key set.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.CopyWithNewPassword(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,System.Char[],System.Char[],LibOrg.BouncyCastle.Bcpg.SymmetricKeyAlgorithmTag,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>
            Return a copy of the passed in secret key ring, with the master key and sub keys encrypted
            using a new password and the passed in algorithm.
            </summary>
            <param name="ring">The <c>PgpSecretKeyRing</c> to be copied.</param>
            <param name="oldPassPhrase">The current password for key.</param>
            <param name="newPassPhrase">The new password for the key.</param>
            <param name="newEncAlgorithm">The algorithm to be used for the encryption.</param>
            <param name="rand">Source of randomness.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.InsertSecretKey(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey)">
            <summary>
            Returns a new key ring with the secret key passed in either added or
            replacing an existing one with the same key ID.
            </summary>
            <param name="secRing">The secret key ring to be modified.</param>
            <param name="secKey">The secret key to be inserted.</param>
            <returns>A new <c>PgpSecretKeyRing</c></returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing.RemoveSecretKey(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKey)">
            <summary>Returns a new key ring with the secret key passed in removed from the key ring.</summary>
            <param name="secRing">The secret key ring to be modified.</param>
            <param name="secKey">The secret key to be removed.</param>
            <returns>A new <c>PgpSecretKeyRing</c>, or null if secKey is not found.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle">
            <remarks>
            Often a PGP key ring file is made up of a succession of master/sub-key key rings.
            If you want to read an entire secret key file in one hit this is the class for you.
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.#ctor(System.IO.Stream)">
            <summary>Build a PgpSecretKeyRingBundle from the passed in input stream.</summary>
            <param name="inputStream">Input stream containing data.</param>
            <exception cref="T:System.IO.IOException">If a problem parsing the stream occurs.</exception>
            <exception cref="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpException">If an object is encountered which isn't a PgpSecretKeyRing.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings">
            <summary>Allow enumeration of the secret key rings making up this collection.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetKeyRings(System.String,System.Boolean,System.Boolean)">
            <summary>Allow enumeration of the key rings associated with the passed in userId.</summary>
            <param name="userId">The user ID to be matched.</param>
            <param name="matchPartial">If true, userId need only be a substring of an actual ID string to match.</param>
            <param name="ignoreCase">If true, case is ignored in user ID comparisons.</param>
            <returns>An <c>IEnumerable</c> of key rings which matched (possibly none).</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetSecretKey(System.Int64)">
            <summary>Return the PGP secret key associated with the given key id.</summary>
            <param name="keyId">The ID of the secret key to return.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.GetSecretKeyRing(System.Int64)">
            <summary>Return the secret key ring which contains the key referred to by keyId</summary>
            <param name="keyId">The ID of the secret key</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.Contains(System.Int64)">
            <summary>
            Return true if a key matching the passed in key ID is present, false otherwise.
            </summary>
            <param name="keyID">key ID to look for.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.AddSecretKeyRing(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle and
            the passed in secret key ring.
            </summary>
            <param name="bundle">The <c>PgpSecretKeyRingBundle</c> the key ring is to be added to.</param>
            <param name="secretKeyRing">The key ring to be added.</param>
            <returns>A new <c>PgpSecretKeyRingBundle</c> merging the current one with the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is already present.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.RemoveSecretKeyRing(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRing)">
            <summary>
            Return a new bundle containing the contents of the passed in bundle with
            the passed in secret key ring removed.
            </summary>
            <param name="bundle">The <c>PgpSecretKeyRingBundle</c> the key ring is to be removed from.</param>
            <param name="secretKeyRing">The key ring to be removed.</param>
            <returns>A new <c>PgpSecretKeyRingBundle</c> not containing the passed in key ring.</returns>
            <exception cref="T:System.ArgumentException">If the keyId for the passed in key ring is not present.</exception>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSecretKeyRingBundle.Count">
            <summary>Return the number of rings in this collection.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature">
            <remarks>A PGP signature object.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.VerifyCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Verify the signature as certifying the passed in public key as associated
            with the passed in user attributes.
            </summary>
            <param name="userAttributes">User attributes the key was stored under.</param>
            <param name="key">The key to be verified.</param>
            <returns>True, if the signature matches, false otherwise.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.VerifyCertification(System.String,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>
            Verify the signature as certifying the passed in public key as associated
            with the passed in ID.
            </summary>
            <param name="id">ID the key was stored under.</param>
            <param name="key">The key to be verified.</param>
            <returns>True, if the signature matches, false otherwise.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.VerifyCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Verify a certification for the passed in key against the passed in master key.</summary>
            <param name="masterKey">The key we are verifying against.</param>
            <param name="pubKey">The key we are verifying.</param>
            <returns>True, if the certification is valid, false otherwise.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.VerifyCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Verify a key certification, such as revocation, for the passed in key.</summary>
            <param name="pubKey">The key we are checking.</param>
            <returns>True, if the certification is valid, false otherwise.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.Version">
            <summary>The OpenPGP version number for this signature.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.KeyAlgorithm">
            <summary>The key algorithm associated with this signature.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.HashAlgorithm">
            <summary>The hash algorithm associated with this signature.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.KeyId">
            <summary>The ID of the key that created the signature.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.CreationTime">
            <summary>The creation time of this signature.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignature.HasSubpackets">
            <summary>
            Return true if the signature has either hashed or unhashed subpackets.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator">
            <remarks>Generator for PGP signatures.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.#ctor(LibOrg.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,LibOrg.BouncyCastle.Bcpg.HashAlgorithmTag)">
            <summary>Create a generator for the passed in keyAlgorithm and hashAlgorithm codes.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.InitSign(System.Int32,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.InitSign(System.Int32,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateOnePassVersion(System.Boolean)">
            <summary>Return the one pass header associated with the current signature.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.Generate">
            <summary>Return a signature object containing the current signature state.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(System.String,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification for the passed in ID and key.</summary>
            <param name="id">The ID we are certifying against the public key.</param>
            <param name="pubKey">The key we are certifying against the ID.</param>
            <returns>The certification.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification for the passed in userAttributes.</summary>
            <param name="userAttributes">The ID we are certifying against the public key.</param>
            <param name="pubKey">The key we are certifying against the ID.</param>
            <returns>The certification.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification for the passed in key against the passed in master key.</summary>
            <param name="masterKey">The key we are certifying against.</param>
            <param name="pubKey">The key we are certifying.</param>
            <returns>The certification.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureGenerator.GenerateCertification(LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPublicKey)">
            <summary>Generate a certification, such as a revocation, for the passed in key.</summary>
            <param name="pubKey">The key we are certifying.</param>
            <returns>The certification.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureList">
            <remarks>A list of PGP signatures - normally in the signature block after literal data.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator">
            <remarks>Generator for signature subpackets.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetTrust(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Add a TrustSignature packet to the signature. The values for depth and trust are largely
            installation dependent but there are some guidelines in RFC 4880 - 5.2.3.13.
            </summary>
            <param name="isCritical">true if the packet is critical.</param>
            <param name="depth">depth level.</param>
            <param name="trustAmount">trust amount.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetKeyExpirationTime(System.Boolean,System.Int64)">
            <summary>
            Set the number of seconds a key is valid for after the time of its creation.
            A value of zero means the key never expires.
            </summary>
            <param name="isCritical">True, if should be treated as critical, false otherwise.</param>
            <param name="seconds">The number of seconds the key is valid, or zero if no expiry.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetSignatureExpirationTime(System.Boolean,System.Int64)">
            <summary>
            Set the number of seconds a signature is valid for after the time of its creation.
            A value of zero means the signature never expires.
            </summary>
            <param name="isCritical">True, if should be treated as critical, false otherwise.</param>
            <param name="seconds">The number of seconds the signature is valid, or zero if no expiry.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetSignatureCreationTime(System.Boolean,System.DateTime)">
            <summary>
            Set the creation time for the signature.
            <p>
            Note: this overrides the generation of a creation time when the signature
            is generated.</p>
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetRevocationReason(System.Boolean,LibOrg.BouncyCastle.Bcpg.RevocationReasonTag,System.String)">
            <summary>
            Sets revocation reason sub packet
            </summary>	    
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetRevocationKey(System.Boolean,LibOrg.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,System.Byte[])">
            <summary>
            Sets revocation key sub packet
            </summary>	
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketGenerator.SetIssuerKeyID(System.Boolean,System.Int64)">
            <summary>
            Sets issuer key sub packet
            </summary>	
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector">
            <remarks>Container for a list of signature subpackets.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.HasSubpacket(LibOrg.BouncyCastle.Bcpg.SignatureSubpacketTag)">
             Return true if a particular subpacket type exists.
            
             @param type type to look for.
             @return true if present, false otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSubpackets(LibOrg.BouncyCastle.Bcpg.SignatureSubpacketTag)">
            Return all signature subpackets of the passed in type.
            @param type subpacket type code
            @return an array of zero or more matching subpackets.
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetSignatureExpirationTime">
            <summary>
            Return the number of seconds a signature is valid for after its creation date.
            A value of zero means the signature never expires.
            </summary>
            <returns>Seconds a signature is valid for.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.GetKeyExpirationTime">
            <summary>
            Return the number of seconds a key is valid for after its creation date.
            A value of zero means the key never expires.
            </summary>
            <returns>Seconds a signature is valid for.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpSignatureSubpacketVector.Count">
            <summary>Return the number of packets this vector contains.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUserAttributeSubpacketVector">
            <remarks>Container for a list of user attribute subpackets.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUtilities">
            <remarks>Basic utility class.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.WriteFileToLiteralData(System.IO.Stream,System.Char,System.IO.FileInfo)">
            <summary>Write out the passed in file as a literal data packet.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.WriteFileToLiteralData(System.IO.Stream,System.Char,System.IO.FileInfo,System.Byte[])">
            <summary>Write out the passed in file as a literal data packet in partial packet format.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpUtilities.GetDecoderStream(System.IO.Stream)">
            <summary>
            Return either an ArmoredInputStream or a BcpgInputStream based on whether
            the initial characters of the stream are binary PGP encodings or not.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator">
            <remarks>Generator for old style PGP V3 Signatures.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.#ctor(LibOrg.BouncyCastle.Bcpg.PublicKeyAlgorithmTag,LibOrg.BouncyCastle.Bcpg.HashAlgorithmTag)">
            <summary>Create a generator for the passed in keyAlgorithm and hashAlgorithm codes.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.InitSign(System.Int32,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.InitSign(System.Int32,LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpPrivateKey,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Initialise the generator for signing.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.GenerateOnePassVersion(System.Boolean)">
            <summary>Return the one pass header associated with the current signature.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Bcpg.OpenPgp.PgpV3SignatureGenerator.Generate">
            <summary>Return a V3 signature object containing the current signature state.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.OpenSsl.MiscPemGenerator">
            PEM generator for the original set of PEM objects used in Open SSL.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.IO.Pem.PemObjectGenerator.Generate">
            <returns>
            A <see cref="T:LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject"/>
            </returns>
            <exception cref="T:LibOrg.BouncyCastle.Utilities.IO.Pem.PemGenerationException"></exception>
        </member>
        <member name="T:LibOrg.BouncyCastle.OpenSsl.PemReader">
            Class for reading OpenSSL PEM encoded streams containing 
            X509 certificates, PKCS8 encoded keys and PKCS7 objects.
            <p>
            In the case of PKCS7 objects the reader will return a CMS ContentInfo object. Keys and
            Certificates will be returned using the appropriate java.security type.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.IO.Pem.PemReader.ReadPemObject">
            <returns>
            A <see cref="T:LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject"/>
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.PemReader.#ctor(System.IO.TextReader)">
             Create a new PemReader
            
             @param reader the Reader
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.PemReader.#ctor(System.IO.TextReader,LibOrg.BouncyCastle.OpenSsl.IPasswordFinder)">
             Create a new PemReader with a password finder
            
             @param reader the Reader
             @param pFinder the password finder
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.PemReader.ReadCertificate(LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a X509Certificate.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.PemReader.ReadCrl(LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a X509CRL.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.PemReader.ReadCertificateRequest(LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a PKCS10 certification request.
            
             @return the certificate request.
             @throws IOException if an I/O error occured
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.PemReader.ReadAttributeCertificate(LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a X509 Attribute Certificate.
            
             @return the X509 Attribute Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.PemReader.ReadPkcs7(LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a PKCS7 object. This returns a ContentInfo object suitable for use with the CMS
             API.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.PemReader.ReadPrivateKey(LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject)">
            Read a Key Pair
        </member>
        <member name="T:LibOrg.BouncyCastle.OpenSsl.PemWriter">
            <remarks>General purpose writer for OpenSSL PEM objects.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.IO.Pem.PemWriter">
            A generic PEM writer, based on RFC 1421
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.IO.Pem.PemWriter.#ctor(System.IO.TextWriter)">
             Base constructor.
            
             @param out output stream to use.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.IO.Pem.PemWriter.GetOutputSize(LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Return the number of bytes or characters required to contain the
             passed in object if it is PEM encoded.
            
             @param obj pem object to be output
             @return an estimate of the number of bytes
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.PemWriter.#ctor(System.IO.TextWriter)">
            <param name="writer">The TextWriter object to write the output to.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.Pkcs8Generator.#ctor(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
             Constructor for an unencrypted private key PEM object.
            
             @param key private key to be encoded.
        </member>
        <member name="M:LibOrg.BouncyCastle.OpenSsl.Pkcs8Generator.#ctor(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.String)">
             Constructor for an encrypted private key PEM object.
            
             @param key       private key to be encoded
             @param algorithm encryption algorithm to use
             @param provider  provider to use
             @throws NoSuchAlgorithmException if algorithm/mode cannot be found
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkcs.Pkcs10CertificationRequest">
             <remarks>
             A class for verifying and creating Pkcs10 Certification requests.
             </remarks>
             <code>
             CertificationRequest ::= Sequence {
               certificationRequestInfo  CertificationRequestInfo,
               signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
               signature                 BIT STRING
             }
            
             CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </code>
             see <a href="http://www.rsasecurity.com/rsalabs/node.asp?id=2132"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor(System.String,LibOrg.BouncyCastle.Asn1.X509.X509Name,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Asn1.Asn1Set,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
             <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureAlgorithm">Name of Sig Alg.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="publicKey">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
             <param name="signingKey">Matching Private key for nominated (above) public key to be used to sign the request.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkcs.Pkcs10CertificationRequest.GetPublicKey">
            <summary>
            Get the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkcs.Pkcs10CertificationRequest.Verify">
            <summary>
            Verify Pkcs10 Cert Request is valid.
            </summary>
            <returns>true = valid.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned">
             <remarks>
             A class for creating and verifying Pkcs10 Certification requests (this is an extension on <see cref="T:LibOrg.BouncyCastle.Pkcs.Pkcs10CertificationRequest"/>).
             The requests are made using delay signing. This is useful for situations where
             the private key is in another environment and not directly accessible (e.g. HSM)
             So the first step creates the request, then the signing is done outside this
             object and the signature is then used to complete the request.
             </remarks>
             <code>
             CertificationRequest ::= Sequence {
               certificationRequestInfo  CertificationRequestInfo,
               signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
               signature                 BIT STRING
             }
            
             CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </code>
             see <a href="http://www.rsasecurity.com/rsalabs/node.asp?id=2132"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.#ctor(System.String,LibOrg.BouncyCastle.Asn1.X509.X509Name,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Asn1.Asn1Set)">
            <summary>
            Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
            </summary>
            <param name="signatureAlgorithm">Name of Sig Alg.</param>
            <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
            <param name="publicKey">Public Key to be included in cert reqest.</param>
            <param name="attributes">ASN1Set of Attributes.</param>
            <remarks>
            After the object is constructed use the <see cref="M:LibOrg.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.GetDataToSign"/> and finally the
            SignRequest methods to finalize the request.
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkcs.Pkcs12Store.GetCertificate(System.String)">
            simply return the cert entry for the private key
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkcs.Pkcs12Utilities">
            Utility class for reencoding PKCS#12 files to definite length.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[])">
             Just re-encode the outer layer of the PKCS#12 file to definite length encoding.
            
             @param berPKCS12File - original PKCS#12 file
             @return a byte array representing the DER encoding of the PFX structure
             @throws IOException
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[],System.Char[])">
             Re-encode the PKCS#12 structure to definite length encoding at the inner layer
             as well, recomputing the MAC accordingly.
            
             @param berPKCS12File - original PKCS12 file.
             @param provider - provider to use for MAC calculation.
             @return a byte array representing the DER encoding of the PFX structure.
             @throws IOException on parsing, encoding errors.
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.CertStatus.RevocationDate">
            <summary>
            Returns the revocationDate.
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.CertStatus.Status">
            <summary>
            Returns the certStatus.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixAttrCertChecker.GetSupportedExtensions">
            Returns an immutable <code>Set</code> of X.509 attribute certificate
            extensions that this <code>PkixAttrCertChecker</code> supports or
            <code>null</code> if no extensions are supported.
            <p>
            Each element of the set is a <code>String</code> representing the
            Object Identifier (OID) of the X.509 extension that is supported.
            </p>
            <p>
            All X.509 attribute certificate extensions that a
            <code>PkixAttrCertChecker</code> might possibly be able to process
            should be included in the set.
            </p>
            
            @return an immutable <code>Set</code> of X.509 extension OIDs (in
                    <code>String</code> format) supported by this
                    <code>PkixAttrCertChecker</code>, or <code>null</code> if no
                    extensions are supported
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixAttrCertChecker.Check(LibOrg.BouncyCastle.X509.IX509AttributeCertificate,LibOrg.BouncyCastle.Pkix.PkixCertPath,LibOrg.BouncyCastle.Pkix.PkixCertPath,System.Collections.ICollection)">
            Performs checks on the specified attribute certificate. Every handled
            extension is rmeoved from the <code>unresolvedCritExts</code>
            collection.
            
            @param attrCert The attribute certificate to be checked.
            @param certPath The certificate path which belongs to the attribute
                       certificate issuer public key certificate.
            @param holderCertPath The certificate path which belongs to the holder
                       certificate.
            @param unresolvedCritExts a <code>Collection</code> of OID strings
                       representing the current set of unresolved critical extensions
            @throws CertPathValidatorException if the specified attribute certificate
                        does not pass the check.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixAttrCertChecker.Clone">
            Returns a clone of this object.
            
            @return a copy of this <code>PkixAttrCertChecker</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixAttrCertPathBuilder.Build(LibOrg.BouncyCastle.Pkix.PkixBuilderParameters)">
             Build and validate a CertPath using the given parameter.
            
             @param params PKIXBuilderParameters object containing all information to
                        build the CertPath
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixAttrCertPathValidator">
            CertPathValidatorSpi implementation for X.509 Attribute Certificates la RFC 3281.
            
            @see LibOrg.BouncyCastle.x509.ExtendedPkixParameters
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixAttrCertPathValidator.Validate(LibOrg.BouncyCastle.Pkix.PkixCertPath,LibOrg.BouncyCastle.Pkix.PkixParameters)">
            Validates an attribute certificate with the given certificate path.
            
            <p>
            <code>params</code> must be an instance of
            <code>ExtendedPkixParameters</code>.
            </p><p>
            The target constraints in the <code>params</code> must be an
            <code>X509AttrCertStoreSelector</code> with at least the attribute
            certificate criterion set. Obey that also target informations may be
            necessary to correctly validate this attribute certificate.
            </p><p>
            The attribute certificate issuer must be added to the trusted attribute
            issuers with {@link ExtendedPkixParameters#setTrustedACIssuers(Set)}.
            </p>
            @param certPath The certificate path which belongs to the attribute
                       certificate issuer public key certificate.
            @param params The PKIX parameters.
            @return A <code>PKIXCertPathValidatorResult</code> of the result of
                    validating the <code>certPath</code>.
            @throws InvalidAlgorithmParameterException if <code>params</code> is
                        inappropriate for this validator.
            @throws CertPathValidatorException if the verification fails.
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixBuilderParameters">
            <summary>
            Summary description for PkixBuilderParameters.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixParameters">
            <summary>
            Summary description for PkixParameters.
            </summary>
        </member>
        <member name="F:LibOrg.BouncyCastle.Pkix.PkixParameters.PkixValidityModel">
            This is the default PKIX validity model. Actually there are two variants
            of this: The PKIX model and the modified PKIX model. The PKIX model
            verifies that all involved certificates must have been valid at the
            current time. The modified PKIX model verifies that all involved
            certificates were valid at the signing time. Both are indirectly choosen
            with the {@link PKIXParameters#setDate(java.util.Date)} method, so this
            methods sets the Date when <em>all</em> certificates must have been
            valid.
        </member>
        <member name="F:LibOrg.BouncyCastle.Pkix.PkixParameters.ChainValidityModel">
            This model uses the following validity model. Each certificate must have
            been valid at the moment where is was used. That means the end
            certificate must have been valid at the time the signature was done. The
            CA certificate which signed the end certificate must have been valid,
            when the end certificate was signed. The CA (or Root CA) certificate must
            have been valid, when the CA certificate was signed and so on. So the
            {@link PKIXParameters#setDate(java.util.Date)} method sets the time, when
            the <em>end certificate</em> must have been valid. <p/> It is used e.g.
            in the German signature law.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.#ctor(LibOrg.BouncyCastle.Utilities.Collections.ISet)">
             Creates an instance of PKIXParameters with the specified Set of
             most-trusted CAs. Each element of the set is a TrustAnchor.<br />
             <br />
             Note that the Set is copied to protect against subsequent modifications.
            
             @param trustAnchors
                        a Set of TrustAnchors
            
             @exception InvalidAlgorithmParameterException
                            if the specified Set is empty
                            <code>(trustAnchors.isEmpty() == true)</code>
             @exception NullPointerException
                            if the specified Set is <code>null</code>
             @exception ClassCastException
                            if any of the elements in the Set are not of type
                            <code>java.security.cert.TrustAnchor</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetTargetCertConstraints">
             Returns the required constraints on the target certificate. The
             constraints are returned as an instance of CertSelector. If
             <code>null</code>, no constraints are defined.<br />
             <br />
             Note that the CertSelector returned is cloned to protect against
             subsequent modifications.
            
             @return a CertSelector specifying the constraints on the target
                     certificate (or <code>null</code>)
            
             @see #setTargetCertConstraints(CertSelector)
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetTargetCertConstraints(LibOrg.BouncyCastle.X509.Store.IX509Selector)">
             Sets the required constraints on the target certificate. The constraints
             are specified as an instance of CertSelector. If null, no constraints are
             defined.<br />
             <br />
             Note that the CertSelector specified is cloned to protect against
             subsequent modifications.
            
             @param selector
                        a CertSelector specifying the constraints on the target
                        certificate (or <code>null</code>)
            
             @see #getTargetCertConstraints()
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetInitialPolicies">
             Returns an immutable Set of initial policy identifiers (OID strings),
             indicating that any one of these policies would be acceptable to the
             certificate user for the purposes of certification path processing. The
             default return value is an empty <code>Set</code>, which is
             interpreted as meaning that any policy would be acceptable.
            
             @return an immutable <code>Set</code> of initial policy OIDs in String
                     format, or an empty <code>Set</code> (implying any policy is
                     acceptable). Never returns <code>null</code>.
            
             @see #setInitialPolicies(java.util.Set)
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetInitialPolicies(LibOrg.BouncyCastle.Utilities.Collections.ISet)">
             Sets the <code>Set</code> of initial policy identifiers (OID strings),
             indicating that any one of these policies would be acceptable to the
             certificate user for the purposes of certification path processing. By
             default, any policy is acceptable (i.e. all policies), so a user that
             wants to allow any policy as acceptable does not need to call this
             method, or can call it with an empty <code>Set</code> (or
             <code>null</code>).<br />
             <br />
             Note that the Set is copied to protect against subsequent modifications.<br />
             <br />
            
             @param initialPolicies
                        a Set of initial policy OIDs in String format (or
                        <code>null</code>)
            
             @exception ClassCastException
                            if any of the elements in the set are not of type String
            
             @see #getInitialPolicies()
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetCertPathCheckers(System.Collections.IList)">
             Sets a <code>List</code> of additional certification path checkers. If
             the specified List contains an object that is not a PKIXCertPathChecker,
             it is ignored.<br />
             <br />
             Each <code>PKIXCertPathChecker</code> specified implements additional
             checks on a certificate. Typically, these are checks to process and
             verify private extensions contained in certificates. Each
             <code>PKIXCertPathChecker</code> should be instantiated with any
             initialization parameters needed to execute the check.<br />
             <br />
             This method allows sophisticated applications to extend a PKIX
             <code>CertPathValidator</code> or <code>CertPathBuilder</code>. Each
             of the specified PKIXCertPathCheckers will be called, in turn, by a PKIX
             <code>CertPathValidator</code> or <code>CertPathBuilder</code> for
             each certificate processed or validated.<br />
             <br />
             Regardless of whether these additional PKIXCertPathCheckers are set, a
             PKIX <code>CertPathValidator</code> or <code>CertPathBuilder</code>
             must perform all of the required PKIX checks on each certificate. The one
             exception to this rule is if the RevocationEnabled flag is set to false
             (see the {@link #setRevocationEnabled(boolean) setRevocationEnabled}
             method).<br />
             <br />
             Note that the List supplied here is copied and each PKIXCertPathChecker
             in the list is cloned to protect against subsequent modifications.
            
             @param checkers
                        a List of PKIXCertPathCheckers. May be null, in which case no
                        additional checkers will be used.
             @exception ClassCastException
                            if any of the elements in the list are not of type
                            <code>java.security.cert.PKIXCertPathChecker</code>
             @see #getCertPathCheckers()
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetCertPathCheckers">
             Returns the List of certification path checkers. Each PKIXCertPathChecker
             in the returned IList is cloned to protect against subsequent modifications.
            
             @return an immutable List of PKIXCertPathCheckers (may be empty, but not
                     <code>null</code>)
            
             @see #setCertPathCheckers(java.util.List)
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.AddCertPathChecker(LibOrg.BouncyCastle.Pkix.PkixCertPathChecker)">
             Adds a <code>PKIXCertPathChecker</code> to the list of certification
             path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}
             method for more details.
             <p>
             Note that the <code>PKIXCertPathChecker</code> is cloned to protect
             against subsequent modifications.</p>
            
             @param checker a <code>PKIXCertPathChecker</code> to add to the list of
             checks. If <code>null</code>, the checker is ignored (not added to list).
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetParams(LibOrg.BouncyCastle.Pkix.PkixParameters)">
             Method to support <code>Clone()</code> under J2ME.
             <code>super.Clone()</code> does not exist and fields are not copied.
            
             @param params Parameters to set. If this are
                        <code>ExtendedPkixParameters</code> they are copied to.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetStores(System.Collections.IList)">
             Sets the Bouncy Castle Stores for finding CRLs, certificates, attribute
             certificates or cross certificates.
             <p>
             The <code>IList</code> is cloned.
             </p>
            
             @param stores A list of stores to use.
             @see #getStores
             @throws ClassCastException if an element of <code>stores</code> is not
                         a {@link Store}.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.AddStore(LibOrg.BouncyCastle.X509.Store.IX509Store)">
             Adds a Bouncy Castle {@link Store} to find CRLs, certificates, attribute
             certificates or cross certificates.
             <p>
             This method should be used to add local stores, like collection based
             X.509 stores, if available. Local stores should be considered first,
             before trying to use additional (remote) locations, because they do not
             need possible additional network traffic.
             </p><p>
             If <code>store</code> is <code>null</code> it is ignored.
             </p>
            
             @param store The store to add.
             @see #getStores
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.AddAdditionalStore(LibOrg.BouncyCastle.X509.Store.IX509Store)">
             Adds an additional Bouncy Castle {@link Store} to find CRLs, certificates,
             attribute certificates or cross certificates.
             <p>
             You should not use this method. This method is used for adding additional
             X.509 stores, which are used to add (remote) locations, e.g. LDAP, found
             during X.509 object processing, e.g. in certificates or CRLs. This method
             is used in PKIX certification path processing.
             </p><p>
             If <code>store</code> is <code>null</code> it is ignored.
             </p>
            
             @param store The store to add.
             @see #getStores()
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetAdditionalStores">
             Returns an <code>IList</code> of additional Bouncy Castle
             <code>Store</code>s used for finding CRLs, certificates, attribute
             certificates or cross certificates.
            
             @return an immutable <code>IList</code> of additional Bouncy Castle
                     <code>Store</code>s. Never <code>null</code>.
            
             @see #addAddionalStore(Store)
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetStores">
             Returns an <code>IList</code> of Bouncy Castle
             <code>Store</code>s used for finding CRLs, certificates, attribute
             certificates or cross certificates.
            
             @return an immutable <code>IList</code> of Bouncy Castle
                     <code>Store</code>s. Never <code>null</code>.
            
             @see #setStores(IList)
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetAdditionalLocationsEnabled(System.Boolean)">
             Sets if additional {@link X509Store}s for locations like LDAP found in
             certificates or CRLs should be used.
            
             @param enabled <code>true</code> if additional stores are used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetTargetConstraints">
             Returns the required constraints on the target certificate or attribute
             certificate. The constraints are returned as an instance of
             <code>IX509Selector</code>. If <code>null</code>, no constraints are
             defined.
            
             <p>
             The target certificate in a PKIX path may be a certificate or an
             attribute certificate.
             </p><p>
             Note that the <code>IX509Selector</code> returned is cloned to protect
             against subsequent modifications.
             </p>
             @return a <code>IX509Selector</code> specifying the constraints on the
                     target certificate or attribute certificate (or <code>null</code>)
             @see #setTargetConstraints
             @see X509CertStoreSelector
             @see X509AttributeCertStoreSelector
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetTargetConstraints(LibOrg.BouncyCastle.X509.Store.IX509Selector)">
             Sets the required constraints on the target certificate or attribute
             certificate. The constraints are specified as an instance of
             <code>IX509Selector</code>. If <code>null</code>, no constraints are
             defined.
             <p>
             The target certificate in a PKIX path may be a certificate or an
             attribute certificate.
             </p><p>
             Note that the <code>IX509Selector</code> specified is cloned to protect
             against subsequent modifications.
             </p>
            
             @param selector a <code>IX509Selector</code> specifying the constraints on
                        the target certificate or attribute certificate (or
                        <code>null</code>)
             @see #getTargetConstraints
             @see X509CertStoreSelector
             @see X509AttributeCertStoreSelector
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetTrustedACIssuers">
             Returns the trusted attribute certificate issuers. If attribute
             certificates is verified the trusted AC issuers must be set.
             <p>
             The returned <code>ISet</code> consists of <code>TrustAnchor</code>s.
             </p><p>
             The returned <code>ISet</code> is immutable. Never <code>null</code>
             </p>
            
             @return Returns an immutable set of the trusted AC issuers.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetTrustedACIssuers(LibOrg.BouncyCastle.Utilities.Collections.ISet)">
             Sets the trusted attribute certificate issuers. If attribute certificates
             is verified the trusted AC issuers must be set.
             <p>
             The <code>trustedACIssuers</code> must be a <code>ISet</code> of
             <code>TrustAnchor</code>
             </p><p>
             The given set is cloned.
             </p>
            
             @param trustedACIssuers The trusted AC issuers to set. Is never
                        <code>null</code>.
             @throws ClassCastException if an element of <code>stores</code> is not
                         a <code>TrustAnchor</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetNecessaryACAttributes">
             Returns the neccessary attributes which must be contained in an attribute
             certificate.
             <p>
             The returned <code>ISet</code> is immutable and contains
             <code>String</code>s with the OIDs.
             </p>
            
             @return Returns the necessary AC attributes.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetNecessaryACAttributes(LibOrg.BouncyCastle.Utilities.Collections.ISet)">
             Sets the neccessary which must be contained in an attribute certificate.
             <p>
             The <code>ISet</code> must contain <code>String</code>s with the
             OIDs.
             </p><p>
             The set is cloned.
             </p>
            
             @param necessaryACAttributes The necessary AC attributes to set.
             @throws ClassCastException if an element of
                         <code>necessaryACAttributes</code> is not a
                         <code>String</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetProhibitedACAttributes">
             Returns the attribute certificates which are not allowed.
             <p>
             The returned <code>ISet</code> is immutable and contains
             <code>String</code>s with the OIDs.
             </p>
            
             @return Returns the prohibited AC attributes. Is never <code>null</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetProhibitedACAttributes(LibOrg.BouncyCastle.Utilities.Collections.ISet)">
             Sets the attribute certificates which are not allowed.
             <p>
             The <code>ISet</code> must contain <code>String</code>s with the
             OIDs.
             </p><p>
             The set is cloned.
             </p>
            
             @param prohibitedACAttributes The prohibited AC attributes to set.
             @throws ClassCastException if an element of
                         <code>prohibitedACAttributes</code> is not a
                         <code>String</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.GetAttrCertCheckers">
             Returns the attribute certificate checker. The returned set contains
             {@link PKIXAttrCertChecker}s and is immutable.
            
             @return Returns the attribute certificate checker. Is never
                     <code>null</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixParameters.SetAttrCertCheckers(LibOrg.BouncyCastle.Utilities.Collections.ISet)">
             Sets the attribute certificate checkers.
             <p>
             All elements in the <code>ISet</code> must a {@link PKIXAttrCertChecker}.
             </p>
             <p>
             The given set is cloned.
             </p>
            
             @param attrCertCheckers The attribute certificate checkers to set. Is
                        never <code>null</code>.
             @throws ClassCastException if an element of <code>attrCertCheckers</code>
                         is not a <code>PKIXAttrCertChecker</code>.
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.PkixParameters.IsUseDeltasEnabled">
            Whether delta CRLs should be used for checking the revocation status.
            Defaults to <code>false</code>.
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.PkixParameters.ValidityModel">
            The validity model.
            @see #CHAIN_VALIDITY_MODEL
            @see #PKIX_VALIDITY_MODEL
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.PkixParameters.IsAdditionalLocationsEnabled">
             Returns if additional {@link X509Store}s for locations like LDAP found
             in certificates or CRLs should be used.
            
             @return Returns <code>true</code> if additional stores are used.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixBuilderParameters.GetInstance(LibOrg.BouncyCastle.Pkix.PkixParameters)">
             Returns an instance of <code>PkixBuilderParameters</code>.
             <p>
             This method can be used to get a copy from other
             <code>PKIXBuilderParameters</code>, <code>PKIXParameters</code>,
             and <code>ExtendedPKIXParameters</code> instances.
             </p>
            
             @param pkixParams The PKIX parameters to create a copy of.
             @return An <code>PkixBuilderParameters</code> instance.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixBuilderParameters.GetExcludedCerts">
            <summary>
            Excluded certificates are not used for building a certification path.
            </summary>
            <returns>the excluded certificates.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixBuilderParameters.SetExcludedCerts(LibOrg.BouncyCastle.Utilities.Collections.ISet)">
            <summary>
            Sets the excluded certificates which are not used for building a
            certification path. If the <code>ISet</code> is <code>null</code> an
            empty set is assumed.
            </summary>
            <remarks>
            The given set is cloned to protect it against subsequent modifications.
            </remarks>
            <param name="excludedCerts">The excluded certificates to set.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixBuilderParameters.SetParams(LibOrg.BouncyCastle.Pkix.PkixParameters)">
            Can alse handle <code>ExtendedPKIXBuilderParameters</code> and
            <code>PKIXBuilderParameters</code>.
            
            @param params Parameters to set.
            @see LibOrg.BouncyCastle.x509.ExtendedPKIXParameters#setParams(java.security.cert.PKIXParameters)
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixBuilderParameters.Clone">
             Makes a copy of this <code>PKIXParameters</code> object. Changes to the
             copy will not affect the original and vice versa.
            
             @return a copy of this <code>PKIXParameters</code> object
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixCertPath">
             An immutable sequence of certificates (a certification path).<br />
             <br />
             This is an abstract class that defines the methods common to all CertPaths.
             Subclasses can handle different kinds of certificates (X.509, PGP, etc.).<br />
             <br />
             All CertPath objects have a type, a list of Certificates, and one or more
             supported encodings. Because the CertPath class is immutable, a CertPath
             cannot change in any externally visible way after being constructed. This
             stipulation applies to all public fields and methods of this class and any
             added or overridden by subclasses.<br />
             <br />
             The type is a string that identifies the type of Certificates in the
             certification path. For each certificate cert in a certification path
             certPath, cert.getType().equals(certPath.getType()) must be true.<br />
             <br />
             The list of Certificates is an ordered List of zero or more Certificates.
             This List and all of the Certificates contained in it must be immutable.<br />
             <br />
             Each CertPath object must support one or more encodings so that the object
             can be translated into a byte array for storage or transmission to other
             parties. Preferably, these encodings should be well-documented standards
             (such as PKCS#7). One of the encodings supported by a CertPath is considered
             the default encoding. This encoding is used if no encoding is explicitly
             requested (for the {@link #getEncoded()} method, for instance).<br />
             <br />
             All CertPath objects are also Serializable. CertPath objects are resolved
             into an alternate {@link CertPathRep} object during serialization. This
             allows a CertPath object to be serialized into an equivalent representation
             regardless of its underlying implementation.<br />
             <br />
             CertPath objects can be created with a CertificateFactory or they can be
             returned by other classes, such as a CertPathBuilder.<br />
             <br />
             By convention, X.509 CertPaths (consisting of X509Certificates), are ordered
             starting with the target certificate and ending with a certificate issued by
             the trust anchor. That is, the issuer of one certificate is the subject of
             the following one. The certificate representing the
             {@link TrustAnchor TrustAnchor} should not be included in the certification
             path. Unvalidated X.509 CertPaths may not follow these conventions. PKIX
             CertPathValidators will detect any departure from these conventions that
             cause the certification path to be invalid and throw a
             CertPathValidatorException.<br />
             <br />
             <strong>Concurrent Access</strong><br />
             <br />
             All CertPath objects must be thread-safe. That is, multiple threads may
             concurrently invoke the methods defined in this class on a single CertPath
             object (or more than one) with no ill effects. This is also true for the List
             returned by CertPath.getCertificates.<br />
             <br />
             Requiring CertPath objects to be immutable and thread-safe allows them to be
             passed around to various pieces of code without worrying about coordinating
             access. Providing this thread-safety is generally not difficult, since the
             CertPath and List objects in question are immutable.
            
             @see CertificateFactory
             @see CertPathBuilder
            <summary>
            CertPath implementation for X.509 certificates.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPath.SortCerts(System.Collections.IList)">
            @param certs
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPath.#ctor(System.Collections.ICollection)">
             Creates a CertPath of the specified type.
             This constructor is protected because most users should use
             a CertificateFactory to create CertPaths.
             @param type the standard name of the type of Certificatesin this path
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPath.#ctor(System.IO.Stream,System.String)">
             Creates a CertPath of the specified type.
             This constructor is protected because most users should use
             a CertificateFactory to create CertPaths.
            
             @param type the standard name of the type of Certificatesin this path
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPath.Equals(System.Object)">
             Compares this certification path for equality with the specified object.
             Two CertPaths are equal if and only if their types are equal and their
             certificate Lists (and by implication the Certificates in those Lists)
             are equal. A CertPath is never equal to an object that is not a CertPath.<br />
             <br />
             This algorithm is implemented by this method. If it is overridden, the
             behavior specified here must be maintained.
            
             @param other
                        the object to test for equality with this certification path
            
             @return true if the specified object is equal to this certification path,
                     false otherwise
            
             @see Object#hashCode() Object.hashCode()
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPath.GetEncoded">
             Returns the encoded form of this certification path, using
             the default encoding.
            
             @return the encoded bytes
             @exception CertificateEncodingException if an encoding error occurs
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPath.GetEncoded(System.String)">
             Returns the encoded form of this certification path, using
             the specified encoding.
            
             @param encoding the name of the encoding to use
             @return the encoded bytes
             @exception CertificateEncodingException if an encoding error
             occurs or the encoding requested is not supported
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPath.ToAsn1Object(LibOrg.BouncyCastle.X509.X509Certificate)">
             Return a DERObject containing the encoded certificate.
            
             @param cert the X509Certificate object to be encoded
            
             @return the DERObject
            
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.PkixCertPath.Encodings">
             Returns an iteration of the encodings supported by this
             certification path, with the default encoding
             first. Attempts to modify the returned Iterator via its
             remove method result in an UnsupportedOperationException.
            
             @return an Iterator over the names of the supported encodings (as Strings)
            
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.PkixCertPath.Certificates">
            <summary>
            Returns the list of certificates in this certification
            path.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixCertPathBuilder">
             Implements the PKIX CertPathBuilding algorithm for BouncyCastle.
            
             @see CertPathBuilderSpi
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathBuilder.Build(LibOrg.BouncyCastle.Pkix.PkixBuilderParameters)">
             Build and validate a CertPath using the given parameter.
            
             @param params PKIXBuilderParameters object containing all information to
                        build the CertPath
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixCertPathBuilderException">
            <summary>
            Summary description for PkixCertPathBuilderException.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixCertPathBuilderResult">
            <summary>
            Summary description for PkixCertPathBuilderResult.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorResult">
            <summary>
            Summary description for PkixCertPathValidatorResult.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathChecker.Init(System.Boolean)">
                     * Initializes the internal state of this <code>PKIXCertPathChecker</code>.
                     * <p>
                     * The <code>forward</code> flag specifies the order that certificates
                     * will be passed to the {@link #check check} method (forward or reverse). A
                     * <code>PKIXCertPathChecker</code> <b>must</b> support reverse checking
                     * and <b>may</b> support forward checking.
            		 * </p>
                     * 
                     * @param forward
                     *            the order that certificates are presented to the
                     *            <code>check</code> method. If <code>true</code>,
                     *            certificates are presented from target to most-trusted CA
                     *            (forward); if <code>false</code>, from most-trusted CA to
                     *            target (reverse).
                     * @exception CertPathValidatorException
                     *                if this <code>PKIXCertPathChecker</code> is unable to
                     *                check certificates in the specified order; it should never
                     *                be thrown if the forward flag is false since reverse
                     *                checking must be supported
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathChecker.IsForwardCheckingSupported">
            Indicates if forward checking is supported. Forward checking refers to
            the ability of the <code>PKIXCertPathChecker</code> to perform its
            checks when certificates are presented to the <code>check</code> method
            in the forward direction (from target to most-trusted CA).
            
            @return <code>true</code> if forward checking is supported,
                    <code>false</code> otherwise
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathChecker.GetSupportedExtensions">
                     * Returns an immutable <code>Set</code> of X.509 certificate extensions
                     * that this <code>PKIXCertPathChecker</code> supports (i.e. recognizes,
                     * is able to process), or <code>null</code> if no extensions are
                     * supported.
                     * <p>
                     * Each element of the set is a <code>String</code> representing the
                     * Object Identifier (OID) of the X.509 extension that is supported. The OID
                     * is represented by a set of nonnegative integers separated by periods.
                     * </p><p>
                     * All X.509 certificate extensions that a <code>PKIXCertPathChecker</code>
                     * might possibly be able to process should be included in the set.
            		 * </p>
                     * 
                     * @return an immutable <code>Set</code> of X.509 extension OIDs (in
                     *         <code>String</code> format) supported by this
                     *         <code>PKIXCertPathChecker</code>, or <code>null</code> if no
                     *         extensions are supported
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathChecker.Check(LibOrg.BouncyCastle.X509.X509Certificate,System.Collections.ICollection)">
            Performs the check(s) on the specified certificate using its internal
            state and removes any critical extensions that it processes from the
            specified collection of OID strings that represent the unresolved
            critical extensions. The certificates are presented in the order
            specified by the <code>init</code> method.
            
            @param cert
                       the <code>Certificate</code> to be checked
            @param unresolvedCritExts
                       a <code>Collection</code> of OID strings representing the
                       current set of unresolved critical extensions
            @exception CertPathValidatorException
                           if the specified certificate does not pass the check
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathChecker.Clone">
            Returns a clone of this object. Calls the <code>Object.clone()</code>
            method. All subclasses which maintain state must support and override
            this method, if necessary.
            
            @return a copy of this <code>PKIXCertPathChecker</code>
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixCertPathValidator">
            The <i>Service Provider Interface</i> (<b>SPI</b>)
            for the {@link CertPathValidator CertPathValidator} class. All
            <code>CertPathValidator</code> implementations must include a class (the
            SPI class) that extends this class (<code>CertPathValidatorSpi</code>)
            and implements all of its methods. In general, instances of this class
            should only be accessed through the <code>CertPathValidator</code> class.
            For details, see the Java Cryptography Architecture.<br />
            <br />
            <b>Concurrent Access</b><br />
            <br />
            Instances of this class need not be protected against concurrent
            access from multiple threads. Threads that need to access a single
            <code>CertPathValidatorSpi</code> instance concurrently should synchronize
            amongst themselves and provide the necessary locking before calling the
            wrapping <code>CertPathValidator</code> object.<br />
            <br />
            However, implementations of <code>CertPathValidatorSpi</code> may still
            encounter concurrency issues, since multiple threads each
            manipulating a different <code>CertPathValidatorSpi</code> instance need not
            synchronize.
            <summary>
            CertPathValidatorSpi implementation for X.509 Certificate validation a la RFC
            3280.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorException">
             An exception indicating one of a variety of problems encountered when 
             validating a certification path. <br />
             <br />
             A <code>CertPathValidatorException</code> provides support for wrapping
             exceptions. The {@link #getCause getCause} method returns the throwable, 
             if any, that caused this exception to be thrown. <br />
             <br />
             A <code>CertPathValidatorException</code> may also include the 
             certification path that was being validated when the exception was thrown 
             and the index of the certificate in the certification path that caused the 
             exception to be thrown. Use the {@link #getCertPath getCertPath} and
             {@link #getIndex getIndex} methods to retrieve this information.<br />
             <br />
             <b>Concurrent Access</b><br />
             <br />
             Unless otherwise specified, the methods defined in this class are not
             thread-safe. Multiple threads that need to access a single
             object concurrently should synchronize amongst themselves and
             provide the necessary locking. Multiple threads each manipulating
             separate objects need not synchronize.
            
             @see CertPathValidator
            
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.String)">
            <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the given detail
            message. A detail message is a <code>String</code> that describes this
            particular exception. 
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the specified
            detail message and cause.
            </summary>
            <param name="message">the detail message</param>
            <param name="cause">the cause (which is saved for later retrieval by the
            {@link #getCause getCause()} method). (A <code>null</code>
            value is permitted, and indicates that the cause is
            nonexistent or unknown.)</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorException.#ctor(System.String,System.Exception,LibOrg.BouncyCastle.Pkix.PkixCertPath,System.Int32)">
            <summary>
            Creates a <code>PkixCertPathValidatorException</code> with the specified
            detail message, cause, certification path, and index.
            </summary>
            <param name="message">the detail message (or <code>null</code> if none)</param>
            <param name="cause">the cause (or <code>null</code> if none)</param>
            <param name="certPath">the certification path that was in the process of being
            validated when the error was encountered</param>
            <param name="index">the index of the certificate in the certification path that</param>																																																																																   * 
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorException.Message">
            <summary>
            Returns the detail message for this <code>CertPathValidatorException</code>.
            </summary>
            <returns>the detail message, or <code>null</code> if neither the message nor cause were specified</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorException.CertPath">
            Returns the certification path that was being validated when the
            exception was thrown.
            
            @return the <code>CertPath</code> that was being validated when the
                    exception was thrown (or <code>null</code> if not specified)
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorException.Index">
            Returns the index of the certificate in the certification path that
            caused the exception to be thrown. Note that the list of certificates in
            a <code>CertPath</code> is zero based. If no index has been set, -1 is
            returned.
            
            @return the index that has been set, or -1 if none has been set
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities">
            <summary>
            Summary description for PkixCertPathValidatorUtilities.
            </summary>
        </member>
        <member name="F:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.KEY_CERT_SIGN">
            <summary>
            key usage bits
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.FindTrustAnchor(LibOrg.BouncyCastle.X509.X509Certificate,LibOrg.BouncyCastle.Utilities.Collections.ISet)">
            <summary>
            Search the given Set of TrustAnchor's for one that is the
            issuer of the given X509 certificate.
            </summary>
            <param name="cert">the X509 certificate</param>
            <param name="trustAnchors">a Set of TrustAnchor's</param>
            <returns>the <code>TrustAnchor</code> object if found or
            <code>null</code> if not.
            </returns>
            @exception
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetIssuerPrincipal(System.Object)">
            <summary>
            Returns the issuer of an attribute certificate or certificate.
            </summary>
            <param name="cert">The attribute certificate or certificate.</param>
            <returns>The issuer as <code>X500Principal</code>.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetNextWorkingKey(System.Collections.IList,System.Int32)">
             Return the next working key inheriting DSA parameters if necessary.
             <p>
             This methods inherits DSA parameters from the indexed certificate or
             previous certificates in the certificate chain to the returned
             <code>PublicKey</code>. The list is searched upwards, meaning the end
             certificate is at position 0 and previous certificates are following.
             </p>
             <p>
             If the indexed certificate does not contain a DSA key this method simply
             returns the public key. If the DSA key already contains DSA parameters
             the key is also only returned.
             </p>
            
             @param certs The certification path.
             @param index The index of the certificate which contains the public key
                        which should be extended with DSA parameters.
             @return The public key of the certificate in list position
                     <code>index</code> extended with DSA parameters if applicable.
             @throws Exception if DSA parameters cannot be inherited.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.FindCertificates(LibOrg.BouncyCastle.X509.Store.X509CertStoreSelector,System.Collections.IList)">
            <summary>
            Return a Collection of all certificates or attribute certificates found
            in the X509Store's that are matching the certSelect criteriums.
            </summary>
            <param name="certSelect">a {@link Selector} object that will be used to select
            the certificates</param>
            <param name="certStores">a List containing only X509Store objects. These
            are used to search for certificates.</param>
            <returns>a Collection of all found <see cref="T:LibOrg.BouncyCastle.X509.X509Certificate"/> or
            LibOrg.BouncyCastle.x509.X509AttributeCertificate objects.
            May be empty but never <code>null</code>.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetCrlIssuersFromDistributionPoint(LibOrg.BouncyCastle.Asn1.X509.DistributionPoint,System.Collections.ICollection,LibOrg.BouncyCastle.X509.Store.X509CrlStoreSelector,LibOrg.BouncyCastle.Pkix.PkixParameters)">
             Add the CRL issuers from the cRLIssuer field of the distribution point or
             from the certificate if not given to the issuer criterion of the
             <code>selector</code>.
             <p>
             The <code>issuerPrincipals</code> are a collection with a single
             <code>X500Principal</code> for <code>X509Certificate</code>s. For
             {@link X509AttributeCertificate}s the issuer may contain more than one
             <code>X500Principal</code>.
             </p>
            
             @param dp The distribution point.
             @param issuerPrincipals The issuers of the certificate or attribute
                        certificate which contains the distribution point.
             @param selector The CRL selector.
             @param pkixParams The PKIX parameters containing the cert stores.
             @throws Exception if an exception occurs while processing.
             @throws ClassCastException if <code>issuerPrincipals</code> does not
             contain only <code>X500Principal</code>s.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetCompleteCrls(LibOrg.BouncyCastle.Asn1.X509.DistributionPoint,System.Object,System.DateTime,LibOrg.BouncyCastle.Pkix.PkixParameters)">
             Fetches complete CRLs according to RFC 3280.
            
             @param dp The distribution point for which the complete CRL
             @param cert The <code>X509Certificate</code> or
                        {@link LibOrg.BouncyCastle.x509.X509AttributeCertificate} for
                        which the CRL should be searched.
             @param currentDate The date for which the delta CRLs must be valid.
             @param paramsPKIX The extended PKIX parameters.
             @return A <code>Set</code> of <code>X509CRL</code>s with complete
                     CRLs.
             @throws Exception if an exception occurs while picking the CRLs
                         or no CRLs are found.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetDeltaCrls(System.DateTime,LibOrg.BouncyCastle.Pkix.PkixParameters,LibOrg.BouncyCastle.X509.X509Crl)">
             Fetches delta CRLs according to RFC 3280 section 5.2.4.
            
             @param currentDate The date for which the delta CRLs must be valid.
             @param paramsPKIX The extended PKIX parameters.
             @param completeCRL The complete CRL the delta CRL is for.
             @return A <code>Set</code> of <code>X509CRL</code>s with delta CRLs.
             @throws Exception if an exception occurs while picking the delta
                         CRLs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.FindIssuerCerts(LibOrg.BouncyCastle.X509.X509Certificate,LibOrg.BouncyCastle.Pkix.PkixBuilderParameters)">
             Find the issuer certificates of a given certificate.
            
             @param cert
                        The certificate for which an issuer should be found.
             @param pkixParams
             @return A <code>Collection</code> object containing the issuer
                     <code>X509Certificate</code>s. Never <code>null</code>.
            
             @exception Exception
                            if an error occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCertPathValidatorUtilities.GetExtensionValue(LibOrg.BouncyCastle.X509.IX509Extension,LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            <summary>
            Extract the value of the given extension, if it exists.
            </summary>
            <param name="ext">The extension object.</param>
            <param name="oid">The object identifier to obtain.</param>
            <returns>Asn1Object</returns>
            <exception cref="T:System.Exception">if the extension cannot be read.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixCrlUtilities.FindCrls(LibOrg.BouncyCastle.X509.Store.X509CrlStoreSelector,System.Collections.IList)">
            <summary>
            crl checking
            Return a Collection of all CRLs found in the X509Store's that are
            matching the crlSelect criteriums.
            </summary>
            <param name="crlSelect">a {@link X509CRLStoreSelector} object that will be used
            to select the CRLs</param>
            <param name="crlStores">a List containing only {@link LibOrg.BouncyCastle.x509.X509Store
            X509Store} objects. These are used to search for CRLs</param>
            <returns>a Collection of all found {@link X509CRL X509CRL} objects. May be
            empty but never <code>null</code>.
            </returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.IntersectIP(LibOrg.BouncyCastle.Utilities.Collections.ISet,LibOrg.BouncyCastle.Utilities.Collections.ISet)">
             Returns the intersection of the permitted IP ranges in
             <code>permitted</code> with <code>ip</code>.
            
             @param permitted A <code>Set</code> of permitted IP addresses with
                              their subnet mask as byte arrays.
             @param ips       The IP address with its subnet mask.
             @return The <code>Set</code> of permitted IP ranges intersected with
                     <code>ip</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.UnionIP(LibOrg.BouncyCastle.Utilities.Collections.ISet,System.Byte[])">
             Returns the union of the excluded IP ranges in <code>excluded</code>
             with <code>ip</code>.
            
             @param excluded A <code>Set</code> of excluded IP addresses with their
                             subnet mask as byte arrays.
             @param ip       The IP address with its subnet mask.
             @return The <code>Set</code> of excluded IP ranges unified with
                     <code>ip</code> as byte arrays.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.UnionIPRange(System.Byte[],System.Byte[])">
             Calculates the union if two IP ranges.
            
             @param ipWithSubmask1 The first IP address with its subnet mask.
             @param ipWithSubmask2 The second IP address with its subnet mask.
             @return A <code>Set</code> with the union of both addresses.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.IntersectIPRange(System.Byte[],System.Byte[])">
             Calculates the interesction if two IP ranges.
            
             @param ipWithSubmask1 The first IP address with its subnet mask.
             @param ipWithSubmask2 The second IP address with its subnet mask.
             @return A <code>Set</code> with the single IP address with its subnet
                     mask as a byte array or an empty <code>Set</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.IpWithSubnetMask(System.Byte[],System.Byte[])">
             Concatenates the IP address with its subnet mask.
            
             @param ip         The IP address.
             @param subnetMask Its subnet mask.
             @return The concatenated IP address with its subnet mask.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.ExtractIPsAndSubnetMasks(System.Byte[],System.Byte[])">
             Splits the IP addresses and their subnet mask.
            
             @param ipWithSubmask1 The first IP address with the subnet mask.
             @param ipWithSubmask2 The second IP address with the subnet mask.
             @return An array with two elements. Each element contains the IP address
                     and the subnet mask in this order.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.MinMaxIPs(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
             Based on the two IP addresses and their subnet masks the IP range is
             computed for each IP address - subnet mask pair and returned as the
             minimum IP address and the maximum address of the range.
            
             @param ip1         The first IP address.
             @param subnetmask1 The subnet mask of the first IP address.
             @param ip2         The second IP address.
             @param subnetmask2 The subnet mask of the second IP address.
             @return A array with two elements. The first/second element contains the
                     min and max IP address of the first/second IP address and its
                     subnet mask.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.CheckPermittedIP(LibOrg.BouncyCastle.Utilities.Collections.ISet,System.Byte[])">
             Checks if the IP <code>ip</code> is included in the permitted ISet
             <code>permitted</code>.
            
             @param permitted A <code>Set</code> of permitted IP addresses with
                              their subnet mask as byte arrays.
             @param ip        The IP address.
             @throws PkixNameConstraintValidatorException
                      if the IP is not permitted.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.checkExcludedIP(LibOrg.BouncyCastle.Utilities.Collections.ISet,System.Byte[])">
             Checks if the IP <code>ip</code> is included in the excluded ISet
             <code>excluded</code>.
            
             @param excluded A <code>Set</code> of excluded IP addresses with their
                             subnet mask as byte arrays.
             @param ip       The IP address.
             @throws PkixNameConstraintValidatorException
                      if the IP is excluded.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.IsIPConstrained(System.Byte[],System.Byte[])">
             Checks if the IP address <code>ip</code> is constrained by
             <code>constraint</code>.
            
             @param ip         The IP address.
             @param constraint The constraint. This is an IP address concatenated with
                               its subnetmask.
             @return <code>true</code> if constrained, <code>false</code>
                     otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.unionEmail(System.String,System.String,LibOrg.BouncyCastle.Utilities.Collections.ISet)">
             The common part of <code>email1</code> and <code>email2</code> is
             added to the union <code>union</code>. If <code>email1</code> and
             <code>email2</code> have nothing in common they are added both.
            
             @param email1 Email address constraint 1.
             @param email2 Email address constraint 2.
             @param union  The union.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.intersectEmail(System.String,System.String,LibOrg.BouncyCastle.Utilities.Collections.ISet)">
             The most restricting part from <code>email1</code> and
             <code>email2</code> is added to the intersection <code>intersect</code>.
            
             @param email1    Email address constraint 1.
             @param email2    Email address constraint 2.
             @param intersect The intersection.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.checkPermitted(LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
             Checks if the given GeneralName is in the permitted ISet.
            
             @param name The GeneralName
             @throws PkixNameConstraintValidatorException
                      If the <code>name</code>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.checkExcluded(LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
             Check if the given GeneralName is contained in the excluded ISet.
            
             @param name The GeneralName.
             @throws PkixNameConstraintValidatorException
                      If the <code>name</code> is
                      excluded.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.IntersectPermittedSubtree(LibOrg.BouncyCastle.Asn1.Asn1Sequence)">
             Updates the permitted ISet of these name constraints with the intersection
             with the given subtree.
            
             @param permitted The permitted subtrees
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.AddExcludedSubtree(LibOrg.BouncyCastle.Asn1.X509.GeneralSubtree)">
             Adds a subtree to the excluded ISet of these name constraints.
            
             @param subtree A subtree with an excluded GeneralName.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.Max(System.Byte[],System.Byte[])">
             Returns the maximum IP address.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The maximum IP address.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.Min(System.Byte[],System.Byte[])">
             Returns the minimum IP address.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The minimum IP address.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.CompareTo(System.Byte[],System.Byte[])">
             Compares IP address <code>ip1</code> with <code>ip2</code>. If ip1
             is equal to ip2 0 is returned. If ip1 is bigger 1 is returned, -1
             otherwise.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return 0 if ip1 is equal to ip2, 1 if ip1 is bigger, -1 otherwise.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.Or(System.Byte[],System.Byte[])">
             Returns the logical OR of the IP addresses <code>ip1</code> and
             <code>ip2</code>.
            
             @param ip1 The first IP address.
             @param ip2 The second IP address.
             @return The OR of <code>ip1</code> and <code>ip2</code>.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixNameConstraintValidator.StringifyIP(System.Byte[])">
             Stringifies an IPv4 or v6 address with subnet mask.
            
             @param ip The IP with subnet mask.
             @return The stringified IP address.
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.PkixPolicyNode">
            <summary>
            Summary description for PkixPolicyNode.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.PkixPolicyNode.#ctor(System.Collections.IList,System.Int32,LibOrg.BouncyCastle.Utilities.Collections.ISet,LibOrg.BouncyCastle.Pkix.PkixPolicyNode,LibOrg.BouncyCastle.Utilities.Collections.ISet,System.String,System.Boolean)">
            Constructors
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.ReasonsMask">
            <summary>
            This class helps to handle CRL revocation reasons mask. Each CRL handles a
            certain set of revocation reasons.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.ReasonsMask.#ctor(System.Int32)">
            <summary>
            Constructs are reason mask with the reasons.
            </summary>
            <param name="reasons">The reasons.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.ReasonsMask.#ctor">
            <summary>
            A reason mask with no reason.
            </summary>
        </member>
        <member name="F:LibOrg.BouncyCastle.Pkix.ReasonsMask.AllReasons">
            <summary>
            A mask with all revocation reasons.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.ReasonsMask.AddReasons(LibOrg.BouncyCastle.Pkix.ReasonsMask)">
             Adds all reasons from the reasons mask to this mask.
            
             @param mask The reasons mask to add.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.ReasonsMask.Intersect(LibOrg.BouncyCastle.Pkix.ReasonsMask)">
            <summary>
            Intersects this mask with the given reasons mask.
            </summary>
            <param name="mask">mask The mask to intersect with.</param>
            <returns>The intersection of this and teh given mask.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.ReasonsMask.HasNewReasons(LibOrg.BouncyCastle.Pkix.ReasonsMask)">
            <summary>
            Returns <c>true</c> if the passed reasons mask has new reasons.
            </summary>
            <param name="mask">The reasons mask which should be tested for new reasons.</param>
            <returns><c>true</c> if the passed reasons mask has new reasons.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.ReasonsMask.IsAllReasons">
            <summary>
            Returns <code>true</code> if this reasons mask contains all possible
            reasons.
            </summary>
            <returns>true if this reasons mask contains all possible reasons.
            </returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.ReasonsMask.Reasons">
            <summary>
            Returns the reasons in this mask.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.Rfc3280CertPathUtilities.ProcessCrlB2(LibOrg.BouncyCastle.Asn1.X509.DistributionPoint,System.Object,LibOrg.BouncyCastle.X509.X509Crl)">
             If the complete CRL includes an issuing distribution point (IDP) CRL
             extension check the following:
             <p>
             (i) If the distribution point name is present in the IDP CRL extension
             and the distribution field is present in the DP, then verify that one of
             the names in the IDP matches one of the names in the DP. If the
             distribution point name is present in the IDP CRL extension and the
             distribution field is omitted from the DP, then verify that one of the
             names in the IDP matches one of the names in the cRLIssuer field of the
             DP.
             </p>
             <p>
             (ii) If the onlyContainsUserCerts boolean is asserted in the IDP CRL
             extension, verify that the certificate does not include the basic
             constraints extension with the cA boolean asserted.
             </p>
             <p>
             (iii) If the onlyContainsCACerts boolean is asserted in the IDP CRL
             extension, verify that the certificate includes the basic constraints
             extension with the cA boolean asserted.
             </p>
             <p>
             (iv) Verify that the onlyContainsAttributeCerts boolean is not asserted.
             </p>
            
             @param dp   The distribution point.
             @param cert The certificate.
             @param crl  The CRL.
             @throws AnnotatedException if one of the conditions is not met or an error occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.Rfc3280CertPathUtilities.ProcessCrlB1(LibOrg.BouncyCastle.Asn1.X509.DistributionPoint,System.Object,LibOrg.BouncyCastle.X509.X509Crl)">
             If the DP includes cRLIssuer, then verify that the issuer field in the
             complete CRL matches cRLIssuer in the DP and that the complete CRL
             contains an
                  g distribution point extension with the indirectCRL
             boolean asserted. Otherwise, verify that the CRL issuer matches the
             certificate issuer.
            
             @param dp   The distribution point.
             @param cert The certificate ot attribute certificate.
             @param crl  The CRL for <code>cert</code>.
             @throws AnnotatedException if one of the above conditions does not apply or an error
                                        occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.Rfc3280CertPathUtilities.ProcessCrlF(LibOrg.BouncyCastle.X509.X509Crl,System.Object,LibOrg.BouncyCastle.X509.X509Certificate,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Pkix.PkixParameters,System.Collections.IList)">
             Obtain and validate the certification path for the complete CRL issuer.
             If a key usage extension is present in the CRL issuer's certificate,
             verify that the cRLSign bit is set.
            
             @param crl                CRL which contains revocation information for the certificate
                                       <code>cert</code>.
             @param cert               The attribute certificate or certificate to check if it is
                                       revoked.
             @param defaultCRLSignCert The issuer certificate of the certificate <code>cert</code>.
             @param defaultCRLSignKey  The public key of the issuer certificate
                                       <code>defaultCRLSignCert</code>.
             @param paramsPKIX         paramsPKIX PKIX parameters.
             @param certPathCerts      The certificates on the certification path.
             @return A <code>Set</code> with all keys of possible CRL issuer
                     certificates.
             @throws AnnotatedException if the CRL is not valid or the status cannot be checked or
                                        some error occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.Rfc3280CertPathUtilities.CheckCrl(LibOrg.BouncyCastle.Asn1.X509.DistributionPoint,LibOrg.BouncyCastle.Pkix.PkixParameters,LibOrg.BouncyCastle.X509.X509Certificate,System.DateTime,LibOrg.BouncyCastle.X509.X509Certificate,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Pkix.CertStatus,LibOrg.BouncyCastle.Pkix.ReasonsMask,System.Collections.IList)">
             Checks a distribution point for revocation information for the
             certificate <code>cert</code>.
            
             @param dp                 The distribution point to consider.
             @param paramsPKIX         PKIX parameters.
             @param cert               Certificate to check if it is revoked.
             @param validDate          The date when the certificate revocation status should be
                                       checked.
             @param defaultCRLSignCert The issuer certificate of the certificate <code>cert</code>.
             @param defaultCRLSignKey  The public key of the issuer certificate
                                       <code>defaultCRLSignCert</code>.
             @param certStatus         The current certificate revocation status.
             @param reasonMask         The reasons mask which is already checked.
             @param certPathCerts      The certificates of the certification path.
             @throws AnnotatedException if the certificate is revoked or the status cannot be checked
                                        or some error occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.Rfc3280CertPathUtilities.CheckCrls(LibOrg.BouncyCastle.Pkix.PkixParameters,LibOrg.BouncyCastle.X509.X509Certificate,System.DateTime,LibOrg.BouncyCastle.X509.X509Certificate,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Collections.IList)">
             Checks a certificate if it is revoked.
            
             @param paramsPKIX       PKIX parameters.
             @param cert             Certificate to check if it is revoked.
             @param validDate        The date when the certificate revocation status should be
                                     checked.
             @param sign             The issuer certificate of the certificate <code>cert</code>.
             @param workingPublicKey The public key of the issuer certificate <code>sign</code>.
             @param certPathCerts    The certificates of the certification path.
             @throws AnnotatedException if the certificate is revoked or the status cannot be checked
                                        or some error occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.Rfc3280CertPathUtilities.ProcessCrlC(LibOrg.BouncyCastle.X509.X509Crl,LibOrg.BouncyCastle.X509.X509Crl,LibOrg.BouncyCastle.Pkix.PkixParameters)">
             If use-deltas is set, verify the issuer and scope of the delta CRL.
            
             @param deltaCRL    The delta CRL.
             @param completeCRL The complete CRL.
             @param pkixParams  The PKIX paramaters.
             @throws AnnotatedException if an exception occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.Rfc3281CertPathUtilities.CheckCrls(LibOrg.BouncyCastle.X509.IX509AttributeCertificate,LibOrg.BouncyCastle.Pkix.PkixParameters,LibOrg.BouncyCastle.X509.X509Certificate,System.DateTime,System.Collections.IList)">
            Checks if an attribute certificate is revoked.
            
            @param attrCert Attribute certificate to check if it is revoked.
            @param paramsPKIX PKIX parameters.
            @param issuerCert The issuer certificate of the attribute certificate
                       <code>attrCert</code>.
            @param validDate The date when the certificate revocation status should
                       be checked.
            @param certPathCerts The certificates of the certification path to be
                       checked.
            
            @throws CertPathValidatorException if the certificate is revoked or the
                        status cannot be checked or some error occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.Rfc3281CertPathUtilities.ProcessAttrCert1(LibOrg.BouncyCastle.X509.IX509AttributeCertificate,LibOrg.BouncyCastle.Pkix.PkixParameters)">
            Searches for a holder public key certificate and verifies its
            certification path.
            
            @param attrCert the attribute certificate.
            @param pkixParams The PKIX parameters.
            @return The certificate path of the holder certificate.
            @throws Exception if
                        <ul>
                        <li>no public key certificate can be found although holder
                        information is given by an entity name or a base certificate
                        ID</li>
                        <li>support classes cannot be created</li>
                        <li>no certification path for the public key certificate can
                        be built</li>
                        </ul>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.Rfc3281CertPathUtilities.CheckCrl(LibOrg.BouncyCastle.Asn1.X509.DistributionPoint,LibOrg.BouncyCastle.X509.IX509AttributeCertificate,LibOrg.BouncyCastle.Pkix.PkixParameters,System.DateTime,LibOrg.BouncyCastle.X509.X509Certificate,LibOrg.BouncyCastle.Pkix.CertStatus,LibOrg.BouncyCastle.Pkix.ReasonsMask,System.Collections.IList)">
            
            Checks a distribution point for revocation information for the
            certificate <code>attrCert</code>.
            
            @param dp The distribution point to consider.
            @param attrCert The attribute certificate which should be checked.
            @param paramsPKIX PKIX parameters.
            @param validDate The date when the certificate revocation status should
                       be checked.
            @param issuerCert Certificate to check if it is revoked.
            @param reasonMask The reasons mask which is already checked.
            @param certPathCerts The certificates of the certification path to be
                       checked.
            @throws Exception if the certificate is revoked or the status
                        cannot be checked or some error occurs.
        </member>
        <member name="T:LibOrg.BouncyCastle.Pkix.TrustAnchor">
            <summary>
            A trust anchor or most-trusted Certification Authority (CA).
            
            This class represents a "most-trusted CA", which is used as a trust anchor
            for validating X.509 certification paths. A most-trusted CA includes the
            public key of the CA, the CA's name, and any constraints upon the set of
            paths which may be validated using this key. These parameters can be
            specified in the form of a trusted X509Certificate or as individual
            parameters.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.TrustAnchor.#ctor(LibOrg.BouncyCastle.X509.X509Certificate,System.Byte[])">
             <summary>
             Creates an instance of TrustAnchor with the specified X509Certificate and
             optional name constraints, which are intended to be used as additional
             constraints when validating an X.509 certification path.
            	The name constraints are specified as a byte array. This byte array
            	should contain the DER encoded form of the name constraints, as they
            	would appear in the NameConstraints structure defined in RFC 2459 and
            	X.509. The ASN.1 definition of this structure appears below.
            	
            	<pre>
            	NameConstraints ::= SEQUENCE {
            		permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
            		excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }
            	   
             GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
             
            		GeneralSubtree ::= SEQUENCE {
            		base                    GeneralName,
            		minimum         [0]     BaseDistance DEFAULT 0,
            		maximum         [1]     BaseDistance OPTIONAL }
            		
            		BaseDistance ::= INTEGER (0..MAX)
            
            		GeneralName ::= CHOICE {
            		otherName                       [0]     OtherName,
            		rfc822Name                      [1]     IA5String,
            		dNSName                         [2]     IA5String,
            		x400Address                     [3]     ORAddress,
            		directoryName                   [4]     Name,
            		ediPartyName                    [5]     EDIPartyName,
            		uniformResourceIdentifier       [6]     IA5String,
            		iPAddress                       [7]     OCTET STRING,
            		registeredID                    [8]     OBJECT IDENTIFIER}
            	</pre>
            	
            	Note that the name constraints byte array supplied is cloned to protect
            	against subsequent modifications.
             </summary>
             <param name="trustedCert">a trusted X509Certificate</param>
             <param name="nameConstraints">a byte array containing the ASN.1 DER encoding of a
             NameConstraints extension to be used for checking name
             constraints. Only the value of the extension is included, not
             the OID or criticality flag. Specify null to omit the
             parameter.</param>
             <exception cref="T:System.ArgumentNullException">if the specified X509Certificate is null</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.TrustAnchor.#ctor(LibOrg.BouncyCastle.Asn1.X509.X509Name,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])">
            <summary>
            Creates an instance of <c>TrustAnchor</c> where the
            most-trusted CA is specified as an X500Principal and public key.
            </summary>
            <remarks>
            <p>
            Name constraints are an optional parameter, and are intended to be used
            as additional constraints when validating an X.509 certification path.
            </p><p>
            The name constraints are specified as a byte array. This byte array
            contains the DER encoded form of the name constraints, as they
            would appear in the NameConstraints structure defined in RFC 2459
            and X.509. The ASN.1 notation for this structure is supplied in the
            documentation for the other constructors.
            </p><p>
            Note that the name constraints byte array supplied here is cloned to
            protect against subsequent modifications.
            </p>
            </remarks>
            <param name="caPrincipal">the name of the most-trusted CA as X509Name</param>
            <param name="pubKey">the public key of the most-trusted CA</param>
            <param name="nameConstraints">
            a byte array containing the ASN.1 DER encoding of a NameConstraints extension to
            be used for checking name constraints. Only the value of the extension is included,
            not the OID or criticality flag. Specify <c>null</c> to omit the parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if <c>caPrincipal</c> or <c>pubKey</c> is null
            </exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.TrustAnchor.#ctor(System.String,LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,System.Byte[])">
            <summary>
            Creates an instance of <code>TrustAnchor</code> where the most-trusted
            CA is specified as a distinguished name and public key. Name constraints
            are an optional parameter, and are intended to be used as additional
            constraints when validating an X.509 certification path.
            <br/>
            The name constraints are specified as a byte array. This byte array
            contains the DER encoded form of the name constraints, as they would
            appear in the NameConstraints structure defined in RFC 2459 and X.509.
            </summary>
            <param name="caName">the X.500 distinguished name of the most-trusted CA in RFC
            2253 string format</param>
            <param name="pubKey">the public key of the most-trusted CA</param>
            <param name="nameConstraints">a byte array containing the ASN.1 DER encoding of a
            NameConstraints extension to be used for checking name
            constraints. Only the value of the extension is included, not 
            the OID or criticality flag. Specify null to omit the 
            parameter.</param>
            throws NullPointerException, IllegalArgumentException
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.TrustAnchor.setNameConstraints(System.Byte[])">
            <summary>
            Decode the name constraints and clone them if not null.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Pkix.TrustAnchor.ToString">
            <summary>
            Returns a formatted string describing the <code>TrustAnchor</code>.
            </summary>
            <returns>a formatted string describing the <code>TrustAnchor</code></returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.TrustAnchor.TrustedCert">
            <summary>
            Returns the most-trusted CA certificate.
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.TrustAnchor.CA">
            <summary>
            Returns the name of the most-trusted CA as an X509Name.
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.TrustAnchor.CAName">
            <summary>
            Returns the name of the most-trusted CA in RFC 2253 string format.
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.Pkix.TrustAnchor.CAPublicKey">
            <summary>
            Returns the public key of the most-trusted CA.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Security.AgreementUtilities">
            <remarks>
             Utility class for creating IBasicAgreement objects from their names/Oids
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Security.CipherUtilities">
            <remarks>
             Cipher Utility class contains methods that can not be specifically grouped into other classes.
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Security.CipherUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Security.DigestUtilities">
            <remarks>
             Utility class for creating IDigest objects from their names/Oids
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.Security.DigestUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a given digest mechanism.
            </summary>
            <param name="mechanism">A string representation of the digest meanism.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Security.DotNetUtilities">
            <summary>
            A class containing methods to interface the BouncyCastle world to the .NET Crypto world.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Security.DotNetUtilities.ToX509Certificate(LibOrg.BouncyCastle.Asn1.X509.X509CertificateStructure)">
            <summary>
            Create an System.Security.Cryptography.X509Certificate from an X509Certificate Structure.
            </summary>
            <param name="x509Struct"></param>
            <returns>A System.Security.Cryptography.X509Certificate.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Security.MacUtilities">
            <remarks>
             Utility class for creating HMac object from their names/Oids
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Security.PbeUtilities">
             <summary>
            
             </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Security.PbeUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Security.SecureRandom.#ctor(LibOrg.BouncyCastle.Crypto.Prng.IRandomGenerator)">
            <summary>Use the specified instance of IRandomGenerator as random source.</summary>
            <remarks>
            This constructor performs no seeding of either the <c>IRandomGenerator</c> or the
            constructed <c>SecureRandom</c>. It is the responsibility of the client to provide
            proper seed material as necessary/appropriate for the given <c>IRandomGenerator</c>
            implementation.
            </remarks>
            <param name="generator">The source to generate all random bytes from.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Security.SecurityUtilityException.#ctor">
            base constructor.
        </member>
        <member name="M:LibOrg.BouncyCastle.Security.SecurityUtilityException.#ctor(System.String)">
             create a SecurityUtilityException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:LibOrg.BouncyCastle.Security.SignerUtilities">
            <summary>
             Signer Utility class contains methods that can not be specifically grouped into other classes.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Security.SignerUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Security.WrapperUtilities">
            <remarks>
             Utility class for creating IWrapper objects from their names/Oids
            </remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.Tsp.TimeStampRequest">
            Base class for an RFC 3161 Time Stamp Request.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampRequest.#ctor(System.Byte[])">
             Create a TimeStampRequest from the past in byte array.
            
             @param req byte array containing the request.
             @throws IOException if the request is malformed.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampRequest.#ctor(System.IO.Stream)">
             Create a TimeStampRequest from the past in input stream.
            
             @param in input stream containing the request.
             @throws IOException if the request is malformed.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampRequest.Validate(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
             Validate the timestamp request, checking the digest to see if it is of an
             accepted type and whether it is of the correct length for the algorithm specified.
            
             @param algorithms a set of string OIDS giving accepted algorithms.
             @param policies if non-null a set of policies we are willing to sign under.
             @param extensions if non-null a set of extensions we are willing to accept.
             @throws TspException if the request is invalid, or processing fails.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampRequest.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:LibOrg.BouncyCastle.Tsp.TimeStampRequestGenerator">
            Generator for RFC 3161 Time Stamp Request objects.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampRequestGenerator.AddExtension(System.String,System.Boolean,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 3)
            @throws IOException
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampRequestGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag
            The value parameter becomes the contents of the octet string associated
            with the extension.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampRequestGenerator.AddExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 3)
            @throws IOException
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampRequestGenerator.AddExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag
            The value parameter becomes the contents of the octet string associated
            with the extension.
        </member>
        <member name="T:LibOrg.BouncyCastle.Tsp.TimeStampResponse">
            Base class for an RFC 3161 Time Stamp Response object.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampResponse.#ctor(System.Byte[])">
             Create a TimeStampResponse from a byte array containing an ASN.1 encoding.
            
             @param resp the byte array containing the encoded response.
             @throws TspException if the response is malformed.
             @throws IOException if the byte array doesn't represent an ASN.1 encoding.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampResponse.#ctor(System.IO.Stream)">
             Create a TimeStampResponse from an input stream containing an ASN.1 encoding.
            
             @param input the input stream containing the encoded response.
             @throws TspException if the response is malformed.
             @throws IOException if the stream doesn't represent an ASN.1 encoding.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampResponse.Validate(LibOrg.BouncyCastle.Tsp.TimeStampRequest)">
             Check this response against to see if it a well formed response for
             the passed in request. Validation will include checking the time stamp
             token if the response status is GRANTED or GRANTED_WITH_MODS.
            
             @param request the request to be checked against
             @throws TspException if the request can not match this response.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampResponse.GetEncoded">
            return the ASN.1 encoded representation of this object.
        </member>
        <member name="T:LibOrg.BouncyCastle.Tsp.TimeStampResponseGenerator">
            Generator for RFC 3161 Time Stamp Responses.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampResponseGenerator.Generate(LibOrg.BouncyCastle.Tsp.TimeStampRequest,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Utilities.Date.DateTimeObject)">
             Return an appropriate TimeStampResponse.
             <p>
             If genTime is null a timeNotAvailable error response will be returned.
            
             @param request the request this response is for.
             @param serialNumber serial number for the response token.
             @param genTime generation time for the response token.
             @param provider provider to use for signature calculation.
             @return
             @throws NoSuchAlgorithmException
             @throws NoSuchProviderException
             @throws TSPException
             </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampResponseGenerator.GenerateFailResponse(LibOrg.BouncyCastle.Asn1.Cmp.PkiStatus,System.Int32,System.String)">
             Generate a TimeStampResponse with chosen status and FailInfoField.
            
             @param status the PKIStatus to set.
             @param failInfoField the FailInfoField to set.
             @param statusString an optional string describing the failure.
             @return a TimeStampResponse with a failInfoField and optional statusString
             @throws TSPException in case the response could not be created
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampToken.Validate(LibOrg.BouncyCastle.X509.X509Certificate)">
            Validate the time stamp token.
            <p>
            To be valid the token must be signed by the passed in certificate and
            the certificate must be the one referred to by the SigningCertificate
            attribute included in the hashed attributes of the token. The
            certificate must also have the ExtendedKeyUsageExtension with only
            KeyPurposeID.IdKPTimeStamping and have been valid at the time the
            timestamp was created.
            </p>
            <p>
            A successful call to validate means all the above are true.
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampToken.ToCmsSignedData">
             Return the underlying CmsSignedData object.
            
             @return the underlying CMS structure.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampToken.GetEncoded">
             Return a ASN.1 encoded byte stream representing the encoded object.
            
             @throws IOException if encoding fails.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampTokenGenerator.#ctor(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,System.String)">
            basic creation - only the default attributes will be included here.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TimeStampTokenGenerator.#ctor(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.X509.X509Certificate,System.String,System.String,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable,LibOrg.BouncyCastle.Asn1.Cms.AttributeTable)">
            create with a signer with extra signed/unsigned attributes.
        </member>
        <member name="P:LibOrg.BouncyCastle.Tsp.TimeStampTokenInfo.Nonce">
            @return the nonce value, null if there isn't one.
        </member>
        <member name="T:LibOrg.BouncyCastle.Tsp.TspAlgorithms">
            Recognised hash algorithms for the time stamp protocol.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TspUtil.GetSignatureTimestamps(LibOrg.BouncyCastle.Cms.SignerInformation)">
             Fetches the signature time-stamp attributes from a SignerInformation object.
             Checks that the MessageImprint for each time-stamp matches the signature field.
             (see RFC 3161 Appendix A).
            
             @param signerInfo a SignerInformation to search for time-stamps
             @return a collection of TimeStampToken objects
             @throws TSPValidationException
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TspUtil.ValidateCertificate(LibOrg.BouncyCastle.X509.X509Certificate)">
             Validate the passed in certificate as being of the correct type to be used
             for time stamping. To be valid it must have an ExtendedKeyUsage extension
             which has a key purpose identifier of id-kp-timeStamping.
            
             @param cert the certificate of interest.
             @throws TspValidationException if the certicate fails on one of the check points.
        </member>
        <member name="M:LibOrg.BouncyCastle.Tsp.TspUtil.GetDigestAlgName(System.String)">
            <summary>
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Tsp.TspValidationException">
            Exception thrown if a TSP request or response fails to validate.
            <p>
            If a failure code is associated with the exception it can be retrieved using
            the getFailureCode() method.</p>
        </member>
        <member name="P:LibOrg.BouncyCastle.Tsp.TspValidationException.FailureCode">
             Return the failure code associated with this exception - if one is set.
            
             @return the failure code if set, -1 otherwise.
        </member>
        <member name="T:System.util.Util">
            <summary>
            Summary description for Util.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Arrays">
            <summary> General array utilities.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Arrays.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Are two arrays equal.
            </summary>
            <param name="a">Left side.</param>
            <param name="b">Right side.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Arrays.ConstantTimeAreEqual(System.Byte[],System.Byte[])">
            <summary>
            A constant time equals comparison - does not terminate early if
            test will fail.
            </summary>
            <param name="a">first array</param>
            <param name="b">second array</param>
            <returns>true if arrays equal, false otherwise.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.BigIntegers">
            BigInteger utilities.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.BigIntegers.AsUnsignedByteArray(LibOrg.BouncyCastle.Math.BigInteger)">
             Return the passed in value as an unsigned byte array.
            
             @param value value to be converted.
             @return a byte array without a leading zero byte if present in the signed encoding.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.BigIntegers.AsUnsignedByteArray(System.Int32,LibOrg.BouncyCastle.Math.BigInteger)">
             Return the passed in value as an unsigned byte array of specified length, zero-extended as necessary.
            
             @param length desired length of result array.
             @param n value to be converted.
             @return a byte array of specified length, with leading zeroes as necessary given the size of n.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.BigIntegers.CreateRandomInRange(LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Math.BigInteger,LibOrg.BouncyCastle.Security.SecureRandom)">
            Return a random BigInteger not less than 'min' and not greater than 'max'
            
            @param min the least value that may be generated
            @param max the greatest value that may be generated
            @param random the source of randomness
            @return a random BigInteger value in the range [min,max]
        </member>
        <member name="T:LibOrg.BouncyCastle.Apache.Bzip2.BZip2Constants">
             Base class for both the compress and decompress classes.
             Holds common arrays, and static data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="T:LibOrg.BouncyCastle.Apache.Bzip2.CBZip2InputStream">
             An input stream that decompresses from the BZip2 format (with the file
             header chars) to be read as any other stream.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
            
             <b>NB:</b> note this class has been modified to read the leading BZ from the
             start of the BZIP2 stream to make it compatible with other PGP programs.
        </member>
        <member name="T:LibOrg.BouncyCastle.Apache.Bzip2.CRC">
             A simple class the hold and calculate the CRC for sanity checking
             of the data.
            
             @author <a href="mailto:keiron@aftexsw.com">Keiron Liddle</a>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Date.DateTimeUtilities.DateTimeToUnixMs(System.DateTime)">
            <summary>
            Return the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC) for a given DateTime value.
            </summary>
            <param name="dateTime">A UTC DateTime value not before epoch.</param>
            <returns>Number of whole milliseconds after epoch.</returns>
            <exception cref="T:System.ArgumentException">'dateTime' is before epoch.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Date.DateTimeUtilities.UnixMsToDateTime(System.Int64)">
            <summary>
            Create a DateTime value from the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
            <param name="unixMs">Number of milliseconds since the epoch.</param>
            <returns>A UTC DateTime value</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Date.DateTimeUtilities.CurrentUnixMs">
            <summary>
            Return the current number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[])">
             encode the input data producing a base 64 encoded byte array.
            
             @return a byte array containing the base 64 encoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a base 64 encoded byte array.
            
             @return a byte array containing the base 64 encoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64.Decode(System.Byte[])">
             decode the base 64 encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64.Decode(System.String)">
             decode the base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64.Decode(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Encoders.IEncoder">
            Encode and decode byte arrays (typically from binary to 7-bit ASCII
            encodings).
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64Encoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a base 64 output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64Encoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Base64Encoder.DecodeString(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Encoders.BufferedDecoder">
            <summary>
             A buffering class to allow translation from one format to another to
                be done in discrete chunks.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.BufferedDecoder.#ctor(LibOrg.BouncyCastle.Utilities.Encoders.ITranslator,System.Int32)">
            <summary>
            Create a buffered Decoder.
            </summary>
            <param name="translator">The translater to use.</param>
            <param name="bufferSize">The size of the buffer.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.BufferedDecoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">Data in.</param>
            <param name="output">Byte array for the output.</param>
            <param name="outOff">The offset in the output byte array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.BufferedDecoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">The input data.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of data to process from input data array.</param>
            <param name="outBytes">Array to store output.</param>
            <param name="outOff">Position in output array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Encoders.BufferedEncoder">
            <summary>
            A class that allows encoding of data using a specific encoder to be processed in chunks.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.BufferedEncoder.#ctor(LibOrg.BouncyCastle.Utilities.Encoders.ITranslator,System.Int32)">
            <summary>
            Create.
            </summary>
            <param name="translator">The translator to use.</param>
            <param name="bufferSize">Size of the chunks.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.BufferedEncoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">The byte.</param>
            <param name="outBytes">An array to store output in.</param>
            <param name="outOff">Offset within output array to start writing from.</param>
            <returns></returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.BufferedEncoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">Input data Byte array containing data to be processed.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of input data to be processed.</param>
            <param name="outBytes">Output data array.</param>
            <param name="outOff">Offset within output data array to start writing to.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Encoders.Hex">
            <summary>
            Class to decode and encode Hex.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[])">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[],System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Hex.Decode(System.Byte[])">
             decode the Hex encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Hex.Decode(System.String)">
             decode the Hex encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.Hex.Decode(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a Hex output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.HexEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the Hex encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.HexEncoder.DecodeString(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Encoders.HexTranslator">
            <summary>
            A hex translator.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Encoders.ITranslator">
            <summary>
            Translator interface.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.HexTranslator.GetEncodedBlockSize">
            <summary>
            Return encoded block size.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.HexTranslator.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encode some data.
            </summary>
            <param name="input">Input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amount of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The offset within the output data array to start writing from.</param>
            <returns>Amount of data encoded.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.HexTranslator.GetDecodedBlockSize">
            <summary>
            Returns the decoded block size.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.HexTranslator.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decode data from a byte array.
            </summary>
            <param name="input">The input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amounty of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The position within the output data array to start writing from.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Encoders.UrlBase64">
            Convert binary data to and from UrlBase64 encoding.  This is identical to
            Base64 encoding, except that the padding character is "." and the other 
            non-alphanumeric characters are "-" and "_" instead of "+" and "/".
            <p>
            The purpose of UrlBase64 encoding is to provide a compact encoding of binary
            data that is safe for use as an URL parameter. Base64 encoding does not
            produce encoded values that are safe for use in URLs, since "/" can be 
            interpreted as a path delimiter; "+" is the encoded form of a space; and
            "=" is used to separate a name from the corresponding value in an URL 
            parameter.
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.UrlBase64.Encode(System.Byte[])">
             Encode the input data producing a URL safe base 64 encoded byte array.
            
             @return a byte array containing the URL safe base 64 encoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.UrlBase64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.Byte[])">
             Decode the URL safe base 64 encoded input data - white space will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.Byte[],System.IO.Stream)">
             decode the URL safe base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.String)">
             decode the URL safe base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.String,System.IO.Stream)">
             Decode the URL safe base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Encoders.UrlBase64Encoder">
            Convert binary data to and from UrlBase64 encoding.  This is identical to
            Base64 encoding, except that the padding character is "." and the other 
            non-alphanumeric characters are "-" and "_" instead of "+" and "/".
            <p>
            The purpose of UrlBase64 encoding is to provide a compact encoding of binary
            data that is safe for use as an URL parameter. Base64 encoding does not
            produce encoded values that are safe for use in URLs, since "/" can be 
            interpreted as a path delimiter; "+" is the encoded form of a space; and
            "=" is used to separate a name from the corresponding value in an URL 
            parameter.
            </p>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.IO.Pem.PemObjectParser.ParseObject(LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject)">
            <param name="obj">
            A <see cref="T:LibOrg.BouncyCastle.Utilities.IO.Pem.PemObject"/>
            </param>
            <returns>
            A <see cref="T:System.Object"/>
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.IO.Streams.PipeAllLimited(System.IO.Stream,System.Int64,System.IO.Stream)">
            <summary>
            Pipe all bytes from <c>inStr</c> to <c>outStr</c>, throwing <c>StreamFlowException</c> if greater
            than <c>limit</c> bytes in <c>inStr</c>.
            </summary>
            <param name="inStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <param name="limit">
            A <see cref="T:System.Int64"/>
            </param>
            <param name="outStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <returns>The number of bytes actually transferred, if not greater than <c>limit</c></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Net.IPAddress.IsValid(System.String)">
             Validate the given IPv4 or IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid address, false otherwise
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Net.IPAddress.IsValidWithNetMask(System.String)">
             Validate the given IPv4 or IPv6 address and netmask.
            
             @param address the IP address as a string.
            
             @return true if a valid address with netmask, false otherwise
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv4(System.String)">
             Validate the given IPv4 address.
             
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
        <member name="M:LibOrg.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv6(System.String)">
             Validate the given IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Strings">
            <summary> General string utilities.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Zlib.ZDeflaterOutputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.Utilities.Zlib.ZInflaterInputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.AttributeCertificateHolder">
            <remarks>
            The Holder object.
            <pre>
            Holder ::= SEQUENCE {
            	baseCertificateID   [0] IssuerSerial OPTIONAL,
            		-- the issuer and serial number of
            		-- the holder's Public Key Certificate
            	entityName          [1] GeneralNames OPTIONAL,
            		-- the name of the claimant or role
            	objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
            		-- used to directly authenticate the holder,
            		-- for example, an executable
            }
            </pre>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.AttributeCertificateHolder.#ctor(System.Int32,System.String,System.String,System.Byte[])">
             Constructs a holder for v2 attribute certificates with a hash value for
             some type of object.
             <p>
             <code>digestedObjectType</code> can be one of the following:
             <ul>
             <li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li>
             <li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li>
             <li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li>
             </ul>
             </p>
             <p>This cannot be used if a v1 attribute certificate is used.</p>
            
             @param digestedObjectType The digest object type.
             @param digestAlgorithm The algorithm identifier for the hash.
             @param otherObjectTypeID The object type ID if
                        <code>digestedObjectType</code> is
                        <code>otherObjectDigest</code>.
             @param objectDigest The hash value.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.AttributeCertificateHolder.GetObjectDigest">
             Returns the hash if an object digest info is used.
            
             @return The hash or <code>null</code> if no object digest info is set.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.AttributeCertificateHolder.GetEntityNames">
             Return any principal objects inside the attribute certificate holder entity names field.
            
             @return an array of IPrincipal objects (usually X509Name), null if no entity names field is set.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.AttributeCertificateHolder.GetIssuer">
             Return the principals associated with the issuer attached to this holder
            
             @return an array of principals, null if no BaseCertificateID is set.
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.AttributeCertificateHolder.DigestedObjectType">
             Returns the digest object type if an object digest info is used.
             <p>
             <ul>
             <li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li>
             <li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li>
             <li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li>
             </ul>
             </p>
            
             @return The digest object type or -1 if no object digest info is set.
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.AttributeCertificateHolder.DigestAlgorithm">
             Returns the other object type ID if an object digest info is used.
            
             @return The other object type ID or <code>null</code> if no object
                     digest info is set.
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.AttributeCertificateHolder.OtherObjectTypeID">
             Returns the digest algorithm ID if an object digest info is used.
            
             @return The digest algorithm ID or <code>null</code> if no object
                     digest info is set.
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.AttributeCertificateHolder.SerialNumber">
             Return the serial number associated with the issuer attached to this holder.
            
             @return the certificate serial number, null if no BaseCertificateID is set.
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.AttributeCertificateIssuer">
            Carrying class for an attribute certificate issuer.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.AttributeCertificateIssuer.#ctor(LibOrg.BouncyCastle.Asn1.X509.AttCertIssuer)">
             Set the issuer directly with the ASN.1 structure.
            
             @param issuer The issuer
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.AttributeCertificateIssuer.GetPrincipals">
            <summary>Return any principal objects inside the attribute certificate issuer object.</summary>
            <returns>An array of IPrincipal objects (usually X509Principal).</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure">
            <remarks>A high level authority key identifier.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(LibOrg.BouncyCastle.Asn1.Asn1OctetString)">
             Constructor which will take the byte[] returned from getExtensionValue()
            
             @param encodedValue a DER octet encoded string with the extension structure in it.
             @throws IOException on parsing errors.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(LibOrg.BouncyCastle.X509.X509Certificate)">
             Create an AuthorityKeyIdentifier using the passed in certificate's public
             key, issuer and serial number.
            
             @param certificate the certificate providing the information.
             @throws CertificateParsingException if there is a problem processing the certificate
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
             Create an AuthorityKeyIdentifier using just the hash of the
             public key.
            
             @param pubKey the key to generate the hash from.
             @throws InvalidKeyException if there is a problem using the key.
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.Extension.SubjectKeyIdentifierStructure">
            A high level subject key identifier.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Extension.SubjectKeyIdentifierStructure.#ctor(LibOrg.BouncyCastle.Asn1.Asn1OctetString)">
             Constructor which will take the byte[] returned from getExtensionValue()
            
             @param encodedValue a DER octet encoded string with the extension structure in it.
             @throws IOException on parsing errors.
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.IX509AttributeCertificate">
            <remarks>Interface for an X.509 Attribute Certificate.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.IX509AttributeCertificate.GetAttributes">
            <summary>Return the attributes contained in the attribute block in the certificate.</summary>
            <returns>An array of attributes.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.IX509AttributeCertificate.GetAttributes(System.String)">
            <summary>Return the attributes with the same type as the passed in oid.</summary>
            <param name="oid">The object identifier we wish to match.</param>
            <returns>An array of matched attributes, null if there is no match.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.IX509AttributeCertificate.GetEncoded">
            <summary>Return an ASN.1 encoded byte array representing the attribute certificate.</summary>
            <returns>An ASN.1 encoded byte array.</returns>
            <exception cref="T:System.IO.IOException">If the certificate cannot be encoded.</exception>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.IX509AttributeCertificate.Version">
            <summary>The version number for the certificate.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.IX509AttributeCertificate.SerialNumber">
            <summary>The serial number for the certificate.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.IX509AttributeCertificate.NotBefore">
            <summary>The UTC DateTime before which the certificate is not valid.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.IX509AttributeCertificate.NotAfter">
            <summary>The UTC DateTime after which the certificate is not valid.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.IX509AttributeCertificate.Holder">
            <summary>The holder of the certificate.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.IX509AttributeCertificate.Issuer">
            <summary>The issuer details for the certificate.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.PrincipalUtilities">
            <remarks>
            A utility class that will extract X509Principal objects from X.509 certificates.
            <p>
            Use this in preference to trying to recreate a principal from a string, not all
            DNs are what they should be, so it's best to leave them encoded where they
            can be.</p>
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.PrincipalUtilities.GetIssuerX509Principal(LibOrg.BouncyCastle.X509.X509Certificate)">
            <summary>Return the issuer of the given cert as an X509Principal.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.PrincipalUtilities.GetSubjectX509Principal(LibOrg.BouncyCastle.X509.X509Certificate)">
            <summary>Return the subject of the given cert as an X509Principal.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.PrincipalUtilities.GetIssuerX509Principal(LibOrg.BouncyCastle.X509.X509Crl)">
            <summary>Return the issuer of the given CRL as an X509Principal.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector">
             This class is an <code>Selector</code> like implementation to select
             attribute certificates from a given set of criteria.
            
             @see LibOrg.BouncyCastle.x509.X509AttributeCertificate
             @see LibOrg.BouncyCastle.x509.X509Store
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Match(System.Object)">
            <summary>
            Decides if the given attribute certificate should be selected.
            </summary>
            <param name="obj">The attribute certificate to be checked.</param>
            <returns><code>true</code> if the object matches this selector.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetName(LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
             Adds a target name criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target names.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name The name as a GeneralName (not <code>null</code>)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetName(System.Byte[])">
             Adds a target name criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target names.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the name in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SetTargetNames(System.Collections.IEnumerable)">
            Adds a collection with target names criteria. If <code>null</code> is
            given any will do.
            <p>
            The collection consists of either GeneralName objects or byte[] arrays representing
            DER encoded GeneralName structures.
            </p>
            
            @param names A collection of target names.
            @throws IOException if a parsing error occurs.
            @see #AddTargetName(byte[])
            @see #AddTargetName(GeneralName)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.GetTargetNames">
            Gets the target names. The collection consists of <code>List</code>s
            made up of an <code>Integer</code> in the first entry and a DER encoded
            byte array or a <code>String</code> in the second entry.
            <p>The returned collection is immutable.</p>
            
            @return The collection of target names
            @see #setTargetNames(Collection)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(LibOrg.BouncyCastle.Asn1.X509.GeneralName)">
             Adds a target group criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target groups.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param group The group as GeneralName form (not <code>null</code>)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(System.Byte[])">
             Adds a target group criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target groups.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the group in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SetTargetGroups(System.Collections.IEnumerable)">
             Adds a collection with target groups criteria. If <code>null</code> is
             given any will do.
             <p>
             The collection consists of <code>GeneralName</code> objects or <code>byte[]</code>
             representing DER encoded GeneralNames.
             </p>
            
             @param names A collection of target groups.
             @throws IOException if a parsing error occurs.
             @see #AddTargetGroup(byte[])
             @see #AddTargetGroup(GeneralName)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.GetTargetGroups">
             Gets the target groups. The collection consists of <code>List</code>s
             made up of an <code>Integer</code> in the first entry and a DER encoded
             byte array or a <code>String</code> in the second entry.
             <p>The returned collection is immutable.</p>
            
             @return The collection of target groups.
             @see #setTargetGroups(Collection)
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AttributeCert">
            <summary>The attribute certificate which must be matched.</summary>
            <remarks>If <c>null</c> is given, any will do.</remarks>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AttributeCertificateValid">
            <summary>The criteria for validity</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Holder">
            <summary>The holder.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Issuer">
            <summary>The issuer.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SerialNumber">
            <summary>The serial number.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.Store.X509CertPairStoreSelector">
            <remarks>
            This class is an <code>IX509Selector</code> implementation to select
            certificate pairs, which are e.g. used for cross certificates. The set of
            criteria is given from two <code>X509CertStoreSelector</code> objects,
            each of which, if present, must match the respective component of a pair.
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509CertPairStoreSelector.Match(System.Object)">
            <summary>
            Decides if the given certificate pair should be selected. If
            <c>obj</c> is not a <code>X509CertificatePair</code>, this method
            returns <code>false</code>.
            </summary>
            <param name="obj">The <code>X509CertificatePair</code> to be tested.</param>
            <returns><code>true</code> if the object matches this selector.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CertPairStoreSelector.CertPair">
            <summary>The certificate pair which is used for testing on equality.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CertPairStoreSelector.ForwardSelector">
            <summary>The certificate selector for the forward part.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CertPairStoreSelector.ReverseSelector">
            <summary>The certificate selector for the reverse part.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.Store.X509CollectionStore">
            A simple collection backed store.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509CollectionStore.#ctor(System.Collections.ICollection)">
             Basic constructor.
            
             @param collection - initial contents for the store, this is copied.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509CollectionStore.GetMatches(LibOrg.BouncyCastle.X509.Store.IX509Selector)">
             Return the matches in the collection for the passed in selector.
            
             @param selector the selector to match against.
             @return a possibly empty collection of matching objects.
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.Store.X509CollectionStoreParameters">
            <remarks>This class contains a collection for collection based <code>X509Store</code>s.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509CollectionStoreParameters.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor.
            <p>
            The collection is copied.
            </p>
            </summary>
            <param name="collection">The collection containing X.509 object types.</param>
            <exception cref="T:System.ArgumentNullException">If collection is null.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509CollectionStoreParameters.GetCollection">
            <summary>Returns a copy of the <code>ICollection</code>.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.Store.X509CollectionStoreParameters.ToString">
            <summary>Returns a formatted string describing the parameters.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CrlStoreSelector.Issuers">
            <summary>
            An <code>ICollection</code> of <code>X509Name</code> objects
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CrlStoreSelector.AttrCertChecking">
             The attribute certificate being checked. This is not a criterion.
             Rather, it is optional information that may help a {@link X509Store} find
             CRLs that would be relevant when checking revocation for the specified
             attribute certificate. If <code>null</code> is specified, then no such
             optional information is provided.
            
             @param attrCert the <code>IX509AttributeCertificate</code> being checked (or
                         <code>null</code>)
             @see #getAttrCertificateChecking()
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CrlStoreSelector.CompleteCrlEnabled">
             If <code>true</code> only complete CRLs are returned. Defaults to
             <code>false</code>.
            
             @return <code>true</code> if only complete CRLs are returned.
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CrlStoreSelector.DeltaCrlIndicatorEnabled">
             Returns if this selector must match CRLs with the delta CRL indicator
             extension set. Defaults to <code>false</code>.
            
             @return Returns <code>true</code> if only CRLs with the delta CRL
                     indicator extension are selected.
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CrlStoreSelector.IssuingDistributionPoint">
             The issuing distribution point.
             <p>
             The issuing distribution point extension is a CRL extension which
             identifies the scope and the distribution point of a CRL. The scope
             contains among others information about revocation reasons contained in
             the CRL. Delta CRLs and complete CRLs must have matching issuing
             distribution points.</p>
             <p>
             The byte array is cloned to protect against subsequent modifications.</p>
             <p>
             You must also enable or disable this criteria with
             {@link #setIssuingDistributionPointEnabled(bool)}.</p>
            
             @param issuingDistributionPoint The issuing distribution point to set.
                                             This is the DER encoded OCTET STRING extension value.
             @see #getIssuingDistributionPoint()
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CrlStoreSelector.IssuingDistributionPointEnabled">
             Whether the issuing distribution point criteria should be applied.
             Defaults to <code>false</code>.
             <p>
             You may also set the issuing distribution point criteria if not a missing
             issuing distribution point should be assumed.</p>
            
             @return Returns if the issuing distribution point check is enabled.
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.Store.X509CrlStoreSelector.MaxBaseCrlNumber">
             The maximum base CRL number. Defaults to <code>null</code>.
            
             @return Returns the maximum base CRL number.
             @see #setMaxBaseCRLNumber(BigInteger)
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.SubjectPublicKeyInfoFactory">
            <summary>
            A factory to produce Public Key Info Objects.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Create a Subject Public Key Info object for a given public key.
            </summary>
            <param name="key">One of ElGammalPublicKeyParameters, DSAPublicKeyParameter, DHPublicKeyParameters, RsaKeyParameters or ECPublicKeyParameters</param>
            <returns>A subject public key info object.</returns>
            <exception cref="T:System.Exception">Throw exception if object provided is not one of the above.</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509AttrCertParser.ReadAttrCert(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509AttrCertParser.ReadAttrCerts(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509AttrCertParser.ReadAttrCert(System.IO.Stream)">
            Generates a certificate object and initializes it with the data
            read from the input stream inStream.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509AttrCertParser.ReadAttrCerts(System.IO.Stream)">
            Returns a (possibly empty) collection view of the certificates
            read from the given input stream inStream.
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509Attribute">
            Class for carrying the values in an X.509 Attribute.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Attribute.#ctor(LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            @param at an object representing an attribute.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Attribute.#ctor(System.String,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
             Create an X.509 Attribute with the type given by the passed in oid and
             the value represented by an ASN.1 Set containing value.
            
             @param oid type of the attribute
             @param value value object to go into the atribute's value set.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Attribute.#ctor(System.String,LibOrg.BouncyCastle.Asn1.Asn1EncodableVector)">
             Create an X.59 Attribute with the type given by the passed in oid and the
             value represented by an ASN.1 Set containing the objects in value.
            
             @param oid type of the attribute
             @param value vector of values to go in the attribute's value set.
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509Certificate">
            <summary>
            An Object representing an X509 Certificate.
            Has static methods for loading Certificates encoded in many forms that return X509Certificate Objects.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.IsValid(System.DateTime)">
            <summary>
            Return true if the nominated time is within the start and end times nominated on the certificate.
            </summary>
            <param name="time">The time to test validity against.</param>
            <returns>True if certificate is valid for nominated time.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.CheckValidity">
            <summary>
            Checks if the current date is within certificate's validity period.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.CheckValidity(System.DateTime)">
            <summary>
            Checks if the given date is within certificate's validity period.
            </summary>
            <exception cref="T:LibOrg.BouncyCastle.Security.Certificates.CertificateExpiredException">if the certificate is expired by given date</exception>
            <exception cref="T:LibOrg.BouncyCastle.Security.Certificates.CertificateNotYetValidException">if the certificate is not yet valid on given date</exception>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.GetTbsCertificate">
            <summary>
            Return the Der encoded TbsCertificate data.
            This is the certificate component less the signature.
            To Get the whole certificate call the GetEncoded() member.
            </summary>
            <returns>A byte array containing the Der encoded Certificate component.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.GetSignature">
            <summary>
            The signature.
            </summary>
            <returns>A byte array containg the signature of the certificate.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.GetSigAlgParams">
            <summary>
            Get the signature algorithms parameters. (EG DSA Parameters)
            </summary>
            <returns>A byte array containing the Der encoded version of the parameters or null if there are none.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.GetKeyUsage">
            <summary>
            Get a key usage guidlines.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.GetPublicKey">
            <summary>
            Get the public key of the subject of the certificate.
            </summary>
            <returns>The public key parameters.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.GetEncoded">
            <summary>
            Return a Der encoded version of this certificate.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Certificate.Verify(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Verify the certificate's signature using the nominated public key.
            </summary>
            <param name="key">An appropriate public key parameter object, RsaPublicKeyParameters, DsaPublicKeyParameters or ECDsaPublicKeyParameters</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If key submitted is not of the above nominated types.</exception>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.IsValidNow">
            <summary>
            Return true if the current time is within the start and end times nominated on the certificate.
            </summary>
            <returns>true id certificate is valid for the current time.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.Version">
            <summary>
            Return the certificate's version.
            </summary>
            <returns>An integer whose value Equals the version of the cerficate.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.SerialNumber">
            <summary>
            Return a <see cref="T:LibOrg.BouncyCastle.Math.BigInteger">BigInteger</see> containing the serial number.
            </summary>
            <returns>The Serial number.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.IssuerDN">
            <summary>
            Get the Issuer Distinguished Name. (Who signed the certificate.)
            </summary>
            <returns>And X509Object containing name and value pairs.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.SubjectDN">
            <summary>
            Get the subject of this certificate.
            </summary>
            <returns>An X509Name object containing name and value pairs.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.NotBefore">
            <summary>
            The time that this certificate is valid from.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.NotAfter">
            <summary>
            The time that this certificate is valid up to.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.SigAlgName">
            <summary>
            A meaningful version of the Signature Algorithm. (EG SHA1WITHRSA)
            </summary>
            <returns>A sting representing the signature algorithm.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.SigAlgOid">
            <summary>
            Get the Signature Algorithms Object ID.
            </summary>
            <returns>A string containg a '.' separated object id.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.IssuerUniqueID">
            <summary>
            Get the issuers UID.
            </summary>
            <returns>A DerBitString.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509Certificate.SubjectUniqueID">
            <summary>
            Get the subjects UID.
            </summary>
            <returns>A DerBitString.</returns>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509CertificatePair">
            <remarks>
            This class contains a cross certificate pair. Cross certificates pairs may
            contain two cross signed certificates from two CAs. A certificate from the
            other CA to this CA is contained in the forward certificate, the certificate
            from this CA to the other CA is contained in the reverse certificate.
            </remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CertificatePair.#ctor(LibOrg.BouncyCastle.X509.X509Certificate,LibOrg.BouncyCastle.X509.X509Certificate)">
            <summary>Constructor</summary>
            <param name="forward">Certificate from the other CA to this CA.</param>
            <param name="reverse">Certificate from this CA to the other CA.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CertificatePair.#ctor(LibOrg.BouncyCastle.Asn1.X509.CertificatePair)">
            <summary>Constructor from a ASN.1 CertificatePair structure.</summary>
            <param name="pair">The <c>CertificatePair</c> ASN.1 object.</param>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509CertificatePair.Forward">
            <summary>Returns the certificate from the other CA to this CA.</summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509CertificatePair.Reverse">
            <summary>Returns the certificate from this CA to the other CA.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509CertificateParser">
            class for dealing with X509 certificates.
            <p>
            At the moment this will deal with "-----BEGIN CERTIFICATE-----" to "-----END CERTIFICATE-----"
            base 64 encoded certs, as well as the BER binaries of certificates and some classes of PKCS#7
            objects.</p>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CertificateParser.ReadCertificate(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CertificateParser.ReadCertificates(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CertificateParser.ReadCertificate(System.IO.Stream)">
            Generates a certificate object and initializes it with the data
            read from the input stream inStream.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CertificateParser.ReadCertificates(System.IO.Stream)">
            Returns a (possibly empty) collection view of the certificates
            read from the given input stream inStream.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CertPairParser.ReadCertPair(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CertPairParser.ReadCertPairs(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509Crl">
             The following extensions are listed in RFC 2459 as relevant to CRLs
            
             Authority Key Identifier
             Issuer Alternative Name
             CRL Number
             Delta CRL Indicator (critical)
             Issuing Distribution Point (critical)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Crl.ToString">
             Returns a string representation of this CRL.
            
             @return a string representation of this CRL.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509Crl.IsRevoked(LibOrg.BouncyCastle.X509.X509Certificate)">
             Checks whether the given certificate is on this CRL.
            
             @param cert the certificate to check for.
             @return true if the given certificate is on this CRL,
             false otherwise.
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509CrlEntry">
             The following extensions are listed in RFC 2459 as relevant to CRL Entries
            
             ReasonCode Hode Instruction Code Invalidity Date Certificate Issuer
             (critical)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CrlEntry.#ctor(LibOrg.BouncyCastle.Asn1.X509.CrlEntry,System.Boolean,LibOrg.BouncyCastle.Asn1.X509.X509Name)">
             Constructor for CRLEntries of indirect CRLs. If <code>isIndirect</code>
             is <code>false</code> {@link #getCertificateIssuer()} will always
             return <code>null</code>, <code>previousCertificateIssuer</code> is
             ignored. If this <code>isIndirect</code> is specified and this CrlEntry
             has no certificate issuer CRL entry extension
             <code>previousCertificateIssuer</code> is returned by
             {@link #getCertificateIssuer()}.
            
             @param c
                        TbsCertificateList.CrlEntry object.
             @param isIndirect
                        <code>true</code> if the corresponding CRL is a indirect
                        CRL.
             @param previousCertificateIssuer
                        Certificate issuer of the previous CrlEntry.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CrlParser.ReadCrl(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CrlParser.ReadCrls(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CrlParser.ReadCrl(System.IO.Stream)">
            Generates a certificate revocation list (CRL) object and initializes
            it with the data read from the input stream inStream.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509CrlParser.ReadCrls(System.IO.Stream)">
             Returns a (possibly empty) collection view of the CRLs read from
             the given input stream inStream.
            
             The inStream may contain a sequence of DER-encoded CRLs, or
             a PKCS#7 CRL set.  This is a PKCS#7 SignedData object, with the
             only significant field being crls.  In particular the signature
             and the contents are ignored.
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509KeyUsage">
             A holding class for constructing an X509 Key Usage extension.
            
             <pre>
                id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
            
                KeyUsage ::= BIT STRING {
                     digitalSignature        (0),
                     nonRepudiation          (1),
                     keyEncipherment         (2),
                     dataEncipherment        (3),
                     keyAgreement            (4),
                     keyCertSign             (5),
                     cRLSign                 (6),
                     encipherOnly            (7),
                     decipherOnly            (8) }
             </pre>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509KeyUsage.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (X509KeyUsage.keyEncipherment | X509KeyUsage.dataEncipherment)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509SignatureUtilities.GetDigestAlgName(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator">
            <summary>
            Class to Generate X509V1 Certificates.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.Reset">
            <summary>
            Reset the generator.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.SetSerialNumber(LibOrg.BouncyCastle.Math.BigInteger)">
            <summary>
            Set the certificate's serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.SetIssuerDN(LibOrg.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the issuer distinguished name.
            The issuer is the entity whose private key is used to sign the certificate.
            </summary>
            <param name="issuer">The issuers DN.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.SetNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid from.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.SetNotAfter(System.DateTime)">
            <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.SetSubjectDN(LibOrg.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the subject distinguished name.
            The subject describes the entity associated with the public key.
            </summary>
            <param name="subject"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.SetPublicKey(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="publicKey"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            This can be either a name or an OID, names are treated as case insensitive.
            </summary>
            <param name="signatureAlgorithm">string representation of the algorithm name</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.Generate(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate a new X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.Generate(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>
            Generate a new X509Certificate specifying a SecureRandom instance that you would like to use.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <param name="random">The Secure Random you want to use.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509V1CertificateGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509V2AttributeCertificate">
            <summary>An implementation of a version 2 X.509 Attribute Certificate.</summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator">
            <remarks>Class to produce an X.509 Version 2 AttributeCertificate.</remarks>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Reset">
            <summary>Reset the generator</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetHolder(LibOrg.BouncyCastle.X509.AttributeCertificateHolder)">
            <summary>Set the Holder of this Attribute Certificate.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetIssuer(LibOrg.BouncyCastle.X509.AttributeCertificateIssuer)">
            <summary>Set the issuer.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetSerialNumber(LibOrg.BouncyCastle.Math.BigInteger)">
            <summary>Set the serial number for the certificate.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm. This can be either a name or an OID, names
            are treated as case insensitive.
            </summary>
            <param name="signatureAlgorithm">The algorithm name.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddAttribute(LibOrg.BouncyCastle.X509.X509Attribute)">
            <summary>Add an attribute.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddExtension(System.String,System.Boolean,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>Add a given extension field for the standard extensions tag.</summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            <summary>
            Add a given extension field for the standard extensions tag.
            The value parameter becomes the contents of the octet string associated
            with the extension.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Generate(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X509 certificate, based on the current issuer and subject.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Generate(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>
            Generate an X509 certificate, based on the current issuer and subject,
            using the supplied source of randomness, if required.
            </summary>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509V2CrlGenerator">
            class to produce an X.509 Version 2 CRL.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.Reset">
            reset the generator
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.SetIssuerDN(LibOrg.BouncyCastle.Asn1.X509.X509Name)">
            Set the issuer distinguished name - the issuer is the entity whose private key is used to sign the
            certificate.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.AddCrlEntry(LibOrg.BouncyCastle.Math.BigInteger,System.DateTime,System.Int32)">
             Reason being as indicated by CrlReason, i.e. CrlReason.KeyCompromise
             or 0 if CrlReason is not to be used
            
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.AddCrlEntry(LibOrg.BouncyCastle.Math.BigInteger,System.DateTime,System.Int32,System.DateTime)">
             Add a CRL entry with an Invalidity Date extension as well as a CrlReason extension.
             Reason being as indicated by CrlReason, i.e. CrlReason.KeyCompromise
             or 0 if CrlReason is not to be used
            
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.AddCrlEntry(LibOrg.BouncyCastle.Math.BigInteger,System.DateTime,LibOrg.BouncyCastle.Asn1.X509.X509Extensions)">
             Add a CRL entry with extensions.
            
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.AddCrl(LibOrg.BouncyCastle.X509.X509Crl)">
             Add the CRLEntry objects contained in a previous CRL.
            
             @param other the X509Crl to source the other entries from.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.SetSignatureAlgorithm(System.String)">
             Set the signature algorithm. This can be either a name or an oid, names
             are treated as case insensitive.
            
             @param signatureAlgorithm string representation of the algorithm name.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(System.String,System.Boolean,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.Generate(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>Generate an X509 CRL, based on the current issuer and subject.</summary>
            <param name="privateKey">The key used for signing.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.Generate(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>Generate an X509 CRL, based on the current issuer and subject.</summary>
            <param name="privateKey">The key used for signing.</param>
            <param name="random">A user-defined source of randomness.</param>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509V2CrlGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator">
            <summary>
            A class to Generate Version 3 X509Certificates.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.Reset">
            <summary>
            Reset the Generator.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SetSerialNumber(LibOrg.BouncyCastle.Math.BigInteger)">
            <summary>
            Set the certificate's serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can Get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SetIssuerDN(LibOrg.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the distinguished name of the issuer.
            The issuer is the entity which is signing the certificate.
            </summary>
            <param name="issuer">The issuer's DN.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SetNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid from.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SetNotAfter(System.DateTime)">
            <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SetSubjectDN(LibOrg.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the DN of the entity that this certificate is about.
            </summary>
            <param name="subject"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SetPublicKey(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="publicKey"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            </summary>
            <param name="signatureAlgorithm"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SetSubjectUniqueID(System.Boolean[])">
            <summary>
            Set the subject unique ID - note: it is very rare that it is correct to do this.
            </summary>
            <param name="uniqueID"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SetIssuerUniqueID(System.Boolean[])">
            <summary>
            Set the issuer unique ID - note: it is very rare that it is correct to do this.
            </summary>
            <param name="uniqueID"/>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(System.String,System.Boolean,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>
            Add a given extension field for the standard extensions tag (tag 3).
            </summary>
            <param name="oid">string containing a dotted decimal Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">The value.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,LibOrg.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>
            Add an extension to this certificate.
            </summary>
            <param name="oid">Its Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">The value.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            <summary>
            Add an extension using a string with a dotted decimal OID.
            </summary>
            <param name="oid">string containing a dotted decimal Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">byte[] containing the value of this extension.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            <summary>
            Add an extension to this certificate.
            </summary>
            <param name="oid">Its Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">byte[] containing the value of this extension.</param>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.CopyAndAddExtension(System.String,System.Boolean,LibOrg.BouncyCastle.X509.X509Certificate)">
            <summary>
            Add a given extension field for the standard extensions tag (tag 3),
            copying the extension value from another certificate.
            </summary>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.CopyAndAddExtension(LibOrg.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,LibOrg.BouncyCastle.X509.X509Certificate)">
            add a given extension field for the standard extensions tag (tag 3)
            copying the extension value from another certificate.
            @throws CertificateParsingException if the extension cannot be extracted.
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.Generate(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.Generate(LibOrg.BouncyCastle.Crypto.AsymmetricKeyParameter,LibOrg.BouncyCastle.Security.SecureRandom)">
            <summary>
            Generate an X509Certificate using your own SecureRandom.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <param name="random">You Secure Random instance.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="P:LibOrg.BouncyCastle.X509.X509V3CertificateGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
            <remarks>
              <para>
                Set this at any point before calling <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.Close"/>.
              </para>
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Crc.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream"/>
             <seealso cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream"/>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                Application code won't call this code directly.  This method may be
                invoked in two distinct scenarios.  If disposing == true, the method
                has been called directly or indirectly by a user's code, for example
                via the public Dispose() method. In this case, both managed and
                unmanaged resources can be referenced and disposed.  If disposing ==
                false, the method has been called by the runtime from inside the
                object finalizer and this method should not reference other objects;
                in that case only unmanaged resources must be referenced or
                disposed.
              </para>
            </remarks>
            <param name="disposing">
              true if the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream"/> and <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/>
             <seealso cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream"/>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream">
             <summary>
               A class for compressing streams using the
               Deflate algorithm with multiple threads.
             </summary>
            
             <remarks>
             <para>
               This class performs DEFLATE compression through writing.  For
               more information on the Deflate algorithm, see IETF RFC 1951,
               "DEFLATE Compressed Data Format Specification version 1.3."
             </para>
            
             <para>
               This class is similar to <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/>, except
               that this class is for compression only, and this implementation uses an
               approach that employs multiple worker threads to perform the DEFLATE.  On
               a multi-cpu or multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream, particularly
               for larger streams.  How large?  Anything over 10mb is a good candidate
               for parallel compression.
             </para>
            
             <para>
               The tradeoff is that this class uses more memory and more CPU than the
               vanilla DeflateStream, and also is less efficient as a compressor. For
               large files the size of the compressed data stream can be less than 1%
               larger than the size of a compressed data stream from the vanialla
               DeflateStream.  For smaller files the difference can be larger.  The
               difference will also be larger if you set the BufferSize to be lower than
               the default value.  Your mileage may vary. Finally, for small files, the
               ParallelDeflateOutputStream can be much slower than the vanilla
               DeflateStream, because of the overhead associated to using the thread
               pool.
             </para>
            
             </remarks>
             <seealso cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)">
             <summary>
             Create a ParallelDeflateOutputStream.
             </summary>
             <remarks>
            
             <para>
               This stream compresses data written into it via the DEFLATE
               algorithm (see RFC 1951), and writes out the compressed byte stream.
             </para>
            
             <para>
               The instance will use the default compression level, the default
               buffer sizes and the default number of threads and buffers per
               thread.
             </para>
            
             <para>
               This class is similar to <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/>,
               except that this implementation uses an approach that employs
               multiple worker threads to perform the DEFLATE.  On a multi-cpu or
               multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream,
               particularly for larger streams.  How large?  Anything over 10mb is
               a good candidate for parallel compression.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ParallelDeflateOutputStream to compress
             data.  It reads a file, compresses it, and writes the compressed data to
             a second, output file.
            
             <code>
             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
             int n= -1;
             String outputFile = fileToCompress + ".compressed";
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new ParallelDeflateOutputStream(raw))
                     {
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim buffer As Byte() = New Byte(4096) {}
             Dim n As Integer = -1
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                     Using compressor As Stream = New ParallelDeflateOutputStream(raw)
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to which compressed data will be written.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel)">
            <summary>
              Create a ParallelDeflateOutputStream using the specified CompressionLevel.
            </summary>
            <remarks>
              See the <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionStrategy,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream using the specified
            CompressionLevel and CompressionStrategy, and specifying whether to
            leave the captive stream open when the ParallelDeflateOutputStream is
            closed.
            </summary>
            <remarks>
              See the <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="strategy">
              By tweaking this parameter, you may be able to optimize the compression for
              data with particular characteristics.
            </param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               To use the ParallelDeflateOutputStream to compress data, create a
               ParallelDeflateOutputStream with CompressionMode.Compress, passing a
               writable output stream.  Then call Write() on that
               ParallelDeflateOutputStream, providing uncompressed data as input.  The
               data sent to the output stream will be the compressed form of the data
               written.
             </para>
            
             <para>
               To decompress data, use the <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/> class.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            You must call Close on the stream to guarantee that all of the data written in has
            been compressed, and the compressed data has been written out.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Dispose">
            <summary>Dispose the object</summary>
            <remarks>
              <para>
                Because ParallelDeflateOutputStream is IDisposable, the
                application must call this method when finished using the instance.
              </para>
              <para>
                This method is generally called implicitly upon exit from
                a <c>using</c> scope in C# (<c>Using</c> in VB).
              </para>
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)">
            <summary>The Dispose method</summary>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)">
             <summary>
               Resets the stream for use with another stream.
             </summary>
             <remarks>
               Because the ParallelDeflateOutputStream is expensive to create, it
               has been designed so that it can be recycled and re-used.  You have
               to call Close() on the stream first, then you can call Reset() on
               it, to use it again on another stream.
             </remarks>
            
             <param name="stream">
               The new output stream for this era.
             </param>
            
             <example>
             <code>
             ParallelDeflateOutputStream deflater = null;
             foreach (var inputFile in listOfFiles)
             {
                 string outputFile = inputFile + ".compressed";
                 using (System.IO.Stream input = System.IO.File.OpenRead(inputFile))
                 {
                     using (var outStream = System.IO.File.Create(outputFile))
                     {
                         if (deflater == null)
                             deflater = new ParallelDeflateOutputStream(outStream,
                                                                        CompressionLevel.Best,
                                                                        CompressionStrategy.Default,
                                                                        true);
                         deflater.Reset(outStream);
            
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             deflater.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="buffer">
              The buffer into which data would be read, IF THIS METHOD
              ACTUALLY DID ANYTHING.
            </param>
            <param name="offset">
              The offset within that data array at which to insert the
              data that is read, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <param name="count">
              The number of bytes to write, IF THIS METHOD ACTUALLY DID
              ANYTHING.
            </param>
            <returns>nothing.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="offset">
              The offset to seek to....
              IF THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <param name="origin">
              The reference specifying how to apply the offset....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
            <returns>nothing. It always throws.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.MaxBufferPairs">
             <summary>
               The maximum number of buffer pairs to use.
             </summary>
            
             <remarks>
             <para>
               This property sets an upper limit on the number of memory buffer
               pairs to create.  The implementation of this stream allocates
               multiple buffers to facilitate parallel compression.  As each buffer
               fills up, this stream uses <see cref="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
               ThreadPool.QueueUserWorkItem()</see>
               to compress those buffers in a background threadpool thread. After a
               buffer is compressed, it is re-ordered and written to the output
               stream.
             </para>
            
             <para>
               A higher number of buffer pairs enables a higher degree of
               parallelism, which tends to increase the speed of compression on
               multi-cpu computers.  On the other hand, a higher number of buffer
               pairs also implies a larger memory consumption, more active worker
               threads, and a higher cpu utilization for any compression. This
               property enables the application to limit its memory consumption and
               CPU utilization behavior depending on requirements.
             </para>
            
             <para>
               For each compression "task" that occurs in parallel, there are 2
               buffers allocated: one for input and one for output.  This property
               sets a limit for the number of pairs.  The total amount of storage
               space allocated for buffering will then be (N*S*2), where N is the
               number of buffer pairs, S is the size of each buffer (<see cref="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize"/>).  By default, DotNetZip allocates 4 buffer
               pairs per CPU core, so if your machine has 4 cores, and you retain
               the default buffer size of 128k, then the
               ParallelDeflateOutputStream will use 4 * 4 * 2 * 128kb of buffer
               memory in total, or 4mb, in blocks of 128kb.  If you then set this
               property to 8, then the number will be 8 * 2 * 128kb of buffer
               memory, or 2mb.
             </para>
            
             <para>
               CPU utilization will also go up with additional buffers, because a
               larger number of buffer pairs allows a larger number of background
               threads to compress in parallel. If you find that parallel
               compression is consuming too much memory or CPU, you can adjust this
               value downward.
             </para>
            
             <para>
               The default value is 16. Different values may deliver better or
               worse results, depending on your priorities and the dynamic
               performance characteristics of your storage and compute resources.
             </para>
            
             <para>
               This property is not the number of buffer pairs to use; it is an
               upper limit. An illustration: Suppose you have an application that
               uses the default value of this property (which is 16), and it runs
               on a machine with 2 CPU cores. In that case, DotNetZip will allocate
               4 buffer pairs per CPU core, for a total of 8 pairs.  The upper
               limit specified by this property has no effect.
             </para>
            
             <para>
               The application can set this value at any time, but it is effective
               only before the first call to Write(), which is when the buffers are
               allocated.
             </para>
             </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.BufferSize">
             <summary>
               The size of the buffers used by the compressor threads.
             </summary>
             <remarks>
            
             <para>
               The default buffer size is 128k. The application can set this value
               at any time, but it is effective only before the first Write().
             </para>
            
             <para>
               Larger buffer sizes implies larger memory consumption but allows
               more efficient compression. Using smaller buffer sizes consumes less
               memory but may result in less effective compression.  For example,
               using the default buffer size of 128k, the compression delivered is
               within 1% of the compression delivered by the single-threaded <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/>.  On the other hand, using a
               BufferSize of 8k can result in a compressed data stream that is 5%
               larger than that delivered by the single-threaded
               <c>DeflateStream</c>.  Excessively small buffer sizes can also cause
               the speed of the ParallelDeflateOutputStream to drop, because of
               larger thread scheduling overhead dealing with many many small
               buffers.
             </para>
            
             <para>
               The total amount of storage space allocated for buffering will be
               (N*S*2), where N is the number of buffer pairs, and S is the size of
               each buffer (this property). There are 2 buffers used by the
               compressor, one for input and one for output.  By default, DotNetZip
               allocates 4 buffer pairs per CPU core, so if your machine has 4
               cores, then the number of buffer pairs used will be 16. If you
               accept the default value of this property, 128k, then the
               ParallelDeflateOutputStream will use 16 * 2 * 128kb of buffer memory
               in total, or 4mb, in blocks of 128kb.  If you set this property to
               64kb, then the number will be 16 * 2 * 64kb of buffer memory, or
               2mb.
             </para>
            
             </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Crc32">
            <summary>
            The CRC32 for the data that was written out, prior to compression.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed">
            <summary>
            The total number of uncompressed bytes processed by the ParallelDeflateOutputStream.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.CanRead">
            <summary>
            Indicates whether the stream supports Read operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.CanWrite">
            <summary>
            Indicates whether the stream supports Write operations.
            </summary>
            <remarks>
            Returns true if the provided stream is writable.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Length">
            <summary>
            Reading this property always throws a NotSupportedException.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ParallelDeflateOutputStream.Position">
            <summary>
            Returns the current position of the output stream.
            </summary>
            <remarks>
              <para>
                Because the output gets written by a background thread,
                the value may change asynchronously.  Setting this
                property always throws a NotSupportedException.
              </para>
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.#ctor(Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.Inflate(Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InitializeDeflate(Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InitializeDeflate(Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InitializeDeflate(Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.InitializeDeflate(Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.Deflate(Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.SetDeflateParams(Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.DeflateStream"/>
             <seealso cref="T:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream"/>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionMode,Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be
               re-read after compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.Ionic.Zlib.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotSupportedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.TrueTypeParser.TTGlyphData">
            <summary>
            This represents a slightly above lowest level representation of the truetype curves that make a glyph.
            There are two types of glyphdata: simple and compound.  Simple is a collection of coordinates and flags
            that describe how to interpret the coordinates.  Compound is a collection of references to other glyphs
            and (simple) matrix transformations.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.TrueTypeParser.TTGlyphData.GetGlyphDataStream(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.TrueTypeParser.TTTableDirectory,Atalasoft.PdfDoc.MidLevel.TrueTypeParser.TTGlyphLocations,System.Int32)">
            <summary>
            Makes a substream to read the data associated with a given glyph.
            There is one more entry in the glyph locations than there are glyphs so you can look one past the
            id to get size in bytes of any given glyph.
            Note that glyphIs is almost assuredly NOT the unicode character code.  You get the glyph id by looking up the
            characted code in the CMAP.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="glyphDir">The glyph dir.</param>
            <param name="locs">The locs.</param>
            <param name="glyphId">The glyph id.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.TrueTypeParser.TTGlyphDataSimple">
            <summary>
            Represents simple glyph data.  Oh why oh why was this designed this way.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.TrueTypeParser.TTCompoundGlyphPart">
            <summary>
            Representation of a reference to another glyph.
            This includes a transform which is pretty limited - mostly to a
            scale and/or a translate, this sucks, but so be it.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.TrueTypeParser.TTGlyphDataCompound">
            <summary>
            This is a compound glyph which is really just a list of references to other glyphs (and a transform).
            The other glyphs may be simple or (allegedly) compound glyphs as well.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLLinearizedPdf.Version">
            <summary>
            A version identification for the linearized format.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLLinearizedPdf.FileLength">
            <summary>
            The actual length of the PDF file in bytes.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLLinearizedPdf.H">
            <summary>
            An array of two or four integers, [offset1 length1] or [offset1 length1 offset2 length2]. 
            offset1 shall be the offset of the primary hint stream from the beginning of the file. 
            (This is the beginning of the stream object, not the beginning of the stream data.) 
            length1 shall be the length of this stream, including stream object overhead.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLLinearizedPdf.FirstPageObjectId">
            <summary>
            The object number of the first page’s page object. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLLinearizedPdf.EndFirstPageSectionOffset">
            <summary>
            The offset of the end of the first page, relative to the beginning of the file.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLLinearizedPdf.NumberOfPages">
            <summary>
            The number of pages in the document.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLLinearizedPdf.ZeroEntryOffset">
            <summary>
            Offset of first entry of the main cross-reference table (the entry for object number 0), 
            relative to the beginning of the file. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLLinearizedPdf.SequenceNumberOfFirstPage">
            <summary>
            The page number of the first page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfThread.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; 
            if present, shall be Thread for a thread dictionary.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfThread.FirstBead">
            <summary>
            (Required; shall be an indirect reference) The first bead in the thread.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfThread.ThreadInformation">
            <summary>
            (Optional) A thread information dictionary containing information 
            about the thread, such as its title, author, and creation 
            date. The contents of this dictionary shall conform to 
            the syntax for the document information dictionary
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper">
            <summary>
            SerializationHelper is a set of static methods to help in the process of
            deserialization of an object graph.</summary>
            <remarks>
            In the current .NET model, one must ask for a field within a serialization
            object acting under the assumption that it will be there.  If the field
            isn't there, an Exception is thrown.  An object is deserializable if and
            only if all fields of an object have been serialized.
            
            In the dotImage model, an object is constructed with default values which are then
            replaced by the information in the SerializationInfo object.  In dotImage
            this makes more sense since several objects' underlying data is optional or
            mutually exclusive.
            
            To retrieve a scalar, pass GetValue() the SerializationInfo object, the name
            of the field, and a reference to the variable that will hold the value.  GetValue()
            will return true if it performed an assignment to the variable.
            
            To retrieve a non-scalar type, pass GetValue() the SerializationInfo object, the
            name of the field and its expected Type.  GetValue will return the object if it
            found it, null otherwise.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Byte@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Char@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.DateTime@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Decimal@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Double@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int16@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int32@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int64@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Single@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLSerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <summary>
            Get an object from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="type">The expected type of the object</param>
            <returns>an object of the Type specified if found, null otherwise</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PathAction">
            <summary>
            PathAction describes elements that are used in describing a path or subpath
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PathAction.Move">
            <summary>
            Move to a new location in the path.  This is used to either start a new path or a new subpath.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PathAction.Line">
            <summary>
            Extends the current path or subpath by connection a line from the last location in the current path to a new point
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PathAction.Curve">
            <summary>
            Extends the current path or subpath by adding a Bezier curve from the last location in the current path through two control
            points and ending with the final path.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Generating.Rendering.PathAction.Close">
            <summary>
            Closes the current path or subpath by connection a straight line segment from the the last point in the current path to
            the first point in the current path.  Note that closing a path is different from simply doing a Line operation to the last point
            in that if the path is stroked, the corners will be correctly mitered with a Close but will not be mitered with a Line.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation">
            <summary>
            PdfPathOperation is a class that represents actions taken to create a path and the encapsulated data.
            PdfPathOperation objects are not constructed directly, but are instead made through static factory methods or through
            convenience methods in higher level shape objects such as PdfPath.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.MoveTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Constructs a new Move PdfPathOperation to the specified point.
            </summary>
            <param name="pt">The point to Move to.</param>
            <returns>A new PdfPathOperation with Action set to Move and one PdfPoint in the Points property.</returns>
            <example>
            <code>
            PdfPathOperation move = PdfPathOperation.MoveTo(destinationPoint);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.MoveTo(System.Double,System.Double)">
            <summary>
            Constructs a new Move PdfPathOperation to the specified x and y coordinates.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <returns>A new PdfPathOperation with Action set to Move and one PdfPoint in the Points property.</returns>
            <example>
            <code>
            PdfPathOperation move = PdfPathOperation.MoveTo(destinationX, destinationY);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.LineTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Constructs a new Line PdfPathOperation to the specified point.
            </summary>
            <param name="pt">The point to connect a line to.</param>
            <returns>A new PdfPathOperation with Action set ot Line and one PdfPoint in the Points property.</returns>
            <example>
            <code>
            PdfPathOperation line = PdfPathOpertaion.LineTo(destPt);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.LineTo(System.Double,System.Double)">
            <summary>
            Constructs a new Line PdfPathOperation to the specified x and y coordinates.
            </summary>
            <param name="x">The x coordinate of the point.</param>
            <param name="y">The y coordinate of the point.</param>
            <returns>A new PdfPathOperation with Action set to Line and one PdfPoint in the Points property.</returns>
            <example>
            <code>
            PdfPathOperation line = PdfPathOperation.MoveTo(endX, endY);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.Close">
            <summary>
            Constructs a new Close PdfPathOperation, representing a closed sub path.
            </summary>
            <returns>A new PdfPathOperation with Action set to Close.  The Points property will be empty.</returns>
            <example>
            <code>
            List&lt;PdfPathOperation&gt; triangle = new List&lt;PdfPathOperation&gt;();
            triangle.Add(PdfPathOperation.MoveTo(0, 0));
            triangle.Add(PdfPathOperation.LineTo(20, 50));
            triangle.Add(PdfPathOperation.LineTo(40, 0));
            triangle.Add(PdfPathOpertaion.Close());
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.CurveTo(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Constructs a new Curve PdfPathOpertaion, representing a Bezier curve
            </summary>
            <param name="sourceControlPoint">The source control point.</param>
            <param name="destinationControlPoint">The destination control point.</param>
            <param name="destinationPoint">The destination point.</param>
            <returns>a new PdfPathoperation with Action set to Curve.  The Points property will contain three points representing the source and destination control points and the destination point, respectively.</returns>
            <example>
            <code>
            PdfPathOpertaion curve = PdfPathOperation.CurveTo(cp1, cp2, destPoint);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.Points">
            <summary>
            Gets the points associated with this path operation.  For Move and Line operations, this list will contain one PdfPoint.
            For Curve operations, the list will contain exactly three points.  For Close operations, this list will be empty.  Changing
            the number of points in an existing PdfPathOperation object will cause unpredictable results.
            </summary>
            <example>
            <code>
            // find the minimum X in a list of path operations
            double minx = Double.MaxValue;
            foreach (PdfPathOperation op in Ops) {
                foreach (PdfPoint point in op.Points) {
                    if (point.X &lt; minx)
                       minx = point.X;
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.Action">
            <summary>
            Gets the action for this path operation.
            </summary>
            <example>
            <code>
            // print out every operation in a list of PdfPathOperations
            foreach (PdfPathOperation op in ops) {
                string output = "";
                switch (op.Action) {
                case PathAction.Move: output = String.Format("Move({0})", op.Points[0]); break;
                case PathAction.Line: output = String.Format("Line({0})", op.Points[0]); break;
                case PathAction.Curve: output = String.Format("Curve({0}, {1}, {2})", op.Points[0], op.Points[1], op.Points[2]); break;
                case PathAction.Close: output = "Close"; break;
                }
                Console.WriteLine(output);
            }
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfPathOperation.DestinationPoint">
            <summary>
            Gets the destination point for a Move, Line or Curve operation.  In the case of a Curve, this returns the final
            point in the set of three as the curve will always end at that point.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Geometry.PdfBounds">
            <summary>
            A struct representing the bounds of an object in Pdf space.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfBounds"/> struct.
            </summary>
            <param name="left">The left coordinate.</param>
            <param name="bottom">The bottom coordinate.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfBounds"/> struct.
            </summary>
            <param name="r">The rectangle.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Contains(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Determines whether the bounds contains the specified inner PdfBounds.
            </summary>
            <param name="that">The PdfBounds to check</param>
            <returns>
              <c>true</c> if the specified PdfBounds is contained in the bounds; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Contains(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Determines whether the supplied point is contained within this rectangle.
            </summary>
            <param name="p">The point.</param>
            <returns>
              <c>true</c> if the rectangle contains p; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Contains(Atalasoft.PdfDoc.Geometry.PdfQuadrilateral)">
            <summary>
            Determines whether the rectangle contains the specified quadrilateral.
            </summary>
            <param name="q">The quadrilateral.</param>
            <returns>
              <c>true</c> if the rectangle contains the specified quadrilateral; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Intersects(Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Checks to see if a given rectangle intersects this one.
            </summary>
            <param name="r">The candidate rectangle.</param>
            <returns><c>true</c> if there is an intersection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.MinX">
            <summary>
            Returns the minimum X.
            </summary>
            <returns>The minimum X</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.MaxX">
            <summary>
            Returns the maximum X.
            </summary>
            <returns>The maximum X</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.MinY">
            <summary>
            Returns the minimum Y.
            </summary>
            <returns>The minimum Y</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.MaxY">
            <summary>
            Returns the maximum Y.
            </summary>
            <returns>The maximum Y</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.LowerBound">
            <summary>
            Returns the minimum X and Y as a <see cref="T:Atalasoft.PdfDoc.Geometry.PdfPoint"/>.
            </summary>
            <returns>The minimum X and Y.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.UpperBound">
            <summary>
            Returns the maximum X and Y as a <see cref="T:Atalasoft.PdfDoc.Geometry.PdfPoint"/>.
            </summary>
            <returns>The maximum X and Y.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Expand(System.Double)">
            <summary>
            Expands the PdfBounds by the specified amount on all sides.
            </summary>
            <param name="amountOnAllSides">The amount on all sides.</param>
            <returns>A new PdfBounds with the expansion applied.</returns>
            <remarks>
            If amountOnAllSides is negative, the PdfBounds will be smaller.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Expand(System.Double,System.Double)">
            <summary>
            Expands the PdfBounds by specified amount on sides and on the top and bottom.
            </summary>
            <param name="amountOnSides">The amount on sides.</param>
            <param name="amountOnTopAndBottom">The amount on top and bottom.</param>
            <returns>A new PdfBounds with the expansion applied.</returns>
            <remarks>
            If amountOnSides or amountOnTopAndBottom are negative, the PdfBounds will be smaller in those dimensions.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Expand(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Expands the PdfBounds by specified amount on each side.
            </summary>
            <param name="leftAmount">The left amount.</param>
            <param name="rightAmount">The right amount.</param>
            <param name="topAmount">The top amount.</param>
            <param name="bottomAmount">The bottom amount.</param>
            <returns>A new PdfBounds with the expansion applied.</returns>
            <remarks>
            If leftAmount, rightAmount, topAmount or bottomAmount are negative, the PdfBounds will be smaller in those dimensions.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.IsEmpty">
            <summary>
            Determines whether this instance is empty.
            </summary>
            <returns>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.op_Equality(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the equality.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.op_Inequality(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the inequality.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfBounds.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Left">
            <summary>
            Gets the offset of the left side of this boundary.
            </summary>
            <value>
            The X coordinate of the left edge.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Right">
            <summary>
            Gets the offset of the right side of this boundary.
            </summary>
            <value>
            The X coordinate of the right edge.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Bottom">
            <summary>
            Gets the offset of the bottom side of this boundary.
            </summary>
            <value>
            The Y coordinate of the bottom edge.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Top">
            <summary>
            Gets the offset of the top side of this boundary.
            </summary>
            <value>
            The Y coordinate of the top edge.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Width">
            <summary>
            Gets the width.
            </summary>
            <value>
            The width of this boundary.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height of this boundary.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfBounds.Empty">
            <summary>
            Returns the Empty PdfBounds
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle">
             <summary>
             A PdfBaseShape overload which draws a circle based on a center point and a radius.
             </summary>
             <example> 
             <code>
             PdfGeneratedDocument doc = new PdfGeneratedDocument();
                    doc.Pages.Add(PdfDefaultPages.Letter);
                    for (int i = 0; i &lt; 100; i++)
                         doc.Pages[0].DrawingList.Add(new PdfCircle(new PdfPoint(p.MediaBox.Width / 2, p.MediaBox.Height / 2), i * 5, PdfColorFactory.FromGray((100-i)/100.0), 1.0));
            </code>
             </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle"/> class.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="outlineColor">Color of the outline of the circle.</param>
            <param name="linewidth">The linewidth of the outline of the circle.</param>
            <param name="fillColor">Color of the fill of the circle.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle"/> class.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="outlineColor">Color of the outline of the circle.</param>
            <param name="linewidth">The linewidth of the outline of the circle.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle"/> class.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="fillColor">Color of the fill of the circle.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.Center">
            <summary>
            Gets or sets the center.
            </summary>
            <value>
            The center of the circle.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfCircle.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
            <value>
            The radius of the circle.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument">
            <summary>
            The PdfGeneratedDocument object is designed to create documents using the Pdf Generating Tools. 
            </summary>
            <example>
            //Saves a Pdf document with a blank page
            PdfGeneratedDocument doc = new PdfGeneratedDocument();
            doc.Pages.Add(PdfDefaultPages.Letter);
            doc.Save(outputStream);
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> class. This overload is designed to open an existing DotPdf generated pdf document for editing/modification.
            </summary>
            <param name="userPassword">The user password.</param>
            <param name="ownerPassword">The owner password.</param>
            <param name="stm">The stream containing the previously generated pdf.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,Atalasoft.PdfDoc.PdfDocumentLoadedProgress)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> class.
            </summary>
            <param name="userPassword">The user password.</param>
            <param name="ownerPassword">The owner password.</param>
            <param name="stm">The stream containing the previously generated pdf.</param>
            <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
            <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,Atalasoft.PdfDoc.PdfDocumentLoadedProgress,Atalasoft.PdfDoc.Repair.RepairOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> class.
            </summary>
            <param name="userPassword">The user password.</param>
            <param name="ownerPassword">The owner password.</param>
            <param name="stm">The stream containing the previously generated pdf.</param>
            <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
            <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
            <param name="repairOptions">An object that will determine how foreign content will be repaired on being read.  May be null.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,Atalasoft.PdfDoc.PdfDocumentLoadedProgress,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> class.
            </summary>
            <param name="userPassword">The user password.</param>
            <param name="ownerPassword">The owner password.</param>
            <param name="stm">The stream containing the previously generated pdf.</param>
            <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
            <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
            <param name="pagesToLoad">A a set of page numbers to load.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,Atalasoft.PdfDoc.PdfDocumentLoadedProgress,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> class.
            </summary>
            <param name="userPassword">The user password.</param>
            <param name="ownerPassword">The owner password.</param>
            <param name="stm">The stream containing the previously generated pdf.</param>
            <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
            <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
            <param name="pagesToLoad">A a set of page numbers to load.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,Atalasoft.PdfDoc.PdfDocumentLoadedProgress,System.Collections.Generic.IEnumerable{System.Int32},Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> class.
            </summary>
            <param name="userPassword">The user password.</param>
            <param name="ownerPassword">The owner password.</param>
            <param name="stm">The stream containing the previously generated pdf.</param>
            <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
            <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
            <param name="pagesToLoad">A a set of page numbers to load.</param>
            <param name="globalResources">Global resources to use for the created document.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> class.
            </summary>
            <param name="stm">The stream containing the previously generated pdf.</param>
            <param name="attemptToImportForeignContent">if set to <c>true</c> attempt to import PDF content not previously serialized by DotPdf.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> class.
            </summary>
            <param name="stm">The stream containing the previously generated pdf.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.AddPage(Atalasoft.PdfDoc.Generating.PdfGeneratedPage)">
            <summary>
            Adds the page to the document, returning the added page.  This is a convenience method to streamline the process
            of adding pages to a document.
            </summary>
            <example>
            Instead of writing this code:
            <code>
            PdfGeneratedDocument doc = new PdfGeneratedDocument();
            PdfGeneratedPage page = new PdfGeneratedPage(PdfDefaultPages.Letter);
            doc.Pages.Add(page);
            </code>
            You can write this instead:
            <code>
            PdfGeneratedDocument doc = new PdfGeneratedDocument();
            PdfGeneratedPage page = doc.AddPage(PdfDefaultPages.Letter);
            </code>
            </example>
            <param name="page">The page.</param>
            <returns>The new page that has been added.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.String,System.String,System.IO.Stream,System.EventHandler{Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs})">
            <summary>
            Saves the Pdf document to the output stream using the provided passwords.
            </summary>
            <param name="userPassword">The user password.</param>
            <param name="ownerPassword">The owner password.</param>
            <param name="outStream">The out stream to which to save the resulting document.</param>
            <param name="progressHandler">The progress handler.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.IO.Stream,Atalasoft.PdfDoc.PdfSaveOptions,System.EventHandler{Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs})">
            <summary>
            Saves the Pdf document to the output stream using the provided options.
            </summary>
            <param name="saveOptions">
            Options for saving the Pdf document.  This parameter may be <see langword="null"/>.
            </param>
            <param name="outStream">The out stream to which to save the resulting document.</param>
            <param name="progressHandler">The progress handler.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.IO.Stream,System.EventHandler{Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs})">
            <summary>
            Saves the document to the specified outStream.
            </summary>
            <param name="outStream">The out stream to which to save the resulting document.</param>
            <param name="progressHandler">The progress handler.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified outStream.
            </summary>
            <param name="outStream">The out stream to which to save the resulting document.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.String,System.EventHandler{Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs})">
            <summary>
            Saves the document to the specified output file.
            </summary>
            <param name="outputFile">The path to the output file.</param>
            <param name="progressHandler">The progress handler.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.String)">
            <summary>
            Saves the document to the specified output file.
            </summary>
            <param name="outputFile">The path to the output file.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Save(System.String,Atalasoft.PdfDoc.PdfSaveOptions,System.EventHandler{Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs})">
            <summary>
            Saves the document to the specified output file.
            </summary>
            <param name="outputFile">The path to the output file.</param>
            <param name="saveOptions">
            Options for saving the Pdf document.  This parameter may be <see langword="null"/>.
            </param>
            <param name="progressHandler">The progress handler.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Dispose">
            <summary>
            Disposes all the resources.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Validate">
            <summary>
            Validates the document and returns a set of possible problems.
            </summary>
            <returns>The (possibly empty) list of problems encountered.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.MakeValidationSeverityChooser(Atalasoft.PdfDoc.Generating.Validation.Severity)">
            <summary>
            This is a convenience factory that will return a new delegate that will repair all problems that are
            as severe or less severity than the specified maximum.
            </summary>
            <param name="maximumSeverity">The maximum allowable severity.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.SelfPrinting">
            <summary>
            Gets or sets a value indicating whether will self print upon opening.
            </summary>
            <value>
              <c>true</c> if [self printing]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Resources">
            <summary>
            Gets or sets the global resources.
            </summary>
            <value>
            The global resources.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Metadata">
            <summary>
            Gets the document's metadata.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.UserPassword">
            <summary>
            Gets or sets the user password.
            </summary>
            <value>
            The user password.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.OwnerPassword">
            <summary>
            Gets or sets the owner password.
            </summary>
            <value>
            The owner password.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Permissions">
            <summary>
            Gets or sets the permissions.
            </summary>
            <value>
            The permissions.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.EncryptMetadata">
            <summary>
            Gets or sets a value indicating whether to encrypt metadata.
            </summary>
            <value>
              <c>true</c> if metadata will be encrypted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.BookmarkTree">
            <summary>
            Gets or sets the bookmark tree.
            </summary>
            <value>
            The bookmark tree.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.EmbedGeneratedContent">
            <summary>
            Gets or sets a value indicating whether to embed Generated content allowing a PdfGeneratedDocument to be
            reconstructed from a PDF.
            </summary>
            <value>
            	<c>true</c> to embed Generated content; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.DocumentWasSigned">
            <summary>
            Gets a value indicating whether the document contained a digital signature when opened.
            </summary>
            <remarks>This property does not indicate that the validitity of the signature - only that there was a
            signature at the time the file was opened.  Saving a file with a previous digital signature will create an
            invalid PDF.</remarks>
            <value>
              <c>true</c> if the document contained a digital signature; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.AllowSavingOfPreviouslySignedDocuments">
            <summary>
            Gets or sets a value indicating whether to allow previously signed documents to be signed.  Default value is <c>false</c>.
            If set to <c>false</c>, if <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.DocumentWasSigned"/> is true, calling Save will throw a PdfException.
            If set to <c>true</c> and <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.DocumentWasSigned"/> is true, calling Save will not throw an exception,
            but will create an invalid PDF which may still render correctly.
            </summary>
            <value>
            	<c>true</c> if saving of previously signed documents is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Pages">
            <summary>
            Gets the pages of the document.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.DisplayMode">
            <summary>
            Gets or sets the display mode that will be used for this document.
            </summary>
            <value>
            The display mode for the document.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.ViewerPreferences">
            <summary>
            Gets or sets the viewer preferences for this PDF document.  PdfViewerPreferences control coarse levels
            of document and page level user interaction such as the reading order of the document and print
            characteristics.
            </summary>
            <value>
            The viewer preferences.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.DocumentCertification">
            <summary>
            Gets or sets the information used to certify the document.
            </summary>
            <value>
            The document certification.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.AutomaticValidateAndRepairBeforeSave">
            <summary>
            Gets or sets a value indicating whether the document should attempt to automatically repair issues that
            may generate incorrect PDF.
            </summary>
            <value>
            	<c>true</c> attempt automatic repair before saving; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.Form">
            <summary>
            Gets or sets the form object for the document.  By default, this is null.
            </summary>
            <value>
            The form.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.PdfVersion">
            <summary>
            Gets or sets the desired PDF version for the output document.  Currently, this will accept values
            from 1.0 to 1.8 in increments of 0.1.  Other values will be rejected.  Defaults to 1.4.
            </summary>
            <remarks>
            Setting this value indicates the maximum version desired.  It is possible that the output document
            could be read under earlier versions of the PDF standard, but it will be marked as the number specified.
            <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.AdjustPdfVersionAsNeeded"/> can be used to make an automatic setting.
            </remarks>
            <value>
            The PDF version of the output document.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.AdjustPdfVersionAsNeeded">
            <summary>
            Gets or sets a value indicating whether to adjust PDF version as needed.  If the document is saved using features
            that surpass the version of the PDF spec to adhere to specified in <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.PdfVersion"/>, this will automatically
            adjust the version to match.
            </summary>
            <value>
            	<c>true</c> if [adjust PDF version as needed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.AdditionalActions">
            <summary>
            Gets the list of additional actions that may be performed by a document.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.GlobalJavaScriptActions">
            <summary>
            Gets the global java script actions that will be executed when the PDF document is opened.  This is
            initialized to an empty collection.
            </summary>
            <example>
            This example illustrates the technique used internally by Atalasoft to make a document self-printing
            (via the <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.SelfPrinting"/> property.
            <code>
            PdfJavaScriptAction selfPrint = new PdfJavaScriptAction("this.print({bUI:true,bSilent:false,bShrinkToFit:true});");
            document.GlobalJavaScriptActions.Add("AtalaSelfPrint", selfPrint);
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.RepairOptions">
            <summary>
            Gets the repair options that will be used for the document.
            </summary>
            <remarks>This object must be set through the constructor for PdfDocument.  This is necessary since the
            constructors open the PDF which may in turn require repair actions.  Changing the options after construction
            may affect some of the repairs or result in them being done inconsistently.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.ValidationChooser">
            <summary>
            Gets or sets the validation chooser.  This is a delegate that is used if <see cref="P:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument.AutomaticValidateAndRepairBeforeSave"/> is true to choose to repair detected problems or not.
            The delegate will be called for each problem in turn. If the delegate returns <c>true</c>, the problem will be repaired.
            <remarks>
            If ValidationChooser is set to <c>null</c>, only problems of <see cref="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Serious"/> or less will be repaired.
            If there are any remaining problems, this will cause a PdfException to be thrown containing all the problems detected.
            </remarks>
            <example>
            <code>
            doc.ValidationChooser = PdfGeneratedDocument.MakeValidationSeverityChooser(Severity.Minor);
            </code>
            </example>
            </summary>
            <value>
            The current validation chooser.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.PdfGeneratedPage">
            <summary>
            A BasePage object which contains functionality to create Pdf. Use this class when trying to programmatically generate pdf pages.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedPage"/> class.
            </summary>
            <param name="width">The width of the page.</param>
            <param name="height">The height of the page.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.MakeRepairContext(System.Object)">
            <summary>
            Makes the <see cref="T:Atalasoft.PdfDoc.Generating.Validation.DocumentRepairContext"/> for repairing problems in this object.  This method
            expects a <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> to be passed in.
            </summary>
            <param name="o">An <see cref="T:Atalasoft.PdfDoc.Generating.PdfGeneratedDocument"/> used to make the repair context.</param>
            <returns>
            A new <see cref="T:Atalasoft.PdfDoc.Generating.Validation.DocumentRepairContext"/> for repairing problems.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object and accumulates any problems in the problems list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.Rotation">
            <summary>
            Gets or sets the rotation for the page.
            </summary>
            <value>
            The rotation for the page in 90 degree increments.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.MediaBox">
            <summary>
            Gets or sets the media box.
            </summary>
            <value>
            The media box.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.CropBox">
            <summary>
            Gets or sets the crop box.
            </summary>
            <value>
            The crop box.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.BleedBox">
            <summary>
            Gets or sets the bleed box.
            </summary>
            <value>
            The bleed box.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.TrimBox">
            <summary>
            Gets or sets the trim box.
            </summary>
            <value>
            The trim box.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.ArtBox">
            <summary>
            Gets or sets the art box.
            </summary>
            <value>
            The art box.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.DrawingList">
            <summary>
            Gets the drawing list. The drawing list contains all the objects on the page to be saved to the pdf file.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.ImportedFonts">
            <summary>
            Gets a list of global resource names of the fonts that were successfully imported into GlobalResources from the source document (if any).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.ImportedImages">
            <summary>
            Gets a list of global resource names of the images that were successfully imported into GlobalResources from the source document (if any).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.ImportedColorSpaces">
            <summary>
            Gets a list of global resource names of the color spaces that were successfully imported into GlobalResources from the source document (if any).
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.Annotations">
            <summary>
            Gets the list of annotations on this page.  This is an empty list by default.
            </summary>
            <example>
            To add an annotation to a page:
            <code>
            BaseAnnotation annot = MakeAnnot();
            page.Annotations.Add(annot);
            </code>
            </example>
            <remarks>
            Annotations are not typically precluded from appearing on multiple pages, but it not encouraged.
            <see cref="T:Atalasoft.PdfDoc.Generating.Annotations.BaseWidgetAnnotation"/> objects are forbidden from appearing
            more than once per document.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.AdditionalActions">
            <summary>
            Gets the list of additional actions that may be performed by a page.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.PdfGeneratedPage.TabOrder">
            <summary>
            Gets or sets the tab order for annotations on the page.  Default is <see cref="F:Atalasoft.PdfDoc.PdfTabOrder.None"/>
            </summary>
            <value>
            The tab order for annotations on the page.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.Streams.MockStream">
            <summary>
            Stream for imitation writting with counting length and position
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfBookmarkResult">
            <summary>
            PdfBookmarkResult is an immutable class that it used for holding the results of visiting
            a PdfBookmarkTree using the <see cref="T:Atalasoft.PdfDoc.PdfBookmarkVisitor"/>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmarkResult.#ctor(Atalasoft.PdfDoc.PdfBookmark,Atalasoft.PdfDoc.PdfBookmarkList,Atalasoft.PdfDoc.PdfBookmark)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfBookmarkResult"/> class.
            </summary>
            <param name="bookmark">The <see cref="T:Atalasoft.PdfDoc.PdfBookmark"/> that was visited.</param>
            <param name="parentList">The parent list that contains the bookmark.</param>
            <param name="parent">The parent bookmark that contains the bookmark as a child.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmarkResult.Bookmark">
            <summary>
            Gets the <see cref="T:Atalasoft.PdfDoc.PdfBookmark"/> associated with a node visited.
            </summary>
            <value>
            The <see cref="T:Atalasoft.PdfDoc.PdfBookmark"/> associated with a node visited.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmarkResult.ParentList">
            <summary>
            Gets the parent list which contains the visited bookmark.
            </summary>
            <value>
            The parent list which contains the visited bookmark.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmarkResult.Parent">
            <summary>
            Gets the parent of the visited bookmark (if any)
            </summary>
            <value>
            The parent of the visited bookmark.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfBookmarkVisitor">
            <summary>
            PdfBookmarkVisitor is a utility class that can be used to visit each <see cref="T:Atalasoft.PdfDoc.PdfBookmark"/> contained
            in a <see cref="T:Atalasoft.PdfDoc.PdfBookmarkTree"/>.  The tree can be visited either depth first or breadth first.  The order
            of node visit in either breadth or depth first is undefined and subject to change.
            <example>Print each element in the tree in breadth first order.</example> 
            <code>
            foreach (PdfBookmarkResult result in new PdfBookmarkVisitor(tree, false)) {
                Console.WriteLine(result.Bookmark.Text);
            }
            </code>
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmarkVisitor.#ctor(Atalasoft.PdfDoc.PdfBookmarkTree,System.Boolean,Atalasoft.PdfDoc.PdfBookmarkVisitor.Predicate)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfBookmarkVisitor"/> class.
            </summary>
            <param name="tree">The <see cref="T:Atalasoft.PdfDoc.PdfBookmarkTree"/> to visit.</param>
            <param name="depthFirst">if set to <c>true</c> visit the tree in depth-first order, otherwise search breatdth first.</param>
            <param name="predicate">The predicate to determine if a <see cref="T:Atalasoft.PdfDoc.PdfBookmark"/> should be included in the results.</param>
            <exception cref="T:System.ArgumentNullException">tree</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmarkVisitor.#ctor(Atalasoft.PdfDoc.PdfBookmarkTree,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfBookmarkVisitor"/> class.
            </summary>
            <param name="tree">The <see cref="T:Atalasoft.PdfDoc.PdfBookmarkTree"/> to visit.</param>
            <param name="depthFirst">if set to <c>true</c> visit the tree in depth-first order, otherwise search breatdth first.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmarkVisitor.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmarkVisitor.GetParent(Atalasoft.PdfDoc.PdfBookmarkTree,Atalasoft.PdfDoc.PdfBookmark)">
            <summary>
            Gets the parent PdfBookmark of a given child PdfBookmark if any. Returns <code>null</code> if the
            child has no parent or is not contained within the given tree.
            </summary>
            <param name="tree">The bookmark tree.</param>
            <param name="child">The child bookmark to search for.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfBookmarkVisitor.Predicate">
            <summary>
            A predicate that is used determine if a <see cref="T:Atalasoft.PdfDoc.PdfBookmark"/> should be included in the results
            of visiting a <see cref="T:Atalasoft.PdfDoc.PdfBookmarkTree"/>.
            </summary>
            <param name="mark">The bookmark.</param>
            <returns><code>true</code> if the <see cref="T:Atalasoft.PdfDoc.PdfBookmark"/> should be included in the results, <code>false</code> otherwise</returns>
            <example>A predicate to return all <see cref="T:Atalasoft.PdfDoc.PdfBookmark"/> objects that have no action associated with them.</example>
            <code>bm =&lt; bm.ClickAction.Count == 0</code>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfCoordinateConverter">
            <summary>
            PdfCoordinateConverter is a base class for performing unit conversions to
            and from PDF coordinate space using an affine matrix transformation.
            </summary>
            <remarks>
            This class has an internal constructor and is not meant to be used directly
            by client code.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfCoordinateConverter"/> class.
            </summary>
            <param name="an">An.</param>
            <param name="ad">The ad.</param>
            <param name="bn">The bn.</param>
            <param name="bd">The bd.</param>
            <param name="cn">The cn.</param>
            <param name="cd">The cd.</param>
            <param name="dn">The dn.</param>
            <param name="dd">The dd.</param>
            <param name="e">The e.</param>
            <param name="f">The f.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.Convert(System.Drawing.Point)">
            <summary>
            Converts a Point from one coordinate space to another
            </summary>
            <returns>
            A new Point in the target coordinate space
            </returns>
            <param name="p">
            The Point to convert
            </param>
            <overloads>
            Converts a given point or rectangle from one coordinate space to another.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.Convert(System.Drawing.PointF)">
            <returns>
            A new PointF in the target coordinate space
            </returns>
            <summary>
            Converts a PointF from one coordinate space to another
            </summary>
            <param name="p">
            The Point to convert
            </param>
            <overloads>
            Converts a given point or rectangle from one coordinate space to another.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.Convert(System.Drawing.Rectangle)">
            <summary>
            Converts a Rectangle from one coordinate space to another
            </summary>
            <returns>
            A new Rectangle in the target coordinate space
            </returns>
            <param name="r">
            The Rectangle to convert
            </param>
            <overloads>
            Converts a given point or rectangle from one coordinate space to another.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfCoordinateConverter.Convert(System.Drawing.RectangleF)">
            <summary>
            Converts a RectangleF from one coordinate space to another
            </summary>
            <returns>
            A new Rectangle in the target coordinate space
            </returns>
            <param name="r">
            The RectangleF to convert
            </param>
            <overloads>
            Converts a given point or rectangle from one coordinate space to another.
            </overloads>
        </member>
        <member name="T:Atalasoft.PdfDoc.DpiToPdfCoordinateConverter">
            <summary>
            This class converts coordinates from conventional image space (values
            measured in Dots Per Inch (Pixels Per Inch) with the origin in the upper
            left corner and X and Y extending to the right and down respectively) to PDF
            coordinate space (values measured in 1/72 inch with the origin in the lower
            left of the page and X and Y extending to the right and up respectively).
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.DpiToPdfCoordinateConverter.#ctor(System.Double,System.Drawing.Size)">
            <summary>
            Constructs a new converter object with the specified resolution in dots per
            inch and the specified page size in pixels.
            </summary>
            <param name="dpi">
            The resolution of the source space in pixels or dots per inch.
            </param>
            <param name="pageSize">
            The size of the source space in pixels
            </param>
            <overloads>
            Constructs a new converter from dots per inch to PDF page units.
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="M:Atalasoft.PdfDoc.DpiToPdfCoordinateConverter.#ctor(System.Double,System.Drawing.SizeF)">
            <summary>
            Constructs a new converter object with the specified resolution in dots per
            inch and the specified page size in pixels.
            </summary>
            <param name="dpi">
            The resolution of the source space in pixels or dots per inch.
            </param>
            <param name="pageSize">
            The size of the source space in pixels
            </param>
            <overloads>
            Constructs a new converter from dots per inch to PDF page units.
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="T:Atalasoft.PdfDoc.DpcmToPdfCoordinateConverter">
            <summary>
            This class converts coordinates from conventional image space (values
            measured in Dots Per cm (Pixels Per cm) with the origin in the upper left
            corner and X and Y extending to the right and down respectively) to PDF
            coordinate space (values measured in 1/72 inch with the origin in the lower
            left of the page and X and Y extending to the right and up respectively).
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.DpcmToPdfCoordinateConverter.#ctor(System.Double,System.Drawing.Size)">
            <summary>
            Constructs a new converter object with the specified resolution in dots per
            cm and the specified page size in pixels.
            </summary>
            <param name="dpcm">
            The resolution of the source space in pixels or dots per cm.
            </param>
            <param name="pageSize">
            The size of the source space in pixels
            </param>
            <overloads>
            Constructs a new converter from dots per cm to PDF page units.
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="M:Atalasoft.PdfDoc.DpcmToPdfCoordinateConverter.#ctor(System.Double,System.Drawing.SizeF)">
            <summary>
            Constructs a new converter object with the specified resolution in dots per
            cm and the specified page size in pixels.
            </summary>
            <param name="dpcm">
            The resolution of the source space in pixels or dots per cm.
            </param>
            <param name="pageSize">
            The size of the source space in pixels
            </param>
            <overloads>
            Constructs a new converter from dots per cm to PDF page units.
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfToDpiCoordinateConverter">
            <summary>
            This class converts coordinates from PDF coordinate space (values measured
            in 1/72 inch with the origin in the lower left of the page and X and Y
            extending to the right and up respectively) to conventional image space
            (values measured in Dots Per inch (Pixels Per inch) with the origin in the
            upper left corner and X and Y extending to the right and down respectively).
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfToDpiCoordinateConverter.#ctor(System.Double,System.Drawing.Size)">
            <summary>
            Constructs a new converter object with the specified target resolution in
            dots per inch and the specified source page size in PDF units.
            </summary>
            <param name="dpi">
            The resolution of the source space in pixels or dots per inch.
            </param>
            <param name="pageSize">
            The size of the source space in PDF page units (1/72 of an inch)
            </param>
            <overloads>
            Constructs a new converter from PDF page units to  dots per inch.
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfToDpiCoordinateConverter.#ctor(System.Double,System.Drawing.SizeF)">
            <summary>
            Constructs a new converter object with the specified target resolution in
            dots per inch and the specified source page size in PDF units.
            </summary>
            <param name="dpi">
            The resolution of the source space in pixels or dots per inch.
            </param>
            <param name="pageSize">
            The size of the source space in PDF page units (1/72 of an inch)
            </param>
            <overloads>
            Constructs a new converter from PDF page units to  dots per inch.
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfToDpcmCoordinateConverter">
            <summary>
            This class converts coordinates from PDF coordinate space (values measured
            in 1/72 inch with the origin in the lower left of the page and X and Y
            extending to the right and up respectively) to conventional image space
            (values measured in Dots Per cm (Pixels Per cm) with the origin in the upper
            left corner and X and Y extending to the right and down respectively).
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfToDpcmCoordinateConverter.#ctor(System.Double,System.Drawing.Size)">
            <summary>
            Constructs a new converter object with the specified target resolution in
            dots per cm and the specified source page size in PDF units.
            </summary>
            <param name="dpcm">
            The resolution of the source space in pixels or dots per cm.
            </param>
            <param name="pageSize">
            The size of the source space in PDF page units (1/72 of an inch)
            </param>
            <overloads>
            Constructs a new converter from PDF page units to  dots per cm.
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfToDpcmCoordinateConverter.#ctor(System.Double,System.Drawing.SizeF)">
            <summary>
            Constructs a new converter object with the specified target resolution in
            dots per cm and the specified source page size in PDF units.
            </summary>
            <param name="dpcm">
            The resolution of the source space in pixels or dots per cm.
            </param>
            <param name="pageSize">
            The size of the source space in PDF page units (1/72 of an inch)
            </param>
            <overloads>
            Constructs a new converter from PDF page units to  dots per cm.
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList">
            <summary>
            PdfDrawing list is a container class used to hold a collection of IPdfRenderable.
            PdfDrawingList is itself IPdfRenderable allowing nesting or structural grouping of
            Pdf content generating objects.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates PDF content for this object using the provider PdfPageRenderer object.
            The PdfPageRenderer represents an object that is aggregating PDF content for a particular page.
            It is the responsibility of each object that implements IPdfRenderable to add content appropriate
            for that object to the page.
            
            PdfDrawingList iterates over each IPdfRenderable element of its collection calling their GeneratePdf methods in turn.
            </summary>
            <param name="r">The PdfPageRenderer for generating PDF.</param>
            <example>
              <code>
            public void Render(PdfPageRenderer r)
            {
                w.DrawingSurface.Begin();
                w.DrawingSurface.AddRect(MyBounds); // place a rectangle
                w.DrawingSurface.Stroke(PdfLineStyle.Default, MyColor); // draw its outline in black
                w.DrawingSurface.End();
            }
              </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.NotifyResourceRenamed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass,System.String,System.String)">
            <summary>
            Notifies that the resource was renamed.
            </summary>
            <param name="gr">The gr.</param>
            <param name="resourceClass">The resource class.</param>
            <param name="originalName">Name of the original.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.ResourcesUsed(Atalasoft.PdfDoc.Generating.ResourceHandling.GlobalResources,Atalasoft.PdfDoc.Generating.ResourceHandling.PdfResourceClass)">
            <summary>
            Reports a list of all resources consumed by the object of the given class.
            </summary>
            <param name="gr">The global resources.</param>
            <param name="resourceClass">The resource class.</param>
            <returns>
            A list of all resources of the class specified that may be used by this object.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.AddShape(Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape)">
            <summary>
            Adds the shape to the list returning it as well.
            </summary>
            <param name="shape">The shape to add.</param>
            <returns>The shape added.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.Add``1(``0)">
            <summary>
            Adds the specified renderable object to the list returning it as a value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="renderable">The renderable object.</param>
            <returns>The renderable added.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.PdfDrawingList.Name">
            <summary>
            Gets or sets the name of the object.  The use of this property is not dictated by the
            PDF Generating API.  It is in place as a convenience for client code where it could be
            used for creating named objects in PDF content for later retrieval/editing.
            </summary>
            <value>
            The name of the object.
            </value>
            <example>
              <code>
            foreach (IPdfRenderable namedGroup in list.FindAll(item =&gt; item.Name == "Group") {
                ProcessGroup(namedGroup);
            }
              </code>
              </example>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath">
            <summary>
            A PdfBaseShape that contains a series of operations to define a custom drawing.
            </summary>
            <example>
            <code>
                   page.DrawingList.Add(path);
                   PdfPath path = new PdfPath(PdfColorFactory.FromGray(0.0), 2.0);
                   path.MoveTo(new PdfPoint(0, 0));
                   path.LineTo(new PdfPoint(100, 150));
                   path.CurveTo(new PdfPoint(100, 250), new PdfPoint(200, 250), new PdfPoint(200, 150));
                   path.LineTo(new PdfPoint(300, 40));
                   path.CurveTo(new PdfPoint(340, 0), new PdfPoint(340, 0), new PdfPoint(380, 40));
                   path.CurveTo(new PdfPoint(380,100), new PdfPoint(380,100),new PdfPoint(600, 40));
                   page.DrawingList.Add(path);
                   </code>
            </example>
            
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath"/> class.
            </summary>
            <param name="outlineColor">Color of the outline of the shape.</param>
            <param name="linewidth">The width of outlines of the shape.</param>
            <param name="fillColor">Color of the fill if the shape.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath"/> class.
            </summary>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The width of the outlines of the shape.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.#ctor(Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath"/> class.
            </summary>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.#ctor(Atalasoft.PdfDoc.Generating.Shapes.PdfBaseShape)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfPath"/> class.
            </summary>
            <param name="s">the object to copy from</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.MoveTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Sets the current drawing point to the parameter
            </summary>
            <param name="p">The point to move to.</param>
            <returns>The current path object.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.MoveTo(System.Double,System.Double)">
            <summary>
            Sets the current drawing point to (x, y)
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The current path object.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.LineTo(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Draws a line from the current drawing point to the parameter
            </summary>
            <param name="p">The point to draw a line to.</param>
            <returns>The current path object.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.LineTo(System.Double,System.Double)">
            <summary>
            Draws a line from the current drawing point to (x, y)
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>The current path object.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.CurveTo(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Curves to the destination point from the previous point using the sourceControlPoint and destinationControl point to render the curve
            </summary>
            <param name="sourceControlPoint">The source control point.</param>
            <param name="destinationControlPoint">The destination control point.</param>
            <param name="destinationPoint">The destination point.</param>
            <returns>The current path object.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.CurveTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Curves to the destination point from the previous point using the (x1, y1) as the source control point, (x2, y2) as the destination control point and (x3, y3) as the destination point to render the curve
            </summary>
            <param name="x1">The x coordinate of the source control point</param>
            <param name="y1">The y coordinate of the source control point.</param>
            <param name="x2">The x coordinate of the destination control point.</param>
            <param name="y2">The y coordinate of the destination control point.</param>
            <param name="x3">The x coordinate of the destination point.</param>
            <param name="y3">The y coordinate of the destination point.</param>
            <returns>The current path object.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.Close">
            <summary>
            Closes the path to the previous MoveTo command.
            </summary>
            <returns>The current path object.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.GetBounds">
            <summary>
            Gets the bounding box of the PdfPath.
            </summary>
            <returns>The smallest PdfBounds that contains all the path elements.</returns>
            <remarks>
            Since Bezier curves never extend past their control points, this will return the PdfBounds that contains
            all the points of all the path operations.  Note that this does not take into account line width or line end caps.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.PathOperations">
            <summary>
            Gets the path operations that comprise the shape. This will be a list of operations
            that will be performed in order.
            </summary>
            <value>
            The path operations that comprise the shape.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfPath.FillMethod">
            <summary>
            Gets or sets the fill method.
            </summary>
            <value>
            The fill method.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Geometry.PdfPoint">
            <summary>
            A representation of a point in PDF space.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.#ctor(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfPoint"/> struct.
            </summary>
            <param name="p">The point to copy.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfPoint"/> struct.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.op_Addition(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the addition.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.op_Subtraction(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the subtraction.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.op_Equality(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the equality.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.op_Inequality(Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the lack of equality.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfPoint.X">
            <summary>
            Gets the X component.
            </summary>
            <value>
            The X component.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfPoint.Y">
            <summary>
            Gets the Y component.
            </summary>
            <value>
            The Y component.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfPoint.Empty">
            <summary>
            Returns the empty PdfPoint (0,0).
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle">
            <summary>
            A PdfBaseShape to draw a Rectangle.
            </summary>
            <example>
            <code>
                   PdfGeneratedDocument doc = new PdfGeneratedDocument();
                   PdfGeneratedPage page = PdfDefaultPages.Letter;
                   doc.Pages.Add(page);
                   PdfRectangle rect = new PdfRectangle(new PdfBounds(0, 0, 100, 100), PdfColorFactory.FromRgb(.25, .75, .15));
                   rect.OutlineColor = PdfColorFactory.FromRgb(0, 0, .25);
                   page.DrawingList.Add(rect);
                   </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle"/> class.
            </summary>
            <param name="bounds">The bounds of the rectangle.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The linewidth of the outline.</param>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle"/> class.
            </summary>
            <param name="bounds">The bounds of the rectangle.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="linewidth">The linewidth of the outline.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.#ctor(Atalasoft.PdfDoc.Geometry.PdfBounds,Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle"/> class.
            </summary>
            <param name="bounds">The bounds of the rectangle.</param>
            <param name="fillColor">Color of the fill.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfRectangle.Bounds">
            <summary>
            Gets or sets the bounds of the rectangle.
            </summary>
            <value>
            The bounds of the rectangle.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfException">
            <summary>
            An exception from DotPdf
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfException"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
              </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
              </exception>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer">
            <summary>
            PdfRenderer is a concrete implementation of the DocumentRenderer class.  It is responsible for creating PDF
            files/streams from PdfGeneratedDocument objects.  Most client applications concerned with creating PDF files
            will either use this class or the Save method in PdfGeneratedDocument (which in turns uses PdfRenderer).
            </summary>
            <example>
            <code>
            public MemoryStream SaveToMemoryStream(PdfGeneratedDocument doc)
            {
                MemoryStream stm = new MemoryStream();
                PdfRenderer renderer = new PdfRenderer(stm);
                renderer.Render(doc);
                return stm;
            }
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer"/> class.
            </summary>
            <param name="outStream">The stream to which a PdfGeneratedDocument will be rendered.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.#ctor(System.String,System.String,System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer"/> class.
            </summary>
            <param name="UserPassword">The user password for the document.  Null indicates no password.</param>
            <param name="OwnerPassword">The owner password for the document.  Null indicates no password.</param>
            <param name="outStream">The output stream.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.#ctor(System.String,System.String,System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer"/> class.
            </summary>
            <param name="UserPassword">The user password.</param>
            <param name="OwnerPassword">The owner password.</param>
            <param name="outStream">The out stream.</param>
            <param name="embedGeneratedContent">if set to <c>true</c> [embed generated content].</param>
            <param name="selfPrinting">if set to <c>true</c> [self printing].</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.MakePageRenderer(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
            <summary>
            Makes the page renderer.
            </summary>
            <param name="document">The document.</param>
            <param name="basePage">The base page.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLBeginDoc(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            This method represents the Low-Level implementation of BeginDoc.  It is called once at the start of rendering the document
            after the first DocumentProgress event has been fired, but before the first page is rendered.  If a document has an empty
            Pages collection, LLBeginDoc will not be called.  The default implementation does nothing.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLBeginPage(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
            <summary>
            Low Level the begin page.
            </summary>
            <param name="document">The document.</param>
            <param name="basePage">The base page.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLEndPage(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage)">
            <summary>
            This method represents the Low-Level implementation of EndPage.  A subclass of DocumentRenderer would implement this
            method to do any processing to finish up after a page has been rendered. For example, a particular instance might need to
            remove temporary files created earlier.  The default implementation does nothing.
            </summary>
            <param name="document">The document being rendered.</param>
            <param name="page">The current page that was just rendered.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLGenerate(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument,Atalasoft.PdfDoc.BasePage,Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Low Level generate.
            </summary>
            <param name="document">The document.</param>
            <param name="basePage">The base page.</param>
            <param name="renderer">The renderer.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.PdfRenderer.LLEndDoc(Atalasoft.PdfDoc.Generating.PdfGeneratedDocument)">
            <summary>
            This method represents the Low-Level implementation of EndDoc.  It is called once at the end of rendering a document after
            the final DocumentProgress event has been fired.  If a document has an empty Pages collection, LLEndDoc will not be called.
            A concrete implementation of DocumentRenderer could use this method for cleaning up temporary files created during the
            rendering process.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine">
            <summary>
            The PdfTextLine is a Shape object that can be added to a PdfGeneratedDocument.DisplayList. It provides an interface to write a single line of text at a specified location.
            </summary>
            <example>
            <code>
            PdfGeneratedPage page = PdfDefaultPages.Letter;
            GlobalResources globalRes = new GlobalResources();
            doc.Resources = globalRes;
            globalRes.Fonts.Add("Arial", PdfFontResource.FromFontName(globalRes.Fonts,"Arial"));
            doc.Pages.Add(page);
            PdfTextLine tLine = new PdfTextLine("HELLO WORLD", new PdfPoint(100.0, 100.0));
            tLine.FontName = "Arial";
            tLine.FontSize = 24.0;
            page.DrawingList.Add(tLine);
            </code>
              </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.#ctor(System.String,System.Double,System.String,Atalasoft.PdfDoc.Geometry.PdfPoint,Atalasoft.PdfDoc.Generating.IPdfColor,Atalasoft.PdfDoc.Generating.IPdfColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine"/> class.
            </summary>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="text">The text.</param>
            <param name="point">The point.</param>
            <param name="fillColor">Color of the fill.</param>
            <param name="outlineColor">Color of the outline.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.#ctor(System.String,System.Double,System.String,Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine"/> class.
            </summary>
            <param name="fontName">Name of the font.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="text">The text that will be outputted</param>
            <param name="point">The point where the text will begin</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.Render(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Generates the PDF display list objects.
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of the shape</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer used for drawing the shape.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextLine.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text that will be outputted
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox">
            <summary>
            An object to output styled text to a PdfGeneratedDocument.
            </summary>
            <example><code>
            StyledTextInput input = new StyledTextInput("Font0");
            </code></example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.#ctor(System.String,Atalasoft.PdfDoc.Geometry.PdfBounds)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox"/> class. Add text to the box using the Fill method.
            </summary>
            <param name="defaultFontName">Name of the default font.</param>
            <param name="bounds">The bounds of the text object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.CloneInstance">
            <summary>
            Clones the instance.
            </summary>
            <returns>A copy of this shape.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.DrawShape(Atalasoft.PdfDoc.Generating.Rendering.PdfPageRenderer)">
            <summary>
            Draws the shape.
            </summary>
            <param name="r">The writer object.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.Fill(Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput,Atalasoft.PdfDoc.Generating.ResourceHandling.Fonts.PdfFontManager)">
            <summary>
            Fills the specified input. This method must be called before the shape attempts to draw. This is what fills the styled text shape with content.
            </summary>
            <param name="input">The input.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.Bounds">
            <summary>
            Gets or sets the bounds.
            </summary>
            <value>
            The bounds.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfStyledTextBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfJavaScriptAction">
            <summary>
            <see cref="T:Atalasoft.PdfDoc.PdfJavaScriptAction"/> represents an action taken that will cause JavaScript code to be executed.
            </summary>
            <remarks>
            The number of things that can be done via a JavaScript action are fairly extensive.  Please refer to the
            Acrobat JavaScript Scripting Reference for more information.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfJavaScriptAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfJavaScriptAction"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfJavaScriptAction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfJavaScriptAction"/> class.
            </summary>
            <param name="code">The code.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfJavaScriptAction.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfJavaScriptAction"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfJavaScriptAction.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfJavaScriptAction.Code">
            <summary>
            Gets or sets the JavaScript code for the action.
            </summary>
            <value>
            The code.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfJavaScriptAction.ActionType">
            <summary>
            Gets the type of the action represented by this object
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfLinearizer">
            <summary>
            Linearize pdf-files.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfLinearizer.Save(System.IO.Stream,Atalasoft.PdfDoc.MidLevel.MLPdfStreamingContext)">
            <summary>
            Save <paramref name="context"/> in stream as linearized pdf.
            </summary>
            <param name="stm">
            A non-null stream in which to save the resulting document.
            </param>
            <param name="context">
            Source context, which contains catalog, entry structure 
            and full hashtable of references with all objects, necessary for saving pdf-file.
            </param>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfParseException">
            <summary>
            An exception from DotPdf
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfParseException"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfParseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfParseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfParseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
              </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
              </exception>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfSaveOptions">
            <summary>
            The options for saving a pdf document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfSaveOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfSaveOptions"/> class. 
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfSaveOptions.UserPassword">
            <summary>
            Gets or sets the user password to use for saving the document.  This parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfSaveOptions.OwnerPassword">
            <summary>
            Gets or sets the owner password to use for saving the document.  This parameter may be <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfSaveOptions.Linearized">
            <summary>
            Gets or sets a value indicating whether the pdf document will be saved as linearized.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfViewerPreferences">
            <summary>
            PdfViewerPreferences represents document-specific preferences that are applied to the document
            viewer.  It should be noted that not all PDF viewers will honor all settings and the behaviors
            may not be consistent across viewers.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfViewerPreferences.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfViewerPreferences"/> class with default
            settings.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfViewerPreferences.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
            <exception cref="T:System.ArgumentException">Repair context should be either a PdfDocument or a PdfGeneratedDocument.</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfViewerPreferences.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object and accumulates any problems in the problems list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
            <exception cref="T:System.ArgumentException">repairContext</exception>
            <exception cref="T:Atalasoft.PdfDoc.PdfException">PrintPageRanges contains a null Range at index  + i</exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.HideToolbar">
            <summary>
            Gets or sets a value indicating whether the viewer should hide its toolbar (if any) when displaying the document.
            </summary>
            <value>
              <c>true</c> if the viewer should hide the toolbar; otherwise, <c>false</c>.  Default is <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.HideMenubar">
            <summary>
            Gets or sets a value indicating whether the viewer should hide its menu bar (if any) when displaying the document.
            </summary>
            <value>
              <c>true</c> if the viewer should hide its menu bar; otherwise, <c>false</c>.  Default is false.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.HideWindowDressing">
            <summary>
            Gets or sets a value indicating whether the viewer should hide window UI controls such as scroll bars snd navigation tools when
            displaying the document.
            </summary>
            <value>
              <c>true</c> if the viewer should hide window UI controls; otherwise, <c>false</c>.  Default is false.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.FitWindowToInitialPage">
            <summary>
            Gets or sets a value indicating whether the document's window should be sized to fit the initial page size.
            </summary>
            <value>
            <c>true</c> if the document's window should be sized to fit the initial page size; otherwise, <c>false</c>.  Default is false.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.CenterWindow">
            <summary>
            Gets or sets a value indicating whether the document's window should be centered.
            </summary>
            <value>
              <c>true</c> if the document's window should be centered; otherwise, <c>false</c>.  Default is false.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.DisplayDocumentTitle">
            <summary>
            Gets or sets a value indicating whether the window's title should display the document title from the
            document's <see cref="T:Atalasoft.PdfDoc.PdfDocumentMetadata"/> object.
            </summary>
            <value>
            <c>true</c> if the window's title should display the document metadata title; otherwise, <c>false</c>. Default is false.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.PostFullScreenPageDisplayMode">
            <summary>
            Gets or sets the page view mode that will be used when the viewer is siwtched out of full screen viewing.
            </summary>
            <value>
            The post full screen view mode.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.ReadingOrder">
            <summary>
            Gets or sets the dominant reading order for the document.
            </summary>
            <value>
            The dominant reading order.  Default is <see cref="F:Atalasoft.PdfDoc.PdfReadingOrder.LeftToRight"/>
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.ViewingArea">
            <summary>
            Gets or sets the box to use as a viewing area for pages in the document.
            </summary>
            <value>
            The viewing area box.  Default is <see cref="T:PdfPageBox.Crop"/>
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.ViewingVisibleArea">
            <summary>
            Gets or sets the box to use as the visible area for pages in the document.
            </summary>
            <value>
            The viewing visible area box.  Default is <see cref="T:PdfPageBox.Crop"/>
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.PrintingArea">
            <summary>
            Gets or sets the box to use as a printing area for pages in the document.
            </summary>
            <value>
            The printing area box.  Default is <see cref="T:PdfPageBox.Crop"/>
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.PrintingVisibleArea">
            <summary>
            Gets or sets the box to use as a printing visible area for pages in the document.
            </summary>
            <value>
            The printing visible area box.  Default is <see cref="T:PdfPageBox.Crop"/>
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.PrintScaling">
            <summary>
            Gets or sets the print scaling for the viewer.  There are currently two useful values
            for this property: <c>"None"</c> and <c>"AppDefault"</c>.  The PDF specification
            does not offer any suggestion for what the value should mean other than <c>"None"</c>
            will provide no scaling.
            </summary>
            <value>
            The print scaling. Default is <c>"AppDefault"</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.PrintingMode">
            <summary>
            Gets or sets the printing mode for the document in terms of whether printing should be one-sided or two-sided
            and if two-sided, what the relationship between front and back pages should be.
            </summary>
            <value>
            The printing mode for the document. Default is <see cref="F:Atalasoft.PdfDoc.PdfPrintingMode.OneSided"/>.
            </value>
            <remarks>
            This requires PDF version 1.6 or greater.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.SelectPaperByPageSize">
            <summary>
            Gets or sets a value indicating whether the viewing application should set the print
            settings to pick paper from a source that matches the page size.  This will depend on
            the capabilities of the printer and print driver.
            </summary>
            <value>
            <c>true</c> if the viewiing application should select paper by page size; otherwise, <c>false</c>.
            Default is <c>false</c>
            </value>
            <remarks>
            This requires PDF version 1.7 or greater.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.PrintPageRanges">
            <summary>
            Gets the page ranges for printing.  Each pair represents a sub-range of pages within the document to 
            be printed.  The ranges are 0-based and refer to page indexes in the document.
            </summary>
            <value>
            The print page ranges.
            </value>
            <remarks>
            This requires PDF version 1.7 or greater.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfViewerPreferences.CopiesToPrint">
            <summary>
            Gets or sets the number of copies of the document to print.  The value must be greater than 0.
            </summary>
            <value>
            The number of copies to print. Default is <c>1</c>.
            </value>
            <remarks>
            This requires PDF version 1.7 or greater.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfXrefTableLinearizer.GetEntryRange(Atalasoft.PdfDoc.MidLevel.MLPdfXrefTable,System.Int32)">
            <summary>
            Returns all entries from start entry till the end of table.
            </summary>
            <param name="table">Xref table.</param>
            <param name="startId">Id of first entry.</param>
            <returns>List of entries from startEntry till the end of table.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.ArrayRepairOptions">
            <summary>
            ArrayRepairOptions represents the set of options that can be used for repairing array definitions.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Repair.ArrayRepairOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Repair.ArrayRepairOptions"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.ArrayRepairOptions.RepairDamagedElements">
            <summary>
            Gets or sets a value indicating whether to repair missing references.
            </summary>
            <remarks>
            If <c>true</c>, arrays that contain objects that can't be parsed or realized will be either set to null (default) or replaced with
            a value supplied by the value replacer.
            </remarks>
            <value>
            	<c>true</c> if DotPdf will attempt to repair missing references; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.ArrayRepairOptions.ElementReplacer">
            <summary>
            Gets or sets a delegate used to replace missing elements in arrays.
            </summary>
            <value>
            The element replacer.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.ArrayRepairOptions.ArrayElementReplacer">
            <summary>
            This delegate is used to replace a missing or damaged array element.
            </summary>
            <param name="arr">The array that needs repair.</param>
            <param name="index">The index of the damaged element.</param>
            <param name="fileParsedValue">The value parsed from the file.  This may be null.</param>
            <param name="replacementValue">The replacement value.</param>
            <returns><c>true</c> if the value should be replaced with replacementValue, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.RepairChoice">
            <summary>
            Represents a choice on whether a repair should be made
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.RepairChoice.None">
            <summary>
            No repairs will be done.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.RepairChoice.All">
            <summary>
            All values will be repaired using default mechanisms
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.RepairChoice.Select">
            <summary>
            Client code can select the problems that will be repaired
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.RepairAction">
            <summary>
            Describes the action to take on a repair.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.RepairAction.Default">
            <summary>
            Perform the internal default repair action.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.RepairAction.NoRepair">
            <summary>
            The problem will not be repaired, which will result in an exception.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.RepairAction.Repair">
            <summary>
            The problem will be repaired.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.RepairAction.Skip">
            <summary>
            The problem will not be repaired, but instead will be skipped.  This may result in incorrect PDF or
            a later exception.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.ProblemAction">
            <summary>
            ProblemSelector is used to determine if a problem should be accepted for repair or not.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.ProblemAction.Default">
            <summary>
            Use the internal default selector (if present).
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.ProblemAction.Accept">
            <summary>
            Accept the problem for later repair.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.ProblemAction.Reject">
            <summary>
            Reject the problem (which in turn will likely case an exception to be thrown.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.DuplicateNameTreeEntryRepairAction">
            <summary>
            Determines the action to take
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.DuplicateNameTreeEntryRepairAction.None">
            <summary>
            Perform no repair
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.DuplicateNameTreeEntryRepairAction.RemoveNewer">
            <summary>
            Remove the newer element
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.DuplicateNameTreeEntryRepairAction.RemoveOlder">
            <summary>
            Remove the older element
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.DuplicateNameTreeEntryRepairAction.RenameNewer">
            <summary>
            Rename the newer element
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.DuplicateNameTreeEntryRepairAction.RenameOlder">
            <summary>
            Rename the older element
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.BadDestinationRepairAction">
            <summary>
            Determines how a bad destination in a "go to" action should be repaired
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.BadDestinationRepairAction.None">
            <summary>
            No repair - this will cause an exception to be thrown
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.BadDestinationRepairAction.Remove">
            <summary>
            Remove the action containing the destination
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Repair.BadDestinationRepairAction.PinToNearest">
            <summary>
            The pin to the nearest page, either first or last
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.PropertyRepairOptions">
            <summary>
            PropertyRepairOptions is a class that is used to determine how repairs of PDF dictionary properties are
            managed.  Damaged properties are typically the result of incorrect PDF.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Repair.PropertyRepairOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Repair.PropertyRepairOptions"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.PropertyRepairOptions.Replacer">
            <summary>
            Gets or sets the delegate that will be called to replace the value of a damaged PDF property.  This method is not
            recommended for general use as it requires thorough understanding of the PDF specification.
            </summary>
            <value>
            The replacer for properties.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.PropertyRepairOptions.PropertyValueReplacer">
            <summary>
            The PropertyValueReplacer is called when a property repair is being made.  If the delegate wishes to
            replace the recommended value for a property.
            </summary>
            <param name="property">The property that is being repaired.  May be null.</param>
            <param name="propertyName">The name of the property, or if property is null, the name of the "extra" entry.</param>
            <param name="propertyOwner">The object that owns the property.</param>
            <param name="defaultValue">The default value for the property.</param>
            <param name="fileParsedValue">The value parsed from the file for the property (may be null).</param>
            <param name="fileSuppliedValue">The converted value for the property (may be null).</param>
            <param name="replacementValue">The value to be used as a replacement.</param>
            <returns><c>true</c> if the value should be replaced with replacementValue, <c>false</c> otherwise</returns>
            <remarks>the replacementValue must be assignable to the property type.  If the type is not appropriate, DotPdf
            will throw a PdfException.
            </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.RepairOptions">
            <summary>
            RepairOptions defines a set of choices that can be to automatically repair elements in PDF documents
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Repair.RepairOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Repair.RepairOptions"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Repair.RepairOptions.OnProblemEncountered(Atalasoft.Shared.Validation.ProblemEventArgs)">
            <summary>
            Raises the <see cref="E:ProblemEncountered"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Shared.Validation.ProblemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Repair.RepairOptions.OnProblemRepaired(Atalasoft.Shared.Validation.ProblemEventArgs)">
            <summary>
            Raises the <see cref="E:ProblemRepaired"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Shared.Validation.ProblemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Repair.RepairOptions.OnProblemSkipped(Atalasoft.Shared.Validation.ProblemEventArgs)">
            <summary>
            Raises the <see cref="E:ProblemSkipped"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Shared.Validation.ProblemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.RepairOptions.ProblemSelector">
            <summary>
            Gets or sets the problem selector for dictionary properties.  This selector, if present, will be called to determine
            if a problem should be selected.
            </summary>
            <value>
            The problem selector.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.RepairOptions.RepairSelector">
            <summary>
            Gets or sets the repair selector for problems.  This delegate will be used to decide if a property
            will be repaired.
            </summary>
            <value>
            The repair selector.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.RepairOptions.PropertyOptions">
            <summary>
            Gets the property repair options.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.RepairOptions.StructureOptions">
            <summary>
            Gets the structure repair options.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.RepairOptions.ArrayOptions">
            <summary>
            Gets the array repair options.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.RepairOptions.MaximumAllowableSeverity">
            <summary>
            Gets or sets the maximum allowable severity for problems.  This property is used by the
            internal repair selection process.  If the <see cref="T:Atalasoft.PdfDoc.Generating.Validation.Severity"/> of the <see cref="T:Atalasoft.PdfDoc.Generating.Validation.PdfRepairConsequences"/>
            exceeds this value, then the problem will be marked as "do not repair" which will cause an
            exception to be thrown.  The default is <see cref="F:Atalasoft.PdfDoc.Generating.Validation.Severity.Serious"/>
            </summary>
            <value>
            The maximum allowable severity for problems used in the default handler.
            </value>
        </member>
        <member name="E:Atalasoft.PdfDoc.Repair.RepairOptions.ProblemEncountered">
            <summary>
            When a problem has been encountered in a PDF document, this event will be fired.
            </summary>
        </member>
        <member name="E:Atalasoft.PdfDoc.Repair.RepairOptions.ProblemRepaired">
            <summary>
            Occurs when a previously reported problem has been repaired.
            </summary>
        </member>
        <member name="E:Atalasoft.PdfDoc.Repair.RepairOptions.ProblemSkipped">
            <summary>
            Occurs when a problem has been skipped for repair.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.RepairSelector">
            <summary>
            This delegate will get called to select if a repair should be enacted.
            </summary>
            <param name="sender">The object reporting the problem.</param>
            <param name="problem">The problem that needs to be repaired.</param>
            <returns><see cref="F:Atalasoft.PdfDoc.Repair.RepairAction.NoRepair"/> if the problem will not be repaired, <see cref="F:Atalasoft.PdfDoc.Repair.RepairAction.Repair"/>
            if it will be repaired, and <see cref="F:Atalasoft.PdfDoc.Repair.RepairAction.Skip"/> to ignore the problem.</returns>
            <remarks>If the problem is not repaired, it may cause a <see cref="T:Atalasoft.PdfDoc.PdfException"/>to be thrown later.</remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.ProblemSelector">
            <summary>
            This delegate will be called to select if a problem is a candidate for repair.
            </summary>
            <param name="sender">The object reporting the problem.</param>
            <param name="problem">The problem that has been detected.</param>
            <returns><c>ProblemAction.Accept</c> if the problem should be repaired, <c>ProblemAction.Reject</c> if the problem
            should be not be repaired (this will cause an exception), or ProblemAction.Default to use the internal mechanism.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.ScanThroughNextToken(System.String,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass)">
            <summary>
            Scans <see cref="P:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.Stream"/> through to the end of the next matching instance of the given string <c>token</c>. After a successful 
            completion of this method, <c>MLPdfScanner.Stream.Position</c> would be equal to the position of the last matching character of the first matched 
            instance of the token in the stream + 2. If the token was not found, or was only found right at the end of the stream - 
            <c>MLPdfScanner.Stream.Position</c> would be equal to the position of the last character of the stream + 1.
            </summary>
            <param name="token">The string token to be searched for in the stream.</param>
            <param name="beforeChar">In order for a string <c>token</c> to successfully match, the preceding character to it must match this parameter.</param>
            <param name="afterChar">In order for a string <c>token</c> to successfully match, the successive character to it must match this parameter.</param>
            <returns><c>true</c> if a giveupAfter value was provided and a <c>token</c> was successfully matched. Otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>token</c> is a <c>null</c> value</exception>
            <exception cref="T:System.ArgumentException">Thrown when token is an empty string</exception>
            <remarks>Calling this method is equivalent to calling <see cref="M:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.ScanThroughNextToken(System.String,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,System.Int64)"/> 
            and passing <c>-1</c> as a parameter for the <c>giveupAfter</c> value.</remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.ScanThroughNextToken(System.String,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,System.Int64)">
            <summary>
            Scans <see cref="P:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.Stream"/> through to either the end of the next matching instance of the given string <c>token</c>, or until a 
            number of characters equal to that specified by the <c>giveupAfter</c> have been scanned; whichever is lesser. After a successful 
            completion of this method, <c>MLPdfScanner.Stream.Position</c> would be equal to the position of the last matching character of the first matched 
            instance of the token in the stream + 2. If the token was not found, or was only found right at the end of the stream - 
            <c>MLPdfScanner.Stream.Position</c> would be equal to the position of the last character of the stream + 1.
            </summary>
            <param name="token">The string token to be searched for in the stream.</param>
            <param name="beforeChar">In order for a string <c>token</c> to successfully match, the preceding character to it must match this parameter.</param>
            <param name="afterChar">In order for a string <c>token</c> to successfully match, the successive character to it must match this parameter.</param>
            <param name="giveupAfter">Denotes the amount of characters to search for before the routine finishes regardless of whether a token has
                                      been matched or not. If set to -1, the method will not give up until the end of the stream.</param>
            <returns><c>true</c> if a giveupAfter value was provided and a <c>token</c> was successfully matched. Otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>token</c> is a <c>null</c> value</exception>
            <exception cref="T:System.ArgumentException">Thrown when token is an empty string</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.ScanThroughUnpairedToken(System.String,System.String,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.FindUnmatchedToken,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.FindUnmatchedTokenAtOrder,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass)">
            <summary>
            Scans <see cref="P:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.Stream"/> through to the end of a specified matching instance of either an unpaired <c>startToken</c> or an 
            unmatched <c>endToken</c>; depending on which is specified by the <c>findTkn</c> parameter. There may be multiple instances of both types of tokens 
            in a stream, but pairs can only be composed of a preceding <c>startToken</c> and a closing <c>endToken</c>; any instances of these tokens that 
            appear outside of such an order are considered as unpaired. After a successful completion of this method, <c>MLPdfScanner.Stream.Position</c> would 
            be equal to the position of the last matching character of the specified matched instance of the specified token in the stream + 2. 
            If the specified token was not found, or was only found right at the end of the stream - <c>MLPdfScanner.Stream.Position</c> would be 
            equal to the position of the last character of the stream + 1.
            </summary>
            <param name="startToken">The string token considered to be the one to 'open' a pair.</param>
            <param name="endToken">The string token considered to be the one to 'close' a pair.</param>
            <param name="findTkn">Specifies whether to look for an unpaired instance of a <c>startToken</c> or an <c>endToken</c>.</param>
            <param name="tknOrder">If multiple unpaired instances of the specified token are found, this parameter denotes which of those 
            <c>MLPdfScanner.Stream.Position</c> should be set to, based on the order in which they occur in the stream</param>
            <param name="beforeChar">In order for a string token (both <c>startToken</c> and <c>endToken</c>) to successfully match, the preceding 
            character to it must match this parameter.</param>
            <param name="afterChar">In order for a string token (both <c>startToken</c> and <c>endToken</c>) to successfully match, the successive 
            character to it must match this parameter.</param>
            <returns><c>true</c> if a giveupAfter value was provided and an unpaired instance of the specified token was successfully matched. 
            Otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either <c>startToken</c> or <c>endToken</c> is a <c>null</c> value</exception>
            <exception cref="T:System.ArgumentException">Thrown when either <c>startToken</c> or <c>endToken</c> is an empty string, or they are both
            identical strings</exception>
            <remarks>Calling this method is equivalent to calling <see cref="M:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.ScanThroughUnpairedToken(System.String,System.String,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.FindUnmatchedToken,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.FindUnmatchedTokenAtOrder,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,System.Int64)"/> 
            and passing <c>-1</c> as a parameter for the <c>giveupAfter</c> value.</remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.ScanThroughUnpairedToken(System.String,System.String,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.FindUnmatchedToken,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.FindUnmatchedTokenAtOrder,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,Atalasoft.PdfDoc.MidLevel.MLPdfScanner.CharacterClass,System.Int64)">
            <summary>
            Scans <see cref="P:Atalasoft.PdfDoc.MidLevel.MLPdfScanner.Stream"/> through to the end of a specified matching instance of either an unpaired <c>startToken</c> or an 
            unmatched <c>endToken</c>; depending on which is specified by the <c>findTkn</c> parameter. The scanning however will stop when a number of 
            characters equal to that specified by the <c>giveupAfter</c> have been scanned; regardless of whether any matching tokens have been found. There 
            may be multiple instances of both types of tokens in a stream, but pairs can only be composed of a preceding <c>startToken</c> and a closing 
            <c>endToken</c>; any instances of these tokens that appear outside of such an order are considered as unpaired. After a successful completion of 
            this method, <c>MLPdfScanner.Stream.Position</c> would be equal to the position of the last matching character of the specified matched instance 
            of the specified token in the stream + 2. 
            If the specified token was not found, or was only found right at the end of the stream - <c>MLPdfScanner.Stream.Position</c> would be 
            equal to the position of the last character of the stream + 1.
            </summary>
            <param name="startToken">The string token considered to be the one to 'open' a pair.</param>
            <param name="endToken">The string token considered to be the one to 'close' a pair.</param>
            <param name="findTkn">Specifies whether to look for an unpaired instance of a <c>startToken</c> or an <c>endToken</c>.</param>
            <param name="tknOrder">If multiple unpaired instances of the specified token are found, this parameter denotes which of those 
            <c>MLPdfScanner.Stream.Position</c> should be set to, based on the order in which they occur in the stream</param>
            <param name="beforeChar">In order for a string token (both <c>startToken</c> and <c>endToken</c>) to successfully match, the preceding 
            character to it must match this parameter.</param>
            <param name="afterChar">In order for a string token (both <c>startToken</c> and <c>endToken</c>) to successfully match, the successive 
            character to it must match this parameter.</param>
            <param name="giveupAfter">Denotes the amount of characters to search for before the routine finishes regardless of whether a specified token has
                                      been matched or not. If set to -1, the method will not give up until the end of the stream.</param>
            <returns><c>true</c> if a giveupAfter value was provided and an unpaired instance of the specified token was successfully matched. 
            Otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when either <c>startToken</c> or <c>endToken</c> is a <c>null</c> value</exception>
            <exception cref="T:System.ArgumentException">Thrown when either <c>startToken</c> or <c>endToken</c> is an empty string, or they are both
            identical strings</exception>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.StructureRepairOptions">
            <summary>
            StructureRepairOptions describe options for repairing gross structural problems in a PDF document.  These
            problems are usually encountered early in working with the document and require rewriting the document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Repair.StructureRepairOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Repair.StructureRepairOptions"/> class.  This creates a
            default StructureRepairOptions object with the <see cref="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.StoredStreamProvider"/> set to a
            <see cref="T:Atalasoft.PdfDoc.Generating.ResourceHandling.Images.TempFileStreamProvider"/>.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.RebuildCrossReferenceTable">
            <summary>
            Gets or sets a value indicating whether to rebuild a damaged cross reference table.
            </summary>
            <value>
            	<c>true</c> if the cross reference table will be rebuilt; otherwise, <c>false</c>.
            </value>
            <remarks>
            The cross reference table is an index of all contents within a PDF document used to efficiently
            access document elements.  If it is damaged, it is not possible to locate these elements.
            The repair is enacted on the Stream provided, therefore the Stream should be writable and it
            should be a <em>copy</em> of the document to be repaired.  This way, if the repair process fails,
            the original document will be preserved.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.StoredStreamProvider">
            <summary>
            Gets or sets the stored stream provider that will be used for creating a temporary file
            for storing the new PDF with the repaired cross reference table.
            </summary>
            <value>
            The stored stream provider.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.RepairedStoredStream">
            <summary>
            Gets the stored stream that was used for the repaired file.  If, after repair, this property is non-null,
            the owning document should be saved to a new file and this object should be disposed.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.RestoreOrphanedPages">
            <summary>
            Gets or sets a value indicating whether pages no longer directly referenced by the PDF document will be
            restored to the document.
            </summary>
            <remarks>Orphaned pages represent pages that were removed from the document's page collection
            but were left in the file.  Removed pages may have been deleted or the page collection may be been damaged.
            <para>Setting this property requires scanning the entire file.
            </para>
            </remarks>
            
            <value>
            	<c>true</c> if orphaned pages will be restored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.CreateBlankPageIfNoPagesFound">
            <summary>
            Gets or sets a value indicating whether to create blank page if no pages were found in the PDF.
            </summary>
            <value>
            	<c>true</c> if DotPdf will create a blank page if no pages found; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.CorrectInvalidDataStreamLengths">
            <summary>
            Gets or sets a value indicating whether DotPdf will correct invalid data stream lengths.
            </summary>
            <value>
            	<c>true</c> if DotPdf will correct invalid data stream lengths; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.RepairNameTrees">
            <summary>
            Gets or sets a value indicating whether DotPdf will repair name trees.
            </summary>
            <value>
              <c>true</c> if DotPdf will repair name trees; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.DuplicateNameTreeEntryRepairAction">
            <summary>
            Gets or sets the name tree repair action.  When a duplicate name is found in a name
            tree, this will be used to decide the action for that item.  If an empty or null name is
            found, any value except for None will cause the value to be either renamed or discarded.
            </summary>
            <value>
            The name tree repair action.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.AllowPartialNameTrees">
            <summary>
            Gets or sets a value indicating whether to allow partial name trees.
            </summary>
            <remarks>
            If an error occurs while parsing a name tree, instead of failing, this property will allow the
            name tree, as parsed, to remain.
            </remarks>
            <value>
            	<c>true</c> if DotPdf should allow partial name trees; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.NameSelector">
            <summary>
            Gets or sets the name selector.
            </summary>
            <remarks>This delegate will be used (if present) to select a replacement name for an empty or duplicate name.</remarks>
            <value>
            The name selector.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Repair.StructureRepairOptions.DestinationAction">
            <summary>
            Gets or sets the destination action for repairing a bad destination
            </summary>
            <value>
            The destination repair action.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Repair.StructureRepairOptions.NameReplacer">
            <summary>
            A delegate that is used to rename an existing name.
            </summary>
            <param name="name">The name to be renamed.  May be null or empty.</param>
            <param name="existing">The existing names in the name tree.</param>
            <returns>A non-empty, non-null string for the new name.  If the returned value is in the existing list, this will throw a PdfException.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfUnknownAction">
            <summary>
            PdfUnknownAction is a concrete representation of PdfActions that do not map
            to any other concrete PdfAction class.
            </summary>
            <remarks>
            PDF has a number of valid actions that are not yet available in dotImage. 
            They are represented publicly as PdfUnknownAction and encapsulate all the
            original information of the PDF action in this opaque object.  Client code
            cannot construct PdfUnknownAction objects directly.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfUnknownAction.ActionType">
            <summary>
            Gets the PDF action type associated with this action
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.AssemblyFinder">
            <summary>
            Finds assemblies (even if you are using nunit)
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfDocumentCatalog.OriginalPageTree">
            <summary>
            This is strictly for the PdfDocumentSigner object. It is used only
            for reusing the original page tree from a previous document. No need to change it.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfActionList">
            <summary>
            PdfActionList is a list of PdfAction objects that will be associated as a
            sequence.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfActionList.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
            <exception cref="T:System.ArgumentNullException">o</exception>
            <exception cref="T:System.ArgumentException">Expected a DocRepairContext or a document but got  + o.GetType().Name</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfActionList.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object and accumulates any problems in the problems list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfBookmark">
            <summary>
            PdfBookmark is a representation of a single bookmark in the document outline
            of a PDF document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmark.#ctor">
            <summary>
            Constructs a new default PdfBookmark object
            </summary>
            <overloads>
            Constucts a new PdfBookmark object
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmark.#ctor(System.String,Atalasoft.PdfDoc.PdfAction)">
            <summary>
            Constructs a new PdfBookmark object with the specified text and action
            </summary>
            <param name="text">
            The text for the bookmark
            </param>
            <param name="action">
            An action to perform when the bookmark is clicked
            </param>
            <overloads>
            Constucts a new PdfBookmark object
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmark.#ctor(System.String,System.Drawing.Color,System.Drawing.FontStyle,Atalasoft.PdfDoc.PdfAction,System.Boolean)">
            <summary>
            Constructs a new PdfBookmark object with the specified text, color, style,
            action, and open/closed state
            </summary>
            <param name="text">
            The text for the bookmark
            </param>
            <param name="color">
            The color of the bookmark
            </param>
            <param name="style">
            The FontStyle for the bookmark
            </param>
            <param name="action">
            An action to perform when the bookmark is clicked
            </param>
            <param name="isOpen">
            Indicates whether or not children of this bookmark will be initially visible
            to the user
            </param>
            <overloads>
            Constucts a new PdfBookmark object
            </overloads>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfBookmark._style">
            <summary>
            Sets or gets the FontStyle of the bookmark
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <remarks>
            PDF only supports bookmarks with the styles Bold, Italic or Bold and Italic.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmark.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmark.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object and accumulates any problems in the problems list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmark.Text">
            <summary>
            Sets or gets the text for the bookmark
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmark.Style">
            <summary>
            Sets or gets the FontStyle of the bookmark
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <remarks>
            PDF only supports bookmarks with the styles Bold, Italic or Bold and Italic.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmark.Color">
            <summary>
            Sets or gets the color of the bookmark
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmark.IsOpen">
            <summary>
            Sets or gets the open/closed state of the bookmark
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <remarks>
            This property only has an effect in the final PDF if the Children collection
            has one or more entry.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmark.ClickAction">
            <summary>
            Gets a list of actions that will be performed when a user clicks the
            bookmark
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmark.Children">
            <summary>
            Gets a list of bookmarks that are children to this bookmark.
            </summary>
            <value>
            A list bookmarks that are the children of this bookmark
            </value>
            C:\Temporary DXC_CS File\external documentation.txt
            <remarks>
            While it is possible to build bookmarks with cycles (elements of the
            Children collection are contained elsewhere in the bookmark tree), this is
            an error and may generate a damaged PDF.
            </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfBookmarkList">
            <summary>
            PdfBookmarkList is a list of bookmarks contained within the document outline
            of a PDF document.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfBookmarkTree">
            <summary>
            PdfBookmarkTree is a tree structure representing the entire document outline
            of a PDF document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmarkTree.#ctor">
            <summary>
            Constructs a new, empty tree of PDF bookmarks
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmarkTree.MakeRepairContext(System.Object)">
            <summary>
            Makes the repair context for repairing problems in this object.  An object implementing <see cref="T:Atalasoft.Shared.Validation.IValidatable"/>
            should at least return an empty RepairContext object.
            </summary>
            <param name="o">An object used to make the repair context.</param>
            <returns>
            A new repair context for repairing problems.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfBookmarkTree.Validate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Validates the object and accumulates any problems in the problems list.
            </summary>
            <param name="problems">The problems.</param>
            <param name="repairContext">The repair context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfBookmarkTree.Bookmarks">
            <summary>
            Gets the top-level list of bookmarks within a PDF document
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfDestination">
            <summary>
            PdfDestination is an abstract class that represents a possible target
            location for a "go to" action.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.PointZoom(System.Drawing.PointF,System.Double)">
            <remarks>
            After calling this method, it is still necessary to set the Page property to
            make a valid PdfDestination.
            </remarks>
            <summary>
            A factory method for making a PdfDestination with PointZoom as its
            PageFitMode
            </summary>
            <param name="position">
            The position to be zoomed in on in PDF page coordinates
            </param>
            <param name="zoom">
            The zoom level of the view.  Zoom is a multiplier: 1.0 will be normal size. 
            0.5 will be half size, etc.  0 or null means "use current zoom"
            </param>
            <returns>A PdfDestination with PointZoom</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.PointZoomAction(System.Int32,System.Drawing.PointF,System.Double)">
            <summary>
            A factory method for making a PdfGoToViewAction with a PdfDestination with PointZoom as its PageFitMode.
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="position">
            The position to be zoomed in on in PDF page coordinates
            </param>
            <param name="zoom">
            The zoom level of the view.  Zoom is a multiplier: 1.0 will be normal size. 
            0.5 will be half size, etc.  0 or null means "use current zoom"
            </param>
            <returns>A PdfGoToViewAction with a PointZoom destination</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitPage">
            <remarks>
            After calling this method, it is still necessary to set the Page property to
            make a valid PdfDestination.
            </remarks>
            <summary>
            A factory method for making a PdfDestination with FitPage as its PageFitMode
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitPageAction(System.Int32)">
            <summary>
            A factory method for making a PdfGoToViewAction with a PdfDestination with FitPage as its PageFitMode
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.PdfGoToViewAction"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitWidth(System.Nullable{System.Double})">
            <remarks>
            After calling this method, it is still necessary to set the Page property to
            make a valid PdfDestination.
            </remarks>
            <summary>
            A factory method for making a PdfDestination with FitWidth as its
            PageFitMode
            </summary>
            <param name="top">
            The top edge of the page to be shown in PDF page coordinates
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitWidthAction(System.Int32,System.Nullable{System.Double})">
            <summary>
            A factory method for making a PdfGoToViewAction with a PdfDestination with FitWidth as its
            PageFitMode
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="top">
            The top edge of the page to be shown in PDF page coordinates
            </param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.PdfGoToViewAction"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitHeight(System.Nullable{System.Double})">
            <remarks>
            After calling this method, it is still necessary to set the Page property to
            make a valid PdfDestination.
            </remarks>
            <summary>
            A factory method for making a PdfDestination with FitHeight as its
            PageFitMode
            </summary>
            <param name="left">
            Specifies the left most edge of the view in PDF page coordinates.  Setting
            this to null with instruct the viewer to use its default.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitHeightAction(System.Int32,System.Nullable{System.Double})">
            <summary>
            A factory method for making a PdfGoToViewAction with a PdfDestination with FitHeight as its
            PageFitMode
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="left">
            Specifies the left most edge of the view in PDF page coordinates.  Setting
            this to null with instruct the viewer to use its default.
            </param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.PdfGoToViewAction"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitRectangle(System.Drawing.RectangleF)">
            <remarks>
            After calling this method, it is still necessary to set the Page property to
            make a valid PdfDestination.
            </remarks>
            <summary>
            A factory method for making a PdfDestination with FitRectangle as its
            PageFitMode
            </summary>
            <param name="rect">
            A rectangle representing the view in PDF page coordinates.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitRectangleAction(System.Int32,System.Drawing.RectangleF)">
            <summary>
            A factory method for making a PdfGoToViewAction with a PdfDestination with FitRectangle as its
            PageFitMode
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="rect">
            A rectangle representing the view in PDF page coordinates.
            </param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.PdfGoToViewAction"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitBounds">
            <summary>
            A factory method for making a PdfDestination with FitBounds as its
            PageFitMode
            </summary>
            <remarks>
            After calling this method, it is still necessary to set the Page property to
            make a valid PdfDestination.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitBoundsAction(System.Int32)">
            <summary>
            A factory method for making a PdfGoToViewAction with a PdfDestination with FitBounds as its
            PageFitMode
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.PdfGoToViewAction"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitBoundsWidth(System.Nullable{System.Double})">
            <remarks>
            After calling this method, it is still necessary to set the Page property to
            make a valid PdfDestination.
            </remarks>
            <summary>
            A factory method for making a PdfDestination with FitBoundsWidth as its
            PageFitMode
            </summary>
            <param name="top">
            Specifies the top most edge of the view in PDF page coordinates.  Setting
            this to null with instruct the viewer to use its default.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.FitBoundsWidthAction(System.Int32,System.Nullable{System.Double})">
            <summary>
            A factory method for making a PdfGoToViewAction with a PdfDestination with FitBoundsWidth as its
            PageFitMode
            </summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="top">
            Specifies the top most edge of the view in PDF page coordinates.  Setting
            this to null with instruct the viewer to use its default.
            </param>
            <returns>A new <see cref="T:Atalasoft.PdfDoc.PdfGoToViewAction"/></returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.#ctor">
            <summary>
            Constructs a new, empty PdfDestination object.  PdfDestination has a number
            of convenience factory methods for making the most common types of
            PdfDestination objects.  After calling one of these methods, it will still
            be necessary to set the Page property to have a valid destination.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new, empty PdfDestination object.  PdfDestination has a number
            of convenience factory methods for making the most common types of
            PdfDestination objects.  After calling one of these methods, it will still
            be necessary to set the Page property to have a valid destination.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDestination.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDestination.Page">
            <summary>
            Sets or gets a reference to the PdfPage to use as a target destination.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDestination.PageFitMode">
            <summary>
            Sets or gets the PdfPageFitMode for the destination.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDestination.Top">
            <summary>
            Sets or gets the top extent of the view in PDF page coordinates
            </summary>
            <remarks>
            Top is only used when PageFitMode is set to PointZoom, FitWidth,
            FitRectangle and FitBoundsWidth.  It is ignored otherwise.    If Left is
            null, it means that the current Left extent in the viewer shall be used.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDestination.Left">
            <summary>
            Sets or gets the left extent of the view in PDF page coordinates
            </summary>
            <remarks>
            Left is only used with the following settings of PageFitMode: PointZoom,
            FitHeight, and FitRectangle.  Otherwise it is ignored.  If Left is null, it
            means that the current Left extent in the viewer shall be used.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDestination.Bottom">
            <summary>
            Sets or gets the bottom extent of the view in PDF page coordinates
            </summary>
            <remarks>
            Bottom is only used with PageFitMode set to FitRectangle.  Otherwise it is
            ignored.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDestination.Right">
            <summary>
            Sets or gets the right extent of the view in PDF page coordinates
            </summary>
            <remarks>
            Right is only used with PageFitMode set to FitRectangle.  It is ignored
            otherwise.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDestination.Zoom">
            <summary>
            Sets or gets the zoom to be used for the view
            </summary>
            <remarks>
            Zoom is only used when PageFitMode is set to PointZoom.  It is ignored
            otherwise.  Zoom is a multiplicative value.  1.0 is actual size.  0.5 is
            half size, etc.  0 or null means "use the current zoom".
            </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfStreamCreator">
            <summary>
            The delegate for PdfStream creation events.
            </summary>
            <param name="originalStream">The original stream.</param>
            <param name="pageIndex">Index of the page.</param>
            <returns>A new stream.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfFileCreator">
            <summary>
            The event delegate for file creation.
            </summary>
            <param name="pathToOriginalPdf">The path to original PDF.</param>
            <param name="pageIndex">Index of the page.</param>
            <returns>A new file name.</returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfDocumentLoadedProgress">
            <summary>
            A delegate that will be called when a page has been loaded in the document.
            </summary>
            <param name="currentPageNumber">The current page number of the page loaded relative to the document.</param>
            <param name="currentPageIndex">Indicates the total number of pages loaded so far.</param>
            <param name="totalPages">The total number of pages that will be loaded.</param>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfDocument">
            <summary>
            PdfDocument is a representation of a PDF document and the pages and other
            structures contained therein.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocument._pages">
            <summary>
            Gets a collection of objects that represent the pages in a PDF document.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocument._userPassword">
            <remarks>
            If a variant of Save is used that takes a ownerPassword parameter, that
            parameter will override this property.  If the ownerPassword parameter is
            null, then this property will be used or the user password if the
            OwnerPassword property is null.
            PDF documents have two passwords associated with them, a user password and
            an owner password.  If an encrypted document is opened by a conforming
            reader using the owner password, then the security Permissions are ignored. 
            If an encrypted document is opened by a conforming reader using the user
            password, then the security Permissions are enforced.  When a document is
            created with only one password or one unique password, it is considered the
            same as having only an owner password.
            </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocument._ownerPassword">
            <remarks>
            If a variant of Save is used that takes a ownerPassword parameter, that
            parameter will override this property.  If the ownerPassword parameter is
            null, then this property will be used or the user password if the
            OwnerPassword property is null.
            PDF documents have two passwords associated with them, a user password and
            an owner password.  If an encrypted document is opened by a conforming
            reader using the owner password, then the security Permissions are ignored. 
            If an encrypted document is opened by a conforming reader using the user
            password, then the security Permissions are enforced.  When a document is
            created with only one password or one unique password, it is considered the
            same as having only an owner password.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor">
            <summary>
            Initializes a new, empty instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, populated from the supplied stream.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="stm">
            A non-null stream containing a PDF document.
            </param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, using the file specified by the supplied path.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="path">
            A non-null path to the PDF document to be opened.
            </param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, using the file specified by the supplied path
            and decodes it with the supplied password.
            </summary>
            <exception cref="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            If the password is incorrect or cannot be verified, the constructor will
            throw a IncorrectPasswordException.
            </exception>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="path">
            A non-null path to the PDF document to be opened.
            </param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, using the file specified by the supplied path
            and decodes it with the supplied passwords.
            </summary>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
            <param name="path">
            A non-null path to the PDF document to be opened.
            </param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
            <exception cref="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            If the password is incorrect or cannot be verified, the constructor will
            throw a IncorrectPasswordException.
            </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String,System.String,Atalasoft.PdfDoc.Repair.RepairOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, using the file specified by the supplied path
            and decodes it with the supplied passwords.
            </summary>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
            <param name="path">
            A non-null path to the PDF document to be opened.
            </param>
            <param name="repairOptions">An object that specifies features for handling PDF document repair.  This value may be null.</param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
            <exception cref="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            If the password is incorrect or cannot be verified, the constructor will
            throw a IncorrectPasswordException.
            </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, using the supplied stream and decodes it with
            the supplied password.
            </summary>
            <exception cref="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            If the password is incorrect or cannot be verified, the constructor will
            throw a IncorrectPasswordException.
            </exception>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="stm">
            A non-null stream containing a PDF document.
            </param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, using the file specified by the supplied path
            and decodes it with the supplied passwords.
            </summary>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
            <param name="stm">
            A non-null stream containing a PDF document.
            </param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
            <exception cref="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            If the password is incorrect or cannot be verified, the constructor will
            throw a IncorrectPasswordException.
            </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String,System.IO.Stream,Atalasoft.PdfDoc.PdfDocumentLoadedProgress)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, using the file specified by the supplied path
            and decodes it with the supplied passwords.
            </summary>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
            <param name="stm">
            A non-null stream containing a PDF document.
            </param>
            <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
            <exception cref="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            If the password is incorrect or cannot be verified, the constructor will
            throw a IncorrectPasswordException.
            </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String,System.IO.Stream,Atalasoft.PdfDoc.PdfDocumentLoadedProgress,Atalasoft.PdfDoc.Repair.RepairOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, using the file specified by the supplied path
            and decodes it with the supplied passwords and repair options.
            </summary>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
            <param name="stm">
            A non-null stream containing a PDF document.
            </param>
            <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
            <param name="repairOptions">An object that specifies features for handling PDF document repair.  This value may be null.</param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
            <exception cref="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            If the password is incorrect or cannot be verified, the constructor will
            throw a IncorrectPasswordException.
            </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.#ctor(System.String,System.String,System.IO.Stream,Atalasoft.PdfDoc.PdfDocumentLoadedProgress,Atalasoft.PdfDoc.Repair.RepairOptions,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> class, using the file specified by the supplied path
            and decodes it with the supplied passwords and repair options.
            </summary>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
            <param name="stm">
            A non-null stream containing a PDF document.
            </param>
            <param name="pageLoaded">A delegate that will be called when a page is loaded.  This value may be null.</param>
            <param name="repairOptions">An object that specifies features for handling PDF document repair.  This value may be null.</param>
            <param name="leaveOpen">The value indicating whether the provided stream should be closed on document close.</param>
            <overloads>
            Constructs a new PdfDocument object.
            </overloads>
            <exception cref="T:Atalasoft.PdfDoc.IncorrectPasswordException">
            If the password is incorrect or cannot be verified, the constructor will
            throw a IncorrectPasswordException.
            </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Repair(System.String,System.String,System.IO.Stream,System.IO.Stream,Atalasoft.PdfDoc.Repair.RepairOptions)">
            <summary>
            Repairs the PDF document in the Stream input, saving the repaired PDF to the Stream output.
            </summary>
            <param name="userPassword">The user password for the document.  Can be null.</param>
            <param name="ownerPassword">The owner password for the document.  Can be null.</param>
            <param name="input">The stream containing the input PDF.</param>
            <param name="output">The stream to contain the output PDF.</param>
            <param name="options">The repair options.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Repair(System.IO.Stream,System.IO.Stream,Atalasoft.PdfDoc.Repair.RepairOptions)">
            <summary>
            Repairs the PDF document in the Stream input, saving the repaired PDF to the Stream output.
            </summary>
            <param name="input">The stream containing the input PDF.</param>
            <param name="output">The stream to contain the output PDF.</param>
            <param name="options">The repair options.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Repair(System.String,System.String,System.String,System.String,Atalasoft.PdfDoc.Repair.RepairOptions)">
            <summary>
            Repairs the PDF document in file intputPath, saving the repaired PDF to the file outputPath.
            </summary>
            <param name="userPassword">The user password for the document.  Can be null.</param>
            <param name="ownerPassword">The owner password for the document.  Can be null.</param>
            <param name="inputPath">The path to the file containing the input PDF.</param>
            <param name="outputPath">The path to the file which will contain the output PDF.</param>
            <param name="options">The repair options.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Repair(System.String,System.String,Atalasoft.PdfDoc.Repair.RepairOptions)">
            <summary>
            Repairs the PDF document in file intputPath, saving the repaired PDF to the file outputPath.
            </summary>
            <param name="inputPath">The path to the file containing the input PDF.</param>
            <param name="outputPath">The path to the file which will contain the output PDF.</param>
            <param name="options">The repair options.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.IO.Stream,System.IO.Stream[])">
            <summary>
            Combines one or more streams containing PDF documents into a single stream.
            </summary>
            <remarks>
            If the output stream is contained within sources, Combine will throw an
            exception.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="output">
            A non-null stream to which to save the resulting document.
            </param>
            <param name="sources">
            Two or more non-null streams containing PDF documents.
            </param>
            <overloads>
            Combines one or more PDF documents into a single document.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.String,System.IO.Stream,System.IO.Stream[])">
            <summary>
            Combines one or more streams containing PDF documents into a single stream
            and encrypts the document with the supplied password.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="password">
            A password to encrypt the document.  Null or empty string means "no
            password".
            </param>
            <param name="output">
            A non-null stream to which to save the resulting document.
            </param>
            <param name="sources">
            Two or more non-null streams containing PDF documents.
            </param>
            <overloads>
            Combines one or more PDF documents into a single document.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.IO.Stream,System.String[])">
            <summary>
            Combines one or more paths containing PDF documents into a single stream.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="output">
            A non-null stream to which to save the resulting document.
            </param>
            <param name="sourceFiles">
            Two or more non-null strings containing paths PDF documents.
            </param>
            <overloads>
            Combines one or more PDF documents into a single document.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.String,System.IO.Stream,System.String[])">
            <summary>
            Combines one or more paths containing PDF documents into a single stream and
            encrypts the document with the supplied password.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="password">
            A password to encrypt the document.  Null or empty string means "no
            password".
            </param>
            <param name="output">
            A non-null stream to which to save the resulting document.
            </param>
            <param name="sourceFiles">
            Two or more non-null strings containing paths PDF documents.
            </param>
            <overloads>
            Combines one or more PDF documents into a single document.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Combine(System.String,System.String[])">
            <summary>
            Combines one or more files containing PDF documents into a single file.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="outputFile">
            A non-null path to the resulting output file.
            </param>
            <param name="sourceFiles">
            Two or more non-null strings containing paths PDF documents.
            </param>
            <overloads>
            Combines one or more PDF documents into a single document.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Separate(System.String,System.String,System.IO.Stream,Atalasoft.PdfDoc.PdfStreamCreator)">
            <summary>
            Separates a single PDF into multiple files: one file per page.
            </summary>
            <param name="userPassword">The user password. Set a value to secure the pdf with a password.</param>
            <param name="ownerPassword">The owner password. Set a value to secure the pdf with a password.</param>
            <param name="source">The source stream.</param>
            <param name="creator">The creator.</param>
            <example>
            <code>
            string userPass = "";
            string ownerPass = "";
            Stream originalPdfStream = ... a stream containing your original PDF ...
            
            public Stream creator(Stream st, int page) 
            { 
                FileStream fs = File.Create(@"C:\Sample Images\devPage" + page.ToString() + ".pdf"); 
                return fs; 
            }
            
            PdfDocument.Separate(userPass ,ownerPass, originalPdfStream , creator);
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Separate(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Separates a single PDF into multiple files: one file per page.
            </summary>
            <param name="userPassword">The user password. Set a value to secure the pdf with a password.</param>
            <param name="ownerPassword">The owner password. Set a value to secure the pdf with a password.</param>
            <param name="source">The source file name.</param>
            <param name="destFolder">The destination folder.</param>
            <param name="fileNameFormat">The file name format.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <example>
            <code>
            string userPass = "";
            string ownerPass = "";
            string sourceFile = "Example_02403.pdf";
            string destFolder = @"C:\myOutputFolder";
            string nameFormat = "{0}.pdf";
            bool overwriteExisting = true;
            
            PdfDocument.Separate(userPass , ownerPass , sourceFile , destFolder , nameFormat , overwriteExisting ); 
            </code>
            </example>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Close">
            <summary>
            Closes the PdfDocument's underlying stream, invalidates all pages, and
            clears the Pages collection.
            </summary>
            <remarks>
            When a PdfDocument has been constructed from a string representing a path,
            it is necessary to call Close to ensure that the underlying stream created
            by the constructor will be closed.  Calling Close() will invalidate all
            existing PdfPage objects that were associated with the original PdfDocument,
            even if they are contained within a new PdfDocument.
            When a PdfDocument has been constructed from a Stream object, the Stream
            will be closed.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String,System.String)">
            <summary>
            Saves a PdfDocument into a new file encrypting with the supplied password.
            </summary>
            <remarks>
            If the userPassword parameter is null, then the UserPassword property will
            be used instead.
            If there is no userPassword, but the OwnerPassword property is non-null, it
            will be used as both the user password and the owner password.
            PDF documents have two passwords associated with them, a user password and
            an owner password.  If an encrypted document is opened by a conforming
            reader using the owner password, then the security Permissions are ignored. 
            If an encrypted document is opened by a conforming reader using the user
            password, then the security Permissions are enforced.  When a document is
            created with only one password or one unique password, it is considered the
            same as having only an owner password.
            </remarks>
            <param name="userPassword">
            A value to use for the user password.  This parameter may be null.
            </param>
            <param name="path">
            A non-null path to the resulting output file.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String,System.String,System.String)">
            <remarks>
            PDF documents have two passwords associated with them, a user password and
            an owner password.  If an encrypted document is opened by a conforming
            reader using the owner password, then the security Permissions are ignored. 
            If an encrypted document is opened by a conforming reader using the user
            password, then the security Permissions are enforced.  When a document is
            created with only one password or one unique password, it is considered the
            same as having only an owner password.
            </remarks>
            <summary>
            Saves a PdfDocument into a new file encrypting with the supplied passwords.
            </summary>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
            <param name="path">
            A non-null path to the resulting output file.
            </param>
            <overloads>
            Saves a PdfDocument into a new stream or file
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String)">
            <summary>
            Saves a PdfDocument to a new file.
            </summary>
            <param name="path">
            A non-null path to the resulting output file.
            </param>
            <overloads>
            Saves a PdfDocument to a new stream or file.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.IO.Stream)">
            <summary>
            Saves a PdfDocument into the supplied stream.
            </summary>
            <param name="stm">
            A non-null stream to which to save the resulting document.
            </param>
            <overloads>
            Saves a PdfDocument to a new stream or file.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String,System.IO.Stream)">
            <summary>
            Saves a PdfDocument into the supplied stream, encrypting with the supplied
            password.
            </summary>
            <param name="userPassword">
            A value to use for the user password.  This parameter may be null.
            </param>
            <param name="stm">
            A non-null stream to which to save the resulting document.
            </param>
            <overloads>
            Saves a PdfDocument to a new stream or file.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String,System.String,System.IO.Stream)">
            <summary>
            Saves a PdfDocument into a stream encrypting with the supplied passwords.
            </summary>
            <param name="userPassword">
            The user password to use for this document.  This parameter may be null.
            </param>
            <param name="ownerPassword">
            The owner password to use for this document.  This parameter may be null.
            </param>
            <param name="stm">
            A non-null stream to which to save the resulting document.
            </param>
            <overloads>
            Saves a PdfDocument to a new stream or file.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.String,Atalasoft.PdfDoc.PdfSaveOptions)">
            <summary>
            Saves a PdfDocument to a new file.
            </summary>
            <param name="path">
            A non-null path to the resulting output file.
            </param>
            <param name="saveOptions">
            Options for saving the Pdf document.  This parameter may be <see langword="null"/>.
            </param>
            <overloads>
            Saves a PdfDocument to a new stream or file.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.Save(System.IO.Stream,Atalasoft.PdfDoc.PdfSaveOptions)">
            <summary>
            Saves a <see cref="T:Atalasoft.PdfDoc.PdfDocument"/> into the supplied stream.
            </summary>
            <param name="stm">
            A non-null stream to which to save the resulting document.
            </param>
            <param name="saveOptions">
            Options for saving the Pdf document.  This parameter may be <see langword="null"/>.
            </param>
            <overloads>
            Saves a PdfDocument to a new stream or file.
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocument.SaveLinearized(System.IO.Stream,Atalasoft.PdfDoc.PdfSaveOptions,System.IO.Stream)">
            <summary>
            Saves a linearized pdf.
            </summary>
            <param name="stm">
            A non-null stream to which to save the resulting document.
            </param>
            <param name="saveOptions">
            Options for saving the Pdf document.  This parameter may be <see langword="null"/>.
            </param>
            <param name="firstSaveStream">
            Intermediate stream for first saving <see cref="T:Atalasoft.PdfDoc.PdfDocument"/>.
            If <see langword="null"/>, used <see cref="T:Atalasoft.PdfDoc.MidLevel.Streams.MockStream"/>.
            </param>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.SelfPrintingPdf">
            <summary>
            Gets or sets a value indicating whether the document generated will automatically print upon opening.
            </summary>
            <value>
              <c>true</c> if [self printing PDF]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.DocumentWasSigned">
            <summary>
            Gets a value indicating whether the document contained a digital signature when opened.
            </summary>
            <remarks>This property does not indicate that the validity of the signature - only that there was a
            signature at the time the file was opened.  Saving a file with a previous digital signature will create an
            invalid PDF.</remarks>
            <value>
              <c>true</c> if the document contained a digital signature; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.AllowSavingOfPreviouslySignedDocuments">
            <summary>
            Gets or sets a value indicating whether to allow previously signed documents to be saved.  Default value is <c>false</c>.
            If set to <c>false</c>, if <see cref="P:Atalasoft.PdfDoc.PdfDocument.DocumentWasSigned"/> is true, calling Save will throw a PdfException.
            If set to <c>true</c> and <see cref="P:Atalasoft.PdfDoc.PdfDocument.DocumentWasSigned"/> is true, calling Save will not throw an exception,
            but will create an invalid PDF which may still render correctly.
            </summary>
            <value>
            	<c>true</c> if saving of previously signed documents is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.Pages">
            <summary>
            Gets a collection of objects that represent the pages in a PDF document.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.Metadata">
            <summary>
            Sets or gets the document metadata for the PDF.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.UserPassword">
            <summary>
            Sets or gets a password to use for the user password for the document.
            </summary>
            <remarks>
            If a variant of Save is used that takes a userPassword parameter, that
            parameter will override this property.  If the userPassword parameter is
            null, then this property will be used.
            PDF documents have two passwords associated with them, a user password and
            an owner password.  If an encrypted document is opened by a conforming
            reader using the owner password, then the security Permissions are ignored. 
            If an encrypted document is opened by a conforming reader using the user
            password, then the security Permissions are enforced.  When a document is
            created with only one password or one unique password, it is considered the
            same as having only an owner password.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.OwnerPassword">
            <summary>
            Sets or gets a password to use for the owner password for the document.
            </summary>
            <remarks>
            If a variant of Save is used that takes a ownerPassword parameter, that
            parameter will override this property.  If the ownerPassword parameter is
            null, then this property will be used or the user password if the
            OwnerPassword property is null.
            PDF documents have two passwords associated with them, a user password and
            an owner password.  If an encrypted document is opened by a conforming
            reader using the owner password, then the security Permissions are ignored. 
            If an encrypted document is opened by a conforming reader using the user
            password, then the security Permissions are enforced.  When a document is
            created with only one password or one unique password, it is considered the
            same as having only an owner password.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.Permissions">
            <summary>
            Sets or gets the set of allowable actions for this PDF.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.EncryptMetadata">
            <summary>
            Sets or gets a boolean indicating that metadata should be encrypted. 
            Default is false.
            </summary>
            <remarks>
            When a PDF document is encrypted, nearly all embedded strings and stream
            data are encrypted.  Metadata strings do not have to be encrypted.  This
            allows indexing software to retrieve metadata without needing to know
            document passwords.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.BookmarkTree">
            <summary>
            Sets or gets the PdfBookmarkTree for this document.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.RepairOptions">
            <summary>
            Gets the repair options that will be used for the document.
            </summary>
            <remarks>This object must be set through the constructor for PdfDocument.  This is necessary since the
            constructors open the PDF which may in turn require repair actions.  Changing the options after construction
            may affect some of the repairs or result in them being done inconsistently.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.DisplayMode">
            <summary>
            Gets or sets the display mode that will be used for this document.
            </summary>
            <value>
            The display mode for the document.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.ViewerPreferences">
            <summary>
            Gets or sets the viewer preferences for this PDF document.  PdfViewerPreferences control coarse levels
            of document and page level user interaction such as the reading order of the document and print
            characteristics.
            </summary>
            <value>
            The viewer preferences.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocument.DocumentCertification">
            <summary>
            Gets or sets the document certification.
            </summary>
            <value>
            The document certification.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfTrapSetting">
            <summary>
            An enumeration used to indicate the trapping information in the document.
            </summary>
            <remarks>
            For more details, see the PDF Reference, section 10.10.5, "Trapping Support"
            </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfTrapSetting.None">
            <summary>
            No setting - no entry will be placed in the PDF document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfTrapSetting.False">
            <summary>
            The document has not yet been trapped.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfTrapSetting.True">
            <summary>
            The document has been fully trapped
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfTrapSetting.Unknown">
            <summary>
            Either the document has not yet been trapped or has not yet been fully trapped.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfDocumentMetadata">
            <summary>
            PdfDocumentMetadata represents standard PDF metadata including title,
            subject, author and so on.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentMetadata._title">
            <summary>
            Gets or sets the title of the PDF document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentMetadata._subject">
            <summary>
            Gets or sets the Subject of this PDF document
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentMetadata._author">
            <summary>
            Gets or sets the Author field of the document.
            </summary>
            <remarks>
            Setting the field to null indicates that the field has no value and will not
            be added to a file.
            </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentMetadata._keywords">
            <summary>
            Gets or sets the keywords associated with the document.
            </summary>
            <remarks>
            Keywords are meant to be space-delimited words that describe the document.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentMetadata._creator">
            <summary>
            Gets or sets the Creator field of the document.
            </summary>
            <remarks>
            Setting the field to null indicates that the field has no value and will not
            be added to a file.  This field is meant to represent the name of the
            application that created the original document.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentMetadata._producer">
            <summary>
            Gets or sets the producer of this PDF document.
            </summary>
            <remarks>
            By default the Producer is set to "%%company%% DotImage Version x.y.z"
            </remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentMetadata._creationDate">
            <summary>
            Sets or gets the date when the document was created.
            </summary>
            <remarks>
            If the date is set to DateTime.MinValue, it will not be written to a PDF.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentMetadata._modificationDate">
            <summary>
            Gets or sets the modification date for this document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentMetadata._customFields">
            <summary>
            Gets a table of custom metadata fields.
            </summary>
            <remarks>
            The PDF specification requires that metadata field names and values are
            strings.  It is possible to add any object type to the table, but this will
            create an illegal PDF.  Standard fields (Title, Subject, Author, Keywords,
            Creator, and Producer) must not be stored in this table; use the properties
            for standard fields instead.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.#ctor">
            <summary>
            Constructs a new PdfDocumentMetadata object with default values for all the
            fields.
            </summary>
            <returns>
            A new PdfDocumentMetadata object with default values.
            </returns>
            <remarks>
            All string fields are set to null except for the Producer field, which is
            set to "%%company%% DotImage Version x.y.z".  The creation and modification
            date are set to the current date and time.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.ToSecondsPrecision(System.DateTime)">
            <summary>
            Round a DateTime down to the nearest second i.e. strip off Milliseconds
            </summary>
            <param name="t">arbitrary DateTime</param>
            <returns>input value but with Millisecond set to 0</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.AddCustomField(System.String,System.String)">
            <summary>
            Adds a custom field to the metadata object.
            </summary>
            <remarks>
            While the name parameter can be any string, you should avoid using
            whitespace characters or PDF delimiters.  Whitespace characters include NUL
            (ASCII 0), Tab (ASCII 9), Line Feed (ASCII 10), Form Feed (ASCII 12),
            Carriage Return (ASCII 13) or space (ASCII 32).  Delimiter characters
            include (, ), lt;, gt;, [, ], {, }, /, and %.  Upper and lower case
            characters are considered unique.
            It is recommended that the string for name be chosen in such a way that it
            appropriately describes the content of the metadata.  Avoid using the names
            of standard metadata fields (Title, Subject, Author, Keywords, Creator,
            Producer).
            Extra fields can also be added via the
            <see cref="P:Atalasoft.PdfDoc.PdfDocumentMetadata.CustomFields"/>
            hashtable.
            </remarks>
            <param name="name">
            The name to be associated with this metadata
            </param>
            <param name="val">
            The string value to associate with this metadata
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.GetCustomField(System.String)">
            <summary>
            Attempts to retrieve the value of a custom field from the
            PdfDocumentMetadata object.
            </summary>
            <returns>
            A string containing the metadata.
            </returns>
            <remarks>
            The PDF specification requires that all custom field values be strings.  It
            is possible, however, that some PDF files will contain illegal, non-string
            metadata.  GetCustomField attempts to represent the data as a string.  If it
            fails, it will throw an IllegalCastException.  If client code is attempting
            to read specific, non-string data, it is best to get the data directly from
            the
            <see cref="P:Atalasoft.PdfDoc.PdfDocumentMetadata.CustomFields"/>
            property.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="name">
            The name of a custom field in the metadata.  See
            <see cref="M:Atalasoft.PdfDoc.PdfDocumentMetadata.AddCustomField(System.String,System.String)"/>
            for restrictions.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.RemoveCustomField(System.String)">
            <summary>
            Removes a field from the metadata object.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="name">
            The name associated with the metadata to be removed.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.UpdateCustomField(System.String,System.String)">
            <summary>
            Updates a custom field in the metadata object.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="name">
            The name associated with the metadata field to be updated.
            </param>
            <param name="val">
            The string value to associate with this metadata.
            </param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.Clear">
            <summary>
            Clears out all metadata within a PdfDocumentMetadata object.
            </summary>
            <remarks>
            Clear will set all fields to null, exception for producer.  Producer will be
            set to "%%company%% DotImage Version x.y.z".  The creation and modification
            dates will be set to the current date and time.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.FromStream(System.IO.Stream,System.String)">
            <summary>
            Constructs a new PdfDocumentMetadata object from the stream, using the
            supplied password
            </summary>
            <param name="stm">
            A stream containing a PDF document
            </param>
            <param name="password">
            A password to use to decrypt the document
            </param>
            <summary>
            Reads PDF document metadata from an existing PDF and returns a new
            PdfDocumentMetadata object populated with all the fields contained in the
            stream.
            </summary>
            <returns>
            A new PdfDocumentMetadata object containing the fields from the PDF.
            </returns>
            <remarks>
            If metadata fields are not present within the PDF, they will be null in the
            resulting PdfDocumentMetadata object.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
            <overloads>
            Constructs a new PdfDocumentMetadata object from the stream
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.FromStream(System.IO.Stream)">
            <summary>
            Constructs a new PdfDocumentMetadata object from the stream
            </summary>
            <param name="stm">
            A stream containing a PDF document
            </param>
            <returns>
            A new PdfDocumentMetadata object containing the fields from the PDF.
            </returns>
            <remarks>
            Reads PDF document metadata from an existing PDF and returns a new
            PdfDocumentMetadata object populated with all the fields contained in the
            stream.
            If metadata fields are not present within the PDF, they will be null in the
            resulting PdfDocumentMetadata object.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
            <overloads>
            Constructs a new PdfDocumentMetadata object from the stream
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfDocumentMetadata.Append(System.IO.Stream,System.Boolean)">
            <summary>
            Adds the metadata to an existing PDF stream
            </summary>
            <param name="stm">
            A non-null stream containing a PDF document.
            </param>
            <param name="mergeMetadata">
            Determines if the metadata will be merged into the existing document
            metadata, if any.
            </param>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Title">
            <summary>
            Gets or sets the title of the PDF document.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Subject">
            <summary>
            Gets or sets the Subject of this PDF document
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Author">
            <summary>
            Gets or sets the Author field of the document.
            </summary>
            <remarks>
            Setting the field to null indicates that the field has no value and will not
            be added to a file.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Keywords">
            <summary>
            Gets or sets the keywords associated with the document.
            </summary>
            <remarks>
            Keywords are meant to be space-delimited words that describe the document.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Creator">
            <summary>
            Gets or sets the Creator field of the document.
            </summary>
            <remarks>
            Setting the field to null indicates that the field has no value and will not
            be added to a file.  This field is meant to represent the name of the
            application that created the original document.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.Producer">
            <summary>
            Gets or sets the producer of this PDF document.
            </summary>
            <remarks>
            By default the Producer is set to "%%company%% DotImage Version x.y.z"
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.CreationDate">
            <summary>
            Sets or gets the date when the document was created.
            </summary>
            <remarks>
            If the date is set to DateTime.MinValue, it will not be written to a PDF.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.ModificationDate">
            <summary>
            Gets or sets the modification date for this document.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.DocumentTrapping">
            <summary>
            Gets or sets the trapping to be used for this document.
            </summary>
            <remarks>
            Setting the DocumentTrapping property to PdfTrapSetting.None indicates that
            no trapping information should be written to the file.
            </remarks>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfDocumentMetadata.CustomFields">
            <summary>
            Gets a table of custom metadata fields.
            </summary>
            <remarks>
            The PDF specification requires that metadata field names and values are
            strings.  It is possible to add any object type to the table, but this will
            create an illegal PDF.  Standard fields (Title, Subject, Author, Keywords,
            Creator, and Producer) must not be stored in this table; use the properties
            for standard fields instead.
            </remarks>
        </member>
        <member name="T:Atalasoft.PdfDoc.MidLevel.MLPdfFreeTextAnnot">
            <summary>
            Summary description for PdfFreeTextAnnot.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.#ctor">
            <summary>
            Creates a new instance of PointFCollection.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.#ctor(System.Drawing.PointF[])">
            <summary>
            Creates a new instance of PointFCollection specifying the initial points.
            </summary>
            <param name="points">The initial points for this collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the points parameter is null or contains no items.</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.Add(System.Drawing.PointF)">
            <summary>
            Adds a point to the end of the collection.
            </summary>
            <param name="point">The point to add.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.AddRange(System.Drawing.PointF[])">
            <summary>
            Adds an array of PointF to the end of this collection.
            </summary>
            <param name="points">The points to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the points parameter is null or contains no items.</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.Remove(System.Drawing.PointF)">
            <summary>
            Removes the first occurrence of the point from the collection.
            </summary>
            <param name="point">The point to remove.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.Insert(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts a point into the collection at the specified index.
            </summary>
            <param name="index">The position in the collection to place the point.</param>
            <param name="point">The point to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.InsertRange(System.Int32,System.Drawing.PointF[])">
            <summary>
            Inserts an array of PointF into this collection at the specified index.
            </summary>
            <param name="index">The position in the collection to place the points.</param>
            <param name="points">An array of PointF objects.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index parameter is invalid for this collection.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the points parameter is null or does not contain any items.</exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.ToArray">
            <summary>Returns an array of PointF objects contained in the collection.</summary>
            <returns>An array of items in the collection.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.ToArray(System.Drawing.PointF)">
            <summary>Returns an array of PointF with the specified offset applied.</summary>
            <returns>An array of point items.</returns>
            <param name="offset">An offset to apply to each point in the collection.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.OffsetPoints(System.Single,System.Single)">
            <summary>Add an offset to each point in the collection.</summary>
            <param name="x">The x offset to add.</param>
            <param name="y">The y offset to add.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.GetPointBounds">
            <summary>Returns a bounding rectangle that contains all of the collection points.</summary>
            <returns>A bounding rectangle for the points.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.Clone">
            <summary>Returns a copy of the collection.</summary>
            <returns>A copy of the collection.</returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfPointFCollection.Item(System.Int32)">
            <summary>
            Gets a point from the collection at the specified index.
            </summary>
            <value>The point from the collection.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is invalid for this collection.</exception>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.MLPdfPropertyAttribute.Order">
            <summary>
            Get or set read/write order. Could be positive or negative.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfStreamingContext.GetObjectFromXref(Atalasoft.PdfDoc.MidLevel.MLPdfXrefEntry)">
            <summary>
            debugging routine, this is NOT for general use
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.PdfDoc.Geometry.PdfTransformType">
            <summary>
            The type of transform that a PdfTransform is
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Identity">
            <summary>
            Identity is a matrix which will provide the same output as the input.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Translate">
            <summary>
            Translate is a matrix which will offset the position of the input points.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Scale">
            <summary>
            Scale is a matrix which will stretch or shrink the position of input points
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.NonUniformScale">
            <summary>
            NonUniformScale is a matrix which will stretch or shrink the position of input points, but will do so for different factors on the x and y coordinates.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Rotate">
            <summary>
            Rotate is a matrix which will rotate input points around the origin
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Skew">
            <summary>
            Skew is a matrix which will offset points in a direction (usually in just the X or Y direction).
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.Geometry.PdfTransformType.Other">
            <summary>
            Other is a matrix which is a combination of other PdfTransformType matrices. 
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Geometry.PdfTransform">
            <summary>
            A class representing a matrix transform usable with the Pdf Generating Tools.
            </summary>
            <example>
            Create a Transform which rotates a point 90 degrees then shifts it 100 in the X direction and 100 in the Y direction
            <code>
            PdfTransform transform = PdfTransform.Rotate(Math.PI/2);
            transform.Concat(PdfTransform.Translate(100,100);
            </code></example>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfTransform"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfTransform"/> class copying the array coming in.
            </summary>
            <param name="arr">The 2x3 matrix as an array</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.#ctor(Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfTransform"/> class copying the transform coming in.
            </summary>
            <param name="other">The transform to copy from.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Geometry.PdfTransform"/> class.
            </summary>
            <param name="a">The first value in the matrix</param>
            <param name="b">The second value in the matrix</param>
            <param name="c">The third value in the matrix</param>
            <param name="d">The fourth value in the matrix</param>
            <param name="e">The fifth value in the matrix</param>
            <param name="f">The sixth value in the matrix</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.IsIdentity">
            <summary>
            Determines whether this instance is the identity matrix.
            </summary>
            <returns>
              <c>true</c> if this instance is the identity matrix; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Transform(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Transforms the specified x and y coordinates.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="xprime">The x output.</param>
            <param name="yprime">The y output.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Transform(System.Drawing.PointF)">
            <summary>
            Transforms the specified point.
            </summary>
            <param name="src">The source point.</param>
            <returns>The transformed point</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Transform(Atalasoft.PdfDoc.Geometry.PdfPoint)">
            <summary>
            Transforms the specified point.
            </summary>
            <param name="src">The source point.</param>
            <returns>The transformed point</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Concat(Atalasoft.PdfDoc.Geometry.PdfTransform)">
            <summary>
            Concats the specified transform on to the current transform.
            </summary>
            <param name="t">The specified transform.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Identity">
            <summary>
            Returns an Identity Transform.
            </summary>
            <returns>A new Identity transform.</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Scale(System.Double)">
            <summary>
            Returns a Scale Transform
            </summary>
            <param name="s">The scale factor.</param>
            <returns>A new scale transform </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Scale(System.Double,System.Double)">
            <summary>
            Returns a Scale Transform
            </summary>
            <param name="x">The x scale factor.</param>
            <param name="y">The y scale factor.</param>
            <returns>A new scale transform</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Translate(System.Double,System.Double)">
            <summary>
            Returns a Translate Transform
            </summary>
            <param name="x">The x translation.</param>
            <param name="y">The y translation.</param>
            <returns>A new translation transform</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Rotate(System.Double)">
            <summary>
            Returns a Rotation Transform
            </summary>
            <param name="theta">The theta in radians.</param>
            <returns>A new rotation transform</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Skew(System.Double,System.Double)">
            <summary>
            Returns a Skew Transform
            </summary>
            <param name="x">The x skew.</param>
            <param name="y">The y skew.</param>
            <returns>A new skew transform</returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Determinant">
            <summary>
            Returns the determinant of this transform
            </summary>
            <returns>The determinant of the transformation matrix</returns>
            <remarks>
            A <see cref="T:Atalasoft.PdfDoc.Geometry.PdfTransform"/> can be treated as a 3x3 matrix:
            <code>
            | a b c |
            | d e f |
            | g h i |
            </code>
            where c, f, and i are 0, 0, and 1, respectively.  Using this definition, the determinant of a 3x3 matrix is
            defined as (a * e * i) + (b * f * g) + (c * d * h) - (a * f * h) - (b * d * i) - (c * e * g).  Using the
            constants for c, f, and i, this can be reduced to (a * e) - (b * d).
            
            While client code may not have direct use for the determinant of the matrix, it is used internally to
            determine if a matrix is invertible and to calculate the inverse.
            </remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.IsInvertable">
            <summary>
            Determines whether this instance is invertible.
            </summary>
            <returns>
              <c>true</c> if this instance is invertible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.GetInverse">
            <summary>
            Gets the inverse.
            </summary>
            <returns>The inverse matrix</returns>
            <remarks>This will throw an OverflowException if the matrix has no inverse.</remarks>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Atalasoft.PdfDoc.Geometry.PdfTransform.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfTransform.Matrix">
            <summary>
            Gets the matrix as an array.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfTransform.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Double"/> with the specified index.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.Geometry.PdfTransform.TransformType">
            <summary>
            Gets the type of the transform.
            </summary>
            <value>
            The type of the transform.
            </value>
        </member>
        <member name="M:Atalasoft.PdfDoc.MidLevel.MLPdfXmpStream.ToXmpTime(System.DateTime)">
            <summary>
            Format a System.DateTime as a string in XMP (ISO 8601) format (YYYY-MM-DDThh:mm:ssZ)
            </summary>
            <param name="t">the time to format</param>
            <returns>a string in XMP Date format (ISO 8601), in UTC, precise to seconds only</returns>
            <remarks>Local and Unspecified input values are treated as Local and converted to UTC</remarks>
        </member>
        <member name="F:Atalasoft.PdfDoc.MidLevel.MLPdfXmpStream._manager">
            ---Everything Under This Line Is New Metadata Stuff---
        </member>
        <member name="P:Atalasoft.PdfDoc.MidLevel.MLPdfXrefTable.RootEntryOffset">
            <summary>
            Location of the root entry in the written table.
            Not the same as the RootEntry.Offset.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfGoToViewAction">
            <summary>
            PdfGoToViewAction is a concrete class that represents an action that causes
            a PDF viewer to go to a specific view within a document.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfGoToViewAction.#ctor">
            <summary>
            Constructs a new empty PdfGoToViewAction
            </summary>
            <overloads>
            Constructs a new PdfGoToViewAction object
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfGoToViewAction.#ctor(Atalasoft.PdfDoc.PdfDestination)">
            <summary>
            Constructs a new PdfGoToViewAction that goes to the destination.
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
            <param name="dest">
            The destination of the view
            </param>
            <overloads>
            Constructs a new PdfGoToViewAction object
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfGoToViewAction.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads>
            Constructs a new PdfGoToViewAction object
            </overloads>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfGoToViewAction.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfGoToViewAction.LLValidate(Atalasoft.Shared.Validation.ProblemList,Atalasoft.Shared.Validation.RepairContext)">
            <summary>
            Low-level validation.  Not for use by client code
            </summary>
            <param name="problems">The problems so far.</param>
            <param name="repairContext">The repair context.</param>
            <exception cref="T:System.ArgumentException">repairContext</exception>
            <exception cref="T:Atalasoft.PdfDoc.PdfException">PdfGoToView action has illegal destination:  +
                                (Destination == null ?  Destination is null  :  Destination page reference is bad)</exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfGoToViewAction.ActionType">
            <summary>
            Gets the action type for this action
            </summary>
            <value>
            Always returns PdfActionType.GoToView
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfGoToViewAction.Destination">
            <summary>
            Sets or gets the destination of the PdfGoToViewAction
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfPage">
            <summary>
            PdfPage is a class that represents a single page within a PDF Document.
            </summary>
            <remarks>
            PdfPage objects aren't constructed by client code.  They are created when a
            PdfDocument has been constructed.
            </remarks>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfPage.Stream">
            <summary>
            Gets the stream from which this page was constructed
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfPage.Frame">
            <summary>
            Gets the page index for this page
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfPage.Rotation">
            <summary>
            Gets or sets the rotation for the page.
            </summary>
            <value>
            The rotation for the page in 90 degree increments.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfPageReference">
            <summary>
            PdfPageReference is an abstract class that is used to refer to pages within
            a PDF document.
            </summary>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfPageReference.ReferenceType">
            <summary>
            Gets the PdfPageReferenceType for this object
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfIndexedPageReference">
            <summary>
            PdfIndexedPageReference is low-overhead class that represents a PDF page by
            its 0-based page number.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfIndexedPageReference._pageIndex">
            <summary>
            Sets or gets the page index
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfIndexedPageReference.#ctor(System.Int32)">
            <summary>
            Constructs a new PdfIndexedPageReference using the supplied index
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfIndexedPageReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new PdfIndexedPageReference using the supplied index
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfIndexedPageReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfIndexedPageReference.ReferenceType">
            <summary>
            Gets the PdfPageReferenceType for this PdfPageReference object
            </summary>
            <value>
            Always returns PdfPageReferenceType.Indexed
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfIndexedPageReference.PageIndex">
            <summary>
            Sets or gets the page index
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfURIAction">
            <summary>
            An action that pdf documents can be made to take upon load
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfURIAction.#ctor(System.Uri,System.Uri,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfURIAction"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <param name="baseUri">The base URI.</param>
            <param name="isMap">if set to <c>true</c> [is map].</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfURIAction.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfURIAction"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfURIAction.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.PdfURIAction"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.PdfURIAction.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
              </exception>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfURIAction.ActionType">
            <summary>
            Gets the type of the action represented by this object
            </summary>
            C:\Temporary DXC_CS File\external documentation.txt
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfURIAction.URI">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfURIAction.Base">
            <summary>
            Gets or sets the base.
            </summary>
            <value>
            The base.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.PdfURIAction.IsMap">
            <summary>
            Gets or sets a value indicating whether this instance is map.
            </summary>
            <value>
              <c>true</c> if this instance is map; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfDocumentType">
            <summary>
            Controls the type of PDF Document generated.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentType.Default">
            <summary>
            Generate a default PDF document, without any specific constraints.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfDocumentType.PdfA1b">
            <summary>
            Generate a PDFA-1b complaint PDF document.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfAccessPermissions">
            <summary>
            PdfAccessPermissions refer to permissions that are allowed within a PDF
            document.  Permissions are granted by allowing actions rather than
            preventing them.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.Print">
            <summary>
            Allows printing of the document
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.Modify">
            <summary>
            Allows modifications to the document
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.CopyTextAndGraphics">
            <summary>
            Allows text and graphics to be copied from the document
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.ModifyAnnotationsOrFields">
            <summary>
            Allows annotations and fields to be modified
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.FillFields">
            <summary>
            Allows form fields to be filled in
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.AccessibilityExtractTextAndGraphics">
            <summary>
            Allows text and graphics extraction for users with disabilities
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.AssembleDocument">
            <summary>
            Allow the insertion, rotation, or deletion of pages and creation of
            bookmarks and thumbnail images.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.PrintHighQuality">
            <summary>
            Allows the highest possible quality printing of the document possible on the
            output device.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfAccessPermissions.Default">
            <summary>
            A set of typical default permissions for a document.  This includes the
            previous permissions.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfActionType">
            <summary>
            Possible actions that can be represented in a PDF document
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.GoToView">
            <summary>
            Change the current view of a document to the specified view.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.GoToRemote">
            <summary>
            Go to a view in another document.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.GoToEmbedded">
            <summary>
            Go to a view in an embedded document
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.LaunchApplication">
            <summary>
            Launch an application
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.ReadThread">
            <summary>
            Go to a particular article thread
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.FollowURI">
            <summary>
            Go to the destination specified by a URI
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.PlaySound">
            <summary>
            Play a sound
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.PlayMovie">
            <summary>
            Play a movie
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.Hide">
            <summary>
            Hide an annotation
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.PerformNamedAction">
            <summary>
            Perform an action or a sequence of actions specified by name
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.SubmitForm">
            <summary>
            Submit form data for processing
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.ResetForm">
            <summary>
            Reset form state to its default
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.ImportData">
            <summary>
            Import data into a form
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.JavaScript">
            <summary>
            Execute embedded javascript
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.SetOCGState">
            <summary>
            Sets the state of an optional content group (OCG)
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.Rendition">
            <summary>
            Controls the playing of multimedia content
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.PerformTransition">
            <summary>
            Sets the mechanism of changing the view of one page to another
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfActionType.GoTo3DView">
            <summary>
            Go to a specific view in a 3D model
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfPageFitMode">
            <summary>
            Describes view modes for a document
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.PointZoom">
            <summary>
            The view of the document will center on a specified point and a specified
            zoom
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitPage">
            <summary>
            The view will contain the entire page
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitWidth">
            <summary>
            The view will contain the document scaled so that the width fills the view
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitHeight">
            <summary>
            The view will contain the document scaled so that the height fills the view
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitRectangle">
            <summary>
            The view will contain a specific rectangle
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitBounds">
            <summary>
            The view will contain the page bounding box
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageFitMode.FitBoundsWidth">
            <summary>
            The view will contain the page bounding box scaled to fit its width
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfPageReferenceType">
            <summary>
            Defines the possible types of page references
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageReferenceType.Indexed">
            <summary>
            Pages will be referenced by a 0-based index
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfImageCodec">
            <summary>
            An enum to represnet which codec is used to compress an image resource
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageCodec.None">
            <summary>
            No Compression
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageCodec.LZW">
            <summary>
            LZW compression
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageCodec.Flate">
            <summary>
            Flate compression
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageCodec.RunLength">
            <summary>
            Run Length compression
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageCodec.CCITTGroup4">
            <summary>
            CCITT Group 4 Compression
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageCodec.JBIG2">
            <summary>
            JBIG2 Compression (requires JBig2 Encoder License)
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageCodec.DCT">
            <summary>
            DCT Compression
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageCodec.JPX">
            <summary>
            JPEG 2000 Compression (requires Jpeg2k Encoder License)
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfImageColorSpace">
            <summary>
            An enum representing the color space types as their channel designations
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageColorSpace.Gray">
            <summary>
            Grayscale color space. One channel representing Gamma.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageColorSpace.Rgb">
            <summary>
            Red Green Blue color space. Channels representing Red, Green, then Blue.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageColorSpace.Cmyk">
            <summary>
            Cyan Magenta Yellow Black color space. Channels representing Cyan, Magenta, Yellow, then Black.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfImageColorSpace.Paletted">
            <summary>
            Palleted color space. Specific colors mapped to single channel values.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfPageRotation">
            <summary>
            An enum representing possible rotations of a PDF page for display.
            Several of the values overlap for convenience.  For example, Clockwise180 and
            CounterClockwise180 are identical.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageRotation.None">
            <summary>
            The page will not be rotated.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageRotation.Clockwise90">
            <summary>
            The page will be rotated 90 degrees clockwise
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageRotation.Clockwise180">
            <summary>
            The page will be rotated 180 degrees clockwise
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageRotation.Clockwise270">
            <summary>
            The page will be rotated 270 degrees clockwise
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageRotation.CounterClockwise90">
            <summary>
            The page will be rotated 90 degrees counter clockwise (equivalent to Clockwise270)
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageRotation.CounterClockwise180">
            <summary>
            The page will be rotated 180 degrees counter clockwise (equivalent to Clockwise180)
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageRotation.CounterClockwise270">
            <summary>
            The page will be rotated 270 degrees counter clockwise (equivalent to Clockwise90)
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfPageDisplayMode">
            <summary>
            Defines an additional view to be displayed with a PDF page in a viewer.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageDisplayMode.None">
            <summary>
            No additional views specified (viewer default).
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageDisplayMode.Bookmarks">
            <summary>
            Show the Bookmark tree.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageDisplayMode.Thumbnails">
            <summary>
            Show the page thumbnail images
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageDisplayMode.FullScreen">
            <summary>
            Show full screen
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageDisplayMode.OptionalContent">
            <summary>
            Show optional content
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageDisplayMode.Attachments">
            <summary>
            Show attachments
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfPostFullScreenPageDisplayMode">
            <summary>
            Defines the additional views that should be present
            when a user switches a document from full-screen view to
            a windowed view.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPostFullScreenPageDisplayMode.None">
            <summary>
            No additional views specified (viewer default).
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPostFullScreenPageDisplayMode.Bookmarks">
            <summary>
            Show the Bookmark tree.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPostFullScreenPageDisplayMode.Thumbnails">
            <summary>
            Show the page thumbnail images
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPostFullScreenPageDisplayMode.OptionalContent">
            <summary>
            Show optional content
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfReadingOrder">
            <summary>
            Defines the dominant reading order for a document. This will affect how pages are displayed in
            a multi-page view as well as the tab order for annotations on a page.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfReadingOrder.LeftToRight">
            <summary>
            Left to right reading order
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfReadingOrder.RightToLeft">
            <summary>
            Right to left reading order
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfPageBox">
            <summary>
            The set of names of bounding boxes that define view/scale areas.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageBox.CropBox">
            <summary>
            The crop box.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageBox.MediaBox">
            <summary>
            The media box - the size of the physical media for the page.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageBox.BleedBox">
            <summary>
            The bleed box - the paper area that will used for clipping in a production environment.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageBox.TrimBox">
            <summary>
            The trim box - the intended dimensions of the page after trimming.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPageBox.ArtBox">
            <summary>
            The art box - the area in which the meaningful content is contained.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfPrintingMode">
            <summary>
            Defines how single/multi-sided printing is done.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPrintingMode.OneSided">
            <summary>
            Print with one PDF page per sheet of paper
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPrintingMode.TwoSidedFlipShortEdge">
            <summary>
            Print two sided and flip the pages along the short edge. This is also known as tumble duplex.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfPrintingMode.TwoSidedFlipLongEdge">
            <summary>
            print two sided and flip the pages along the long edge. This is also known as no tumble duplex.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.PdfTabOrder">
            <summary>
            Defines the order in with annotations should be navigated on a page.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfTabOrder.None">
            <summary>
            Navigation is up to viewer discretion
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfTabOrder.Row">
            <summary>
            Navigation is done in rows across the page.  The order of navigation
            within a row is determined by the the ReadingOrder property in the <see cref="T:Atalasoft.PdfDoc.PdfViewerPreferences"/>
            object.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfTabOrder.Column">
            <summary>
            Navigation is done in Columns up and down the page.  The order of navigation
            within a row is determined by the the ReadingOrder property in the <see cref="T:Atalasoft.PdfDoc.PdfViewerPreferences"/>
            object.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfTabOrder.Structure">
            <summary>
            Navigation is done according to the structure tree. Not currently supported.
            </summary>
        </member>
        <member name="F:Atalasoft.PdfDoc.PdfTabOrder.Unknown">
            <summary>
            Unspecified order. Results are not documented. Not currently supported.
            </summary>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs">
            <summary>
            This class represents information about progress made during PDF Rendering.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructs a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs"/> class.  Note that this class
            is constructed during normal operation of document rendering.  There are few cases where client code
            would have to construct this.
            </summary>
            <param name="currentProgress">The current progress of the document.</param>
            <param name="total">The total progress to be made.</param>
            <param name="message">Description of the current work being done.</param>
            <example>
            <code>
            RenderProgressEventArgs e = new RenderProgressEventArgs(currentPage, totalPages, "Rendering a page.");
            </code>
            </example>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs.Progress">
            <summary>
            Gets or sets the current progress.
            </summary>
            <value>
            Progress should be an integer between 0 and Total, inclusive.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs.Total">
            <summary>
            Gets or sets the total amount of work to do.
            </summary>
            <value>
            Total should be be an integer greater than 0.  While it is possible to set it to other values,
            client code may wish to monitor work as a percentage and dividing by a negative or zero will produce
            bad results.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Rendering.RenderProgressEventArgs.Message">
            <summary>
            Gets or sets a message describing current work being done.
            </summary>
            <value>
            A string describing work that is being done.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle">
            <summary>
            An object used to provide a text style to a pdf text object.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle"/> class (This constructor defaults FontSize to 12 and FontColor to Black and RenderMode to Fill).
            </summary>
            <param name="fontName">Name of the font.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.op_Addition(Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle,Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle)">
            <summary>
            Masks one style object onto the other. Any value left null will not effect the original.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <value>
            The name of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>
            The size of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.OutlineColor">
            <summary>
            Gets or sets the color of the outline.
            </summary>
            <value>
            The color of the outline.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.FontColor">
            <summary>
            Gets or sets the color of the font.
            </summary>
            <value>
            The color of the font.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.TextRenderMode">
            <summary>
            Gets or sets the text render mode.
            </summary>
            <value>
            The text render mode.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.HorizontalScale">
            <summary>
            Gets or sets the horizontal scale.
            </summary>
            <value>
            The horizontal scale percent (default is 100). 
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle.WordSpace">
            <summary>
            Gets or sets the word space.
            </summary>
            <value>
            The word spacing in pdf font units.
            </value>
        </member>
        <member name="T:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput">
            <summary>
            An object used to provide styled text to pdf text objects that can handle style changes.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput"/> class.
            </summary>
            <param name="defaultFontName">Default name of the font.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.AddText(System.String)">
            <summary>
            Adds text of the current style to the input.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.AddLineBreak">
            <summary>
            Adds a line break to the input.
            </summary>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeStyle(Atalasoft.PdfDoc.Generating.Shapes.PdfTextStyle)">
            <summary>
            Changes the style of the future text input.
            </summary>
            <param name="style">The style of future text input.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeFont(System.String)">
            <summary>
            Changes the font of future text input.
            </summary>
            <param name="fontName">Name of the font of future text input.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeHoizontalScale(System.Double)">
            <summary>
            Changes the hoizontal scale of future text input.
            </summary>
            <param name="scaleFactor">The scale factor of future text input (100 is default).</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeFontColor(Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Changes the color of the font of future text input.
            </summary>
            <param name="color">The color of future text input.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeOutlineColor(Atalasoft.PdfDoc.Generating.IPdfColor)">
            <summary>
            Changes the color of the outline of future text input.
            </summary>
            <param name="color">The color of the outline of future text input.</param>
        </member>
        <member name="M:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ChangeFontSize(System.Double)">
            <summary>
            Changes the size of the font of future text input.
            </summary>
            <param name="p">The point size of the future text input.</param>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.PdfDoc.Generating.Shapes.StyleTextInput.ContainsText">
            <summary>
            Gets a value indicating whether the input contains text.
            </summary>
            <value>
              <c>true</c> if the input contains text; otherwise, <c>false</c>.
            </value>
        </member>
    </members>
</doc>
