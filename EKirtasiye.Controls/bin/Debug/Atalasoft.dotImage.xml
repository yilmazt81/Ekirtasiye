<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atalasoft.dotImage</name>
    </assembly>
    <members>
        <member name="T:Atalasoft.Annotate.AnnotateSpaceConverter">
            <summary>
            The <strong>AnnotateSpaceConverter</strong> class provides helper methods for
            converting from one coordinate space to another.
            </summary>
            <example>
                The following example converts the rectangular points of an annotation into
                document space.
                <code lang="CS" title="ConverterExample">
            AnnotationUI annotation = this.Viewer.Annotations.ActiveAnnotation;
            AnnotateSpaceConverter converter = new AnnotateSpaceConverter(this.Viewer, annotation.Data);
            PointF asLocation = converter.AnnotationSpaceToDocumentSpace(annotation.Data.Location);
            PointF asLocation2 = converter.AnnotationSpaceToDocumentSpace(new PointF(annotation.Data.Location.X + annotation.Data.Size.Width, annotation.Data.Location.Y + annotation.Data.Size.Height));
            converter.Dispose();
                </code>
            	<code lang="VB" title="ConverterExampleVB">
            Dim annotation As AnnotationUI =  Me.Viewer.Annotations.ActiveAnnotation 
            Dim converter As AnnotateSpaceConverter = New AnnotateSpaceConverter(Me.Viewer,annotation.Data) 
            Dim asLocation As PointF = converter.AnnotationSpaceToDocumentSpace(annotation.Data.Location) 
            Dim asLocation2 As PointF = converter.AnnotationSpaceToDocumentSpace(New PointF(annotation.Data.Location.X + annotation.Data.Size.Width,annotation.Data.Location.Y + annotation.Data.Size.Height)) 
            converter.Dispose()
                </code>
            </example>
            <summary> The <STRONG>AnnotateSpaceConverter</STRONG> class provides helper methods for converting from one
            coordinate space to another. </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotateSpaceConverter&quot;]/*"/>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotateSpaceConverter&quot;]/*"/>
            <remarks> If any changes occur to the annotation or viewer matrices after the
            <STRONG>AnnotateSpaceConverter</STRONG> is created, the calculations will not be correct.  If changes will be made
            to the annotation during this time it's best to use the static methods instead. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.#ctor(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData)">
            <summary> Creates a new instance of <STRONG>AnnotateSpaceConverter</STRONG> specifying the <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/>
            parent and <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects that will be used for the conversion methods. </summary>
            <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.AnnotateSpaceConverter"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.Dispose">
            <summary> Releases resources used for conversion. </summary>
            <overloads> Dispose must be called to release resources held by the converter. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.Dispose(System.Boolean)">
            <summary> Releases resources used by this object. </summary>
            <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotateSpaceConverter.Dispose"/> method. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToAnnotationSpace(System.Drawing.PointF)">
            <summary> Converts a point from view space to annotation space. </summary>
            <returns> The point value in annotation space. </returns>
            <remarks> For this method to function accurately both <em>parent</em> and <em>data</em>
            parameters must be provided when constructing the
            <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="point"> The point to convert. </param>
            <overloads> These methods are used to convert <STRONG>PointF</STRONG> and <STRONG>RectangleF</STRONG> values form
            view space to annotation space. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToAnnotationSpace(System.Drawing.PointF[])">
            <summary> Converts an array of <STRONG>PointF</STRONG> from view space to annotation space. </summary>
            <remarks> For this method to function accurately both <em>parent</em> and <em>data</em>
            parameters must be provided when constructing the
            <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="points"> An array of points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(System.Drawing.PointF)">
            <summary> Converts from annotation space to view space. </summary>
            <returns> The point converted into view space. </returns>
            <remarks> For this method to function accurately both <em>parent</em> and <em>data</em>
            parameters must be provided when constructing the
            <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="point"> The point to convert. </param>
            <overloads> These methods are used to convert <STRONG>PointF</STRONG> and <STRONG>RectangleF</STRONG> values form
            annotation space to view space. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(System.Drawing.PointF[])">
            <summary> Converts an array of points from annotation space to view space. </summary>
            <remarks> For this method to function accurately both <EM>parent</EM> and <EM>data</EM> parameters must be provided
            when constructing the <STRONG>AnnotateSpaceConverter</STRONG>. </remarks>
            <param name="points"> An array of PointF that will be converted. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(System.Drawing.PointF)">
            <summary> Converts a point from document space to annotation space. </summary>
            <returns> The point converted to annotation space. </returns>
            <remarks> For this method to function accurately the <em>data</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="point"> The point to convert. </param>
            <overloads> These methods are used to convert <STRONG>PointF</STRONG> and <STRONG>RectangleF</STRONG> values form
            document space to annotation space. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(System.Drawing.PointF[])">
            <summary> Converts an array of points from document space to annotation space. </summary>
            <remarks> For this method to function accurately the <em>data</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="points"> The points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.PointFCollection)">
            <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection"/> with the points converted from document space to annotation
            space. </summary>
            <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection"/> with the converted points. </returns>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(System.Drawing.PointF)">
            <summary> Converts a point from annotation space to document space. </summary>
            <returns> The point converted to document space. </returns>
            <remarks> For this method to function accurately the <EM>data</EM> parameter must be provided when constructing the
            <STRONG>AnnotateSpaceConverter</STRONG>. </remarks>
            <param name="point"> The point to convert. </param>
            <overloads> These methods are used to convert <STRONG>PointF</STRONG> and <STRONG>RectangleF</STRONG> values form
            annotation space to document space. </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotateSpaceConverter~AnnotationSpaceToDocumentSpace&quot;]/*"/>
            </overloads>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotateSpaceConverter~AnnotationSpaceToDocumentSpace&quot;]/*"/>
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(System.Drawing.PointF[])">
            <summary> Converts an array of points from annotation space to document space. </summary>
            <remarks> For this method to function accurately the <EM>data</EM> parameter must be provided when constructing the
            <STRONG>AnnotateSpaceConverter</STRONG>. </remarks>
            <param name="points"> The points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.PointFCollection)">
            <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection"/> converted from annotation space to document space. </summary>
            <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection"/> with the converted points. </returns>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(System.Drawing.PointF)">
            <summary> Converts a point from view space to document space. </summary>
            <returns> The point converted to document space. </returns>
            <remarks> For this method to function accurately the <em>parent</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="point"> The point to convert. </param>
            <overloads> These methods are used to convert <STRONG>PointF</STRONG> and <STRONG>RectangleF</STRONG> values form
            view space to document space. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(System.Drawing.PointF[])">
            <summary> Converts an array of points from view space to document space. </summary>
            <remarks> For this method to function accurately the <EM>parent</EM> parameter must be provided when constructing
            the <STRONG>AnnotateSpaceConverter</STRONG>. </remarks>
            <param name="points"> An array of PointF that will be converted. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(System.Drawing.RectangleF)">
            <summary> Converts a rectangle from view space to document space. </summary>
            <returns> The rectangle converted to document space. </returns>
            <remarks> For this method to function accurately the <em>parent</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="rectangle"> The rectangle to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(System.Drawing.PointF)">
            <summary> Converts a point from document space to view space. </summary>
            <returns> The point converted to view space. </returns>
            <remarks> For this method to function accurately the <em>parent</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="point"> The point to convert. </param>
            <overloads> These methods are used to convert <STRONG>PointF</STRONG> and <STRONG>RectangleF</STRONG> values form
            document space to view space. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(System.Drawing.PointF[])">
            <summary> Converts an array of points from document space to view space. </summary>
            <remarks> For this method to function accurately the <em>parent</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="points"> The points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(System.Drawing.RectangleF)">
            <summary> Converts a rectangle from document space to view space. </summary>
            <returns> The rectangle converted to view space. </returns>
            <remarks> For this method to function accurately the <em>parent</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="rectangle"> The rectangle to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToAnnotationSpace(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
            <summary> Converts a point from view space to annotation space. </summary>
            <returns> The point value in annotation space. </returns>
            <remarks> For this method to function accurately both <em>parent</em> and <em>data</em>
            parameters must be provided when constructing the
            <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
            <param name="point"> The point to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
            <summary> Converts from annotation space to view space. </summary>
            <returns> The point converted into view space. </returns>
            <remarks> For this method to function accurately both <em>parent</em> and <em>data</em>
            parameters must be provided when constructing the
            <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
            <param name="point"> The point to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData,System.Drawing.PointF[])">
            <summary> Converts from annotation space to view space. </summary>
            <remarks> For this method to function accurately both <EM>parent</EM> and <EM>data</EM> parameters must be provided
            when constructing the <STRONG>AnnotateSpaceConverter</STRONG>. </remarks>
            <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
            <param name="points"> An array of PointF that will be converted. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
            <summary> Converts a point from document space to annotation space. </summary>
            <returns> The point converted to annotation space. </returns>
            <remarks> For this method to function accurately the <em>data</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
            <param name="point"> The point to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF[])">
            <summary> Converts an array of points from document space to annotation space. </summary>
            <remarks> For this method to function accurately the <em>data</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
            <param name="points"> The points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.PointFCollection)">
            <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection"/> with the points converted from document space to annotation
            space. </summary>
            <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection"/> with the converted points. </returns>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
            <summary> Converts a point from annotation space to document space. </summary>
            <returns> The point converted to document space. </returns>
            <remarks> For this method to function accurately the <em>data</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
            <param name="point"> The point to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF[])">
            <summary> Converts a point from annotation space to document space. </summary>
            <returns> The point converted to document space. </returns>
            <remarks> For this method to function accurately the <em>data</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
            <param name="points"> The points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.PointFCollection)">
            <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection"/> converted from annotation space to document space. </summary>
            <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection"/> with the converted points. </returns>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the points to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.PointF)">
            <summary> Converts a point from view space to document space. </summary>
            <returns> The point converted to document space. </returns>
            <remarks> For this method to function accurately the <em>parent</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
            <param name="point"> The point to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.RectangleF)">
            <summary> Converts a rectangle from view space to document space. </summary>
            <returns> The rectangle converted to document space. </returns>
            <remarks> For this method to function accurately the <em>parent</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
            <param name="rectangle"> The rectangle to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.PointF)">
            <summary> Converts a point from document space to view space. </summary>
            <returns> The point converted to view space. </returns>
            <remarks> For this method to function accurately the <em>parent</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
            <param name="point"> The point to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.RectangleF)">
            <summary> Converts a rectangle from document space to view space. </summary>
            <returns> The rectangle converted to view space. </returns>
            <remarks> For this method to function accurately the <em>parent</em> parameter must be
            provided when constructing the <strong>AnnotateSpaceConverter</strong>. </remarks>
            <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
            <param name="rectangle"> The rectangle to convert. </param>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationBindingMap">
            <summary>
            An <see cref="T:Atalasoft.Imaging.Utility.AssemblyBindingMap"/> for remapping Atalasoft annotation assembly and type names.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Utility.AssemblyBindingMap">
            <summary>
            Supports serialization by mapping old assembly and type names to new names.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.AssemblyBindingMap.AddAssemblyBinding(System.String,System.String)">
            <summary>
            Maps one assembly name to another.
            </summary>
            <param name="fromAssembly">An old assembly name, formatted as an assembly display name.</param>
            <param name="toAssembly">A new assembly name, formatted as an assembly display name.</param>
            <remarks>Assembly display names can contain optional version, publickeytoken, and culture attributes.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.AssemblyBindingMap.AddAssemblyBinding(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
            <summary>
            Maps one assembly name to another.
            </summary>
            <param name="fromAssembly">An old assembly name.</param>
            <param name="toAssembly">A new assembly name.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.AssemblyBindingMap.AddAssemblyBinding(System.String,System.String,System.String)">
            <summary>
            Maps one assembly name to another for a given type.  Takes precedence over assembly-only bindings.
            </summary>
            <param name="fromAssembly">An old assembly name, formatted as an assembly display name.</param>
            <param name="toAssembly">A new assembly name, formatted as an assembly display name.</param>
            <param name="typeName">A type name, formatted as a fully qualified name.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.AssemblyBindingMap.AddAssemblyBinding(System.Reflection.AssemblyName,System.Reflection.AssemblyName,System.String)">
            <summary>
            Maps one assembly name to another for a given type.  Takes precedence over assembly-only bindings.
            </summary>
            <param name="fromAssembly">An old assembly name.</param>
            <param name="toAssembly">A new assembly name.</param>
            <param name="typeName">A type name, formatted as a fully qualified name.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.AssemblyBindingMap.MapAssembly(System.String)">
            <summary>
            Looks up a suitable bound name for the given assembly name.
            </summary>
            <param name="assemblyName">An assembly name, formatted as an assembly display name.</param>
            <returns>If a suitable binding is found, the binding is merged with argument and returned.  Otherwise, the argument is returned.</returns>
            <remarks>If a perfect binding cannot be found for the value of <paramref name="assemblyName"/> with optional attributes,
            less specific bindings will be checked.  Less specific bindings will be merged with the argument.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.AssemblyBindingMap.MapAssembly(System.String,System.String)">
            <summary>
            Looks up a suitable bound name for the given assembly and type name.
            </summary>
            <param name="assemblyName">An assembly name, formatted as an assembly display name.</param>
            <param name="typeName">A type name, formatted as a fully qualified name.</param>
            <returns>If a suitable binding is found, the binding is merged with argument and returned.  Otherwise, the argument is returned.</returns>
            <remarks><para>If a perfect binding cannot be found for the value of <paramref name="assemblyName"/> with optional attributes,
            less specific bindings will be checked.  Less specific bindings will be merged with the argument.</para>
            <para>Type-specific bindings are checked first, and if none are found, assembly-only bindings will be checked.</para></remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBindingMap.Default">
            <summary>
            Gets the default binding map preconfigured to map renamed Atalasoft assemblies and types.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationBinder">
            <summary>
            A <see cref="T:System.Runtime.Serialization.SerializationBinder"/> that remaps a default set of Atalasoft assembly and type names for annotations.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBinder.BindToType(System.String,System.String)">
            <summary>
            Controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the assembly name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationBrush">
            <summary> This class describes a brush object used for drawing annotations. </summary>
            <remarks> The IAnnotationRenderer for each annotation will use this information to construct a brush
            or equivalent for the drawing environment of its choice. </remarks>
            <example>
                The code below creates a RectangleAnnotation with a solid brush and black border.
                <code lang="CS" title="CreateRectAnn">
            RectangleAnnotation rect = new RectangleAnnotation(RectangleF.Empty, new AnnotationBrush(Color.Red), new AnnotationPen(Color.Black, 1));
            ((RectangleGrips)rect.Grips).GripsToDisplay = RectangleGripDisplay.Both;
            this.annotateViewer1.Annotations.CreateAnnotation(rect);
                </code>
            	<code lang="VB" title="CreateRectAnn">
            Dim rect As RectangleAnnotation =  New RectangleAnnotation(RectangleF.Empty,New AnnotationBrush(Color.Red),New AnnotationPen(Color.Black,1)) 
            ((RectangleGrips)rect.Grips).GripsToDisplay = RectangleGripDisplay.Both
            Me.annotateViewer1.Annotations.CreateAnnotation(rect)
                </code>
            </example>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotationBrush&quot;]/*"/>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._fillType">
            <summary> Gets or sets the type of brush used. </summary>
            <value> The type of brush used for this object. </value>
            <remarks> <para>Only specific properties are valid for each FillType. These are specified below:</para>
            <BLOCKQUOTE dir="ltr" style="MARGIN-RIGHT: 0px">
            <para>
            <TABLE>
            <TBODY>
            <TR>
            <TD><STRONG>FillType</STRONG></TD>
            <TD><STRONG>Properties</STRONG></TD></TR>
            <TR>
            <TD>Solid</TD>
            <TD>Color</TD></TR>
            <TR>
            <TD>Texture</TD>
            <TD>Image,<BR/>WrapMode,<BR/>Rectangle</TD></TR>
            <TR>
            <TD>Hatch</TD>
            <TD>HatchStyle,<BR/>HatchForeColor,<BR/>HatchBackColor</TD></TR>
            <TR>
            <TD>LinearGradient</TD>
            <TD>LinearColors,<BR/>LinearGradientMode,<BR/>Rectangle</TD></TR></TBODY></TABLE></para></BLOCKQUOTE>
            </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._color">
            <summary> Gets or sets the color of a solid brush. </summary>
            <value> The solid brush color. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._image">
            <summary> Gets or sets the image used for a texture brush. </summary>
            <value> The image used as a texture. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._rectangle">
            <summary> The bounding rectangle a texture or linear gradient brush. </summary>
            <value> The bounding rectangle of the brush. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._wrapMode">
            <summary> Gets or sets the wrap mode of a texture brush. </summary>
            <value> The texture wrap mode. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._hatchStyle">
            <summary> Gets or sets the hatch style of a hatch brush. </summary>
            <value> The hatch style of the brush. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._hatchForeColor">
            <summary> Gets or sets the hatch forecolor of a hatch brush. </summary>
            <value> The hatch forecolor. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._hatchBackColor">
            <summary> Gets or sets the hatch background color of a hatch brush. </summary>
            <value> The background color of a hatch brush. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._linearColors">
            <summary> Gets or sets the colors used by a linear gradient brush. </summary>
            <value> The colors of a linear gradient brush. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationBrush._linearGradientMode">
            <summary> The orientation of a linear gradient brush. </summary>
            <value> The gradient orientation. </value>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Color)">
            <summary> Creates a solid brush with the specified color. </summary>
            <param name="color"> The color of the brush. </param>
            <overloads> Construct a new solid, hatch, texture or linear gradient <STRONG>AnnotationBrush</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage)">
            <summary> Creates a texture brush using the specified image. </summary>
            <param name="image"> The image used for the texture. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Rectangle)">
            <summary> Creates a texture brush using the specified image and bounding rectangle. </summary>
            <param name="image"> The image used for the texture. </param>
            <param name="dstRect"> A bounding rectangle for the texture. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.RectangleF)">
            <summary> Creates a texture brush using the specified image and bounding rectangle. </summary>
            <param name="image"> The image used for the texture. </param>
            <param name="dstRect"> A bounding rectangle for the texture. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Drawing2D.WrapMode)">
            <summary> Creates a new texture brush with the specified image and wrap mode. </summary>
            <param name="image"> The image used for the texture. </param>
            <param name="wrapMode"> The wrap mode that specifies how the texture is tiled. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Drawing2D.WrapMode,System.Drawing.Rectangle)">
            <summary> Creates a texture brush with the specified image, wrap mode and bounding rectangle. </summary>
            <param name="image"> The image used for the texture. </param>
            <param name="wrapMode"> The wrap mode that specifies how the texture is tiled. </param>
            <param name="dstRect"> A bounding rectangle for the texture. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Drawing2D.WrapMode,System.Drawing.RectangleF)">
            <summary> Creates a texture brush with the specified image, wrap mode and bounding rectangle. </summary>
            <param name="image"> The image used for the texture. </param>
            <param name="wrapMode"> The wrap mode that specifies how the texture is tiled. </param>
            <param name="dstRect"> A bounding rectangle for the texture. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color)">
            <summary> Creates a hatch brush with the specified hatch style and forecolor. </summary>
            <param name="hatchStyle"> The hatch style used by this brush. </param>
            <param name="foreColor"> The forecolor of the brush. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary> Creates a hatch brush with the specified hatch style, forecolor and background color. </summary>
            <param name="hatchStyle"> The hatch style used by this brush. </param>
            <param name="foreColor"> The forecolor of the brush. </param>
            <param name="backColor"> The background color of the brush. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)">
            <summary> Creates a linear gradient brush using the specified start point, end point, start color and end color.
            </summary>
            <param name="point1"> The starting point of the gradient. </param>
            <param name="point2"> The ending point of the gradient. </param>
            <param name="color1"> The starting color of the gradient. </param>
            <param name="color2"> The ending color of the gradient. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)">
            <summary> Creates a linear gradient brush using the specified start point, end point, start color and end color.
            </summary>
            <param name="point1"> The starting point of the gradient. </param>
            <param name="point2"> The ending point of the gradient. </param>
            <param name="color1"> The starting color of the gradient. </param>
            <param name="color2"> The ending color of the gradient. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary> Creates a linear gradient brush with the bounding rectangle, starting and ending colors, and the gradient
            orientation. </summary>
            <param name="rect"> The bounding rectangle of the linear gradient. </param>
            <param name="color1"> The starting color of the gradient. </param>
            <param name="color2"> The ending color of the gradient. </param>
            <param name="linearGradientMode"> The orientation of the gradient. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary> Creates a linear gradient brush with the bounding rectangle, starting and ending colors, and the gradient
            orientation. </summary>
            <param name="rect"> The bounding rectangle of the linear gradient. </param>
            <param name="color1"> The starting color of the gradient. </param>
            <param name="color2"> The ending color of the gradient. </param>
            <param name="linearGradientMode"> The orientation of the gradient. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.Clone">
            <summary> Creates a copy of the <STRONG>AnnotationBrush</STRONG> object. </summary>
            <returns> A copy of this brush. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary> Called after a property has been changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> specifying the property that was
            modified. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary> Called before a property has been changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> specifying the property that is being
            modified. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
            <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanged"/>
            event. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a brush from serialized information. </summary>
            <param name="info"> The SerializationInfo containing the brush data. </param>
            <param name="context"> A StreamingContext for this data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about the brush. </summary>
            <param name="info"> A SerializationInfo object that will be filled with brush information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.ToString">
            <summary> Returns a information about this AnnotationBrush. </summary>
            <returns> A string containing information about this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.Equals(System.Object)">
            <summary> Used to compare two <STRONG>AnnotationBrush</STRONG> objects. </summary>
            <returns> <STRONG>True</STRONG> if the brush parameters are the same. </returns>
            <param name="obj"> The <STRONG>AnnotationBrush</STRONG> this object is compared to. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationBrush.GetHashCode">
            <summary> Returns an identifier for this object. </summary>
            <returns> An identifier for this object. </returns>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationBrush.AnnotationControllerNotification">
            <summary>Raised after a property of the AnnotationBrush if modified.</summary>
            <remarks>
            Primarily this event is used for internal notification of property
            changes.
            </remarks>
            <summary> Raised after a property of the AnnotationBrush if modified. </summary>
            <remarks> Primarily this event is used for internal notification of property changes. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanging">
            <summary>Raised just before a property is about to be modified.</summary>
            <remarks>
            Primarily this event is used for internal notification of property
            changes.
            </remarks>
            <summary> Raised just before a property is about to be modified. </summary>
            <remarks> Primarily this event is used for internal notification of property changes. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanged">
            <summary> Raised when a property value has changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.FillType">
            <summary>Gets or sets the type of brush used.</summary>
            <value>The type of brush used for this object.</value>
            <remarks>
            	<para>Only specific properties are valid for each FillType. These are specified
                below:</para>
            	<blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
            		<para>
            			<list type="table">
            				<item>
            					<term><strong>FillType</strong></term>
            					<description><strong>Properties</strong></description>
            				</item>
            				<item>
            					<term>Solid</term>
            					<description>Color</description>
            				</item>
            				<item>
            					<term>Texture</term>
            					<description>Image<br/>
                                WrapMode<br/>
                                Rectangle</description>
            				</item>
            				<item>
            					<term>Hatch</term>
            					<description>HatchStyle<br/>
                                HatchForeColor<br/>
                                HatchBackColor</description>
            				</item>
            				<item>
            					<term>LinearGradient</term>
            					<description>LinearColors<br/>
                                LinearGradientMode<br/>
                                Rectangle</description>
            				</item>
            			</list>
            		</para>
            	</blockquote>
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.Color">
            <summary> Gets or sets the color of a solid brush. </summary>
            <value> The solid brush color. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.HatchStyle">
            <summary> Gets or sets the hatch style of a hatch brush. </summary>
            <value> The hatch style of the brush. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.HatchForeColor">
            <summary> Gets or sets the hatch forecolor of a hatch brush. </summary>
            <value> The hatch forecolor. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.HatchBackColor">
            <summary> Gets or sets the hatch background color of a hatch brush. </summary>
            <value> The background color of a hatch brush. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.Image">
            <summary>Gets or sets the image used for a texture brush.</summary>
            <value>The image used as a texture.</value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.WrapMode">
            <summary> Gets or sets the wrap mode of a texture brush. </summary>
            <value> The texture wrap mode. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.LinearColors">
            <summary> Gets or sets the colors used by a linear gradient brush. </summary>
            <value> The colors of a linear gradient brush. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.LinearGradientMode">
            <summary> The orientation of a linear gradient brush. </summary>
            <value> The gradient orientation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationBrush.Rectangle">
            <summary>The bounding rectangle a texture or linear gradient brush.</summary>
            <value>The bounding rectangle of the brush.</value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationData">
            <summary>
            This is the main annotation data class used to hold base information required by all annotations.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotationData&quot;]/*"/>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationData._transform">
            <summary> Gets or sets the transformation matrix used for rendering this annotation. </summary>
            <value> A transformation matrix used for rendering. </value>
            <remarks> <para>Each annotation has multiple matrices.  The Transform property matrix is multiplied in after all
            others, allowing for a custom transform.  </para>
            <para><STRONG>Note</STRONG>: The RotateDocument method applies a transform to
            this matrix.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.#ctor">
            <summary>
            Default constructor of AnnotationData.
            </summary>
            <remarks>AnnotationData is an abstract class and cannot be created directly.</remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Default serialization constructor of AnnotationData.
            </summary>
            <param name="info">SerializationInfo containing annotation data.</param>
            <param name="context">StreamingContext object for this class.</param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.AnnotationData"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.Dispose">
            <summary> Releases resources used by the annotation. </summary>
            <overloads> These methods release resources used by the annotation. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.Dispose(System.Boolean)">
            <summary> Called to release resources used by the annotation. </summary>
            <param name="disposing"> A value indicating whether this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotationData.Dispose"/> method or the class finalizer. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.GetRenderTransform">
            <summary> Returns a <STRONG>System.Drawing.Drawing2D.Matrix</STRONG> containing the matrices applied to the
            annotation. </summary>
            <returns> A Matrix containing all of the matrices applied to the annotation. </returns>
            <remarks> <para>Internally several matrices are used to hold the position, rotation and mirroring of the annotation.
            This method will return a single Matrix combining these matrices along with the public <see cref="P:Atalasoft.Annotate.AnnotationData.Transform"/> property.</para>
            <para>This Matrix should be disposed when finished working with it.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.Equals(System.Object)">
            <summary> Compares the current annotation with another. </summary>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/>, <see cref="P:Atalasoft.Annotate.AnnotationData.CreationTime"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>.  All other properties, including
            transforms used for rendering, are compared. </remarks>
            <param name="obj"> The object to compare against. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with properties values for the base <STRONG>AnnotationData</STRONG>
            class. </summary>
            <example> AnnotationData Class </example>
            <param name="info"> The SerializationInfo object where data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.Clone">
            <summary> Returns a copy of this annotation data. </summary>
            <returns> A copy of this data. </returns>
            <example> AnnotationData Class </example>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.GetHashCode">
            <summary> Returns an identifier for this object. </summary>
            <returns> A value representing this object. </returns>
            <remarks> This value is not guaranteed to be unique, but the same object instance will always return the same hash
            value. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.GetAllExtraProperties">
            <summary> Returns a <STRONG>Dictionary</STRONG> containing the key value pairs for extra properties. </summary>
            <returns> A <STRONG>Dictionary</STRONG> containing the key value pairs. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.GetExtraProperty(System.String)">
            <returns> The object with the given key name, null if it doesn't exist. </returns>
            <summary> Returns the value stored with <see cref="M:Atalasoft.Annotate.AnnotationData.SetExtraProperty(System.String,System.String)"/>. </summary>
            <seealso> SetExtraProperty Method </seealso>
            <param name="key"> Key name of the value requested. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.SetExtraProperty(System.String,System.String)">
            <summary> Sets a custom value within an annotation that can be retrieved using <see cref="M:Atalasoft.Annotate.AnnotationData.GetExtraProperty(System.String)"/>. </summary>
            <seealso cref="M:Atalasoft.Annotate.AnnotationData.GetExtraProperty(System.String)"/>
            <param name="key"> Key name of the property to be set to. </param>
            <param name="val"> Object value of the property being set. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <summary> Flips (mirrors) the annotation horizontally or vertically. </summary>
            <remarks> If the <EM>maintainPosition</EM> argument is <STRONG>true</STRONG>, the location of the annotation will be
            changed. </remarks>
            <param name="direction"> The direction to mirror the annotation. </param>
            <param name="maintainPosition"> Determines whether the mirror is performed in place or if the annotation pivots
            along its location. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.Rotate(System.Single)">
            <summary> Applies rotation to the annotation from its current rotation amount. </summary>
            <remarks> This method will add additional rotation to an annotation. To set the annotation rotation to a specific
            amount, set the <see cref="P:Atalasoft.Annotate.AnnotationData.Rotation"/> property. </remarks>
            <param name="degrees"> The amount of rotation being added to this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary> Fills the data object with cloned property values. </summary>
            <remarks> This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object. </remarks>
            <example> AnnotationData Class </example>
            <param name="data"> A class that derives from <STRONG>AnnotationData</STRONG>. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.CloneBaseDataFrom(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Clones the base data from.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnCanMirrorChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMirror"/> property value has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnCanMoveChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMove"/> property value has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnCanResizeChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanResize"/> property has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnCanRotateChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanRotate"/> property value has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnCanSelectChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanSelect"/> property value has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnCreationTimeChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CreationTime"/> property value has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnLocationChanged(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Location"/> property value has changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information about this event.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnModifiedTimeChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/> property has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnMirrored(Atalasoft.Annotate.MirrorEventArgs)">
            <summary> Called when the annotation has been mirrored. </summary>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.MirrorEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnNameChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> property has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnRotationChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Rotation"/> property has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnSecurityChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Security"/> property has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Size"/> property has changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs"/> containing information about this change. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnStateChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.State"/> property has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationData.StateChanged"/> event. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> passed to the <see cref="E:Atalasoft.Annotate.AnnotationData.StateChanged"/> event.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnTooltipChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.ToolTip"/> property has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnTransformChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Transform"/> property has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnUserNameChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.UserName"/> property has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationData.UserNameChanged"/> event. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> passed to the <see cref="E:Atalasoft.Annotate.AnnotationData.UserNameChanged"/> event.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnVisibleChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Visible"/> property has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
            <summary> Called when a property has been changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationData.PropertyChanged"/> event.
            </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary> Called just before a property value is changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> containing information about this change.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary> Called after a property value has been changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> containing information about this
            change. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.SetBrushEvents(Atalasoft.Annotate.AnnotationBrush)">
            <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanging"/>
            and <see cref="E:Atalasoft.Annotate.AnnotationBrush.AnnotationControllerNotification"/> event handlers in an <see cref="T:Atalasoft.Annotate.AnnotationBrush"/>. </summary>
            <seealso> RemoveBrushEvents Method </seealso>
            <param name="brush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> to set event handlers for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.RemoveBrushEvents(Atalasoft.Annotate.AnnotationBrush)">
            <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanging"/> and <see cref="E:Atalasoft.Annotate.AnnotationBrush.AnnotationControllerNotification"/> event handlers for an <see cref="T:Atalasoft.Annotate.AnnotationBrush"/>.
            </summary>
            <seealso> SetBrushEvents Method </seealso>
            <param name="brush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> to remove event handlers from. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.SetPenEvents(Atalasoft.Annotate.AnnotationPen)">
            <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.AnnotationPen.PropertyChanging"/>
            and <see cref="E:Atalasoft.Annotate.AnnotationPen.AnnotationControllerNotification"/> event handlers in an <see cref="T:Atalasoft.Annotate.AnnotationPen"/>.
            </summary>
            <seealso> RemovePenEvents Method </seealso>
            <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> to set event handlers for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.RemovePenEvents(Atalasoft.Annotate.AnnotationPen)">
            <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.AnnotationPen.PropertyChanging"/> and <see cref="E:Atalasoft.Annotate.AnnotationPen.AnnotationControllerNotification"/> event handlers for an <see cref="T:Atalasoft.Annotate.AnnotationPen"/>.
            </summary>
            <seealso> SetPenEvents Method </seealso>
            <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> to remove the event handlers from. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.SetFontEvents(Atalasoft.Annotate.AnnotationFont)">
            <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.AnnotationFont.PropertyChanging"/>
            and <see cref="E:Atalasoft.Annotate.AnnotationFont.AnnotationControllerNotification"/> event handlers in an <see cref="T:Atalasoft.Annotate.AnnotationFont"/>.
            </summary>
            <seealso> RemoveFontEvents Method </seealso>
            <param name="font"> The <see cref="T:Atalasoft.Annotate.AnnotationFont"/> to set event handlers for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.RemoveFontEvents(Atalasoft.Annotate.AnnotationFont)">
            <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.AnnotationFont.PropertyChanging"/> and <see cref="E:Atalasoft.Annotate.AnnotationFont.AnnotationControllerNotification"/> event handlers for an <see cref="T:Atalasoft.Annotate.AnnotationFont"/>.
            </summary>
            <seealso> SetFontEvents Method </seealso>
            <param name="font"> The font to remove events from. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.SetSecurityEvents(Atalasoft.Annotate.IAnnotationLock)">
            <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanging"/>
            and <see cref="E:Atalasoft.Annotate.IAnnotationLock.AnnotationControllerNotification"/> event handlers in an <see cref="T:Atalasoft.Annotate.IAnnotationLock"/>. </summary>
            <seealso> RemoveSecurityEvents Method </seealso>
            <param name="security"> The class implementing <see cref="T:Atalasoft.Annotate.IAnnotationLock"/> to set event handlers for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.RemoveSecurityEvents(Atalasoft.Annotate.IAnnotationLock)">
            <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanging"/> and <see cref="E:Atalasoft.Annotate.IAnnotationLock.AnnotationControllerNotification"/> event handlers for an <see cref="T:Atalasoft.Annotate.IAnnotationLock"/>.
            </summary>
            <seealso> SetSecurityEvents Method </seealso>
            <param name="security"> The class implementing <see cref="T:Atalasoft.Annotate.IAnnotationLock"/> that will have event handlers removed.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.CalculateBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> This method will calculate the bounding rectangle for the annotation, taking the pen width, shadow and
            annotation transforms into account. </summary>
            <remarks> This method will apply the render transforms when calculating the bounds. Use the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> method to get the bounds without any transforms applied. </remarks>
            <returns> The bounding rectangle of the annotation in document space. </returns>
            <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used by the annotation, if any. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the shadow, if any. </param>
            <param name="shadowOffset"> The position offset used for the shadow. </param>
            <overloads> Calculates the bounding rectangle of an annotation. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.CalculateBounds(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> This method will add the annotation pen width, shadow and transforms to the provided rectangle bounds.
            </summary>
            <remarks> This method will apply the render transforms when calculating the bounds. Use the <see cref="M:Atalasoft.Annotate.AnnotationData.CalculateAnnotationBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)"/> method to get the bounds without any transforms applied.
            </remarks>
            <returns> The rectangle in document space. </returns>
            <param name="bounds"> The bounding rectangle to which the pen, shadow and transforms will be applied. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> being applied to the bounds. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the shadow. </param>
            <param name="shadowOffset"> The position offset used for the shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.CalculateAnnotationBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> This method will calculate the bounding rectangle without applying the annotation transforms. </summary>
            <remarks> To get the annotation bounds with its transforms applied, use the PointF method. </remarks>
            <returns> The bounding rectangle of the annotation without its transforms applied. </returns>
            <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used by the annotation, if any. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the shadow, if any. </param>
            <param name="shadowOffset"> The position offset used for the shadow. </param>
            <overloads> Calculates the bounding rectangle of an annotation without applying the annotation transforms.
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.CalculateAnnotationBounds(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> This method will calculate the bounding rectangle without applying the annotation transforms. </summary>
            <returns> The rectangle that includes the pen and shadow offsets. </returns>
            <param name="bounds"> A bounding rectangle to which the pen and shadow will be applied. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used on this rectangle, if any. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the shadow of this rectangle, if any. </param>
            <param name="shadowOffset"> The position offset of the shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.GetLineCapBounds">
            <summary> Called to get the rectangle bounds of the line cap used in an <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/>. </summary>
            <returns> The bounds for the line cap. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnPropertyChangingHandler(System.Object,Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary>
            This method is used to capture changes to brushes, pens, images and fonts.
            </summary>
            <param name="sender">Doesn't matter since the original object is listed in the args.</param>
            <param name="e"></param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationData.OnAnnotationControllerNotificationHandler(System.Object,Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary>
            Sends information to the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController.html">AnnotationController</a>.
            </summary>
            <param name="sender">The object sending the data.</param>
            <param name="e">
            An
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.html">
            AnnotationControllerNotificationEventArgs</a> containing information to be sent to the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController.html">AnnotationController</a>.
            </param>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.CanMirrorChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanMirror.html">CanMirror</a>
            property is changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMirror"/> property is changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.CanMoveChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanMove.html">CanMove</a>
            property is changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMove"/> property is changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.CanResizeChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanResize.html">CanResize</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanResize"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.CanSelectChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanSelect.html">CanSelect</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanSelect"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.LocationChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Location.html">Location</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.Location"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.CanRotateChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanRotate.html">CanRotate</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanRotate"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.NameChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Name.html">Name</a> property has
            changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.RotationChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Rotation.html">Rotation</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.Rotation"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.SecurityChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Security.html">Security</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.Security"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.SizeChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Size.html">Size</a> property has
            changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.Size"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.StateChanged">
            <summary> This event is raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.State"/> property value has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.TooltipChanged">
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.ToolTip"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.VisibleChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Visible.html">Visible</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.Visible"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.CreationTimeChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CreationTime.html">CreationTime</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.CreationTime"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.ModifiedTimeChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~ModifiedTime.html">ModifiedTime</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.Mirrored">
            <summary>
            Raised when the annotation is mirrored, either by the user dragging a grip across
            its opposite or when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Mirror.html">Mirror</a> method
            is called.
            </summary>
            <summary> Raised when the annotation is mirrored, either by the user dragging a grip across its opposite or when the
            <see cref="M:Atalasoft.Annotate.AnnotationData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)"/> method is called. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.TransformChanged">
            <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Transform.html">Transform</a>
            property has changed.
            </summary>
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.Transform"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.UserNameChanged">
            <summary> This event is raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.UserName"/> property has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.PropertyChanging">
            <summary>Raised before a property is changed.</summary>
            <summary> Raised before a property is changed, allowing the changed value to be modified or canceled. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.PropertyChanged">
            <summary> Raised when a property value has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationData.AnnotationControllerNotification">
            <summary>Raised after a property has been changed.</summary>
            <summary> Raised after a property has been changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.IsMirroredHorizontally">
            <summary> Gets a value indicating whether the annotation is mirrored horizontally. </summary>
            <value> A value indicating whether the annotation is mirrored horizontally. </value>
            <remarks> Horizontal mirroring occurs when resizing the annotation and dragging a grip past its opposite grip.  This
            can also happen when the <see cref="M:Atalasoft.Annotate.AnnotationData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)"/> method is called. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.IsMirroredVertically">
            <remarks> Vertical mirroring occurs when resizing the annotation and dragging a grip past its opposite grip.  This
            can also happen when the <see cref="M:Atalasoft.Annotate.AnnotationData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)"/> method is called. </remarks>
            <summary> Gets a value indicating whether the annotation is mirrored vertically. </summary>
            <value> A value indicating whether the annotation is mirrored vertically. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.UserName">
            <summary> Gets or sets the username for the annotation.  Internally this is used with PDF annotations. </summary>
            <value> The user that last modified the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.Selected">
            <summary> Get or set whether this <STRONG>AnnotationData</STRONG> object is selected </summary>
            <value> A value indicating whether the annotation is selected. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.State">
            <summary> Get or set the <see cref="T:Atalasoft.Annotate.AnnotationState"/> of this <STRONG>AnnotationData</STRONG> object </summary>
            <value> The current annotation state. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.Bounds">
            <summary>Gets the bounding rectangle of the annotation.</summary>
            <value>The bounding rectangle of all visual elements of the annotation.</value>
            <summary> Gets the bounding rectangle of the annotation in document space. </summary>
            <value> The bounding rectangle of all visual elements of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.AnnotationBounds">
            <summary>
            Gets the rectangle bounds of the annotation, including any pen or shadow, before
            any matricies are applied.
            </summary>
            <value>The rectangular bounds of the annotation without any matrices applied.</value>
            <summary> Gets the rectangle bounds of the annotation, including any pen or shadow, before any matrices are applied.
            </summary>
            <value> The rectangular bounds of the annotation without any matrices applied. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.IgnoreDataChanges">
            <summary>
            Gets or sets a value indicating whether any properties changes should be passed to the undo manager.
            </summary>
            <value>Indicates if properties changes are sent to the undo manager.</value>
            <summary> Gets or sets a value indicating whether any properties changes should be passed to the undo manager.
            </summary>
            <value> Indicates if properties changes are sent to the undo manager. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.Transform">
            <summary>Gets the transformation matrix used for rendering this annotation.</summary>
            <value>A transformation maxtrix used for rendering.</value>
            <summary> Gets or sets the transformation matrix used for rendering this annotation. </summary>
            <value> A transformation matrix used for rendering. </value>
            <remarks> <para>Each annotation has multiple matrices.  The Transform property matrix is multiplied in after all
            others, allowing for a custom transform.  </para>
            <para><STRONG>Note</STRONG>: The RotateDocument method applies a transform to
            this matrix.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.CreationTime">
            <summary>
            Gets or sets the creation time of the annotation.
            </summary>
            <value>The creation time of the annotation.</value>
            <summary> Gets or sets the creation time of the annotation. </summary>
            <value> The creation time of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.Location">
            <summary>
            Gets or sets the location of this annotation.
            </summary>
            <value>The annotation location.</value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.ModifiedTime">
            <summary>
            Gets or sets the time in which this annotation was modified.
            </summary>
            <value>The last modified time.</value>
            <remarks>This value is updated when a property change is detected.</remarks>
            <summary> Gets or sets the last time this annotation was modified. </summary>
            <value> The last modified time. </value>
            <remarks> This value is updated when a property change is detected. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.Name">
            <summary>
            Gets or sets a name for this annotation.
            </summary>
            <value>A name for this annotation.</value>
            <summary> Gets or sets a name for this annotation. </summary>
            <value> A name for this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.Rotation">
            <summary>
            Gets or sets the current amount of rotation for this annotation.
            </summary>
            <value>The amount this annotation is rotated. Values should be from 0.0 to 259.9.</value>
            <summary> Gets or sets the current amount of rotation for this annotation. </summary>
            <value> The amount this annotation is rotated. Values should be from 0.0 to 259.99999: Values outside of this range
            will be automatically corrected. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.Security">
            <summary>
            Gets or sets the security lock used for this annotation.
            </summary>
            <value>The security lock used.</value>
            <summary> Gets or sets the security lock used for this annotation.  This can be set to null (Nothing in VB).
            </summary>
            <value> The security lock used or null (Nothing in VB) if there is no security lock. </value>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotationData~Security&quot;]/*"/>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotationData~Security&quot;]/*"/>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.Size">
            <summary>
            Gets or sets the size of the annotation.
            </summary>
            <value>The size of the annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.Visible">
            <summary>
            Gets or sets a value indicating if the annotation is visible.
            </summary>
            <value>Indicates if the annotation is visible.</value>
            <summary> Gets or sets a value indicating if the annotation is visible. </summary>
            <value> Indicates if the annotation is visible. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.CanMirror">
            <summary>
            Gets or sets a value indicating if the annotation can mirror.
            </summary>
            <value>Indicates if the annotation can mirror.</value>
            <remarks>A mirror happens when one side of an annotation is dragged past the opposite side.  This will perform a horizontal or vertical flip on the annotation.</remarks>
            <summary> Gets or sets a value indicating if the annotation can mirror from user interaction. </summary>
            <value> Indicates if the annotation can mirror. </value>
            <remarks> A mirror happens when one side of an annotation is dragged past the opposite side. This will perform a
            horizontal or vertical flip on the annotation. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.CanMove">
            <summary>
            Gets or sets a value indicating if the annotation can be moved.
            </summary>
            <value>Indicates if the annotation can be moved.</value>
            <remarks>This will only prevent the annotation from being moved by the end-user. The annotation can still be programmatically moved.</remarks>
            <summary> Gets or sets a value indicating if the annotation can be moved by the user. </summary>
            <value> Indicates if the annotation can be moved. </value>
            <remarks> This will only prevent the annotation from being moved by the end-user. The annotation can still be
            programmatically moved. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.CanResize">
            <summary>
            Gets or sets a value indicating if the annotation can be resized.
            </summary>
            <value>Indicates if the annotation can be resized.</value>
            <remarks>This will only prevent the annotation from being resized by the end-user. The annotation can still be programmatically resized.</remarks>
            <summary> Gets or sets a value indicating if the annotation can be resized by the user. </summary>
            <value> Indicates if the annotation can be resized. </value>
            <remarks> This will only prevent the annotation from being resized by the end-user. The annotation can still be
            programmatically resized. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.CanRotate">
            <summary>
            Gets or sets a value indicating if the annotation can be rotated.
            </summary>
            <value>Indicates if the annotation can be rotated.</value>
            <remarks>This will only prevent the annotation from being rotated by the end-user. The annotation can still be programmatically rotated.</remarks>
            <summary> Gets or sets a value indicating if the annotation can be rotated by the user. </summary>
            <value> Indicates if the annotation can be rotated. </value>
            <remarks> This will only prevent the annotation from being rotated by the end-user. The annotation can still be
            programmatically rotated. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.CanSelect">
            <summary>
            Gets or sets a value indicating if the annotation can be selected.
            </summary>
            <value>Indicates if the annotation can be selected.</value>
            <remarks>This will only prevent the annotation from being selected by the end-user. The annotation can still be programmatically selected.</remarks>
            <summary> Gets or sets a value indicating if the annotation can be selected. </summary>
            <value> Indicates if the annotation can be selected. </value>
            <remarks> This will only prevent the annotation from being selected by the end-user. The annotation can still be
            programmatically selected. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationData.ToolTip">
            <summary>
            Gets or sets the text displayed in the annotation tooltip.
            </summary>
            <value>Text used for the tooltip.</value>
            <summary> Gets or sets the text displayed in the annotation tooltip. </summary>
            <value> Text used for the tooltip. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationDataCollection">
            <summary>This class can be used to hold a collection of AnnotationData objects.</summary>
            <remarks>
            The LayerData object uses this class to hold the AnnotationData for the layer. In
            most cases there is no need to create an instance of this class.
            </remarks>
            <summary> This class can be used to hold a collection of <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects. </summary>
            <remarks> The <see cref="T:Atalasoft.Annotate.LayerData"/> object makes use of this class to hold the <see cref="T:Atalasoft.Annotate.AnnotationData"/> for
            the layer. In most cases there is no need to create an instance of this class. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationDataCollection</STRONG>. </summary>
            <overloads> Constructs an <STRONG>AnnotationDataCollection</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AnnotationDataCollection</STRONG> from serialized information.
            </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info parameter is null. </exception>
            <param name="info"> The SerializationInfo that contains information for this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with serialized data for this collection. </summary>
            <exception> Thrown if the info parameter is null. </exception>
            <param name="info"> The SerializationInfo object where the data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Add(Atalasoft.Annotate.AnnotationData)">
            <summary> Adds an <see cref="T:Atalasoft.Annotate.AnnotationData"/> object to the collection. </summary>
            <exception> Thrown if the data parameter is null. </exception>
            <param name="data"> The class derived from <see cref="T:Atalasoft.Annotate.AnnotationData"/> to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.AddRange(Atalasoft.Annotate.AnnotationData[])">
            <summary> Adds an array of <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects to the collection. </summary>
            <exception> Thrown if the data parameter is null or zero length. </exception>
            <param name="data"> An array of <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Insert(System.Int32,Atalasoft.Annotate.AnnotationData)">
            <summary> Inserts an <see cref="T:Atalasoft.Annotate.AnnotationData"/> object into the collection at a specified index. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the data parameter is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the index parameter if out of range for this collection. </exception>
            <param name="index"> The position within the collection to place this object. </param>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object to insert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Remove(Atalasoft.Annotate.AnnotationData)">
            <summary> Removes an <see cref="T:Atalasoft.Annotate.AnnotationData"/> object from the collection. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the data parameter is null. </exception>
            <param name="data"> The object to remove. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.CopyTo(Atalasoft.Annotate.AnnotationData[],System.Int32)">
            <summary> Copies items into the specified array. </summary>
            <exception> Thrown if the array is null (Nothing in VB). </exception>
            <exception> Thrown if the index is invalid. </exception>
            <exception> Thrown if the array is not large enough to perform this task. </exception>
            <param name="array"> The array to copy items into. </param>
            <param name="index"> The index of the target array to being copying. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.IndexOf(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns the index of an item in the collection. </summary>
            <returns> The index of the item or -1 if the item does not exist in the collection. </returns>
            <param name="data"> The item to search for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Contains(Atalasoft.Annotate.AnnotationData)">
            <summary> Determines whether the <STRONG>AnnotationDataCollection </STRONG>contains the specified element </summary>
            <returns> <STRONG>true</STRONG> if the <STRONG>AnnotationDataCollection </STRONG>contains the specified
            <I>value</I>; otherwise, <B>false</B>. </returns>
            <param name="data"> The element to locate in the CollectionBase </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnClear">
            <summary> Called when the Clear method has been invoked. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnClearComplete">
            <summary> Called when the collection is cleared. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary> Called when an add or insert has completed. </summary>
            <param name="index"> The index in the collection where the item was placed. </param>
            <param name="value"> The object that was added to the collection. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary> Called when a remove has completed. </summary>
            <param name="index"> The index of the item that was removed. </param>
            <param name="value"> The object that was removed. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary> Called when a set has completed. </summary>
            <param name="index"> The index in the collection where the item was changed. </param>
            <param name="oldValue"> The previous object at the specified index. </param>
            <param name="newValue"> The new object at the specified index. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
            <summary> Called when there is a change in the collection. </summary>
            <param name="args"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs"/> containing information about the change.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Clone">
            <summary> Create a copy of the <STRONG>AnnotationDataCollection</STRONG>. </summary>
            <returns> An <STRONG>AnnotationDataCollection</STRONG> containing a clone of every <see cref="T:Atalasoft.Annotate.AnnotationData"/>
            object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Equals(System.Object)">
            <summary> Compares one collection to another to see if they are equal. </summary>
            <returns> <STRONG>True</STRONG> if the collections hold equal data. </returns>
            <param name="obj"> The <STRONG>AnnotationDataCollection</STRONG> being compared to. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnPropertyChangingHandler(System.Object,Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary>
            This method is used to capture changes to brushes, pens, images and fonts.
            </summary>
            <param name="sender">Doesn't matter since the original object is listed in the args.</param>
            <param name="e"></param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnDeserialization(System.Object)">
            <summary> Called after an object has been fully deserialized by a serialization formatter.<!--DXMETADATA end -->
            <!--DXMETADATA start type="TaggedComment" source="Item" id="##OVERLOADS" format="%%comment%%" --><!--DXMETADATA end
            --><!--DXMETADATA start type="FilteredItemList" scrap="OVERLOAD_LIST" namespace="method" source="Item" filter=""
            format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=overloadlist,caption=$$OverloadList$$%%%%filtereditemlist%%</div>"
            --><!--DXMETADATA end --><!--DXMETADATA start type="FilteredItemList" scrap="SYNTAX" namespace="language"
            filter="type=all" NoHeader="True" NoFooter="True"
            format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=syntax,caption=$$Syntax$$%%%%FilteredItemList%%" --> </summary>
            <param name="sender"> This parameter is not used and will be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB).
            </param>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationDataCollection.PropertyChanging">
            <summary> Raised before a property is changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationDataCollection.AnnotationControllerNotification">
            <summary> Raised when the annotation sends a notification to the AnnotationController.</summary>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationDataCollection.Item(System.Int32)">
            <summary>Gets an AnnotationData object form the collection at the specified index.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
            <param name="index">The index of the item to retrieve.</param>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationDataCollection.CollectionChanged">
            <summary> Raised when the collection has changed. </summary>
            <remarks> This event will be raised when items are added, inserted and removed. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationDataCollection`1">
            <summary> This class can be used to hold a collection of <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects. </summary>
            <remarks> The <see cref="T:Atalasoft.Annotate.LayerData"/> object makes use of this class to hold the <see cref="T:Atalasoft.Annotate.AnnotationData"/> for
            the layer. In most cases there is no need to create an instance of this class. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.#ctor">
            <summary>Creates a new instance of AnnotationDataCollection.</summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.OnPropertyChangingHandler(System.Object,Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary>
            This method is used to capture changes to brushes, pens, images and fonts.
            </summary>
            <param name="sender">Doesn't matter since the original object is listed in the args.</param>
            <param name="e"></param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
            <summary>Called when there is a change in the collection.</summary>
            <param name="args">
            An
            <a href="DotAnnotate~Atalasoft.Annotate.Atalasoft.Utils.CollectionChangedEventArgs.html">Atalasoft.Utils.CollectionChangedEventArgs</a>
            containing information about the change.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1" />.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index;Invalid index for this collection.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Invalid object passed into the AnnotationDataCollection.</exception>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationDataCollection`1.PropertyChanging">
            <summary>Raised before a property is changed.</summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationDataCollection`1.AnnotationControllerNotification">
            <summary>Raised after a property has been changed.</summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationDataCollection`1.CollectionChanged">
            <summary>Raised when the collection has changed.</summary>
            <remarks>This event will be raised when items are added, inserted and removed.</remarks>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationFont">
            <summary>
            This class represents a font used with annotations.
            </summary>
            <example>
                The following example prepares an AnnotationViewer to create a new
                TextAnnotation with a Times
                New Roman font.
                <code lang="CS">
            AnnotationFont font = new AnnotationFont("Times New Roman", 16);
            TextAnnotation txt = new TextAnnotation("My New TextAnnotation", font);
            this.annotateViewer1.Annotations.CreateAnnotation(txt);
                </code>
            	<code lang="VB">
            Dim font As AnnotationFont =  New AnnotationFont("Times New Roman",16) 
            Dim txt As TextAnnotation =  New TextAnnotation("My New TextAnnotation",font) 
            Me.annotateViewer1.Annotations.CreateAnnotation(txt)
                </code>
            </example>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotationFont&quot;]/*"/>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationFont.FallbackFontName">
            <summary> The <STRONG>FallbackFontName</STRONG> is used when a deserialized or requested font does not exist on the
            system. </summary>
            <value> The font used as a fallback when a deserialized font does not exist on the system. </value>
            <remarks> If <STRONG>FallbackFontName</STRONG> is null (Nothing in VB) the
            <STRONG>System.Drawing.FontFamily.GenericSansSerif</STRONG> font will be used. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> of type Arial and size 12. </summary>
            <overloads> Constructs an <STRONG>AnnotationFont</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor(System.String,System.Single)">
            <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> specifying the font name and size. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the 'fontName' is null (Nothing in VB) or an empty string. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the 'size' argument is less than or equal to 0. </exception>
            <param name="fontName"> The name of the font. </param>
            <param name="size"> The size of the font. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> specifying the font parameters. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the 'fontName' argument is null (Nothing in VB) or an empty string. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the 'size' argument is less than or equal to 0. </exception>
            <param name="fontName"> The name of the font. </param>
            <param name="size"> The size of the font. </param>
            <param name="bold"> Indicates if this font is bold. </param>
            <param name="italic"> Indicates if this font is italic. </param>
            <param name="underline"> Indicates if this font is underlined. </param>
            <param name="strikeout"> Indicates if this font has a strikeout. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> from serialized data. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the 'info' argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing font data. </param>
            <param name="context"> A StreamingContext for this data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.Clone">
            <summary> Creates a copy of this <STRONG>AnnotationFont</STRONG>. </summary>
            <returns> A clone of this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this <STRONG>AnnotationFont</STRONG>. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the 'info' object is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object where data will be filled. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary> Called to notify the AnnotationController about a property change. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> specifying the property that was
            modified. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary> Called before a property has been changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> specifying the property that is being
            modified. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
            <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationFont.PropertyChanged"/>
            event. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.ToString">
            <summary> Returns a string representation of this object. </summary>
            <returns> A string containing the font name, size and attributes. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.Equals(System.Object)">
            <summary> Compares the <STRONG>AnnotationFont</STRONG> with another to see if they are equal. </summary>
            <returns> <STRONG>True</STRONG> if they are equal. </returns>
            <param name="obj"> The <STRONG>AnnotationFont</STRONG> to compare against. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationFont.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationFont.AnnotationControllerNotification">
            <summary> Raised after a property of the <STRONG>AnnotationFont </STRONG>is modified. </summary>
            <remarks> Primarily this event is used for internal notification of property changes. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationFont.PropertyChanging">
            <summary> Raised just before a property is about to be modified. </summary>
            <remarks> Primarily this event is used for internal notification of property changes. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationFont.PropertyChanged">
            <summary> Raised when a property value has changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationFont.CharSet">
            <summary> Gets or sets the character set for this font. </summary>
            <value> The font character set. </value>
            <remarks> This property takes a value from the list defined in the platform SDK header file WinGDI.h. The default
            value is zero, which will use the system's default character set. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationFont.Bold">
            <summary> Gets or sets a value indicating whether the font is <STRONG>bold</STRONG>. </summary>
            <value> Indicates if the font is bold type. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationFont.Name">
            <summary> Gets or sets the name of the font. </summary>
            <value> <para>The font name, such as "Arial" or "Times New Roman".</para> </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationFont.Italic">
            <summary> Gets or sets a value indicating whether the font is <EM>italic</EM>. </summary>
            <value> Indicates if the font is italic type. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationFont.Size">
            <summary> Gets or sets the size of the font in points. </summary>
            <value> The point size of the font. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationFont.Strikeout">
            <summary> Gets or sets a value indicating whether the font has a strikeout. </summary>
            <value> Indicates if the font has a strikeout (line through it). </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationFont.Underline">
            <summary> Gets or sets a value indicating whether the font is <U>underlined</U>. </summary>
            <value> Indicates if the font is <U>underlined</U>. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationImage">
            <summary> This class represents an image object used by <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> and <see cref="T:Atalasoft.Annotate.EmbeddedImageData"/> classes. </summary>
            <remarks> <para>The properties of this class describe the image data, allowing the image data to be read by any
            application into a format it requires.</para>
            <para>The <see cref="P:Atalasoft.Annotate.AnnotationImage.ImageObject"/> property is used to store the actual image created from these
            property values. Our default implementation will create a <STRONG>System.Drawing.Imaging.Image</STRONG> object.
            Inheritors should override the <see cref="M:Atalasoft.Annotate.AnnotationImage.OnCreateImageObject"/> method to generate the image
            object.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor">
            <summary> Creates a new empty instance of <STRONG>AnnotationImage</STRONG>. </summary>
            <remarks> This constructor should only be used by inheritors that require custom image data. </remarks>
            <overloads> Constructs an <STRONG>AnnotationImage</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> from the specified file. </summary>
            <param name="fileName"> The filename of the image to load. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.IO.Stream)">
            <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> from the specified stream. </summary>
            <param name="stream"> A stream containing the image to load. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Drawing.Image)">
            <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the
            <STRONG>System.Drawing.Image</STRONG> object used. </summary>
            <param name="image"> A <STRONG>System.Drawing.Image</STRONG> object for this class. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the
            <STRONG>Atalasoft.Imaging.AtalaImage</STRONG> object used. </summary>
            <param name="image"> A <STRONG>Atalasoft.Imaging.AtalaImage</STRONG> object for this class. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the width, height, bit count and
            image data. </summary>
            <param name="width"> The width of the image. </param>
            <param name="height"> The height of the image. </param>
            <param name="bitCount"> The bit count of the image. </param>
            <param name="imageData"> A byte array containing the image data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[])">
            <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the width, height, bit count, image
            and palette data. </summary>
            <param name="width"> The width of the image. </param>
            <param name="height"> The height of the image. </param>
            <param name="bitCount"> The bit count of the image. </param>
            <param name="imageData"> A byte array containing the image data. </param>
            <param name="palette"> A byte array containing the palette data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[],System.Single,System.Single)">
            <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the image properties. </summary>
            <param name="width"> The width of the image. </param>
            <param name="height"> <para>The height of the image.</para> </param>
            <param name="bitCount"> The bit count of the image. </param>
            <param name="imageData"> A byte array containing the image data. </param>
            <param name="palette"> A byte array containing the palette data or null if a palette is not required. </param>
            <param name="dpiX"> The horizontal resolution of the image. </param>
            <param name="dpiY"> The vertical resolution of the image. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> from serialized data. </summary>
            <param name="info"> The SerializationInfo object containing <STRONG>AnnotationImage</STRONG> information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.AnnotationImage"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with image data. </summary>
            <param name="info"> The SerializationInfo object where data will the stored. </param>
            <param name="context"> A StreamingContext for this image. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.OnCreateImageObject">
            <summary> Called when the <STRONG>ImageObject</STRONG> property is being requested. </summary>
            <remarks> This method will only be called if the <STRONG>ImageObject</STRONG> is null. </remarks>
            <returns> The object that will be set for the <see cref="P:Atalasoft.Annotate.AnnotationImage.ImageObject"/> property. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.Clone">
            <summary> Creates a copy of this <STRONG>AnnotationImage</STRONG>. </summary>
            <returns> A copy of this image. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.Equals(System.Object)">
            <summary> Compares this <STRONG>AnnotationImage</STRONG> with another to see if they are equal. </summary>
            <param name="obj"> The <STRONG>AnnotationImage</STRONG> to compare against. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.Dispose">
            <summary> Releases resources used by this class. </summary>
            <overloads> Releases resources used by this class. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationImage.Dispose(System.Boolean)">
            <summary> Releases resources used by this class. </summary>
            <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotationImage.Dispose"/>
            method. </param>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationImage.Disposed">
            <summary> Gets a value indicating whether this object has been disposed. </summary>
            <value> <STRONG>True</STRONG> if this object has been disposed. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationImage.Width">
            <summary> Gets the width of the image in pixels. </summary>
            <value> The image width in pixels. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationImage.Height">
            <summary> Gets the height of the image in pixels. </summary>
            <value> The image height in pixels. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationImage.BitCount">
            <summary> Gets the bit count (or bits-per-pixel) of the image. </summary>
            <value> The image bit count. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationImage.DpiX">
            <summary> Gets the horizontal resolution of the image. </summary>
            <value> The horizontal resolution in dots-per-inch. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationImage.DpiY">
            <summary> Gets the vertical resolution of the image. </summary>
            <value> The vertical resolution in dots-per-inch. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationImage.ImageData">
            <summary> Gets the image data. </summary>
            <value> A byte array containing the raw image data. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationImage.Palette">
            <summary> Gets the image palette, if any. </summary>
            <value> A byte array containing the image palette data or null if there is no palette. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationImage.ImageObject">
            <summary> Gets the actual image object for this <STRONG>AnnotationImage</STRONG>. </summary>
            <value> The image object. The DotImage implementation returns a <STRONG>System.Drawing.Image</STRONG> object.
            </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs">
            <summary> This class is used to hold information for the <see cref="E:Atalasoft.Annotate.AnnotationData.LocationChanged"/> event.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLocationChangedEventArgs._oldLocation">
            <summary> Gets the previous location of the annotation. </summary>
            <value> The previous annotation location. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLocationChangedEventArgs._newLocation">
            <summary> Gets the new location of the annotation. </summary>
            <value> The new location. </value>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLocationChangedEventArgs.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>AnnotationLocationChangedEventArgs</STRONG>. </summary>
            <param name="oldLocation"> The previous location of the annotation. </param>
            <param name="newLocation"> The new location of the annotation. </param>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationLocationChangedEventArgs.OldLocation">
            <summary> Gets the previous location of the annotation. </summary>
            <value> The previous annotation location. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationLocationChangedEventArgs.NewLocation">
            <summary> Gets the new location of the annotation. </summary>
            <value> The new location. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationLocationChangedEventHandler">
            <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.LocationChanged"/> event. </summary>
            <param name="sender"> The annotation sending this event. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information about this event.
            </param>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs">
            <summary> This class is used to hold information about the <see cref="E:Atalasoft.Annotate.AnnotationData.SizeChanged"/> event.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationSizeChangedEventArgs.#ctor(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary> Creates a new instance of <STRONG>AnnotationSizeChangedEventArgs</STRONG>. </summary>
            <param name="oldSize"> The previous size of the annotation. </param>
            <param name="newSize"> The new size of the annotation. </param>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationSizeChangedEventArgs.OldSize">
            <summary> Gets the previous size of the annotation. </summary>
            <value> The previous annotation size. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationSizeChangedEventArgs.NewSize">
            <summary> Gets the new size of the annotation. </summary>
            <value> The new annotation size. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationSizeChangedEventHandler">
            <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.SizeChanged"/> event. </summary>
            <param name="sender"> The annotation sending the event. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs"/> containing information about this event. </param>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationLock">
            <summary> This class is the default security used for annotations. It uses simple string encryption to secure
            annotations and keep users from being able to modify the data. </summary>
            <remarks> For more security a custom class can be created by implementing the <see cref="T:Atalasoft.Annotate.IAnnotationLock"/>
            interface. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.IAnnotationLock">
            <summary>
            The interface used to define the security when locking annotations is required.
            </summary>
            <summary> The interface used to define the security when locking annotations is required. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.IAnnotationLock.Lock">
            <summary>
            Locks the annotation without a password.
            </summary>
            <remarks>This is useful when there is a need to keep the object from being modified.</remarks>
            <overloads> These methods lock an annotation. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.IAnnotationLock.Lock(System.String)">
            <summary>
            Locks the annotation with a password.
            </summary>
            <param name="password">A password that will be required to unlock the annotation.</param>
            <overloads> These methods lock an annotation. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.IAnnotationLock.Unlock">
            <summary>
            Unlocks an annotation previously locked with the Lock method.
            </summary>
            <overloads> These methods unlock a previously locked annotation. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.IAnnotationLock.Unlock(System.String)">
            <summary>
            Unlocks an annotation that has be locked with a password.
            </summary>
            <param name="password">The password required to unlock the annotation.</param>
            <returns>True if the unlock was successful.</returns>
            <overloads> These methods unlock a previously locked annotation. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.IAnnotationLock.Clone">
            <summary>Creates a copy of this IAnnotationLock.</summary>
            <returns>A copy of the security lock.</returns>
            <summary> Creates a copy of this IAnnotationLock. </summary>
            <returns> A copy of the security lock. </returns>
        </member>
        <member name="P:Atalasoft.Annotate.IAnnotationLock.Locked">
            <summary>
            Gets a value indicating whether the object is currently locked.
            </summary>
            <value>Indicates if the annotation is locked.</value>
            <summary> Gets a value indicating whether the object is currently locked. </summary>
            <value> Indicates if the annotation is locked. </value>
        </member>
        <member name="P:Atalasoft.Annotate.IAnnotationLock.EncryptionKey">
            <summary>
            Gets or sets the encrypted key used to lock or unlock the annotation.
            </summary>
            <value>The encrypted key of a locked annotation.</value>
            <summary> Gets or sets the encrypted key used to lock or unlock the annotation. </summary>
            <value> The encrypted key of a locked annotation. </value>
            <remarks> This key is stored into the serialized annotation data to allow the annotations to remain locked when
            deserialized at a later time. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.IAnnotationLock.LockedImage">
            <summary>
            Gets or sets the image used to indicate that an annotation is locked.
            </summary>
            <value>The image drawn on a locked annotation.</value>
            <summary> Gets or sets the image used to indicate that an annotation is locked. </summary>
            <value> The image drawn on a locked annotation. </value>
        </member>
        <member name="E:Atalasoft.Annotate.IAnnotationLock.AnnotationControllerNotification">
            <summary>Raised after a property of the AnnotationBrush if modified.</summary>
            <remarks>
            Primarily this event is used for internal notification of property
            changes.
            </remarks>
            <summary> Raised after a property of the AnnotationBrush if modified. </summary>
            <remarks> Primarily this event is used for internal notification of property changes. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanging">
            <summary>Raised just before a property is about to be modified.</summary>
            <remarks>
            Primarily this event is used for internal notification of property
            changes.
            </remarks>
            <summary> Raised just before a property is about to be modified. </summary>
            <remarks> Primarily this event is used for internal notification of property
            changes. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanged">
            <summary> Raised when a property has been changed. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationLock</STRONG>. </summary>
            <overloads> Constructs an <STRONG>AnnotationLock</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>AnnotationLock</STRONG> whose key is the given string value </summary>
            <param name="encryptedKey"> The key used for the lock encryption. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AnnotationLock</STRONG> from serialized data. </summary>
            <param name="info"> The SerializationInfo containing the serialized data. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with <STRONG>AnnotationLock</STRONG> information. </summary>
            <param name="info"> The SerializationInfo object where the data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.Lock">
            <summary>Locks the annotation without specifying a password.</summary>
            <remarks>
            Use this method when an annotation needs to be locked to prevent users from
            modifying it rather than for security reasons. Use the
            <see cref="M:Atalasoft.Annotate.AnnotationLock.Unlock"/> method
            to disable the lock.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.Lock(System.String)">
            <summary>Locks the annotation using the specified password.</summary>
            <returns>
            Use the <see cref="M:Atalasoft.Annotate.AnnotationLock.Unlock"/> method with the same password to disable the lock.
            </returns>
            <param name="password">
            The password used to generate the <see cref="P:Atalasoft.Annotate.AnnotationLock.EncryptionKey"/>.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.Unlock">
            <summary>This method will disable the lock on a locked annotation.</summary>
            <returns><strong>True</strong> if the annotation was unlocked.</returns>
            <remarks>
            The annotation must have been locked without a password for this method to
            disable the lock. If a password was used the overload for this method that takes a
            password must be used.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.Unlock(System.String)">
            <summary>
            This method will disable the lock on an annotation that was previously locked
            with a password.
            </summary>
            <param name="password">
            The password required to unlock the annotation. This must be the same password
            used with the <see cref="M:Atalasoft.Annotate.AnnotationLock.Lock"/> method.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.Clone">
            <summary> Creates a copy of this lock. </summary>
            <returns> A copy of this <STRONG>AnnotationLock</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary> Called to notify the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> after a property has been changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> specifying the property that was
            modified. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary> Called before a property has been changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> specifying the property that is being
            modified. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLock.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
            <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationLock.PropertyChanged"/>
            event. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information for this event. </param>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationLock.AnnotationControllerNotification">
            <summary>Raised after a property of the AnnotationBrush if modified.</summary>
            <remarks>
            Primarily this event is used for internal notification of property
            changes.
            </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationLock.PropertyChanging">
            <summary>Raised just before a property is about to be modified.</summary>
            <remarks>
            Primarily this event is used for internal notification of property
            changes.
            </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationLock.PropertyChanged">
            <summary> Raised when a property value has changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationLock.Locked">
            <summary>Gets a value indicating whether or not the annotation is currently locked.</summary>
            <value>A value indicating the lock status.</value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationLock.EncryptionKey">
            <summary>Gets the encrypted key for the lock.</summary>
            <value>The encryption key.</value>
            <remarks>
            This key is stored into the serialized annotation data to allow the annotations
            to remain locked when deserialized at a later time.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationLock.LockedImage">
            <summary>Gets or sets the image displayed on the annotation when it's been locked.</summary>
            <value>The image displayed when the annotation is locked.</value>
        </member>
        <member name="T:Atalasoft.Annotate.Encrypter">
            <summary> Summary description for Encrypt. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs">
            <summary> This class provides information when the AnnotationController is sent a notification from
            another object. </summary>
            <remarks> Custom annotations can make use of this to notify the controller when it needs to invalidate or add undo
            information to the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager"/>. </remarks>
            <example> AnnotationPropertyChangingEventArgs Class </example>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification)">
            <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the type
            of notification being sent. </summary>
            <param name="notification"> The notification to send. </param>
            <overloads> Constructs an <STRONG>AnnotationControllerNotificationEventArgs</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.AnnotationRegion)">
            <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification and invalidation region to send. </summary>
            <param name="notification"> The notification to send. </param>
            <param name="invalidateRegion"> A region to invalidate. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.UI.AnnotationUndo)">
            <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification and undo to send. </summary>
            <param name="notification"> The notification to send. </param>
            <param name="undo"> An undo to add to the undo collection. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.UI.AnnotationUndo,Atalasoft.Annotate.UndoManagerAction)">
            <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, undo and special undo action. </summary>
            <param name="notification"> The notification to send. </param>
            <param name="undo"> An undo to add to the undo collection. </param>
            <param name="undoAction"> A special undo action that should be taken. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.UI.AnnotationUndo)">
            <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, invalidation region and undo to send. </summary>
            <param name="notification"> The notification to send. </param>
            <param name="invalidateRegion"> A region to invalidate. </param>
            <param name="undo"> An undo to add to the undo collection. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.UI.AnnotationUndo,Atalasoft.Annotate.UndoManagerAction)">
            <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, invalidation region, undo and a special undo action. </summary>
            <param name="notification"> The notification to send. </param>
            <param name="invalidateRegion"> A region to invalidate. </param>
            <param name="undo"> An undo to add to the undo collection. </param>
            <param name="undoAction"> A special undo action to take. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,System.Windows.Forms.Control)">
            <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification and a control to process. </summary>
            <remarks> This constructor is used by the TextAnnotation to add or remove the edit control to the <see
            cref="T:Atalasoft.DotImage.Annotate.UI.AnnotateViewer"/>. Custom annotations could use this to add any class deriving from
            <STRONG>System.Windows.Forms.Control</STRONG> to the viewer. </remarks>
            <param name="notification"> The notification to send. </param>
            <param name="control"> A control to process. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Utils.CollectionChangedEventArgs,Atalasoft.Annotate.UI.AnnotationUndo)">
            <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs"/> and an undo. </summary>
            <remarks> This constructor is used by collections to notify the controller when an
            annotation or layer has been changed. </remarks>
            <param name="notification"> The notification to send. </param>
            <param name="collectionChangedArgs"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs"/> indicating a change to a
            collection. </param>
            <param name="undo"> An undo to add to the undo collection. </param>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.Notification">
            <summary> Gets the type of notification performed on the object. </summary>
            <value> The notification performed. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.CollectionChangedArgs">
            <summary> Gets the <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs"/> containing information about the collection
            change. </summary>
            <value> A <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs"/> for this change. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.Undo">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo"/> to store into the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager"/>. </summary>
            <value> The undo for this operation. </value>
            <remarks> This property is only checked by the AnnotationController in the PropertyChanging event. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.InvalidateRegion">
            <summary> Gets or sets a region used for invalidating the parent control. </summary>
            <value> A Region to invalidate. </value>
            <remarks> This property is only checked by the AnnotationController in the
            AnnotationControllerNotification event if the Change property is RegionChange, ContentChange or SelectionChange.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.Control">
            <summary> Gets a <STRONG>System.Windows.Forms.Control</STRONG> object used with this notification. </summary>
            <value> A control used with this notification. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.UndoAction">
            <summary> Gets a special undo action to send to the undo manager. </summary>
            <value> The undo action provided to the undo manager. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationControllerNotificationEventHandler">
            <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.AnnotationControllerNotification"/> event to send
            information to the AnnotationController. </summary>
            <param name="sender"> The object sending this notification. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> containing information for this event.
            </param>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs">
            <summary>
            This class hold information about a
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~PropertyChanging_EV.html">PropertyChanging</a>
            event.
            </summary>
            <summary> This class hold information about a <see cref="E:Atalasoft.Annotate.AnnotationData.PropertyChanging"/> event. </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotationPropertyChangingEventArgs&quot;]/*"/>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.#ctor(System.Object,System.String,System.Object,System.Object)">
            <summary> Creates a new instance of <STRONG>AnnotationPropertyChangingEventArgs</STRONG>. </summary>
            <param name="sender"> The object sending this event. </param>
            <param name="propertyName"> The name of the property being changed. </param>
            <param name="currentValue"> The current value of the property. </param>
            <param name="newValue"> The new value of the property. </param>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.Sender">
            <summary> Gets the object that raised the event. </summary>
            <value> The object that raised the event. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.PropertyName">
            <summary> Gets the name of the property that is being changed. </summary>
            <value> The name of the property. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.CurrentValue">
            <summary> Gets the current value of the property. </summary>
            <value> The current value of the property. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.NewValue">
            <summary> Gets or sets the new value for the property. </summary>
            <value> The new property value. </value>
            <remarks> This property can be set to a different value if the new value provided is not valid. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.Cancel">
            <summary> Gets or sets a value indicating whether this change should be accepted. </summary>
            <value> A value indicating whether this property change will be accepted. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationPropertyChangingEventHandler">
            <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.PropertyChanging"/> event. </summary>
            <param name="sender"> The object sending the event. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> containing information about this event.
            </param>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs">
            <summary> Contains information for a property changed event. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary> Creates a new instance of <STRONG>AnnotationPropertyChangedEventArgs</STRONG>. </summary>
            <param name="propertyName"> The name of the property that has been changed. </param>
            <param name="oldValue"> The previous value of the property. </param>
            <param name="newValue"> The new value of the property. </param>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.PropertyName">
            <summary> Gets the name of the property. </summary>
            <value> The name of the property. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.OldValue">
            <summary> Gets the old value of the property. </summary>
            <value> The old value of the property. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.NewValue">
            <summary> Gets the new value of the property. </summary>
            <value> The new value of the property. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationPropertyChangedEventHandler">
            <summary> This delegate is used for the <STRONG>PropertyChanged</STRONG> event. </summary>
            <param name="sender"> The object that is affected. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs"/> containing information for the property change.
            </param>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationEventArgs">
            <summary> This class provides information for events that involve an annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationEventArgs._annotation">
            <summary> Gets the annotation this event relates to. </summary>
            <value> The annotation for this event. </value>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationUI)">
            <summary> Creates a new instance of <STRONG>AnnotationEventArgs</STRONG>. </summary>
            <param name="annotation"> The annotation this event relates to. </param>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationEventArgs.Annotation">
            <summary> Gets the annotation this event relates to. </summary>
            <value> The annotation for this event. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationEventHandler">
            <summary> This delegate is used for various events that apply to an annotation. </summary>
            <param name="sender"> The object sending the event. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs"/> containing the annotation for the event. </param>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationPen">
            <summary> This class represents a pen object used for drawing lines of annotations.</summary>
            <remarks> The IAnnotationRenderer for each annotation will use this information to construct a pen or
            equivalent for the drawing environment of its choice. </remarks>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotationPen&quot;]/*"/>
            <example>
                The code below creates a RectangleAnnotation with a black 1 pixel border.
                <code lang="CS" title="CreateRectAnn">
            RectangleAnnotation rect = new RectangleAnnotation(RectangleF.Empty, new AnnotationBrush(Color.Red), new AnnotationPen(Color.Black, 1));
            ((RectangleGrips)rect.Grips).GripsToDisplay = RectangleGripDisplay.Both;
            this.annotateViewer1.Annotations.CreateAnnotation(rect);
                </code>
            	<code lang="VB" title="CreateRectAnn">
            Dim rect As RectangleAnnotation =  New RectangleAnnotation(RectangleF.Empty,New AnnotationBrush(Color.Red),New AnnotationPen(Color.Black,1)) 
            ((RectangleGrips)rect.Grips).GripsToDisplay = RectangleGripDisplay.Both
            Me.annotateViewer1.Annotations.CreateAnnotation(rect)
                </code>
            </example>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> from an <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> object.
            </summary>
            <exception> Thrown if the brush parameter is null. </exception>
            <param name="brush"> An <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the pen object. </param>
            <overloads> Constructs an <STRONG>AnnotationPen</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> specifying the color of the pen. </summary>
            <remarks> The AnnotationPen will have a width of 1 when no width if provided. </remarks>
            <param name="color"> The color for this pen. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(Atalasoft.Annotate.AnnotationBrush,System.Single)">
            <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> specifying the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> and
            pen width. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the brush parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the width parameter is not greater than zero.</exception>
            <param name="brush"> An <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the pen object. </param>
            <param name="width"> The width of the pen. This value must be greater than zero. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(System.Drawing.Color,System.Single)">
            <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> specifying the color and width of the pen.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the width parameter is not greater than zero.</exception>
            <param name="color"> The color for the pen. </param>
            <param name="width"> The width of the pen. This value must be greater than zero. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> from serialized data. </summary>
            <param name="info"> The SerializationInfo object containing information about the pen. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.SetLineCapEvents(Atalasoft.Annotate.AnnotationLineCap)">
            <summary> This is a helper method used to add event handling to an <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/>. </summary>
            <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> to process. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.RemoveLineCapEvents(Atalasoft.Annotate.AnnotationLineCap)">
            <summary> This is a helper method used to remove event handler for an <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> object.
            </summary>
            <seealso cref="M:Atalasoft.Annotate.AnnotationPen.SetLineCapEvents(Atalasoft.Annotate.AnnotationLineCap)"/>
            <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> to process. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this <STRONG>AnnotationPen</STRONG>. </summary>
            <param name="info"> The SerializationInfo object where the information will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.Clone">
            <summary> Creates a copy of this <STRONG>AnnotationPen</STRONG>. </summary>
            <returns> A copy of the <STRONG>AnnotationPen</STRONG> object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary> Called to notify the AnnotationController after a property has been changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> specifying the property that was
            modified. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary> Called before a property is changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> specifying the property that is being
            modified. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
            <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationPen.PropertyChanged"/> event.
            </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.ToString">
            <summary> Returns a string representation of this object. </summary>
            <returns> A string representation of this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.Equals(System.Object)">
            <summary> Compares this <STRONG>AnnotationPen</STRONG> with another to test if they are equal. </summary>
            <returns> <STRONG>True</STRONG> if they are equal. </returns>
            <param name="obj"> The <STRONG>AnnotationPen</STRONG> to compare against. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationPen.GetHashCode">
            <summary> Returns an identifier for this object. </summary>
            <returns> A value representing this object. </returns>
            <remarks> This value is not guaranteed to be unique, but the same object instance will always return the same hash
            value. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationPen.AnnotationControllerNotification">
            <summary> Raised after a property of the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> if modified. </summary>
            <remarks> Primarily this event is used for internal notification of property changes. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationPen.PropertyChanging">
            <summary> Raised just before a property is about to be modified. </summary>
            <remarks> Primarily this event is used for internal notification of property changes. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationPen.PropertyChanged">
            <summary> Raised when a property value has changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.DashPattern">
            <summary> Gets or sets the dash pattern used </summary>
            <value> <para>The dash pattern for the pen</para> </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.Color">
            <summary> Gets or sets the color for the pen. </summary>
            <value> The pen color. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.Width">
            <summary> Gets or sets the width of the pen. </summary>
            <value> The pen width. This value must be greater than zero. </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if this property is set to a value less than or equal to zero.</exception>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.Alignment">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationPenAlignment"/> for the pen. </summary>
            <value> The pen alignment. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.DashCap">
            <summary> Gets or sets the <see cref="P:Atalasoft.Annotate.AnnotationPen.DashCap"/>  used at the end of the dashes that make up dashed lines drawn
            with this pen. </summary>
            <value> The pen dash cap. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.DashOffset">
            <summary> Gets or sets the distance from the start of a line to the beginning of a dash pattern. </summary>
            <value> The pen dash offset. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.DashStyle">
            <summary> Gets or sets the style used for dashed lines drawn with this pen. </summary>
            <value> The dash style for the pen. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.EndCap">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> used at the end of lines drawn with this pen. </summary>
            <value> The pen end cap. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.LineJoin">
            <summary> Gets or sets the join style for the ends of two consecutive lines drawn with this pen. </summary>
            <value> The line join style for the pen. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.MiterLimit">
            <summary> Gets or sets the limit of the thickness of the join on a mitered corner. </summary>
            <value> The miter limit of the pen. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.StartCap">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> used at the beginning of lines drawn with this pen. </summary>
            <value> The pen start cap. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationPen.Brush">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to describe this pen. </summary>
            <value> The brush used by this pen. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationLineCap">
            <summary> This class is used to define a line cap used for <see cref="T:Atalasoft.Annotate.AnnotationPen"/> objects. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCap._style">
            <summary> Gets or sets the style of the line cap. </summary>
            <value> The style of the line cap. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCap._size">
            <summary> Gets or sets the size of the line cap. </summary>
            <value> The size of the line cap. </value>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCap._renderOffset">
            <summary> Gets the offset from the line point to the top-left of the bounding rectangle for the line cap. </summary>
            <value> The offset of the bounding rectangle from the line cap position. </value>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationLineCap</STRONG>. </summary>
            <overloads> Constructs an <STRONG>AnnotationLineCap</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.#ctor(Atalasoft.Annotate.AnnotationLineCapStyle,System.Drawing.SizeF)">
            <summary> Creates a new instance of <STRONG>AnnotationLineCap</STRONG> specifying the style and size. </summary>
            <param name="style"> The style of the line cap. </param>
            <param name="size"> The size of the line cap. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AnnotationLineCap</STRONG> from serialized information. </summary>
            <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information about this object. </param>
            <param name="context"> A <STRONG>StreamingContext</STRONG> for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with properties values for the <STRONG>AnnoationLineCap</STRONG> class.
            </summary>
            <param name="info"> The SerializationInfo object where data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.Clone">
            <summary> Creates a copy of this <STRONG>AnnotationLineCap</STRONG>. </summary>
            <returns> A copy of the <STRONG>AnnotationLineCap</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary> Called when a notification is being sent to the AnnotationController. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> containing information for this event.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary> Called when a property value changes. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> containing information about the changed
            property. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
            <summary> Called when a property value has changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs"/> containing information about this change.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.Equals(System.Object)">
            <summary> Compares one <STRONG>AnnotationLineCap</STRONG> with another to determine of that contain the same
            property values. </summary>
            <param name="obj"> The <STRONG>AnnotationLineCap</STRONG> to compare against. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationLineCap.GetHashCode">
            <summary> Returns an identifier for this object. </summary>
            <returns> A value representing this object. </returns>
            <remarks> This value is not guaranteed to be unique, but the same object instance will always return the same hash
            value. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationLineCap.PropertyChanging">
            <summary> Raised when a property value has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationLineCap.AnnotationControllerNotification">
            <summary> Raised when a notification must be sent to the AnnotationController. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.AnnotationLineCap.PropertyChanged">
            <summary> Raised when a property value has changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationLineCap.Style">
            <summary> Gets or sets the style of the line cap. </summary>
            <value> The style of the line cap. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationLineCap.Size">
            <summary> Gets or sets the size of the line cap. </summary>
            <value> The size of the line cap. </value>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationLineCap.RenderOffset">
            <summary> Gets the offset from the line point to the top-left of the bounding rectangle for the line cap. </summary>
            <value> The offset of the bounding rectangle from the line cap position. </value>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationLineCapStyle">
            <summary> Specifies the type of line cap for a <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> object. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.None">
            <summary> No line cap is drawn. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Arrow">
            <summary> A simple thin line arrow. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledArrow">
            <summary> A filled arrow. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ClosedArrow">
            <summary> A closed arrow that is not filled. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Ellipse">
            <summary> An ellipse is drawn. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledEllipse">
            <summary> A filled ellipse is drawn. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Rectangle">
            <summary> A rectangle is drawn. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledRectangle">
            <summary> A filled rectangle is drawn. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Diamond">
            <summary> A diamond is drawn. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledDiamond">
            <summary> A filled diamond is drawn. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ReversedArrow">
            <summary> An arrow pointing in toward the line is drawn </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ReversedClosedArrow">
            <summary> A closed arrow pointing in toward the line is drawn </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ReversedFilledArrow">
            <summary> A filled, closed array is drawn pointing in toward the line is drawn </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Butt">
            <summary> A line perpendicular to the line is drawn </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Slash">
            <summary> A hash line is drawn </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationRegion">
            <summary> This class defines a display region used for hit testing. </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotationRegion&quot;]/*"/>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.AnnotationRegion&quot;]/*"/>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationRegion._path">
            <summary> The <STRONG>GraphicsPath</STRONG> used by the <STRONG>AnnotationRegion</STRONG>. </summary>
            <value> The <STRONG>GraphicsPath</STRONG> object containing the region information. </value>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationRegion</STRONG> with an empty region. </summary>
            <overloads> Constructs an <STRONG>AnnotationRegion</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.#ctor(System.Drawing.RectangleF)">
            <summary> Creates a new instance of <STRONG>AnnotationRegion</STRONG> from a rectangle. </summary>
            <param name="rectangle"> A rectangle used to define the initial region. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary> Creates a new instance of <STRONG>AnnotationRegion</STRONG> specifying a <STRONG>GraphicsPath</STRONG> for
            the region. </summary>
            <param name="path"> The <STRONG>GraphicsPath</STRONG> used by the region.  This <STRONG>GraphicsPath</STRONG>
            becomes the property of the <STRONG>AnnotationRegion</STRONG> and will automatically be disposed when the
            <STRONG>AnnotationRegion</STRONG> is disposed. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.AnnotationRegion"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.Dispose">
            <summary> Releases region resources. </summary>
            <overloads> Releases resources used by the <STRONG>AnnotationRegion</STRONG> class. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.Dispose(System.Boolean)">
            <summary> Releases resources used by the region. </summary>
            <param name="disposing"> A value indicating whether this method was call from the public <see cref="M:Atalasoft.Annotate.AnnotationRegion.Dispose"/> method. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.GetRegion">
            <summary> Returns a .NET Region for this object. </summary>
            <returns> A .NET Region object containing the <STRONG>AnnotationRegion</STRONG> area. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.Invalidate(System.Windows.Forms.Control)">
            <summary> Applies this region to a control's invalidation region. </summary>
            <param name="control"> The control to apply the invalidate to. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.IsVisible(System.Drawing.PointF)">
            <summary> Tests if a point is inside this region. </summary>
            <returns> <STRONG>True</STRONG> if the point is within this region. </returns>
            <param name="point"> The point to test. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(System.Drawing.Rectangle)">
            <summary> Performs a union of the supplied rectangle and the existing region. </summary>
            <param name="rectangle"> The rectangle to apply. </param>
            <overloads> This methods are used to combine areas to this region. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(System.Drawing.RectangleF)">
            <summary> Performs a union of the supplied <STRONG>RectangleF</STRONG> and the existing region. </summary>
            <param name="rectangle"> The RectangleF to apply. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(System.Drawing.Drawing2D.GraphicsPath)">
            <summary> Performs a union of the supplied <STRONG>GraphcisPath </STRONG>and the existing region. </summary>
            <param name="path"> The <STRONG>GraphicsPath</STRONG> to apply. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(Atalasoft.Annotate.AnnotationRegion)">
            <summary> Performs a union of the supplied <STRONG>AnnotationRegion</STRONG> and the existing region. </summary>
            <param name="region"> The <STRONG>AnnotationRegion</STRONG> to apply. </param>
        </member>
        <member name="M:Atalasoft.Annotate.AnnotationRegion.Transform(System.Drawing.Drawing2D.Matrix)">
            <summary> Applies a transformation matrix to this region. </summary>
            <param name="matrix"> The matrix to apply. </param>
        </member>
        <member name="P:Atalasoft.Annotate.AnnotationRegion.Path">
            <summary> The <STRONG>GraphicsPath</STRONG> used by the <STRONG>AnnotationRegion</STRONG>. </summary>
            <value> The <STRONG>GraphicsPath</STRONG> object containing the region information. </value>
        </member>
        <member name="T:Atalasoft.Annotate.CalloutData">
            <summary> Callout data used with the CalloutAnnotation. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.#ctor">
            <summary> Creates a new instance of <STRONG>CalloutData</STRONG>. </summary>
            <overloads> Creates a new instance of the <STRONG>CalloutData</STRONG> object. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying the text for the annotation. </summary>
            <param name="text"> The text for the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single)">
            <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying the text, font, font brush and padding
            for the annotation. </summary>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
            <param name="fontBrush"> The brush used to render the text. </param>
            <param name="padding"> The padding around the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single)">
            <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying the text, font, font brush, padding,
            outline and line pen. </summary>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
            <param name="fontBrush"> The brush used to render the text. </param>
            <param name="padding"> The padding around the text. </param>
            <param name="fill"> The brush used to fill the text area of the annotation. </param>
            <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
            <param name="leader"> The pen used to render the line of the annotation. </param>
            <param name="leaderFlatLength"> The distance from the leader will stick out from the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single,System.Drawing.PointF,System.Boolean)">
            <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying its parameters. </summary>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
            <param name="fontBrush"> The brush used to render the text. </param>
            <param name="padding"> The padding around the text. </param>
            <param name="fill"> The brush used to fill the text area of the annotation. </param>
            <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
            <param name="leader"> The pen used to render the line of the annotation. </param>
            <param name="leaderFlatLength"> The distance the leader will stick out from the annotation. </param>
            <param name="targetPosition"> The document position the line will point to. </param>
            <param name="autoSize"> Indicates whether the annotation will automatically resize to fit the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>CalloutData</STRONG> from serialized information. </summary>
            <param name="info"> A SerializationInfo object containing the annotation data information. </param>
            <param name="context"> A StreamingContext for this data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.Clone">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.Clone" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.GetLineCapBounds">
            <summary>
            Called to get the rectangle bounds of the line cap used in an <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/>.
            </summary>
            <returns>
            The bounds for the line cap.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.CalloutData.GetLeaderPoints">
            <summary> Returns an array of points used for rendering the callout leader line. </summary>
            <returns> An array of points for the leader line. </returns>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.Text">
            <summary> Gets or sets the text of the annotation. </summary>
            <value> The text of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.Font">
            <summary> Gets or sets the font used to render the text. </summary>
            <value> The font used to render the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.FontBrush">
            <summary> Gets or sets the brush used to render the text. </summary>
            <value> The brush used to render the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.Padding">
            <summary> Gets or sets the amount of padding to add around the text. </summary>
            <value> The padding around the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.Fill">
            <summary> Gets or sets the brush used to fill the text area of the annotation. </summary>
            <value> The brush used to fill the text area. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.Outline">
            <summary> Gets or sets the pen used to outline the text area of the annotation. </summary>
            <value> The pen used for the text area outline. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.LeaderFlatLength">
            <summary> Gets or sets the length of the leader line. </summary>
            <value> The length of the leader line. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.Leader">
            <summary> Gets or sets the pen used for the leader of the annotation. </summary>
            <value> The pen used for the leader. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.TargetPosition">
            <summary> Gets or sets the position on the document the leader will point to. </summary>
            <value> The position on the document this callout will point to. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.AutoSize">
            <summary> Gets or sets a value indicating whether the annotation will automatically resize to fit the text.
            </summary>
            <value> A value indicating whether the annotation will resize to fit the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.FormatFlags">
            <summary> Gets or sets a <STRONG>StringFormatFlags</STRONG> enumeration that contains formatting information.
            </summary>
            <value> Formatting for the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.Trimming">
            <summary> Get or sets the type of character trimming to perform on the text. </summary>
            <value> Specifies how to trim characters from a string that does not completely fit into a layout shape. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.LineAlignment">
            <summary> Gets or sets the line alignment. </summary>
            <value> The line alignment. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.Alignment">
            <summary> Gets or sets the horizontal alignment of the text. </summary>
            <value> The horizontal text alignment. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.AllowEditing">
            <summary> <para>Gets or sets a value indicating whether the annotation's text data should be editable or
            read-only.</para> </summary>
            <value> <para>Indicates whether the annotation's text data should be editable or read-only.</para> </value>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.CalloutData.AnnotationBounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.AnnotationBounds" filter=""/>
        </member>
        <member name="T:Atalasoft.Annotate.CommentData">
            <summary> The <STRONG>CommentData</STRONG> class is used for adding comments to other annotations, but it can also
            be used standalone. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.TextData">
            <summary> Data for a TextAnnotation. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.IWangCompatible">
            <summary>
            This interface is used to indicate that an AnnotationData object is WANG
            compatible.
            </summary>
            <remarks>
            	<para>The WangFormatter will only convert AnnotationData objects that implement the
                IWangCompatible interface. Below is a list of classes which implement this
                interface:</para>
            	<list type="bullet">
            		<item>EmbeddedImageData</item>
            		<item>FreehandData</item>
            		<item>LineData</item>
            		<item>LinesData</item>
            		<item>RectangleData</item>
            		<item>ReferencedImageData</item>
            		<item>TextData</item>
            	</list>
            	<para class="xmldocbulletlist"></para>
            	<para><strong>Note to implementors:</strong><br/>
                In addition to the GetWangAttributeData method there must be a constructor that
                takes a WangAttributeData object in the class to allow the WangFormatter to
                deserialize the data.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.IWangCompatible.GetWangAttributeData">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing information about the annotation to be
            formatted as WANG data. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing the information required to generate WANG data.
            </returns>
            <remarks> <para>The WangFormatter will call this method when serializing the AnnotationData.</para>
            <para><STRONG>Note to implementors:</STRONG>,<BR/>In addition to the GetWangAttributeData method there must be a
            constructor that takes a WangAttributeData object in the class to allow the WangFormatter to deserialize the
            data.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor">
            <summary> Creates a new instance of <STRONG>TextData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>TextData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the annotation text. </summary>
            <param name="text"> The text for the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text and font. </summary>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the properties for this object. </summary>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="shadowMode"> Defines the type of shadow to apply. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the annotation location and size.
            </summary>
            <param name="bounds"> The location and size of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the annotation text. </summary>
            <param name="bounds"> The location and size of the annotation. </param>
            <param name="text"> The text for the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text and font. </summary>
            <param name="bounds"> The location and size of the annotation. </param>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
            <param name="bounds"> The location and size of the annotation. </param>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the properties for this object. </summary>
            <param name="bounds"> The location and size of the annotation. </param>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="shadowMode"> Defines the type of shadow to apply. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> from serialized information. </summary>
            <param name="info"> The <STRONG>SerializationInfo</STRONG> object containing information for this object. </param>
            <param name="context"> A <STRONG>StreamingContext</STRONG> for the information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.#ctor(Atalasoft.Annotate.WangAttributeData)">
            <summary> Creates a new instance of <STRONG>TextData</STRONG> from WANG annotation information. </summary>
            <remarks> The <see cref="T:Atalasoft.Annotate.WangAttributeData"/> must have the Bounds, Font, Text and Color1 properties set. If the
            annotation type is Attach-a-Note the Color2 property must also be set. </remarks>
            <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing information about this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this object. </summary>
            <param name="info"> The SerializationInfo object where the information will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>Creates a copy of this TextData.</summary>
            <returns>A copy of this annotation data.</returns>
            
        </member>
        <member name="M:Atalasoft.Annotate.TextData.Clone">
            <summary> Creates a copy of this <STRONG>TextData</STRONG>. </summary>
            <returns> A copy of this annotation data. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.Equals(System.Object)">
            <summary> Determines if another <STRONG>TextData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>TextData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.TextData.GetWangAttributeData">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> containing information about this <STRONG>TextData</STRONG>.
            </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for this annotation. </returns>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Minimized">
            <summary> Gets or sets a value indicating whether the annotation is minimized. </summary>
            <value> A value indicating whether the annotation is minimized. </value>
            <remarks> This feature may not be implemented by all viewers. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.RenderingHint">
            <summary> Gets or sets the System.Drawing.Text.TextRenderingHint used when rendering this text
            </summary>
            <value> The current System.Drawing.Text.TextRenderingHint setting</value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.AutoSize">
            <summary> Gets or sets a value indicating whether the annotation will automatically resize to fit the text.
            </summary>
            <value> A value indicating whether the annotation will resize to fit the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.ShadowMode">
            <summary> Gets or sets the shadow mode used to indicate how the shadow is drawn. </summary>
            <value> A value indicating how the shadow is drawn. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Padding">
            <summary> Gets or sets a value indicating how much padding is added around the text. </summary>
            <value> A value indicating the amount of padding to add around the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.FormatFlags">
            <summary> Gets or sets a <STRONG>StringFormatFlags</STRONG> enumeration that contains formatting information.
            </summary>
            <value> Formatting for the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Trimming">
            <summary> Get or sets the type of character trimming to perform on the text. </summary>
            <value> Specifies how to trim characters from a string that does not completely fit into a layout shape. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.LineAlignment">
            <summary> Gets or sets the line alignment. </summary>
            <value> The line alignment. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Alignment">
            <summary> Gets or sets the horizontal alignment of the text. </summary>
            <value> The horizontal text alignment. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Text">
            <summary> Gets or sets the text for this annotation. </summary>
            <value> The annotation text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.FontBrush">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the font. </summary>
            <value> The brush used when rendering the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Font">
            <summary> Gets or sets the font for the text. </summary>
            <value> The font used when rendering the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used draw the drop shadow. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Fill">
            <summary> Gets or sets the fill used for the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.Outline">
            <summary> Gets or sets the outline of the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.ShadowOffset">
            <summary> Gets or sets the shadow offset. </summary>
            <value> The offset used to specifying the position of the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.TextData.AllowEditing">
            <summary> <para>Gets or sets a value indicating whether the annotation's text data should be editable or read-only
            via the user interface.</para> </summary>
            <value> <para>Indicates whether the annotation's text data should be editable or read-only.</para> </value>
        </member>
        <member name="T:Atalasoft.Annotate.IAttachableAnnotation">
            <summary> This interface is implemented by annotation data classes, such as CommentData, that can be
            attached to other annotations. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.IAttachableAnnotation.Parent">
            <summary> Gets or sets the annotation this annotation is attached to, if any. </summary>
            <value> The annotation this annotation is attached to or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if
            it is a standalone annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.IAttachableAnnotation.Guid">
            <summary> Gets a <STRONG>Guid</STRONG> used to identify the annotation. </summary>
            <value> A <STRONG>Guid</STRONG> used to identify the annotation. </value>
        </member>
        <member name="F:Atalasoft.Annotate.CommentData._replies">
            <summary> Gets a list of <STRONG>CommentData</STRONG> replies. </summary>
            <value> A list of replies to this comment. </value>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG>. </summary>
            <overloads> Constructs a new <STRONG>CommentData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the annotation text. </summary>
            <param name="text"> The text for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text and font. </summary>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the properties for this object.
            </summary>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="shadowMode"> Defines the type of shadow to apply. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the annotation location and size.
            </summary>
            <param name="bounds"> The location and size of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the annotation text. </summary>
            <param name="bounds"> The location and size of the annotation. </param>
            <param name="text"> The text for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text and font. </summary>
            <param name="bounds"> The location and size of the annotation. </param>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
            <param name="bounds"> The location and size of the annotation. </param>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the properties for this object.
            </summary>
            <param name="bounds"> The location and size of the annotation. </param>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="shadowMode"> Defines the type of shadow to apply. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(Atalasoft.Annotate.WangAttributeData)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> from WANG annotation information. </summary>
            <remarks> WANG does not support comments.  This constructor only exists to insure initialization of the annotation.
            </remarks>
            <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing information about this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>CommentData</STRONG> from serialized information. </summary>
            <param name="info"> The <STRONG>SerializationInfo</STRONG> object containing information for this object. </param>
            <param name="context"> A <STRONG>StreamingContext</STRONG> for the information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Creates a copy of this TextData.
            </summary>
            <param name="data"></param>
            <exception cref="T:System.Exception">Unexpected exception - cloned child added to comment collection has incorrect parent.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.Clone">
            <summary>
            Creates a copy of this <STRONG>TextData</STRONG>.
            </summary>
            <returns>
            A copy of this annotation data.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.CommentData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.CommentData.Guid">
            <summary>
            Gets a <STRONG>Guid</STRONG> used to identify the annotation.
            </summary>
            <value>
            A <STRONG>Guid</STRONG> used to identify the annotation.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.CommentData.Replies">
            <summary> Gets a list of <STRONG>CommentData</STRONG> replies. </summary>
            <value> A list of replies to this comment. </value>
        </member>
        <member name="P:Atalasoft.Annotate.CommentData.Parent">
            <summary>
            Gets or sets the annotation this annotation is attached to, if any.
            </summary>
            <value>
            The annotation this annotation is attached to or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if
            it is a standalone annotation.
            </value>
        </member>
        <member name="T:Atalasoft.Annotate.CommonCode">
            <summary> Contains static methods used by multiple classes. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.CommonCode.ColorEquals(System.Drawing.Color,System.Drawing.Color)">
            <summary> Compares the ARGB values of two colors are returns true if they are the same. </summary>
            <returns> True if the ARGB values are the same. </returns>
            <remarks> This method is required because using == or the Equals method of
            a Color structure may return false when they are the same. </remarks>
            <param name="clr1"> First color to compare. </param>
            <param name="clr2"> Second color to compare against. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommonCode.CorrectNegativeValues(System.Drawing.RectangleF@)">
            <summary> Corrects a rectangle that may have a negative width or height by modifying the X
            and Y values. </summary>
            <param name="rectangle"> The rectangle to correct. </param>
        </member>
        <member name="M:Atalasoft.Annotate.CommonCode.GetPointBounds(System.Drawing.PointF[])">
            <summary> Returns a bounding rectangle which includes all of the supplied points. </summary>
            <returns> A <strong>RectangleF</strong> that contains all of the points in the supplied
            array. </returns>
            <exception cref="T:System.ArgumentNullException" caption="System.ArgumentNullException">Thrown if the points argument is null.</exception>
            <param name="points"> An array of <strong>PointF</strong>. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Converters.AnnotationBrushConverter">
            <summary> This class is a TypeConverter for the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> object. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationBrushConverter</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
            <returns> <para><B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para> </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType"> A Type that represents the type you want to convert from. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> The CultureInfo to use as the current culture. </param>
            <param name="value"> The Object to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> <para>Returns whether this converter can convert the object to the specified type, using the specified
            context.</para> </summary>
            <returns> <para><B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para> </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="destinationType"> A Type that represents the type you want to convert to. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary> <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para> </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
            <param name="value"> The Object to convert. </param>
            <param name="destinationType"> The Type to convert the value parameter to. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary> Returns whether this object supports properties, using the specified context. </summary>
            <returns> <STRONG>True</STRONG> if GetProperties should be called to find the properties of this object; otherwise,
            false. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary> Returns a collection of properties for the type of array specified by the value parameter, using the
            specified context and attributes. </summary>
            <returns> A PropertyDescriptorCollection with the properties that are exposed for this data type, or a null
            reference (Nothing in Visual Basic) if there are no properties. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="value"> An Object that specifies the type of array for which to get properties. </param>
            <param name="attributes"> An array of type Attribute that is used as a filter. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Converters.AnnotationImageConverter">
            <summary> This class is a TypeConverter for the <see cref="T:Atalasoft.Annotate.AnnotationImage"/> object. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationImageConverter.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationImageConverter</STRONG> object. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationImageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
            <returns> <para><B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para> </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType"> A Type that represents the type you want to convert from. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationImageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> The CultureInfo to use as the current culture. </param>
            <param name="value"> The Object to convert. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Converters.AnnotationPenConverter">
            <summary> This class is a TypeConverter for the <see cref="T:Atalasoft.Annotate.AnnotationPen"/> object. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationPenConverter</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <returns> <para><B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para> </returns>
            <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType"> A Type that represents the type you want to convert from. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <returns> An Object that represents the converted value. </returns>
            <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> The CultureInfo to use as the current culture. </param>
            <param name="value"> The Object to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> <para>Returns whether this converter can convert the object to the specified type, using the specified
            context.</para> </summary>
            <returns> <para><B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para> </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="destinationType"> A Type that represents the type you want to convert to. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary> <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para> </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
            <param name="value"> The Object to convert. </param>
            <param name="destinationType"> The Type to convert the value parameter to. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary> Returns whether this object supports properties, using the specified context. </summary>
            <returns> <STRONG>True</STRONG> if GetProperties should be called to find the properties of this object; otherwise,
            false. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary> Returns a collection of properties for the type of array specified by the value parameter, using the
            specified context and attributes. </summary>
            <returns> A PropertyDescriptorCollection with the properties that are exposed for this data type, or a null
            reference (Nothing in Visual Basic) if there are no properties. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="value"> An Object that specifies the type of array for which to get properties. </param>
            <param name="attributes"> An array of type Attribute that is used as a filter. </param>
        </member>
        <member name="T:Atalasoft.Converters.PointFTypeConverter">
            <summary> A TypeConverter for a <STRONG>PointF</STRONG> object. </summary>
        </member>
        <member name="M:Atalasoft.Converters.PointFTypeConverter.#ctor">
            <summary> Creates a new instance of <STRONG>PointFTypeConverter</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Converters.PointFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
            <returns> <para><B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para> </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType"> A Type that represents the type you want to convert from. </param>
        </member>
        <member name="M:Atalasoft.Converters.PointFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> The CultureInfo to use as the current culture. </param>
            <param name="value"> The Object to convert. </param>
        </member>
        <member name="M:Atalasoft.Converters.PointFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary> <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para> </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
            <param name="value"> The Object to convert. </param>
            <param name="destinationType"> The Type to convert the value parameter to. </param>
        </member>
        <member name="T:Atalasoft.Converters.RectangleFTypeConverter">
            <summary> A TypeConverter for the <STRONG>RectangleF</STRONG> object. </summary>
        </member>
        <member name="M:Atalasoft.Converters.RectangleFTypeConverter.#ctor">
            <summary> Creates a new instance of <STRONG>RectangleFTypeConverter</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Converters.RectangleFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
            <returns> <para><B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para> </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType"> A Type that represents the type you want to convert from. </param>
        </member>
        <member name="M:Atalasoft.Converters.RectangleFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> The CultureInfo to use as the current culture. </param>
            <param name="value"> The Object to convert. </param>
        </member>
        <member name="M:Atalasoft.Converters.RectangleFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary> <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para> </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
            <param name="value"> The Object to convert. </param>
            <param name="destinationType"> The Type to convert the value parameter to. </param>
        </member>
        <member name="T:Atalasoft.Converters.SizeFTypeConverter">
            <summary> A TypeConverter for a <STRONG>SizeF</STRONG> object. </summary>
        </member>
        <member name="M:Atalasoft.Converters.SizeFTypeConverter.#ctor">
            <summary> Creates a new instance of <STRONG>SizeFConverter</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Converters.SizeFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
            <returns> <para><B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para> </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType"> A Type that represents the type you want to convert from. </param>
        </member>
        <member name="M:Atalasoft.Converters.SizeFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> The CultureInfo to use as the current culture. </param>
            <param name="value"> The Object to convert. </param>
        </member>
        <member name="M:Atalasoft.Converters.SizeFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary> <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para> </summary>
            <returns> An Object that represents the converted value. </returns>
            <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
            <param name="value"> The Object to convert. </param>
            <param name="destinationType"> The Type to convert the value parameter to. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Editors.AnnotationBrushEditor">
            <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> object. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationBrushEditor.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationBrushEditor</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationBrushEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary> Gets the editor style used by the EditValue method. </summary>
            <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
            <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationBrushEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
            <returns> The new value of the object. </returns>
            <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
            <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
            <param name="value"> The object to edit. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Editors.AnnotationFontEditor">
            <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationFont"/> object. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationFontEditor.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationFontEditor</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationFontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
            <summary> Gets the editor style used by the EditValue method. </summary>
            <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationFontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
            <returns> The new value of the object. </returns>
            <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
            <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
            <param name="value"> The object to edit. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Editors.AnnotationImageEditor">
            <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationImage"/> object. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationImageEditor</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
            <summary> Gets the editor style used by the EditValue method. </summary>
            <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
            <returns> The new value of the object. </returns>
            <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
            <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
            <param name="value"> The object to edit. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary> Paints a representation of the value of an object using the specified PaintValueEventArgs. </summary>
            <param name="e"> A PaintValueEventArgs that indicates what to paint and where to paint it. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary> <para>Indicates whether the specified context supports painting a representation of an object's value
            within the specified context.</para> </summary>
            <returns> <STRONG>True</STRONG> if PaintValue is implemented; otherwise, <STRONG>false</STRONG>. </returns>
            <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Editors.AnnotationPenEditor">
            <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationPen"/> object. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationPenEditor.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationPenEditor</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationPenEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
            <summary> Gets the editor style used by the EditValue method. </summary>
            <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Editors.AnnotationPenEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
            <returns> The new value of the object. </returns>
            <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
            <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
            <param name="value"> The object to edit. </param>
        </member>
        <member name="T:Atalasoft.Annotate.EllipseData">
            <summary>
            Ellipse annotation data.
            </summary>
            <summary> Ellipse annotation data. </summary>
            <seealso> EllipseAnnotation Class </seealso>
        </member>
        <member name="T:Atalasoft.Annotate.IHighlighter">
            <summary> This interface is used by <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects to indicate that they have highlighter
            support. This information is used by the <see cref="T:Atalasoft.DotImage.Annotate.AnnotateViewer"/> when burning annotations. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.IHighlighter.Translucent">
            <summary> Gets a value indicating whether the annotation is a highlighter. </summary>
            <value> A value indicating whether the annotation is a highlighter. </value>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.#ctor">
            <summary> Creates a new instance of <STRONG>EllipseData</STRONG>. </summary>
            <overloads> Constructs a new <STRONG>EllipseData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the bounding rectangle and fill.
            </summary>
            <param name="rectangle"> The bounding rectangle of the ellipse. </param>
            <param name="fill"> The fill used by the ellipse. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the bounding rectangle and outline.
            </summary>
            <param name="rectangle"> The bounding rectangle of the ellipse. </param>
            <param name="outline"> The outline used by the ellipse. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,System.Boolean)">
            <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the rectangle, fill and translucent
            properties. </summary>
            <param name="rectangle"> The rectangle for this annotation. </param>
            <param name="fill"> The AnnotationBrush used to fill this annotation. </param>
            <param name="translucent"> A value indicating whether this annotation will act as a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the bounding rectangle, fill, outline
            and shadow options. </summary>
            <param name="rectangle"> The bounding rectangle of the ellipse. </param>
            <param name="fill"> The fill used by the ellipse. </param>
            <param name="outline"> The outline used by the ellipse. </param>
            <param name="shadow"> A value indicating whether or not the ellipse has a shadow. </param>
            <param name="shadowOffset"> The amount of offset applied to the shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>EllipseData</STRONG> from serialized information. </summary>
            <param name="info"> The serialization information containing the ellipse data. </param>
            <param name="context"> A context containing information about this object. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with <STRONG>EllipseData</STRONG> information. </summary>
            <param name="info"> The SerializationInfo object to fill with data. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.Clone">
            <summary> Creates a copy of the <STRONG>EllipseData</STRONG>. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.Equals(System.Object)">
            <summary> Determines if another <STRONG>EllipseData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>EllipseData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.EllipseData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.EllipseData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.EllipseData.Shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used draw the drop shadow. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.EllipseData.Fill">
            <summary> Gets or sets the fill used for the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.EllipseData.Outline">
            <summary> Gets or sets the outline of the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.EllipseData.ShadowOffset">
            <summary> Gets or sets the shadow offset. </summary>
            <value> The offset used to specifying the position of the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.EllipseData.Translucent">
            <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
            <value> A value indicating whether this annotation is used as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the RotateDocument method. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.EmbeddedImageData">
            <summary> Data for the <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation"/>. </summary>
            <seealso> EmbeddedImageAnnotation Class </seealso>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor">
            <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG>. </summary>
            <overloads> Constructs an <STRONG>EmbeddedImageData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image. </summary>
            <param name="image"> The image for the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image, whether or not to
            maintain the aspect ratio and the initial location of this object. </summary>
            <param name="image"> The image for the annotation. </param>
            <param name="location"> The initial location of this annotation on the document. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image, shadow and shadow
            offset. </summary>
            <param name="image"> The image to embed. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image, initial location,
            shadow and shadow offset. </summary>
            <param name="image"> The image to embed. </param>
            <param name="location"> The initial location of this annotation on the document. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> from serialized information. </summary>
            <param name="info"> The SerializationInfo containing information for this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.WangAttributeData)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> from WANG data. </summary>
            <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing information about this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.Dispose(System.Boolean)">
            <summary>
            Called to release resources used by the annotation.
            </summary>
            <param name="disposing">A value indicating whether this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotationData.Dispose"/> method or the class finalizer.</param>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this data. </summary>
            <param name="info"> The SerializationInfo object where the information will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.Clone">
            <summary> Creates a copy of this object. </summary>
            <returns> A copy of this <STRONG>EmbeddedImageData</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.Equals(System.Object)">
            <summary> Determines if another <STRONG>EmbeddedImageData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>EmbeddedImageData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.EmbeddedImageData.GetWangAttributeData">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing information about this annotation. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for this annotation. </returns>
        </member>
        <member name="P:Atalasoft.Annotate.EmbeddedImageData.Image">
            <summary> Gets or sets the image of the annotation. </summary>
            <value> The image to embed. </value>
        </member>
        <member name="P:Atalasoft.Annotate.EmbeddedImageData.Shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used draw the drop shadow. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.EmbeddedImageData.ShadowOffset">
            <summary> Gets or sets the shadow offset. </summary>
            <value> The offset used to specifying the position of the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.EmbeddedImageData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotateSpace">
            <summary>Used to specify the coordinate space used by various methods.</summary>
            <summary> Specifies the coordinate space used by various methods. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotateSpace.View">
            <summary> Use the view space of the control. View space is always represented in pixels
            with its origin at the top-left of the control. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotateSpace.Document">
            <summary> Use the document space of the viewer with its origin at the top-left of the document. Coordinates are
            specified in document <see cref="T:Atalasoft.DotAnnotate.IAnnotate.Units" />. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotateSpace.Annotation">
            <summary> Use annotation space coordinates. The origin is at the location of the annotation specified in document
            <see cref="T:Atalasoft.DotAnnotate.IAnnotate.Units" />. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.CreateAnnotationMode">
            <summary> Specifies the annotation creation mode when calling AnnotationController. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.CreateAnnotationMode.Default">
            <summary> Annotations are created by click and drag or with multiple clicks. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.CreateAnnotationMode.SingleClickLocation">
            <summary> Annotations are added with a single click and the annotation location is set to
            the document position that was clicked. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.CreateAnnotationMode.DoubleClickLocation">
            <summary> Annotations are added with a double-click and the annotation location is set to
            the document position that was clicked. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.CreateAnnotationMode.SingleClickCenter">
            <summary> Annotations are added with a single click and the annotation is centered on the
            document position that was clicked. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.CreateAnnotationMode.DoubleClickCenter">
            <summary> Annotations are added with a double-click and the annotation is centered on the
            document position that was clicked. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationGripAction">
            <summary> Specifies the action that will be taken by the AnnotationController when a grip is dragged
            with the mouse. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripAction.Resizing">
            <summary> The grip is used to resize the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripAction.Moving">
            <summary> The grip is used to move the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripAction.Rotating">
            <summary> The grip is used for rotating the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripAction.Indepenent">
            <summary>
            The grip is used for custom movement determined by the annotation.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripAction.Independent">
            <summary> The grip is used for custom movement determined by the annotation. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.DocumentRotation">
            <summary> Specifies the amount of rotation to apply to the document and annotations by the
            RotateDocument method. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.DocumentRotation.Rotate90">
            <summary> Rotates 90 degrees clockwise. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.DocumentRotation.Rotate180">
            <summary> Rotates 180 degrees clockwise. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.DocumentRotation.Rotate270">
            <summary> Rotates 270 degrees clockwise. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.ShadowMode">
            <summary> Specifies the shadow mode used for text annotations. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.ShadowMode.Annotation">
            <summary> The shadow is applied only to the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.ShadowMode.Text">
            <summary> The shadow is applied only to the text. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.ShadowMode.AnnotationAndText">
            <summary> The shadow is applied to both text and annotation. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotateInteractMode">
            <summary> Specifies the user interaction mode for the AnnotationController </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotateInteractMode.None">
            <summary> Mouse events are ignored. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotateInteractMode.View">
            <summary> Annotations cannot be modified. Hot spot annotations are not rendered but react to mouse events.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotateInteractMode.Author">
            <summary> Annotations can be selected, moved and resized using the mouse. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationConfinementMode">
            <summary> Specifies the type of confinement used for the annotations when they are being moved or resized using the
            mouse. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationConfinementMode.None">
            <summary> There is no limitation to the annotation location. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationConfinementMode.ClientArea">
            <summary> Annotations can be located outside of the document but not outside of the client
            area of the viewer. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationConfinementMode.DocumentBounds">
            <summary> Annotations are confined to the document bounds. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.RenderDevice">
            <summary> Specifies the type of device annotations will be rendered on. This allows the renderer to adjust for
            differences in media. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RenderDevice.Display">
            <summary> Rendering is going to the screen or a control. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RenderDevice.Printer">
            <summary> Rendering is for a printer. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RenderDevice.Image">
            <summary> Rendering is directly to an image. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UndoManagerAction">
            <summary> Specifies the actions taken when an <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo"/> is passed to the <see cref="E:Atalasoft.Annotate.AnnotationData.AnnotationControllerNotification"/> event. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UndoManagerAction.Default">
            <summary> The undo is added to the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager"/>. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UndoManagerAction.Ignore">
            <summary> The undo is ignored. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UndoManagerAction.Combine">
            <summary> The undo and all that follow until a <strong>ResetDefault</strong> action is
            received are combined into a single undo object. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UndoManagerAction.ResetDefault">
            <summary> Indicates that this is the last undo to combine with previous undos. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.RectangleGrip">
            <summary> Specifies the position of the grip. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGrip.TopLeft">
            <summary> The grip positioned at the top-left of the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGrip.TopCenter">
            <summary> The grip positioned at the top-center of the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGrip.TopRight">
            <summary> The grip positioned at the top-right of the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGrip.CenterLeft">
            <summary> The grip positioned at the center-left of the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGrip.CenterRight">
            <summary> The grip positioned at the center-right of the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGrip.BottomLeft">
            <summary> The grip positioned at the bottom-left of the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGrip.BottomCenter">
            <summary> The grip positioned at the bottom-center of the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGrip.BottomRight">
            <summary> The grip positioned at the bottom-right of the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGrip.Rotation">
            <summary> The grip positioned above the top-center of the annotation used for
            rotating. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.MirrorDirection">
            <summary> Specifies the mirror direction. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.MirrorDirection.Horizontal">
            <summary> Mirror (flip) the annotation horizontally. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.MirrorDirection.Vertical">
            <summary> Mirror (flip) the annotation vertically. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationGripMode">
            <summary> Specifies the type of grips being used for an annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripMode.Rectangular">
            <summary> Rectangle grips are used. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripMode.Points">
            <summary> Point grips are used. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.FreehandLineType">
            <summary> Specifies the line type used for freehand annotations. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.FreehandLineType.Straight">
            <summary> The points are joined with straight lines. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.FreehandLineType.Curves">
            <summary> The points are joined with curved lines. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.FreehandLineType.Beziers">
            <summary> The points are used for Bezier curves. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.WangAnnotationType">
            <summary> Specifies the type of WANG annotation used for serialization. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.ImageEmbedded">
            <summary> An image annotation in which the image data is embedded into the WANG data. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.ImageReference">
            <summary> An image annotation in which a filename is specified for the image. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.StraightLine">
            <summary> A single line annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.FreehandLine">
            <summary> A freehand annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.HollowRectangle">
            <summary> A rectangle annotation without a fill. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.FilledRectangle">
            <summary> A filled rectangle annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.TypedText">
            <summary> A text annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.TextFromFile">
            <summary> A text annotation containing text from a file. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.TextStamp">
            <summary> A text annotation that cannot be edited. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.AttachANote">
            <summary> A text annotation that has the appearance of a sticky note. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.WangAnnotationType.OcrRegion">
            <summary> A rectangle selected to identify an area of the image to OCR in a separate process. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UndoChange">
            <summary> Specifies the type of undo being performed. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UndoChange.PropertyChange">
            <summary> Used when a property of the annotation has been changed. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UndoChange.CollectiveChange">
            <summary> Used when multiple undo actions are combined into a single undo. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UndoChange.InvokeMethod">
            <summary> Used when a method, such as Mirror, is invoked. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationGripState">
            <summary> Specifies the state of a grip. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripState.Default">
            <summary> The grip is shown normally. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripState.MouseOver">
            <summary> The mouse is over the grip. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationGripState.MouseDown">
            <summary> The mouse is pressing the grip. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationUnit">
            <summary> Specifies the unit of measure used for annotations. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Custom">
            <summary> A custom value in pixels per unit. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Pixel">
            <summary> Pixels. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Inch">
            <summary> Inches. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Micrometer">
            <summary> Micrometers. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Centimeter">
            <summary> Centimeters. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Foot">
            <summary> Feet. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Yard">
            <summary> Yards. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Meter">
            <summary> Meters. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Mile">
            <summary> Miles. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationUnit.Kilometer">
            <summary> Kilometers. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationControllerNotification">
            <summary> Specifies the type of notification being sent to the AnnotationController. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.Invalidate">
            <summary> Informs the controller that it needs to invalidate the control. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.AddControl">
            <summary> Tells the controller to add a <strong>Control</strong> to the viewer. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.RemoveControl">
            <summary> Removes a previously added control from the viewer. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.SelectionChange">
            <summary> The <strong>Selection</strong> property of an annotation has changed. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.PropertyChange">
            <summary> A property of the control has changed. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.LayerContentChange">
            <summary> The content of a layer has changed. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.ZoomChanged">
            <summary> The zoom level of the viewer has changed. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.FillType">
            <summary>
            Specifies the type of fill used by an
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationBrush.html">AnnotationBrush</a>.
            </summary>
            <summary> Specifies the type of fill used by an <see cref="T:Atalasoft.Annotate.AnnotationBrush"/>. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.FillType.Solid">
            <summary> A solid fill. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.FillType.Hatch">
            <summary> A hatch brush. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.FillType.Texture">
            <summary> A texture brush. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.FillType.LinearGradient">
            <summary> A linear gradient brush. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.ChangePositionMethod">
            <summary> Specifies the reordering to perform on a layer or annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveToFront">
            <summary> Moves the item to the beginning of the collection. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveUp">
            <summary> Moves the item one position closer to the beginning of the collection. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveBack">
            <summary> Moves the item one position closer to the end of the collection. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveToBack">
            <summary> Moves the item to the end of the collection. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.RectangleGripDisplay">
            <summary> Specifies the grips to display. </summary>
            <remarks> For more control, each grip has a visible property that will determine which
            grips to render. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGripDisplay.Both">
            <summary> Both corner and side grips are displayed. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGripDisplay.CornerGrips">
            <summary> Only the corner grips are displayed. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.RectangleGripDisplay.SideGrips">
            <summary> Only the side grips are displayed. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationState">
            <summary> Specifies the current state of the annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationState.Moving">
            <summary> The annotation is being moved by the user. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationState.Resizing">
            <summary> The annotation is being resized by the user. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationState.Creating">
            <summary> The annotation is being created by the user. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationState.Idle">
            <summary> The annotation is sitting idle. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationState.Loading">
            <summary> The annotation is loading from XMP or WANG data. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationState.Rotating">
            <summary> The annotation is being rotated by the user. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationState.GripMoving">
            <summary> Indicates that a grip is moving. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationDataFormat">
            <summary> Specifies the format used for serialized annotation data. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationDataFormat.Xmp">
            <summary> The data is serialized using the <see cref="T:Atalasoft.Annotate.Formatters.XmpFormatter"/>. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationDataFormat.Wang">
            <summary> The data is serialized using the WangFormatter. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.AnnotationPenAlignment">
            <summary> Specifies the alignment of the <see cref="T:Atalasoft.Annotate.AnnotationPen"/>. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationPenAlignment.Center">
            <summary> The pen is centered over the line. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.AnnotationPenAlignment.Inset">
            <summary> The pen is drawn inside the line. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter">
            <summary> An abstract base class that encompasses elements for exporting annotations. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.#ctor">
            <summary>Initializes the <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter"/>.</summary>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
            <summary> Exports a single page of annotations to a given stream. </summary>
            <exception> Thrown if <paramref name="sourceStream"/> or <paramref name="destStream"/> is <c>null</c> (Nothing in VB). </exception>
            <exception> Thrown if <paramref name="frameIndex"/> is less than zero. </exception>
            <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport"/> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver"/> properties are <c>false</c>. </exception>
            <param name="sourceStream"> The original source stream for the document. </param>
            <param name="destStream"> The destination stream for the document. </param>
            <param name="pageSize"> The size of the source page. </param>
            <param name="units"> The units in which the page size is expressed. </param>
            <param name="resolution"> The resolution of the page. </param>
            <param name="layer"> The page of annotations to export. </param>
            <param name="frameIndex"> The page number for exporting. </param>
            <overloads> Exports annotations from a given source stream to a given destination stream. </overloads>
            <remarks>A source stream is necessary for some file formats like PDF which require an entire document to hold the
            annotations.  Other formats may ignore the source stream entirely. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
            <summary> Exports a multiple pages of annotations to a given stream. </summary>
            <remarks> To create a page with no annotations, add an empty <see cref="T:Atalasoft.Annotate.LayerData"/> to the collection. </remarks>
            <exception> Thrown if <paramref name="sourceStream"/> or <paramref name="destStream"/> is <c>null</c> (Nothing in VB). </exception>
            <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport"/> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver"/> properties are <c>false</c>. </exception>
            <param name="sourceStream"> The original source stream for the document. </param>
            <param name="destStream"> The destination stream for the document. </param>
            <param name="pageSizes"> An array of sizes of the source pages. </param>
            <param name="units"> An array of units in which the page sizes are expressed. </param>
            <param name="resolutions"> An array of resolutions of the pages. </param>
            <param name="layers"> A collection of pages of annotations. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
            <summary> Export a set of annotations over an existing stream. </summary>
            <exception> Thrown if <paramref name="destStream"/> is <c>null</c> (Nothing in VB). </exception>
            <exception> Thrown if the <paramref name="frameIndex"/> is less than zero. </exception>
            <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport"/> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver"/> properties are <c>false</c>. </exception>
            <param name="destStream"> The destination stream for the document. </param>
            <param name="pageSize"> The size of the source page. </param>
            <param name="units"> The units in which the page size is expressed. </param>
            <param name="resolution"> The resolution of the page. </param>
            <param name="layer"> The page of annotations to export. </param>
            <param name="frameIndex"> The page number for exporting. </param>
            <overloads> Export a set of annotations over an existing stream. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
            <summary> Export a set of annotations over an existing stream </summary>
            <exception> Thrown if <paramref paramref="destStream"/> is <c>null</c> (Nothing in VB). </exception>
            <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport"/> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver"/> properties are <c>false</c>. </exception>
            <param name="destStream"> The destination stream for the document. </param>
            <param name="pageSizes"> An array of sizes of the source pages. </param>
            <param name="units"> An array of units in which the page sizes are expressed. </param>
            <param name="resolutions"> An array of resolutions of the pages. </param>
            <param name="layers"> A collection of pages of annotations. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.IsValidFormat(System.IO.Stream)">
            <summary> Determines if the stream is the correct format. </summary>
            <returns> Returns <c>true</c> if the stream contains valid data for this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter"/>, <c>false</c>
            otherwise. </returns>
            <param name="stm"> A non-null stream. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Construct">
            <summary> A factory method to construct a new <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter"/>. </summary>
            <returns> A new <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter"/> object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
            <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
            <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
            <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
            <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary> Copies the entire source stream to the destination stream. </summary>
            <exception> Thrown if either stream argument is <c>null</c> (Nothing in VB). </exception>
            <param name="sourceStream"> A non-null stream with annotation source data </param>
            <param name="destStream"> A non-null stream to which the source data will be copied. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver">
            <summary> Gets a value indicating whether or not this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter"/> can write annotations
            to a stream without affecting existing contents. </summary>
            <value> A value indicating whether or not this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter"/> can write annotations to a
            stream without affecting existing contents. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport">
            <summary> Gets a value indicating whether or not this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter"/> can do a simple
            export. </summary>
            <value> A value indicating whether this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter"/> can do a simple export. </value>
        </member>
        <member name="T:Atalasoft.Annotate.Exporters.NamespaceDoc">
            <summary>
            Provides objects used to export annotations to a specific format.  
            Currently PDF is the only format supported. 
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventHandler">
            <summary> Used to handle the <see cref="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationDeserialization"/> event. </summary>
            <param name="sender"> The object sending the event. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs"/> containing information about this event.
            </param>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs">
            <summary> This class contains information used when deserializing annotations. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs._controller">
            <summary> Gets the controller being serialized into. </summary>
            <value> The controller the object will be added to. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs._formatter">
            <summary> Gets the formatter used to deserialize the data. </summary>
            <value> The formatter used to deserialize the data. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs._data">
            <summary> Gets or sets the object that will be added into the controller. </summary>
            <value> The object that will be added into the controller. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs._cancel">
            <summary> Gets or sets a value indicating whether to add this object into the controller. </summary>
            <value> A value indicating whether to cancel adding this object into the controller. </value>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationController,System.Runtime.Serialization.IFormatter,System.Object)">
            <summary> Creates a new instance of <STRONG>AnnotationDeserializationEventArgs</STRONG>. </summary>
            <param name="controller"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> for the annotation. </param>
            <param name="formatter"> The formatter used to deserialize the data. </param>
            <param name="data"> The object resulting from deserialization. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Cancel">
            <summary> Gets or sets a value indicating whether to add this object into the controller. </summary>
            <value> A value indicating whether to cancel adding this object into the controller. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Controller">
            <summary> Gets the controller being serialized into. </summary>
            <value> The controller the object will be added to. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Formatter">
            <summary> Gets the formatter used to deserialize the data. </summary>
            <value> The formatter used to deserialize the data. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Data">
            <summary> Gets or sets the object that will be added into the controller. </summary>
            <value> The object that will be added into the controller. </value>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1">
            <summary> This class contains information used when deserializing annotations. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.#ctor(`0,System.Runtime.Serialization.IFormatter,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="formatter">The formatter.</param>
            <param name="data">The data.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether [cancel].
            </summary>
            <value>
              <c>true</c> if [cancel]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>
            The controller.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Formatter">
            <summary>
            Gets the formatter.
            </summary>
            <value>
            The formatter.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.LegacyXmpFormatter">
            <summary> This class is used to serialize and deserialize XMP annotation data from DotAnnotate 4.0 and earlier.  The
            <see cref="T:Atalasoft.Annotate.Formatters.XmpFormatter"/> will automatically use this class to deserialize when needed. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.#ctor">
            <summary> Creates a new instance of <STRONG>LegacyXmpFormatter</STRONG> with default options. </summary>
            <overloads> Creates a new instance of <STRONG>LegacyXmpFormatter</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>LegacyXmpFormatter</STRONG> with the specified property values.
            </summary>
            <param name="formatting"> Indicates how the XML will be formatted. </param>
            <param name="indentation"> The number of spaces for indenting. </param>
            <param name="packet"> Indicates whether to generate an XMP packet.  This is required when the data is embedded into
            an image. </param>
            <param name="resolution"> The resolution of the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an object, or graph of objects with the given root to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts the serialized data. This stream can reference a variety of backing stores (such as files, network, memory, and so on).</param>
            <param name="graph">The object, or root of the object graph, to serialize. All child objects of this root object are automatically serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            serializationStream
            or
            graph
            </exception>
            <exception cref="T:System.ArgumentException">The stream must have write access.;serializationStream</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.SerializePen(System.Xml.XmlTextWriter,Atalasoft.Annotate.AnnotationPen)">
            <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationPen"/> into XMP data. </summary>
            <param name="writer"> The <STRONG>XmlTextWriter</STRONG> to write the data into. </param>
            <param name="pen"> The pen to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.SerializeBrush(System.Xml.XmlTextWriter,Atalasoft.Annotate.AnnotationBrush,System.String)">
            <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> into XMP data. </summary>
            <param name="writer"> The <STRONG>XmlTextWriter</STRONG> to write the serialized data into. </param>
            <param name="brush"> The brush to convert. </param>
            <param name="tagName"> The name of the tag to give the brush data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream that contains the data to deserialize.</param>
            <returns>
            The top object of the deserialized graph.
            </returns>
            <exception cref="T:System.ArgumentNullException">serializationStream</exception>
            <exception cref="T:System.ArgumentException">The stream must have read permissions.;serializationStream</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">There was an error deserializing the stream.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.DeserializePen(System.Xml.XmlReader)">
            <summary> Converts XMP data into an <see cref="T:Atalasoft.Annotate.AnnotationPen"/>. </summary>
            <returns> An <see cref="T:Atalasoft.Annotate.AnnotationPen"/> created from the data. </returns>
            <param name="reader"> The <STRONG>XmlReader</STRONG> containing the pen data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.DeserializeBrush(System.Xml.XmlReader)">
            <summary> Converts XMP data into an <see cref="T:Atalasoft.Annotate.AnnotationBrush"/>. </summary>
            <returns> An <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> created from the data. </returns>
            <param name="reader"> An <STRONG>XmlReader</STRONG> containing the serialized data. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Resolution">
            <summary>
            Gets or sets the resolution.
            </summary>
            <value>
            The resolution.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Formatting">
            <summary>
            Gets or sets the formatting.
            </summary>
            <value>
            The formatting.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Indentation">
            <summary>
            Gets or sets the indentation.
            </summary>
            <value>
            The indentation.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.CreateXmpPacket">
            <summary>
            Gets or sets a value indicating whether [create XMP packet].
            </summary>
            <value>
              <c>true</c> if [create XMP packet]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that performs type lookups during deserialization.
            </summary>
            <returns>
            The <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that performs type lookups during deserialization.
              </returns>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used for serialization and deserialization.
            </summary>
            <returns>
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> used for serialization and deserialization.
              </returns>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.SurrogateSelector">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SurrogateSelector" /> used by the current formatter.
            </summary>
            <returns>
            The <see cref="T:System.Runtime.Serialization.SurrogateSelector" /> used by this formatter.
              </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.ILegacyXmpSupport">
            <summary> This interface is used by annotation to support reading from and generating XMP annotation data for
            versions 4 and below of DotAnnotate. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.ILegacyXmpSupport.FromXmp(System.Xml.XmlTextReader)">
            <summary> Set the annotation property settings. </summary>
            <param name="reader"> The <STRONG>XmlTextReader</STRONG> containing the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.ILegacyXmpSupport.ToXmp(System.Xml.XmlTextWriter)">
            <summary> Generates the XMP data. </summary>
            <param name="writer"> The <STRONG>XmlTextWriter</STRONG> in which to write the data. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.WangFormatter">
            <summary> The <STRONG>WangFormatter</STRONG> converts annotation data to and from WANG format. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter._binder">
            <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> that performs type lookups during deserialization. </summary>
            <value> The <see cref="T:System.Runtime.Serialization.SerializationBinder"/> performs type lookups during deserialization. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter._context">
            <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used for serialization and deserialization. </summary>
            <value> The <see cref="T:System.Runtime.Serialization.StreamingContext"/> used for serialization and deserialization. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter._resolution">
            <summary> Gets or sets the document resolution used by the <see cref="T:Atalasoft.DotImage.Annotate.AnnotateViewer" />. </summary>
            <value> The document resolution of the viewer. </value>
            <remarks> If the Units property of the viewer is not set to Pixels, this property must be set to allow the
            annotation positioning to be converted to and from pixels. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.#ctor">
            <summary> Creates a new instance of <STRONG>WangFormatter</STRONG>. </summary>
            <overloads> Constructs a <STRONG>WangFormatter</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.#ctor(System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>WangFormatter</STRONG> specifying the viewer resolution. </summary>
            <param name="resolution"> The resolution of the viewer. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.Deserialize(System.IO.Stream)">
            <summary> Deserializes WANG data into a <see cref="T:Atalasoft.Annotate.LayerData"/> object. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.LayerData"/> object containing the annotations. </returns>
            <param name="serializationStream"> A stream containing WANG annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.OnDeserialize(Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs)">
            <summary> Called when an annotation is being deserialized. </summary>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs"/> containing the <see cref="T:Atalasoft.Annotate.WangAttributeData"/>
            being deserialized. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>Serializes annotations into WANG format.</summary>
            <remarks>
            	<para>The WANG format supports only basic annotation data. The following
                DotImage annotations are WANG compatible:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term>
            					<para align="center"><strong>Data</strong></para>
            				</term>
            				<description>
            					<para align="center"><strong>Annotation</strong></para>
            				</description>
            			</item>
            			<item>
            				<term>EmbeddedImageData</term>
            				<description>EmbeddedImageAnnotation</description>
            			</item>
            			<item>
            				<term>FreehandData</term>
            				<description>FreehandAnnotation</description>
            			</item>
            			<item>
            				<term>LineData</term>
            				<description>LineAnnotation</description>
            			</item>
            			<item>
            				<term>RectangleData</term>
            				<description>RectangleAnnotation</description>
            			</item>
            			<item>
            				<term>ReferencedImageData</term>
            				<description>ReferencedImageAnnotation</description>
            			</item>
            			<item>
            				<term>TextData</term>
            				<description>TextAnnotation</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <param name="serializationStream">The stream where serialized data will be stored.</param>
            <param name="graph">The object to serialize.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.WriteUnsupportedObject(System.IO.Stream,System.Object)">
            <summary>Called when an unsupported object needs to be serialized.</summary>
            <remarks>
            	<para>The WangFormatter will only attempt to serialize the following
                objects:</para>
            	<list type="bullet">
            		<item>LayerCollection</item>
            		<item>LayerAnnotation</item>
            		<item>LayerData</item>
            		<item>AnnotationDataCollection</item>
            		<item>AnnotationUI</item>
            		<item>AnnotationData</item>
            	</list>
            </remarks>
            <param name="stream">The stream where annotation data will be stored.</param>
            <param name="graph">The object to serialize.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.WriteUnsupportedAnnotation(System.IO.Stream,Atalasoft.Annotate.AnnotationData,System.String,System.Int32)">
            <summary> Called when an <see cref="T:Atalasoft.Annotate.AnnotationData"/> object being serialized does not implement the <see cref="T:Atalasoft.Annotate.IWangCompatible"/> interface. </summary>
            <param name="stream"> The stream where annotation data will be stored. </param>
            <param name="annotation"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object to serialize. </param>
            <param name="group"> The group name for this annotation. This is saved as the OiGroup marker. </param>
            <param name="index"> The index for this annotation. This is saved as the OiIndex marker. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.WriteWangAnnotation(System.IO.Stream,Atalasoft.Annotate.IWangCompatible,System.String,System.Int32)">
            <summary> Called to write a WANG compatible annotation to the serialization stream. </summary>
            <param name="stream"> The stream where this data will be stored. </param>
            <param name="wang"> An <see cref="T:Atalasoft.Annotate.IWangCompatible"/> object to serialize. </param>
            <param name="group"> The name of the group for this annotation. This is saved as the OiGroup marker. </param>
            <param name="index"> The index for this annotation. This is saved as the OiIndex marker. </param>
        </member>
        <member name="E:Atalasoft.Annotate.Formatters.WangFormatter.DeserializeAnnotation">
            <summary> Raised when an annotation is being deserialized. </summary>
            <remarks> The <see cref="T:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs"/> contains the <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for
            the annotation being deserialized. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.Resolution">
            <summary> Gets or sets the document resolution used by the <see cref="T:Atalasoft.DotImage.Annotate.AnnotateViewer" />. </summary>
            <value> The document resolution of the viewer. </value>
            <remarks> If the Units property of the viewer is not set to Pixels, this property must be set to allow the
            annotation positioning to be converted to and from pixels. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.UseWangBoldLevels">
            <summary>
            Gets or sets a value indicating how the lfWeight property will be interpreted for a <see cref="T:Atalasoft.Annotate.UI.TextAnnotation"/>.  
            Default value is false, to preserve backwards compatibility, an lfWeight of 400 or greater will indicate bold text.  
            Setting this to true will be consistent with the WANG specification, an lfWeight of 700 or greater will indicate bold text. 
            </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.Binder">
            <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> that performs type lookups during deserialization.
            </summary>
            <value> The <see cref="T:System.Runtime.Serialization.SerializationBinder"/> that performs type lookups during deserialization. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.Context">
            <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used for serialization and deserialization. </summary>
            <value> The <see cref="T:System.Runtime.Serialization.StreamingContext"/> used for serialization and deserialization. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.SurrogateSelector">
            <summary> Gets or sets the <see cref="P:Atalasoft.Annotate.Formatters.WangFormatter.SurrogateSelector"/> used by the current formatter. </summary>
            <value> The <see cref="P:Atalasoft.Annotate.Formatters.WangFormatter.SurrogateSelector"/> used by this formatter. </value>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes">
            <summary>
            Attributes of Wang Image Annotations
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.rotation">
            <summary>
            The rotation
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.scale">
            <summary>
            The scale
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nHRes">
            <summary>
            The horizontal resolution
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nVRes">
            <summary>
            The vertical resolution
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nOrigHRes">
            <summary>
            The original horizontal resolution
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nOrigVRes">
            <summary>
            The original vertical resolution
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.bReserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.bReserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nReserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs">
            <summary> This class contains information used for WANG serialization. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs._annotation">
            <summary> Gets or sets the annotation related to the serialization process. </summary>
            <value> The annotation related to the serialization process. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs._data">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for the annotation during deserialization. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for the annotation during deserialization. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs._annotationData">
            <summary> Gets or sets the <STRONG>AnnotationData</STRONG> related to the serialization process. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.#ctor(Atalasoft.Annotate.WangAttributeData)">
            <summary> Creates a new instance of <STRONG>WangAnnotationSerializationEventArgs</STRONG>. </summary>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.WangAttributeData"/> being deserialized. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.Data">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for the annotation during deserialization. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for the annotation during deserialization. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.Annotation">
            <summary> Gets or sets the annotation related to the serialization process. </summary>
            <value> The annotation related to the serialization process. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.AnnotationData">
            <summary> Gets or sets the <STRONG>AnnotationData</STRONG> related to the serialization process. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.JoltXmpFormatter">
            <summary> This class is used to serialize and deserialize XMP annotation data from JoltImage.  The
            <see cref="T:Atalasoft.Annotate.Formatters.XmpFormatter"/> will automatically use this class to deserialize when needed. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.JoltXmpFormatter.#ctor">
            <summary> Creates a new instance of <STRONG>JoltXmpFormatter</STRONG> with default options. </summary>
            <overloads> Creates a new instance of <STRONG>JoltXmpFormatter</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.JoltXmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>JoltXmpFormatter</STRONG> with the specified property values.
            </summary>
            <param name="formatting"> Indicates how the XML will be formatted. </param>
            <param name="indentation"> The number of spaces for indenting. </param>
            <param name="packet"> Indicates whether to generate an XMP packet.  This is required when the data is embedded into
            an image. </param>
            <param name="resolution"> The resolution of the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.JoltXmpFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an object, or graph of objects with the given root to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts the serialized data. This stream can reference a variety of backing stores (such as files, network, memory, and so on).</param>
            <param name="graph">The object, or root of the object graph, to serialize. All child objects of this root object are automatically serialized.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.JoltXmpFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream that contains the data to deserialize.</param>
            <returns>
            The top object of the deserialized graph.
            </returns>
            <exception cref="T:System.ArgumentNullException">serializationStream</exception>
            <exception cref="T:System.ArgumentException">The stream must have read permissions.;serializationStream</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">There was an error deserializing the stream.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.JoltXmpFormatter.DeserializePen(System.Xml.XmlReader,System.String)">
            <summary> Converts XMP data into an <see cref="T:Atalasoft.Annotate.AnnotationPen"/>. </summary>
            <returns> An <see cref="T:Atalasoft.Annotate.AnnotationPen"/> created from the data. </returns>
            <param name="reader"> The <STRONG>XmlReader</STRONG> containing the pen data. </param>
            <param name="endTagName"> The name of the tag to end at</param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.JoltXmpFormatter.DeserializeBrush(System.Xml.XmlReader)">
            <summary> Converts XMP data into an <see cref="T:Atalasoft.Annotate.AnnotationBrush"/>. </summary>
            <returns> An <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> created from the data. </returns>
            <param name="reader"> An <STRONG>XmlReader</STRONG> containing the serialized data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.JoltXmpFormatter.DeserializeFont(System.Xml.XmlReader)">
            <summary> Converts XMP data into an <see cref="T:Atalasoft.Annotate.AnnotationBrush"/>. </summary>
            <returns> An <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> created from the data. </returns>
            <param name="reader"> An <STRONG>XmlReader</STRONG> containing the serialized data. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.JoltXmpFormatter.Resolution">
            <summary>
            Gets or sets the resolution.
            </summary>
            <value>
            The resolution.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.JoltXmpFormatter.Formatting">
            <summary>
            Gets or sets the formatting.
            </summary>
            <value>
            The formatting.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.JoltXmpFormatter.Indentation">
            <summary>
            Gets or sets the indentation.
            </summary>
            <value>
            The indentation.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.JoltXmpFormatter.CreateXmpPacket">
            <summary>
            Gets or sets a value indicating whether [create XMP packet].
            </summary>
            <value>
              <c>true</c> if [create XMP packet]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.JoltXmpFormatter.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that performs type lookups during deserialization.
            </summary>
            <returns>
            The <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that performs type lookups during deserialization.
              </returns>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.JoltXmpFormatter.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used for serialization and deserialization.
            </summary>
            <returns>
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> used for serialization and deserialization.
              </returns>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.JoltXmpFormatter.SurrogateSelector">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SurrogateSelector" /> used by the current formatter.
            </summary>
            <returns>
            The <see cref="T:System.Runtime.Serialization.SurrogateSelector" /> used by this formatter.
              </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Formatters.XmpFormatter">
            <summary> This class converts objects into XMP data to be embedded into images or saved as standalone files.
            </summary>
            <remarks> Only objects that implement the ISerializable interface can be converted by this formatter. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.XmpFormatter._formatting">
            <summary> Gets or sets the type of XML formatting used when serializing data. </summary>
            <value> Type type of XML formatting to use. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.XmpFormatter._indentation">
            <summary> Gets or sets the number of spaces to indent the data when serializing. </summary>
            <value> The amount of indention. </value>
            <seealso cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.Formatting"/>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.XmpFormatter._encoding">
            <summary> Gets or sets the <STRONG>System.Text.Encoding</STRONG> to use when serializing the annotation data.
            </summary>
            <value> The text encoding used to serialize the annotation data. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.XmpFormatter._skipUnknownObjects">
            <summary> Gets or sets a value indicating whether objects that cannot be created are skipped instead of throwing an
            exception. </summary>
            <value> A value indicating if unknown objects are skipped when deserialized. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.XmpFormatter._resolution">
            <summary> Gets or sets the resolution of the annotation data. </summary>
            <value> The resolution of the annotation data. </value>
            <remarks> This value is saved as a <STRONG>DocumentResolution</STRONG> tag in the XMP data, allowing deserialization
            to customize the annotation's Location and Size properties to match the viewer resolution.  See the <see cref="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationDeserialization"/> event for more information. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.XmpFormatter._annotationDataVersion">
            <summary> Gets the annotation version </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.XmpFormatter._binder">
            <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> that performs type lookups during deserialization. 
            </summary>
            <value> The <see cref="T:System.Runtime.Serialization.SerializationBinder"/> that performs type lookups during deserialization. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Formatters.XmpFormatter._context">
            <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used for serialization and deserialization. </summary>
            <value> The <see cref="T:System.Runtime.Serialization.StreamingContext"/> used for serialization and deserialization. </value>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor">
            <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG>. </summary>
            <overloads> Constructs an <STRONG>XmpFormatter</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Boolean)">
            <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG> specifying formatting, indentation, whether or not
            data should be formatted as an XMP packet and whether to <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects"/>. </summary>
            <param name="formatting"> Specifies formatting options for the XmlTextWriter. </param>
            <param name="indentation"> The number of characters to use for indentation. </param>
            <param name="packet"> Indicates if the data should be formatted as an XMP packet. </param>
            <param name="skipUnknownObjects"> Indicates if the formatter should ignore unknown objects or raise an exception.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Boolean,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG> specifying formatting, indentation, whether or not
            data should be formatted as an XMP packet, whether to <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects"/>, and a resolution.
            </summary>
            <param name="formatting"> Specifies formatting options for the XmlTextWriter. </param>
            <param name="indentation"> The number of characters to use for indentation. </param>
            <param name="packet"> Indicates if the data should be formatted as an XMP packet. </param>
            <param name="skipUnknownObjects"> Indicates if the formatter should ignore unknown objects or raise an exception.
            </param>
            <param name="resolution"> The resolution of the annotations. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Text.Encoding,System.Boolean,System.Boolean,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG> specifying formatting, indentation, encoding,
            whether or not data should be formatted as an XMP packet, whether to <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects"/>, and a
            resolution. </summary>
            <param name="formatting"> Specifies formatting options for the XmlTextWriter. </param>
            <param name="indentation"> The number of characters to use for indentation. </param>
            <param name="encoding"> <para>The <STRONG>System.Text.Encoding</STRONG> to use when serializing the
            annotations.</para> </param>
            <param name="packet"> Indicates if the data should be formatted as an XMP packet. </param>
            <param name="skipUnknownObjects"> Indicates if the formatter should ignore unknown objects or raise an exception.
            </param>
            <param name="resolution"> The resolution of the annotations. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.Deserialize(System.IO.Stream)">
            <summary>Deserializes XMP data back into the original objects.</summary>
            <returns>The deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the serializationStream parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there are any errors during the deserialization process.</exception>
            <param name="serializationStream">A stream containing XMP formatted data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>Serializes an object into XMP data.</summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the serializationStream or graph parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during the serialization process.</exception>
            <param name="serializationStream">The stream where the XMP data will be stored.</param>
            <param name="graph">The object to serialize.</param>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> that performs type lookups during deserialization.
            </summary>
            <value>
            The <see cref="T:System.Runtime.Serialization.SerializationBinder"/> that performs type lookups during deserialization.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Context">
            <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used for serialization
            and deserialization. </summary>
            <value> The <see cref="T:System.Runtime.Serialization.StreamingContext"/> used for serialization and deserialization. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.SurrogateSelector">
            <summary>
            Gets or sets the <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SurrogateSelector"/> used by the current formatter.
            </summary>
            <value>
            The <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SurrogateSelector"/> used by this formatter.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.AnnotationDataVersion">
            <summary> Gets the annotation version </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Resolution">
            <summary> Gets or sets the resolution of the annotation data. </summary>
            <value> The resolution of the annotation data. </value>
            <remarks> This value is saved as a <STRONG>DocumentResolution</STRONG> tag in the XMP data, allowing deserialization
            to customize the annotation's Location and Size properties to match the viewer resolution.  See the <see cref="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationDeserialization"/> event for more information. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects">
            <summary>
            Gets or sets a value indicating whether objects that cannot be created are
            skipped instead of throwing an exception.
            </summary>
            <value>A value indicating if unknown objects are skipped when deserialized.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Formatting">
            <summary>Gets or sets the type of XML formatting used when serializing data.</summary>
            <value>Type type of XML formatting to use.</value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Indentation">
            <summary>Gets or sets the number of spaces to indent the data when serializing.</summary>
            <value>The amount of indention.</value>
            <seealso cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.Formatting">Formatting Property</seealso>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Encoding">
            <summary> Gets or sets the <STRONG>System.Text.Encoding</STRONG> to use when serializing the annotation data.
            </summary>
            <value> The text encoding used to serialize the annotation data. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.CreateXmpPacket">
            <summary>
            Gets or sets a value indicating whether full XMP is generated or an XMP
            packet.
            </summary>
            <value>A value indicating if the serialized data is formatter as an XMP packet.</value>
            <remarks>The data must be formatted as an XMP packet when embedded into images.</remarks>
        </member>
        <member name="T:Atalasoft.Annotate.FreehandData">
            <summary> Data for a FreehandAnnotation. </summary>
            <seealso> FreehandAnnotation Class </seealso>
        </member>
        <member name="T:Atalasoft.Annotate.PointBaseData">
            <summary> This abstract class is used for annotations that require a series of points to define their shape.
            </summary>
            <remarks> When creating a custom annotation that derives from Atalasoft.Annotate.UI.PointBaseAnnotation, the related
            <STRONG>AnnotationData</STRONG> object must derive form <STRONG>PointBaseData</STRONG>. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.PointBaseData._points">
            <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection"/> used to store the points for the annotation. </summary>
            <value> A collection of PointF objects. </value>
        </member>
        <member name="M:Atalasoft.Annotate.PointBaseData.#ctor">
            <summary>
            The default constructor of a PointBaseData object. PointBaseData is an abstract
            class and cannot be created directly.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.PointBaseData.#ctor(Atalasoft.Annotate.PointFCollection)">
            <summary>
            A constructor for the PointBaseData object specifying the PointFCollection
            used.
            </summary>
            <param name="points">A PointFCollection for this object.</param>
        </member>
        <member name="M:Atalasoft.Annotate.PointBaseData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            A constructor for the PointBaseData object specifying the serialization
            information for this data.
            </summary>
            <param name="info">The SerializationInfo object containing information about this data.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Annotate.PointBaseData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object for this data. </summary>
            <param name="info"> The SerializationInfo object where information will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PointBaseData.GetPointBounds">
            <summary> Gets a bounding rectangle which includes all of the <see cref="P:Atalasoft.Annotate.PointBaseData.Points"/> </summary>
            <returns> A RectangleF that contains all of the <see cref="P:Atalasoft.Annotate.PointBaseData.Points"/> </returns>
        </member>
        <member name="M:Atalasoft.Annotate.PointBaseData.CalculateBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary> Calculates the bounding rectangle for the annotation. </summary>
            <returns> The bounding rectangle for the annotation. </returns>
            <param name="pen"> The pen used for the points. </param>
            <param name="shadow"> The shadow for the annotation. </param>
            <param name="shadowOffset"> The shadow offset for the annotation. </param>
            <param name="translucent"> A value indicating whether the annotation is translucent. </param>
            <param name="closed"> A value indicating whether the annotation points form a closed shape. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PointBaseData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary> Fills the data object with cloned property values. </summary>
            <remarks> This method should be called by classes that derive from PointBaseData when they need to create a clone of
            the object. </remarks>
            <param name="data"> A class that derives from <STRONG>PointBaseData</STRONG>. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PointBaseData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Size"/> property has changed.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs"/> containing information about this change.</param>
        </member>
        <member name="P:Atalasoft.Annotate.PointBaseData.Points">
            <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection"/> used to store the points for the annotation. </summary>
            <value> A collection of PointF objects. </value>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor">
            <summary> Creates a new instance of <STRONG>FreehandData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>FreehandData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor(System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the initial points. </summary>
            <exception> Thrown if the points parameter is null. </exception>
            <param name="points"> The initial points for the freehand.  These points must be in annotation space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the outline. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the lines or curves. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>FreehandData</STRONG> specifying the outline and initial points.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
            <param name="outline"> The outline for the freehand. </param>
            <param name="points"> The initial point for the freehand. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>FreehandData</STRONG> specifying the outline, fill and initial
            points.</para> </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
            <param name="fill"> The fill for the freehand. </param>
            <param name="outline"> The outline for the freehand. </param>
            <param name="points"> The initial point for the freehand. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>FreehandData</STRONG> with no initial points, specifying the fill,
            outline and translucency </summary>
            <param name="fill"> The fill for the freehand. </param>
            <param name="outline"> The outline for the freehand. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the initial points, fill, outline and
            translucency </summary>
            <param name="points"> The initial points for the freehand.  These points must be in annotation space. </param>
            <param name="fill"> The fill for the freehand. </param>
            <param name="outline"> The outline for the freehand. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the initial points, fill, outline and
            translucency </summary>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the freehand points. These points must be in
            annotation space. </param>
            <param name="fill"> The fill for the freehand. </param>
            <param name="outline"> The outline for the freehand. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>FreehandData</STRONG> from serialized information. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
            <param name="info"> The serialization information for this object. </param>
            <param name="context"> The streaming context for this object. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.WangAttributeData)">
            <summary> Creates a new instance of <STRONG>FreehandData</STRONG> from WANG attribute data. </summary>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.WangAttributeData"/> containing information about this object. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this annotation. </summary>
            <param name="info"> The SerializationInfo object where information will be stored. </param>
            <param name="context"> A StreamingContext for the information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.GetLineCapBounds">
            <summary>
            Called to get the rectangle bounds of the line cap used in an <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/>.
            </summary>
            <returns>
            The bounds for the line cap.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.Equals(System.Object)">
            <summary> Determines if another <STRONG>FreehandData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>FreehandData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>PointBaseData</STRONG>.</param>
            <remarks>
            This method should be called by classes that derive from PointBaseData when they need to create a clone of
            the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.Clone">
            <summary> Create a copy of this annotation. </summary>
            <returns> A copy of this <STRONG>FreehandData</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.FreehandData.GetWangAttributeData">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> with information about this annotation. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for this annotation. </returns>
        </member>
        <member name="P:Atalasoft.Annotate.FreehandData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.FreehandData.LineType">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.FreehandLineType"/> used for the lines or curves of this annotation.
            </summary>
            <value> The line type for this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.FreehandData.Outline">
            <summary> Gets or sets the outline for this freehand. </summary>
            <value> The outline for this freehand. </value>
        </member>
        <member name="P:Atalasoft.Annotate.FreehandData.ClosedShape">
            <summary> Gets or sets a value indicating whether the freehand is a closed shape. </summary>
            <value> Indicates if the freehand is a closed shape. </value>
        </member>
        <member name="P:Atalasoft.Annotate.FreehandData.Fill">
            <summary> Gets or sets the fill for the freehand. </summary>
            <value> The fill of the freehand. </value>
        </member>
        <member name="P:Atalasoft.Annotate.FreehandData.Translucent">
            <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
            <value> A value indicating whether this annotation is used as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the RotateDocument method. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.HotSpotData">
            <summary> Data for a HotSpotAnnotation object. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.HotSpotData._active">
            <summary> Gets or sets a value indicating whether the hotspot is active. </summary>
            <value> A value indicating whether the hotspot is active. </value>
            <remarks> When the hotspot is active, the <see cref="P:Atalasoft.Annotate.HotSpotData.ActiveFill"/> brush and <see cref="P:Atalasoft.Annotate.HotSpotData.ActiveOutline"/> pen are used to provide a visual indication of the hotspot area. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.#ctor">
            <summary> Creates a new instance of <STRONG>HotSpotData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>HotSpotData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds fill. </summary>
            <param name="rectangle"> The bounding rectangle for this object. </param>
            <param name="fill"> The fill used when not active. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds and outline.
            </summary>
            <param name="rectangle"> The bounding rectangle for this object. </param>
            <param name="outline"> The outline used when not active. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds, fill and outline.
            </summary>
            <param name="rectangle"> The bounding rectangle for this object. </param>
            <param name="fill"> The fill used when not active. </param>
            <param name="outline"> The outline used when not active. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds, active and
            inactive fill, and outline. </summary>
            <param name="rectangle"> The bounding rectangle for this object. </param>
            <param name="fill"> The fill used when not active. </param>
            <param name="outline"> The outline used when not active. </param>
            <param name="activeFill"> The fill used when the annotation is active. </param>
            <param name="activeOutline"> The outline used when the annotation is active. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> from serialized information. </summary>
            <param name="info"> The serialization information of this object. </param>
            <param name="context"> A context containing information about this object. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this <STRONG>HotSpotData</STRONG>. </summary>
            <param name="info"> The SerializationInfo object where data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.Clone">
            <summary> Creates a copy of this <STRONG>HotSpotData</STRONG>. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.Equals(System.Object)">
            <summary> Determines if another <STRONG>HotSpotData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>HotSpotData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotData.Active">
            <summary> Gets or sets a value indicating whether the hotspot is active. </summary>
            <value> A value indicating whether the hotspot is active. </value>
            <remarks> When the hotspot is active, the <see cref="P:Atalasoft.Annotate.HotSpotData.ActiveFill"/> brush and <see cref="P:Atalasoft.Annotate.HotSpotData.ActiveOutline"/> pen are used to provide a visual indication of the hotspot area. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotData.Fill">
            <summary> Gets or sets the fill used when the HotSpot is not active. </summary>
            <value> The inactive fill. </value>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotData.Outline">
            <summary> Gets or sets the outline used when the HotSpot is inactive. </summary>
            <value> The inactive outline. </value>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotData.ActiveFill">
            <summary> Gets or sets the fill used when the HotSpot is active. </summary>
            <value> The active fill. </value>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotData.ActiveOutline">
            <summary> Gets or sets the outline used when the HotSpot is active. </summary>
            <value> The active outline. </value>
        </member>
        <member name="T:Atalasoft.Annotate.HotSpotFreehandData">
            <summary>
            Data for a hot spot freehand annotation.
            </summary>
            <summary> Data for a HotSpotFreehandAnnotation. </summary>
            <seealso> HotSpotFreehandAnnotation Class </seealso>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>HotSpotFreehandData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the initial points. </summary>
            <exception> Thrown if the points parameter is null. </exception>
            <param name="points"> The initial points for the hotspot.  These points must be in annotation space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the fill. </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the fill. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the outline, fill and initial
            points. </summary>
            <exception> Thrown if a parameter is null. </exception>
            <param name="fill"> The fill for the hotspot. </param>
            <param name="points"> The initial point for the hotspot.  These points must be in annotation space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the fill and active fill.
            </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the fill. </param>
            <param name="activeFill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the fill when the hotspot is active. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the outline, fill and initial
            points. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if a parameter is null. </exception>
            <param name="fill"> The fill for the hotspot. </param>
            <param name="activeFill"> The fill used when the hotspot is active. </param>
            <param name="points"> The initial points for the hotspot.  These points must be in annotation space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> from serialized information. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
            <param name="info"> The serialization information for this object. </param>
            <param name="context"> The streaming context for this object. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>PointBaseData</STRONG>.</param>
            <remarks>
            This method should be called by classes that derive from PointBaseData when they need to create a clone of
            the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.Clone">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.Clone" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.Equals(System.Object)">
            <summary> Determines if another <STRONG>HotSpotFreehandData</STRONG> object has the same property settings.
            </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>HotSpotFreehandData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.HotSpotFreehandData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotFreehandData.Active">
            <summary> Gets or sets a value indicating whether the hotspot is active. </summary>
            <value> A value indicating whether the hotspot is active. </value>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotFreehandData.LineType">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.FreehandLineType"/> used for the lines or curves of this annotation.
            </summary>
            <value> The line type for this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotFreehandData.ActiveFill">
            <summary> Gets or sets the fill used when the HotSpot is active. </summary>
            <value> The active fill. </value>
        </member>
        <member name="P:Atalasoft.Annotate.HotSpotFreehandData.Fill">
            <summary> Gets or sets the fill used when the HotSpot is not active. </summary>
            <value> The inactive fill. </value>
        </member>
        <member name="T:Atalasoft.Annotate.Icons.IconResource">
            <summary> This class can be used to extract annotation icon images from the <STRONG>DotImage</STRONG> assembly.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.Icons.IconResource&quot;]/*"/>
        </member>
        <member name="M:Atalasoft.Annotate.Icons.IconResource.ExtractAnnotationIcon(Atalasoft.Annotate.Icons.AnnotateIcon,Atalasoft.Annotate.Icons.AnnotateIconSize)">
            <summary> Extracts an image from the <STRONG>DotImage</STRONG> assembly. </summary>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.Icons.IconResource~ExtractAnnotationIcon&quot;]/*"/>
            </overloads>
            <param name="icon"> The image to extract. </param>
            <param name="size"> The size of the image to extract. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Icons.AnnotateIcon">
            <summary> Specifies which image to extract with the <see cref="M:Atalasoft.Annotate.Icons.IconResource.ExtractAnnotationIcon(Atalasoft.Annotate.Icons.AnnotateIcon,Atalasoft.Annotate.Icons.AnnotateIconSize)"/> method.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Ellipse">
            <summary>
            Ellipse icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Freehand">
            <summary>
            Freehand icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.FreehandHighlighter">
            <summary>
            FreehandHighlighter icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Line">
            <summary>
            Line icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Lines">
            <summary>
            Lines icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Polygon">
            <summary>
            Polygon icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Protractor">
            <summary>
            Protractor icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Rectangle">
            <summary>
            Rectangle icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.RectangleHighlighter">
            <summary>
            RectangleHighlighter icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Redact">
            <summary>
            Redact icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.RubberStamp">
            <summary>
            RubberStamp icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Ruler">
            <summary>
            Ruler icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.StickyNote">
            <summary>
            StickyNote icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Text">
            <summary>
            Text icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.FreehandHotspot">
            <summary>
            FreehandHotspot icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Callout">
            <summary>
            Callout icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.RectangleHotspot">
            <summary>
            RectangleHotspot icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.EmbeddedImage">
            <summary>
            EmbeddedImage icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.ReferencedImage">
            <summary>
            ReferencedImage icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.PdfLine">
            <summary>
            PdfLine icon
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.PdfMarkup">
            <summary>
            PdfMarkup icon
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Icons.AnnotateIconSize">
            <summary> Specifies the image size to extract with <see cref="M:Atalasoft.Annotate.Icons.IconResource.ExtractAnnotationIcon(Atalasoft.Annotate.Icons.AnnotateIcon,Atalasoft.Annotate.Icons.AnnotateIconSize)"/>. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIconSize.Size16">
            <summary> A 16 x 16 pixel image. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIconSize.Size24">
            <summary> A 24 x 24 pixel image. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Icons.AnnotateIconSize.Size32">
            <summary> A 32 x 32 pixel image. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImporterFactory">
            <summary> A delegate for constructing annotations from data that a given <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter"/>
            doesn't understand. </summary>
            <returns> A new AnnotationData object or null.  If the delegate returns null, this annotation is ignored. </returns>
            <param name="importer"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter"/> that attempted to import the annotation. </param>
            <param name="location"> The location on the target page where the annotation will go. </param>
            <param name="data"> The data used to construct the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventHandler">
            <summary> A delegate called after annotation data has been imported. </summary>
            <param name="sender"> The importer being used. </param>
            <param name="args"> An <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs"/> containing information about the imported data.
            </param>
        </member>
        <member name="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventHandler">
            <summary> A delegate called for each page imported. </summary>
            <param name="sender"> The importer used. </param>
            <param name="args"> An <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs"/> containing information about the page that
            was imported. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs">
            <summary> An object representing information about an annotation being imported. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs._importer">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter"/> that has imported the annotation. </summary>
            <value> The annotation importer. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs._annotation">
            <summary> Gets the annotation that was imported. </summary>
            <value> The imported annotation. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs._page">
            <summary> Gets the page from which the <see cref="T:Atalasoft.Annotate.AnnotationData"/> object was imported. </summary>
            <value> The page the annotation was imported from. </value>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.#ctor(Atalasoft.Annotate.Importers.AnnotationDataImporter,Atalasoft.Annotate.AnnotationData,System.Int32,System.Int32)">
            <summary> Constructs a new <STRONG>AnnotationDataImportEventArgs</STRONG> object. </summary>
            <param name="importer"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter"/> that has imported the annotation. </param>
            <param name="annotation"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object that was imported. </param>
            <param name="page"> The page from which the <see cref="T:Atalasoft.Annotate.AnnotationData"/> object was imported. </param>
            <param name="annotIndex"> The index on the page of the <see cref="T:Atalasoft.Annotate.AnnotationData"/> object. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.Importer">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter"/> that has imported the annotation. </summary>
            <value> The annotation importer. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.Annotation">
            <summary> Gets the annotation that was imported. </summary>
            <value> The imported annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.Page">
            <summary> Gets the page from which the <see cref="T:Atalasoft.Annotate.AnnotationData"/> object was imported. </summary>
            <value> The page the annotation was imported from. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.AnnotationIndex">
            <summary> Gets the index on the page of the <see cref="T:Atalasoft.Annotate.AnnotationData"/> object. </summary>
            <value> The index of the annotation. </value>
        </member>
        <member name="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs">
            <summary> An object representing information about a page of annotations being imported. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs._importer">
            <summary> Gets the AnnotationDataImporter used to import the annotations. </summary>
            <value> The annotation importer. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs._layer">
            <summary> Gets the layer of annotations imported. </summary>
            <value> The layer imported. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs._page">
            <summary> Gets the page number of the annotations being imported. </summary>
            <value> The page number of the annotations. </value>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.#ctor(Atalasoft.Annotate.Importers.AnnotationDataImporter,Atalasoft.Annotate.LayerData,System.Int32)">
            <summary> Constructs a new <STRONG>AnnotationDataPageImportEventArgs</STRONG> object. </summary>
            <param name="importer"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter"/> importing the page. </param>
            <param name="layer"> The layer of annotations imported. </param>
            <param name="page"> The page number of the annotations being imported. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.Importer">
            <summary> Gets the AnnotationDataImporter used to import the annotations. </summary>
            <value> The annotation importer. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.Layer">
            <summary> Gets the layer of annotations imported. </summary>
            <value> The layer imported. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.Page">
            <summary> Gets the page number of the annotations being imported. </summary>
            <value> The page number of the annotations. </value>
        </member>
        <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImporter">
            <summary> <STRONG>AnnotationDataImporter</STRONG> is an abstract base class used to define how annotations are
            imported from arbitrary data files into DotImage. </summary>
            <remarks> Since this class is abstract, you can't use it directly </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.Importers.AnnotationDataImporter._units">
            <summary> Gets or sets the units of the target for the annotations. </summary>
            <value> The target units. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Importers.AnnotationDataImporter._resolution">
            <summary> Gets or sets the target resolution for the annotations. </summary>
            <value> The target resolution. </value>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Load">
            <summary> The load method is used to allow an <STRONG>AnnotationDataImporter</STRONG> to load and to possibly cache
            annotations. </summary>
            <remarks> Load is called automatically by any method that needs to access internal annotation data (e.g., PageCount
            or Import).  Load is present for clients who want to control when annotation data is specifically loaded. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import">
            <summary> Imports all annotations as <see cref="T:Atalasoft.Annotate.AnnotationDataCollection"/>. </summary>
            <returns> A new <see cref="T:Atalasoft.Annotate.AnnotationDataCollection"/> object representing annotations for the entire document. 
            Each <see cref="T:Atalasoft.Annotate.LayerData"/> within the collection represents one page of annotations.  If a page has no
            annotations, the <see cref="T:Atalasoft.Annotate.LayerData"/> will be non-null, but empty. </returns>
            <overloads> Imports annotations from a source </overloads>
            <remarks> <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Load"/> must be called before any of the Import methods. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import(System.Int32)">
            <summary> Imports a page of annotations as <see cref="T:Atalasoft.Annotate.LayerData"/>. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.LayerData"/> containing a set of annotations from the page. </returns>
            <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import(System.Int32,System.Int32)">
            <summary> Imports a single annotation from a given page of annotations. </summary>
            <returns> A single <see cref="T:Atalasoft.Annotate.AnnotationData"/> object representing the imported annotation. </returns>
            <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
            <param name="annotIndex"> The zero-based annotation which will be imported.  annotIndex is range checked against the
            number of annotations of the page.  The number of annotations on a page is available through <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)"/>. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)">
            <summary> Returns the number of annotations on a conceptual page of a document. </summary>
            <param name="page"> page is an integer that represents the conceptual zero based page index of a document.  It will
            be range checked against the total number of pages in the document. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.OnAnnotationImported(Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs)">
            <summary> Raises the <see cref="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationImported"/> event. </summary>
            <remarks> This event is raised after an annotation has been imported. </remarks>
            <param name="e"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs"/> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.OnAnnotationPageImported(Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs)">
            <summary> Raises the <see cref="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImported"/> event. </summary>
            <remarks> The event is raised after a page of annotations has been imported. </remarks>
            <param name="e"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs"/> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.OnAnnotationPageImporting(Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs)">
            <summary> Raises the <see cref="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImporting"/> event. </summary>
            <remarks> This event is raised before a page of annotations will be imported. </remarks>
            <param name="e"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs"/> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.IsValidFormat(System.IO.Stream)">
            <summary> Indicates whether or not an <STRONG>AnnotationDataImporter</STRONG> can recognize a particular data
            format. </summary>
            <returns> true indicates that the <STRONG>AnnotationDataImporter</STRONG> recognizes this format. </returns>
            <param name="stm"> A non-null stream used to recognize file format. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.FromStream(System.IO.Stream)">
            <summary> Constructs a new annotation importer associated with a given stream. </summary>
            <returns> A new annotation importer for importing annotations. </returns>
            <param name="stm"> A non-null stream containing annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLLoad">
            <summary> The low-level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Load"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLGetPageCount">
            <summary> The low-level implementation of <see cref="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.PageCount"/>. </summary>
            <returns> Returns the number of pages in the document. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLGetAnnotationCount(System.Int32)">
            <summary> Low level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)"/>. </summary>
            <returns> An integer representing the number of annotations on the page. </returns>
            <param name="page"> A zero-based integer representing the page from which the annotations are being counted.  Page
            will always be in range. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLImport(System.Int32)">
            <summary> Imports all annotations as a <see cref="T:Atalasoft.Annotate.LayerData"/> object. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.LayerData"/> containing a set of annotations from the page. </returns>
            <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
            <overloads> The low-level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import"/>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLImport(System.Int32,System.Int32)">
            <overloads> The low-level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import"/>. </overloads>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.PageCount">
            <summary> Gets the total number of pages in a document. </summary>
            <remarks> It is not necessary to call <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Load"/> before accessing PageCount; this
            will happen automatically. </remarks>
            <value> The number of pages in a document. </value>
        </member>
        <member name="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationImported">
            <summary> Raised after a single annotation has been imported. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImported">
            <summary> Raised after a page of annotations has been imported. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImporting">
            <summary> Raised before a page of annotations will be imported. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.ThrowOnError">
            <summary> Gets or sets whether or not the importer will throw or suppress exceptions. </summary>
            <value> A value indicating whether the importer will throw exceptions. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.LastErrors">
            <summary> Gets a collection of strings representing errors encountered while importing annotations. </summary>
            <value> A StringCollection containing errors encountered while importing. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.FailsafeAnnotationFactory">
            <summary> Gets or sets a delegate that is used to create annotations if an importer is unable to do so. </summary>
            <value> A delegate used to create annotations if an importer is unable to do so. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.Units">
            <summary> Gets or sets the units of the target for the annotations. </summary>
            <value> The target units. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.Resolution">
            <summary> Gets or sets the target resolution for the annotations. </summary>
            <value> The target resolution. </value>
        </member>
        <member name="T:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter">
            <summary> An object for importing annotations from a stream of XMP data. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.#ctor">
            <summary> Creates a new instance of <STRONG>XmpAnnotationDataImporter</STRONG>. </summary>
            <overloads> Constructs a new <STRONG>XmpAnnotationDataImporter</STRONG> object. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.#ctor(System.IO.Stream)">
            <summary> Creates a new instance of <STRONG>XmpAnnotationDataImporter</STRONG> with a stream of XMP data. </summary>
            <exception> Thrown if the stm argument is null (Nothing in VB). </exception>
            <param name="stm"> A stream from which annotations will be imported. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.FromStream(System.IO.Stream)">
            <summary> Constructs a new <STRONG>XmpAnnotationDataImporter</STRONG> for the given stream. </summary>
            <exception> Thrown if the stm argument is null (Nothing in VB). </exception>
            <param name="stm"> A non-null stream containing XMP data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.IsValidFormat(System.IO.Stream)">
            <summary> Indicates if the stream contains XMP data. </summary>
            <returns> Returns true if the stream contains XMP data; false otherwise. </returns>
            <param name="stm"> A non-null stream containing XMP data </param>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLLoad">
            <summary>
            The low-level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Load"/>.
            </summary>
            <exception cref="T:Atalasoft.Imaging.Codec.CodecException">Xmp data stream is neither JPEG nor TIFF.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLGetPageCount">
            <summary>
            The low-level implementation of <see cref="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.PageCount"/>.
            </summary>
            <returns>
            Returns the number of pages in the document.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLGetAnnotationCount(System.Int32)">
            <summary>
            Low level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)"/>.
            </summary>
            <param name="page">A zero-based integer representing the page from which the annotations are being counted.  Page
            will always be in range.</param>
            <returns>
            An integer representing the number of annotations on the page.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLImport(System.Int32)">
            <summary>
            Imports all annotations as a <see cref="T:Atalasoft.Annotate.LayerData"/> object.
            </summary>
            <param name="page">The zero-based page from which annotations will be imported.  page is range checked against the
            document.</param>
            <returns>
            A <see cref="T:Atalasoft.Annotate.LayerData"/> containing a set of annotations from the page.
            </returns>
            <overloads> The low-level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import(System.Int32,System.Int32)"/>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLImport(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="page"></param>
            <param name="annotIndex"></param>
            <returns></returns>
            <overloads> The low-level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import(System.Int32,System.Int32)"/>. </overloads>
        </member>
        <member name="T:Atalasoft.Annotate.WangAttributeData">
            <summary> This class hold information used by the <see cref="T:Atalasoft.Annotate.Formatters.WangFormatter"/> when serializing <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.#ctor">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateImageEmbeddedAttribute(System.Drawing.RectangleF,System.Byte[],System.Boolean)">
            <summary> Creates a new <STRONG>WangAttributeData</STRONG> for an ImageEmbedded annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="dib"> The embedded image data in DIB format. </param>
            <param name="transparent"> A value indicating whether white pixels are rendered as transparent. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateImageReferenceAttribute(System.Drawing.RectangleF,System.String,System.Boolean)">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for an ImageReference annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="fileName"> The filename of the image. </param>
            <param name="transparent"> A value indicating whether white pixels are rendered as transparent. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateStraightLineAttribute(System.Drawing.Color,System.Boolean,System.Single,Atalasoft.Annotate.PointFCollection)">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a StraightLine annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="color1"> The line color of the annotation. </param>
            <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
            <param name="lineSize"> The annotation line size. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing annotation data points. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateFreehandLineAttribute(System.Drawing.Color,System.Boolean,System.Single,Atalasoft.Annotate.PointFCollection)">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a FreehandLine annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="color1"> The line color of the annotation. </param>
            <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
            <param name="lineSize"> The annotation line size. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing annotation data points. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateHollowRectangleAttribute(System.Drawing.RectangleF,System.Drawing.Color,System.Boolean,System.Single)">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a HollowRectangle annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="color1"> The line color of the annotation. </param>
            <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
            <param name="lineSize"> The annotation line size. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateFilledRectangleAttribute(System.Drawing.RectangleF,System.Drawing.Color,System.Boolean)">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a FilledRectangle annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="color1"> The color of the annotation. </param>
            <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateAttachANoteAttribute(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for an Attach-a-Note annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="color1"> The color of the annotation. </param>
            <param name="color2"> The text color. </param>
            <param name="font"> The font used when rendering text. </param>
            <param name="text"> The text of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateTypedTextAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a TypedText annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="color1"> The color of the annotation. </param>
            <param name="font"> The font used when rendering text. </param>
            <param name="text"> The text of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateTextFromFileAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
            <summary> Creates a new instance of <STRONG>WantAttributeData</STRONG> for a TextFromFile annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="color1"> The color of the annotation. </param>
            <param name="font"> The font used when rendering text. </param>
            <param name="text"> The text of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateTextStampAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a TextStamp annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="color1"> The color of the annotation. </param>
            <param name="font"> The font used when rendering text. </param>
            <param name="text"> The text of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.WangAttributeData.CreateOcrRegionAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.Int32)">
            <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for an OCR region annotation. </summary>
            <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
            <param name="bounds"> The bounds for the annotation. </param>
            <param name="color1"> The color of the annotation. </param>
            <param name="font"> The font for the annotation. </param>
            <param name="sequenceOrder"> The sequence order for the annotation. </param>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Type">
            <summary>The type of WANG annotation.</summary>
            <value>The annotation type.</value>
            <remarks>
            	<para>Each WangAnnotationType requires setting specific properties. Below is a list
                for these properties:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term><strong>WangAnnotationType</strong></term>
            				<description><strong>Properties</strong></description>
            			</item>
            			<item>
            				<term>ImageEmbedded</term>
            				<description>Bounds<br/>
                            Dib<br/>
                            Transparent</description>
            			</item>
            			<item>
            				<term>ImageReference</term>
            				<description>Bounds<br/>
                            FileName<br/>
                            Transparent</description>
            			</item>
            			<item>
            				<term>StraightLine<br/>
                            FreehandLine</term>
            				<description>Color1<br/>
                            Highlighting<br/>
                            LineSize<br/>
                            Points</description>
            			</item>
            			<item>
            				<term>HollowRectangle</term>
            				<description>Bounds<br/>
                            Color1<br/>
                            Highlighting<br/>
                            LineSize</description>
            			</item>
            			<item>
            				<term>FilledRectangle</term>
            				<description>Bounds<br/>
                            Color1<br/>
                            Highlighting</description>
            			</item>
            			<item>
            				<term>TypedText<br/>
                            TextFromFile<br/>
                            TextStamp</term>
            				<description>Bounds<br/>
                            Color1<br/>
                            Font<br/>
                            Text</description>
            			</item>
            			<item>
            				<term>AttachANote</term>
            				<description>Bounds<br/>
                            Color1<br/>
                            Color2<br/>
                            Font<br/>
                            Text</description>
            			</item>
            		</list>
            	</para>
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Bounds">
            <summary> Gets or sets the bounding rectangle of the annotation. </summary>
            <value> The bounding rectangle of the annotation. </value>
            <remarks> See the <see cref="P:Atalasoft.Annotate.WangAttributeData.Type"/> property for information on which WANG annotation types
            require this property. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Color1">
            <summary> The primary color of the annotation. </summary>
            <value> The color of the annotation. </value>
            <remarks> See the <see cref="P:Atalasoft.Annotate.WangAttributeData.Type"/> property for information on which WANG annotation types
            require this property. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Color2">
            <summary> Gets or sets the text color of an Attach-a-Note WANG annotation. </summary>
            <value> The Attach-a-Note text color. </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Highlighting">
            <summary> Gets or sets a value indicating whether the annotation is a highlighter. </summary>
            <value> A value indicating whether or not this annotation is a highlighter. </value>
            <remarks> See the <see cref="P:Atalasoft.Annotate.WangAttributeData.Type"/> property for information on which WANG annotation types
            require this property. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Transparent">
            <summary> Gets or sets a value indicating whether white pixel are rendered as transparent. </summary>
            <value> A value indicating whether white pixels are rendered as transparent. </value>
            <remarks> See the <see cref="P:Atalasoft.Annotate.WangAttributeData.Type"/> property for information on which WANG annotation types
            require this property. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.LineSize">
            <summary> Gets or sets the size of the annotation lines. </summary>
            <remarks> See the <see cref="P:Atalasoft.Annotate.WangAttributeData.Type"/> property for information on which WANG annotation types
            require this property. </remarks>
            <value> The annotation line size. </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Font">
            <summary> Gets or sets the font used for WANG annotations that contain text. </summary>
            <remarks> See the <see cref="P:Atalasoft.Annotate.WangAttributeData.Type"/> property for information on which WANG annotation types
            require this property. </remarks>
            <value> The font used when rendering text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Time">
            <summary> Gets or sets the time that the annotation was first saved. </summary>
            <value> The time the annotation as saved. </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Visible">
            <summary> Gets or sets a value indicating if the annotation is visible. </summary>
            <value> A value indicating if the annotation is visible. </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Text">
            <summary> Gets or sets the text for the annotation. </summary>
            <remarks> See the <see cref="P:Atalasoft.Annotate.WangAttributeData.Type"/> property for information on which WANG annotation types
            require this property. </remarks>
            <value> The text of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Dib">
            <summary> Gets or sets the image data for embedded image annotations. </summary>
            <value> The embedded image data in DIB format. </value>
            <remarks> This data must be a standard DIB including the BITMAPINFOHEADER. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Points">
            <summary> Gets or sets a <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the points for a StraightLine or FreehandLine
            WANG annotation. </summary>
            <value> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing annotation data points. </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.FileName">
            <summary> Gets or sets the filename of the image for ImageReference WANG annotations. </summary>
            <value> The filename of the image. </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.UnknownType6Data">
            <summary>
            Gets or sets the unknown type6 data.
            </summary>
            <value>
            The unknown type6 data.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.WangAttributeData.ImageTransformation">
            <summary>
            Gets or sets the image transformation.
            </summary>
            <value>
            The image transformation.
            </value>
        </member>
        <member name="T:Atalasoft.Annotate.LayerData">
            <summary> The <STRONG>LayerData</STRONG> class is used to hold a collection of <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects,
            including other <STRONG>LayerData</STRONG> objects, allowing the annotations to be organized into layers. </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.LayerData&quot;]/*"/>
            
            <example>
                The code below creates a <strong>LayerData</strong> object and adds a couple
                <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData.html">AnnotationData</a>
                objects in addition to a sub layer.
                <code lang="CS" title="LayerDataExample">
            LayerData mainLayer = new LayerData();
             
            // Add a couple AnnotationData objects.
            mainLayer.Items.Add(new EllipseData(new RectangleF(120, 12, 90, 180), new AnnotationBrush(Color.Red)));
            mainLayer.Items.Add(new LineData(new AnnotationPen(Color.Blue, 2), new PointF(30, 30), new PointF(180, 180)));
             
            // Add a sub layer object.
            LayerData subLayer = new LayerData();
            subLayer.Items.Add(new RectangleData(new RectangleF(10, 20, 120, 80), new AnnotationBrush(Color.BlueViolet)));
            subLayer.Items.Add(new TextData("My TextData Object"));
            mainLayer.Items.Add(subLayer);
                </code>
            	<code lang="VB" title="LayerDataExampleVB">
            Dim mainLayer As LayerData =  New LayerData() 
             
            ' Add a couple AnnotationData objects.
            mainLayer.Items.Add(New EllipseData(New RectangleF(120, 12, 90, 180), New AnnotationBrush(Color.Red)))
            mainLayer.Items.Add(New LineData(New AnnotationPen(Color.Blue, 2), New PointF(30, 30), New PointF(180, 180)))
             
            ' Add a sub layer object.
            Dim subLayer As LayerData =  New LayerData() 
            subLayer.Items.Add(New RectangleData(New RectangleF(10, 20, 120, 80), New AnnotationBrush(Color.BlueViolet)))
            subLayer.Items.Add(New TextData("My TextData Object"))
            mainLayer.Items.Add(subLayer)
                </code>
            </example>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.#ctor">
            <summary>Creates a new instance of <strong>LayerData</strong>.</summary>
            <summary> Creates a new instance of <STRONG>LayerData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>LayerData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LayerData</STRONG> from serialized data. </summary>
            <param name="info"> The SerializationInfo object containing information about this <STRONG>LayerData</STRONG>.
            </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this <STRONG>LayerData</STRONG>. </summary>
            <param name="info"> The SerializationInfo where information will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.GetAttachments(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns an <STRONG>IEumerable</STRONG> of <see cref="T:Atalasoft.Annotate.AnnotationData"/> for all annotations attached to the
            specified parent. </summary>
            <returns> An <STRONG>IEumerable</STRONG> of <see cref="T:Atalasoft.Annotate.AnnotationData"/> for all annotations attached to the
            specified parent. </returns>
            <param name="parent"> The parent annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.Clone">
            <summary> Creates a copy of this <STRONG>LayerData</STRONG> object. </summary>
            <returns> A copy of this object. </returns>
            <remarks> A clone of every <see cref="T:Atalasoft.Annotate.AnnotationData"/> in the layer is also created in this process. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.Equals(System.Object)">
            <summary> Determines if another <STRONG>LayerData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>LayerData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.OnRotationChanged(System.EventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnRotationChanged(System.EventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.OnLocationChanged(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnLocationChanged(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.Rotate(System.Single)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.Rotate(System.Single)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LayerData.OnDeserialization(System.Object)">
            <summary> Called after an object has been fully deserialized by a serialization formatter.<!--DXMETADATA end -->
            </summary>
            <param name="sender"> This parameter is not used and will be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB).
            </param>
        </member>
        <member name="P:Atalasoft.Annotate.LayerData.Items">
            <summary> Gets an <see cref="T:Atalasoft.Annotate.AnnotationDataCollection"/> used to hold the data for this layer. </summary>
            <value> An <see cref="T:Atalasoft.Annotate.AnnotationDataCollection"/> for this layer. </value>
        </member>
        <member name="P:Atalasoft.Annotate.LayerData.SerializeCollection">
            <summary> Gets or sets a value indicating whether the <see cref="T:Atalasoft.Annotate.AnnotationDataCollection"/> is serialized along
            with the <STRONG>LayerData</STRONG> object. </summary>
            <value> A value indicating whether the <see cref="T:Atalasoft.Annotate.AnnotationDataCollection"/> should be serialized. </value>
            <remarks> This property can be used to prevent the entire collection of <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects from
            being serialized when the <see cref="M:Atalasoft.Annotate.LayerData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> method is called. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.LayerData.GroupAnnotation">
            <summary> Gets or sets a value indicating whether the annotations in this layer are acting as a single group.
            </summary>
            <value> A value indicating whether this layer is a group. </value>
            <remarks> Setting this property to true will allow all contained annotations to be moved and resized together rather
            than separately. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.LayerData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="T:Atalasoft.Annotate.LineData">
            <remarks> This class is used by the LineAnnotation object. </remarks>
            <summary> This class holds data for the LineAnnotation. </summary>
            <seealso> LineAnnotation Class </seealso>
        </member>
        <member name="F:Atalasoft.Annotate.LineData._startPoint">
            <summary> Gets or sets the starting point for the line. </summary>
            <value> The starting point for the line in annotation space. </value>
        </member>
        <member name="F:Atalasoft.Annotate.LineData._endPoint">
            <summary> Gets or sets the ending point for the line. </summary>
            <value> The ending point for the line in annotation space. </value>
        </member>
        <member name="F:Atalasoft.Annotate.LineData._outline">
            <summary> Gets or sets the outline for the <STRONG>LineData</STRONG>. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </value>
        </member>
        <member name="F:Atalasoft.Annotate.LineData._translucent">
            <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
            <value> A value indicating if this annotation should act as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the RotateDocument method. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.#ctor">
            <summary> Creates a new instance of <STRONG>LineData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>LineData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>LineData</STRONG> specifying the outline. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary> <para><STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG></para>
            <para>Creates a new instance of <STRONG>LineData</STRONG> specifying the outline, starting and ending points.</para>
            </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
            <param name="startPoint"> The starting point of the line. </param>
            <param name="endPoint"> The ending point of the line. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary> <para><STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG></para>
            <para>Creates a new instance of <STRONG>LineData</STRONG> specifying the outline, starting and ending points.</para>
            </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
            <param name="startPoint"> The starting point of the line. </param>
            <param name="endPoint"> The ending point of the line. </param>
            <param name="translucent"> A value indicating if this annotation should act as a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>LineData</STRONG> specifying the outline and translucency. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.#ctor(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>LineData</STRONG> specifying the start point, end point, outline and
            translucency. </summary>
            <param name="startPoint"> The starting point of the line. </param>
            <param name="endPoint"> The ending point of the line. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LineData</STRONG> from serialized information. </summary>
            <param name="info"> The SerializationInfo object containing information for this <STRONG>LineData</STRONG>. </param>
            <param name="context"> The StreamingContext of this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.WangAttributeData)">
            <summary> Creates a new instance of <STRONG>LineData</STRONG> from a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object.
            </summary>
            <remarks> This annotation requires the Bounds, Color1 and Points properties of the WangAttributeData. </remarks>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.WangAttributeData"/> containing information about this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with data describing this <STRONG>LineData</STRONG>. </summary>
            <param name="info"> A SerializationInfo object where data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.GetLineCapBounds">
            <summary>
            Called to get the rectangle bounds of the line cap used in an <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/>.
            </summary>
            <returns>
            The bounds for the line cap.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.ResizeToBounds(System.Drawing.RectangleF)">
            <summary> Resizes this <STRONG>LineData</STRONG> object to fit within the given bounds </summary>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.Clone">
            <summary>Creates a copy of this LineData.</summary>
            <returns>A copy of this object.</returns>
            <summary> Creates a copy of this <STRONG>LineData</STRONG>. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.Equals(System.Object)">
            <summary> Determines if another <STRONG>LineData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>LineData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LineData.GetWangAttributeData">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object with information about this annotation. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing information required for WANG serialization.
            </returns>
        </member>
        <member name="P:Atalasoft.Annotate.LineData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.LineData.Outline">
            <summary> Gets or sets the outline for the <STRONG>LineData</STRONG>. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </value>
        </member>
        <member name="P:Atalasoft.Annotate.LineData.StartPoint">
            <summary> Gets or sets the starting point for the line. </summary>
            <value> The starting point for the line in annotation space. </value>
        </member>
        <member name="P:Atalasoft.Annotate.LineData.EndPoint">
            <summary> Gets or sets the ending point for the line. </summary>
            <value> The ending point for the line in annotation space. </value>
        </member>
        <member name="P:Atalasoft.Annotate.LineData.Translucent">
            <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
            <value> A value indicating if this annotation should act as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the RotateDocument method. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.LinesData">
            <summary> This class holds information for the LinesAnnotation. </summary>
            <seealso> LinesAnnotation Class </seealso>
        </member>
        <member name="F:Atalasoft.Annotate.LinesData._outline">
            <summary> Gets or sets the outline for the <STRONG>LinesData</STRONG> object. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </value>
        </member>
        <member name="F:Atalasoft.Annotate.LinesData._translucent">
            <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
            <value> A value indicating if this annotation should act as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the RotateDocument method. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor">
            <summary> Creates a new instance of <STRONG>LinesData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>LinesData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection)">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline and end points.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the line end points.  These must be specified in
            annotation space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline and an array of end points.
            </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="points"> An array of end points for the <STRONG>LinesData</STRONG>.  These must be specified in
            annotation space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection,System.Boolean)">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline, points and whether this
            annotation is a highlighter.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the line end points.  These must be specified in
            annotation space. </param>
            <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[],System.Boolean)">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline, an array of points and whether
            this annotation is a highlighter.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="points"> An array of end points for the <STRONG>LinesData</STRONG>.  Theses must be specified in
            annotation space. </param>
            <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline and translucency. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the end points, outline and translucency.
            </summary>
            <param name="points"> An array of end points for the lines.  Theses must be specified in annotation space. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the end points, outline and translucency.
            </summary>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the line end points.  These must be specified in
            annotation space. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LinesData</STRONG> from serialized information. </summary>
            <param name="info"> The serialization information containing data for this object. </param>
            <param name="context"> The StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with data from this class. </summary>
            <param name="info"> The SerializationInfo object that LinesData will be stored into. </param>
            <param name="context"> The StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.GetLineCapBounds">
            <summary>
            Called to get the rectangle bounds of the line cap used in an <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/>.
            </summary>
            <returns>
            The bounds for the line cap.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>PointBaseData</STRONG>.</param>
            <remarks>
            This method should be called by classes that derive from PointBaseData when they need to create a clone of
            the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.Clone">
            <summary> Create a copy of this <STRONG>LinesData</STRONG>. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.Equals(System.Object)">
            <summary> Determines if another <STRONG>LinesData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>LinesData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.LinesData.GetWangAttributeData">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object describing this annotation. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for this <STRONG>LinesData</STRONG>. </returns>
        </member>
        <member name="P:Atalasoft.Annotate.LinesData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.LinesData.Outline">
            <summary> Gets or sets the outline for the <STRONG>LinesData</STRONG> object. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </value>
        </member>
        <member name="P:Atalasoft.Annotate.LinesData.Translucent">
            <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
            <value> A value indicating if this annotation should act as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the RotateDocument method. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.MirrorEventHandler">
            <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.Mirrored"/> event. </summary>
            <param name="sender"> The object sending this event. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.MirrorEventArgs"/> containing information about this event. </param>
        </member>
        <member name="T:Atalasoft.Annotate.MirrorEventArgs">
            <summary> This class is used with the <see cref="M:Atalasoft.Annotate.AnnotationData.OnMirrored(Atalasoft.Annotate.MirrorEventArgs)"/> method to provide information on the
            mirror action. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.MirrorEventArgs._direction">
            <summary> Gets the direction of the mirror operation. </summary>
            <value> The mirror direction. </value>
        </member>
        <member name="F:Atalasoft.Annotate.MirrorEventArgs._maintainPosition">
            <summary> Gets a value indicating whether the annotation should maintain its visual position. </summary>
            <value> A value indicating whether the visual position should be maintained. </value>
            <remarks> When this property is <STRONG>true</STRONG>, the annotation's location will be changed to keep the
            annotation visually in the same location.  If <STRONG>false</STRONG>, the annotation is flipped along its axis.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.MirrorEventArgs.#ctor(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <summary> Creates a new instance of MirrorEventArgs specifying the mirror direction and whether the annotation
            should maintain it's visual position. </summary>
            <param name="direction"> The direction to mirror. </param>
            <param name="maintainPosition"> Indicates whether the annotation maintains its visual position.  If
            <STRONG>true</STRONG>, the annotation's location will be changed to keep the annotation visually in the same
            location.  If <STRONG>false</STRONG>, the annotation is flipped along its axis. </param>
        </member>
        <member name="P:Atalasoft.Annotate.MirrorEventArgs.Direction">
            <summary> Gets the direction of the mirror operation. </summary>
            <value> The mirror direction. </value>
        </member>
        <member name="P:Atalasoft.Annotate.MirrorEventArgs.MaintainPosition">
            <summary> Gets a value indicating whether the annotation should maintain its visual position. </summary>
            <value> A value indicating whether the visual position should be maintained. </value>
            <remarks> When this property is <STRONG>true</STRONG>, the annotation's location will be changed to keep the
            annotation visually in the same location.  If <STRONG>false</STRONG>, the annotation is flipped along its axis.
            </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.OcrRegionData">
            <summary> This class holds information for the <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation"/>. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.OcrRegionData._sequenceOrder">
            <summary> Gets or sets the sequence order value. </summary>
            <value> The sequence order. </value>
            <remarks> <para>This value determines the order in which OCR regions should be processed.  The first region must
            start with a value of 1.</para> </remarks>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="F:Atalasoft.Annotate.OcrRegionData._color">
            <summary> Gets or sets the color used for the selection. </summary>
            <value> The color used for the selection. </value>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor">
            <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG>. </summary>
            <overloads> Constructs an <STRONG>OcrRegionData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor(System.Drawing.RectangleF,System.Int32,System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG> specifying the selection bounds, sequence number
            of color. </summary>
            <param name="bounds"> The annotation bounds. </param>
            <param name="sequenceOrder"> The sequence number for this annotation.  This value must be 1 or greater. </param>
            <param name="color"> The color for the selection. </param>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG> from serialization data. </summary>
            <param name="info"> A <STRONG>SerializationInfo</STRONG> containing the annotation data. </param>
            <param name="context"> A <STRONG>StreamingContext</STRONG> for the data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor(Atalasoft.Annotate.WangAttributeData)">
            <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG> from WANG data. </summary>
            <param name="wangData"> The <see cref="T:Atalasoft.Annotate.WangAttributeData"/> containing information about this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Fills the SerializationInfo object with properties values for the base <STRONG>AnnotationData</STRONG>
            class.
            </summary>
            <param name="info">The SerializationInfo object where data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
            <example> AnnotationData Class </example>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.Clone">
            <summary>
            Returns a copy of this annotation data.
            </summary>
            <returns>
            A copy of this data.
            </returns>
            <example> AnnotationData Class </example>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.GetWangAttributeData">
            <summary>
            Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing information about the annotation to be
            formatted as WANG data.
            </summary>
            <returns>
            A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing the information required to generate WANG data.
            </returns>
            <remarks>
              <para>The WangFormatter will call this method when serializing the AnnotationData.</para>
              <para><STRONG>Note to implementors:</STRONG>,<BR/>In addition to the GetWangAttributeData method there must be a
            constructor that takes a WangAttributeData object in the class to allow the WangFormatter to deserialize the
            data.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/>, <see cref="P:Atalasoft.Annotate.AnnotationData.CreationTime"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>.  All other properties, including
            transforms used for rendering, are compared.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            <remarks>
            This value is not guaranteed to be unique, but the same object instance will always return the same hash
            value.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.OcrRegionData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary>
            Called just before a property value is changed.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> containing information about this change.</param>
        </member>
        <member name="P:Atalasoft.Annotate.OcrRegionData.Color">
            <summary> Gets or sets the color used for the selection. </summary>
            <value> The color used for the selection. </value>
        </member>
        <member name="P:Atalasoft.Annotate.OcrRegionData.SequenceOrder">
            <summary> Gets or sets the sequence order value. </summary>
            <value> The sequence order. </value>
            <remarks> <para>This value determines the order in which OCR regions should be processed.  The first region must
            start with a value of 1.</para> </remarks>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="T:Atalasoft.Annotate.PointFCollection">
            <summary> A collection of PointF objects used by points based annotations. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.PointFCollection.#ctor">
            <summary> Creates a new instance of <STRONG>PointFCollection</STRONG>. </summary>
            <overloads> Constructs a <STRONG>PointFCollection</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.PointFCollection.#ctor(System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>PointFCollection</STRONG> specifying the initial points. </summary>
            <exception> Thrown if the points parameter is null or contains no items. </exception>
            <param name="points"> The initial points for this collection. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PointFCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>PointFCollection</STRONG> from serialized data. </summary>
            <param name="info"> The serialization information for this object. </param>
            <param name="context"> The streaming context for this object. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PointFCollection.GetClonedObject">
            <summary> Returns a new instance of <STRONG>PointFCollection</STRONG>. </summary>
            <returns> A new instance of <STRONG>PointFCollection</STRONG>. </returns>
            <remarks> The collection returned by this method does not clone the point values. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.PointFCollection.IgnoreChanges">
            <summary> Gets or sets a value indicating whether the <see cref="T:Atalasoft.Annotate.PointFCollection"/> event should not be raised.
            </summary>
            <value> True if the <see cref="T:Atalasoft.Annotate.PointFCollection"/> event should not be raised. </value>
        </member>
        <member name="T:Atalasoft.Annotate.PolygonData">
            <summary> Contains annotation information for a PolygonAnnotation. </summary>
            <remarks> This class is used by the PolygonAnnotation. </remarks>
            <seealso> PolygonAnnotation Class </seealso>
        </member>
        <member name="F:Atalasoft.Annotate.PolygonData._outline">
            <summary> Gets or sets the outline for the <STRONG>PolygonData</STRONG>. </summary>
            <value> The outline of the <STRONG>PolygonData</STRONG>. </value>
        </member>
        <member name="F:Atalasoft.Annotate.PolygonData._fill">
            <summary> Gets or sets the fill for the <STRONG>PolygonData</STRONG>. </summary>
            <value> The fill for the <STRONG>PolygonData</STRONG>. </value>
        </member>
        <member name="F:Atalasoft.Annotate.PolygonData._shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </summary>
            <value> The fill for the drop shadow. </value>
        </member>
        <member name="F:Atalasoft.Annotate.PolygonData._shadowOffset">
            <summary> Gets or sets the drop shadow offset. </summary>
            <value> The offset specifying the position of the drop shadow. </value>
        </member>
        <member name="F:Atalasoft.Annotate.PolygonData._translucent">
            <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
            <value> A value indicating whether this annotation is used as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the RotateDocument method. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor">
            <summary> Creates a new instance of <STRONG>PolygonData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>PolygonData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline and fill. </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection)">
            <summary> <para><STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG></para>
            <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill and points
            collection.</para> </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the initial points for the polygon. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill and an array of
            points.</para> </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="points"> An array of PointF objects specifying the initial points of the polygon. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill and shadow settings.
            </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.PointFCollection)">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill, shadow settings and
            points of the polygon.</para> </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the initial points for the polygon. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Drawing.PointF[])">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill, shadow settings and array
            of points for the polygon.</para> </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="points"> An array of PointF objects specifying the initial points of the polygon. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
            <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill, shadow settings, and
            translucency. </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
            <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the a set of points,  outline, fill and
            shadow settings. </summary>
            <param name="points"> An array of <STRONG>PointF</STRONG> objects specifying the initial points of the polygon.
            </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
            <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the a set of points,  outline, fill and
            shadow settings. </summary>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the initial points for the polygon. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>PolygonData</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about the <STRONG>PolygonData</STRONG>.
            </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object will <STRONG>PolygonData</STRONG> information. </summary>
            <param name="info"> The SerialziationInfo where information will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>PointBaseData</STRONG>.</param>
            <remarks>
            This method should be called by classes that derive from PointBaseData when they need to create a clone of
            the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.Clone">
            <summary>Creates a copy of the PolygonData.</summary>
            <returns>A copy of this object.</returns>
            <summary> Creates a copy of the <STRONG>PolygonData</STRONG>. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.Equals(System.Object)">
            <summary> Determines if another <STRONG>PolygonData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>PolygonData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.PolygonData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.PolygonData.Translucent">
            <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
            <value> A value indicating whether this annotation is used as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the RotateDocument method. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.PolygonData.Outline">
            <summary> Gets or sets the outline for the <STRONG>PolygonData</STRONG>. </summary>
            <value> The outline of the <STRONG>PolygonData</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Annotate.PolygonData.Fill">
            <summary> Gets or sets the fill for the <STRONG>PolygonData</STRONG>. </summary>
            <value> The fill for the <STRONG>PolygonData</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Annotate.PolygonData.Shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </summary>
            <value> The fill for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.PolygonData.ShadowOffset">
            <summary> Gets or sets the drop shadow offset. </summary>
            <value> The offset specifying the position of the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.PolygonData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="T:Atalasoft.Annotate.RectangleData">
            <summary> Contains information describing data for a RectangleAnnotation. </summary>
            <seealso> RectangleAnnotation Class </seealso>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.#ctor">
            <summary> Creates a new instance of <STRONG>RectangleData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>RectangleData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle and fill. </summary>
            <param name="rectangle"> The rectangle for this annotation. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle and outline. </summary>
            <param name="rectangle"> The rectangle for this annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,System.Boolean)">
            <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle, fill and translucent
            properties. </summary>
            <param name="rectangle"> The rectangle for this annotation. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill this annotation. </param>
            <param name="translucent"> A value indicating whether this annotation will act as a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle, fill, outline and
            shadow settings. </summary>
            <param name="rectangle"> The rectangle for this annotation. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill this annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset used to position the drop shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>RectangleData</STRONG> from serialized information. </summary>
            <param name="info"> The SerializationInfo object containing <STRONG>RectangleData</STRONG> information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.#ctor(Atalasoft.Annotate.WangAttributeData)">
            <summary> Creates a new instance of <STRONG>RectangleData</STRONG> from a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object.
            </summary>
            <remarks> The WangFormatter will use this constructor for standard WANG data. </remarks>
            <param name="wangData"> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing information for a HollowRectangle or
            FilledRectangle WANG annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with <STRONG>RectangleData</STRONG> information. </summary>
            <param name="info"> The SerializationInfo object to fill with data. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.Clone">
            <summary> Creates a copy of the <STRONG>RectangleData</STRONG>. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.Equals(System.Object)">
            <summary> Determines if another <STRONG>RectangleData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>RectangleData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.RectangleData.GetWangAttributeData">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object with information about this annotation. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object. </returns>
            <remarks> The WangFormatter calls this method when serializing. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.RectangleData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.RectangleData.AnnotationBounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.AnnotationBounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.RectangleData.Shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used draw the drop shadow. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RectangleData.Fill">
            <summary> Gets or sets the fill used for the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RectangleData.Outline">
            <summary> Gets or sets the outline of the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RectangleData.ShadowOffset">
            <summary> Gets or sets the shadow offset. </summary>
            <value> The offset used to specifying the position of the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RectangleData.Translucent">
            <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
            <value> A value indicating whether this annotation is used as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the RotateDocument method. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.ReferencedImageData">
            <summary> The data for a ReferencedImageAnnotation object. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor">
            <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG>. </summary>
            <overloads> Constructs a <STRONG>ReferencedImageData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename of the image.
            </summary>
            <param name="fileName"> The filename of the image for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename, location and
            whether the aspect ratio should be maintained. </summary>
            <param name="fileName"> The filename of the image for this annotation. </param>
            <param name="location"> The location of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename, shadow and shadow
            offset. </summary>
            <param name="fileName"> The filename of the image for this annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename, initial location,
            shadow and shadow offset. </summary>
            <param name="fileName"> The filename of the image for this annotation. </param>
            <param name="location"> The location of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> from serialized information. </summary>
            <param name="info"> The SerializationInfo object containing information for this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(Atalasoft.Annotate.WangAttributeData)">
            <summary> Creates a new instance of <STRONG>ReferencedImageData </STRONG>from WANG annotation data. </summary>
            <remarks> The <see cref="T:Atalasoft.Annotate.WangAttributeData"/> must have its <STRONG>Bounds</STRONG> and <STRONG>FileName</STRONG>
            properties set. </remarks>
            <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object containing information for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.ReferencedImageData"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.OnCreateImageObject">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.ReferencedImageData.ImageObject"/> needs to be created. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this <STRONG>ReferencedImageData</STRONG> object.
            </summary>
            <param name="info"> The SerializationInfo object where the information will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.Clone">
            <summary> Creates a copy of this <STRONG>ReferencedImageData</STRONG> object. </summary>
            <returns> A copy of this object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.Equals(System.Object)">
            <summary> Determines if another <STRONG>ReferencedImageData</STRONG> object has the same property settings.
            </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>ReferencedImageData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.GetWangAttributeData">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData"/> object with information about this annotation. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData"/> for this annotation. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.ReferencedImageData.Dispose(System.Boolean)">
            <summary> Releases internal resources used by the <STRONG>ReferencedImageData</STRONG> object. </summary>
            <param name="disposing"> Set to true when called from the <see cref="M:Atalasoft.Annotate.ReferencedImageData.Dispose(System.Boolean)"/> method.
            </param>
            <overloads> Releases the memory used by this annotation. </overloads>
        </member>
        <member name="P:Atalasoft.Annotate.ReferencedImageData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.ReferencedImageData.FileName">
            <summary> Gets or sets the filename of the annotation image. </summary>
            <value> The filename of the image for this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.ReferencedImageData.ImageObject">
            <summary> Gets or sets the image object for this annotation. </summary>
            <value> The real image for this annotation. </value>
            <remarks> The DotImage implementation of this object is a System.Drawing.Bitmap. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.ReferencedImageData.Shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used draw the drop shadow. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.ReferencedImageData.ShadowOffset">
            <summary> Gets or sets the shadow offset. </summary>
            <value> The offset used to specifying the position of the drop shadow. </value>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.AnnotationRenderers">
            <summary> This class holds all of the annotation renderers used for drawing the annotations. When a custom
            annotation is created, its <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer"/> should be added to this collection to allow the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> to render the object. </summary>
            <remarks> To implement custom rendering of annotations, use the <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.Add(System.Type,Atalasoft.Annotate.Renderer.IAnnotationRenderer)"/> method to
            replace the default renderer for an annotation. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.Add(System.Type,Atalasoft.Annotate.Renderer.IAnnotationRenderer)">
            <summary> Adds or replaces a rendering engine for the specified type. </summary>
            <param name="type"> The type of the annotation data this renderer will handle. </param>
            <param name="renderer"> A class that will act as the renderer for this type. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.Get(System.Type)">
            <summary> Gets the rendering engine for a specific type. </summary>
            <returns> The renderer for this annotation data or a <see cref="T:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine"/> if a renderer is not
            found. </returns>
            <param name="type"> The annotation data type to look up. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.GetAnnotationDataTypes">
            <summary> Returns a list of all <see cref="T:Atalasoft.Annotate.AnnotationData"/> types registered in the
            <STRONG>AnnotationRenderers</STRONG> table. </summary>
            <returns> An array of <STRONG>Type</STRONG> for the <see cref="T:Atalasoft.Annotate.AnnotationData"/> renderers that are currently
            registered. </returns>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine">
            <summary> This class is the fallback rendering engine used when a specific rendering engine for an annotation can't
            be found. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer">
            <summary> This interface must be implemented by classes that will be used to render annotations. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.IAnnotationRenderer.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Called to render an annotation. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used to render the annotation. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.IAnnotationRenderer.GripRenderer">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer"/> used to render grips. </summary>
            <value> The annotation grip renderer. </value>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer">
            <summary> This interface must be implemented by classes used to render annotation grips. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Called when grips for an annotation need to be rendered. </summary>
            <param name="grips"> The grips that need to be rendered. </param>
            <param name="annotation"> The annotation the grips belong to. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used to render the grips. </param>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLock">
            <summary>
            The render lock
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> This method renders the grips for annotations. </summary>
            <remarks> This overload handles matrix manipulation used when rendering the grips.  When overriding this method
            these calculations must be handled.  To render custom grips without dealing with matrix manipulation issues use the
            protected <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.PointF)"/> overload
            instead. </remarks>
            <param name="grips"> The grips to render. </param>
            <param name="annotation"> The annotation associated with the grips. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
            <summary> Called to render annotation grips. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLineCap(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationLineCap,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders an <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> without a fill. </summary>
            <param name="startingPoint"> The starting point of the line. </param>
            <param name="endingPoint"> The ending point of the line.  The line cap will be rendered at this point. </param>
            <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> to render. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> for this line cap. </param>
            <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> used to render the line cap. </param>
            <remarks> The <EM>startingPoint</EM> and <EM>endingPoint</EM> arguments are used to determine the angle to apply
            when rendering. </remarks>
            <overloads> Renders an <STRONG>AnnotationLineCap</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLineCap(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationLineCap,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders an <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> with a fill. </summary>
            <param name="startingPoint"> The starting point of the line. </param>
            <param name="endingPoint"> The ending point of the line.  The line cap will be rendered at this point. </param>
            <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap"/> to render. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the line cap. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> for this line cap. </param>
            <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> used to render the line cap. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.PointF)">
            <summary> This method is used to render the annotation grips.  The public <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"/> method calls into
            this protected method to perform the actual rendering. </summary>
            <remarks> Override this method to draw custom grips without having the deal with matrix manipulation. </remarks>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.Renderer.AnnotationRenderingEngine~RenderGrips(IAnnotationGrips,AnnotationData,RenderEnvironment,PointF)&quot;]/*"/>
            <param name="grips"> The grips to render. </param>
            <param name="annotation"> The annotation associated with the grips. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
            <param name="scale"> The scaling that must be applied to the grip positions.  Grip sizes should not scale, only
            their positions. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Called to render an annotation. </summary>
            <remarks> This class will simply render a rectangle with the name of the annotation. For custom annotations a new
            class implementing <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer"/> or derived from another renderer must be created. </remarks>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLockImage(Atalasoft.Annotate.AnnotationImage,System.Drawing.RectangleF,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a small image, centered in the annotation bounds, used to indicate that an annotation is locked.
            </summary>
            <param name="image"> The image to render. </param>
            <param name="annotationBounds"> The bounding rectangle of the annotation. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
            <overloads> Renders the lock image for locked annotations. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLockImage(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a small image at the specified point. </summary>
            <param name="image"> The image to render. </param>
            <param name="location"> The location where the image is placed. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CreateBrush(Atalasoft.Annotate.AnnotationBrush)">
            <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> into a System.Drawing.Brush object. </summary>
            <returns> A System.Drawing.Brush </returns>
            <param name="annBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CreatePen(Atalasoft.Annotate.AnnotationPen)">
            <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationPen"/> into a System.Drawing.Pen object. </summary>
            <returns> A System.Drawing.Pen. </returns>
            <param name="annPen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> to convert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CreateFont(Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationFont"/> into a System.Drawing.Font object. </summary>
            <returns> A System.Drawing.Font. </returns>
            <param name="annFont"> The <see cref="T:Atalasoft.Annotate.AnnotationFont"/> to convert. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> that will be used with this Font. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CorrectRectangle(System.Drawing.RectangleF)">
            <summary> Corrects negative width and height values for the rectangle. </summary>
            <returns> A new RectangleF with corrected values. </returns>
            <remarks> If the width or height is equal to zero, it will be converted to 1 so a line is drawn instead of nothing.
            </remarks>
            <param name="rect"> The rectangle to correct. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.SetGraphicsTransform(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Prepares the Graphics object to use the <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> and <see cref="T:Atalasoft.Annotate.AnnotationData"/>
            transforms. </summary>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> that will be drawn. </param>
            <param name="e"> The <see cref="N:Atalasoft.Annotate.Renderer"/> that will be used. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RestoreGraphicsTransform(Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Restores the Graphics object to the state it was in before using <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.SetGraphicsTransform(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"/>. </summary>
            <param name="e"> The <see cref="N:Atalasoft.Annotate.Renderer"/> used. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GetTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)">
            <summary> Returns a GDI HDC used for rendering the translucent effect. </summary>
            <returns> An HDC that can be used for rendering the translucent area. </returns>
            <remarks> The HDC returned from this function must be released using the <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.ReleaseTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment)"/> method. </remarks>
            <seealso> ReleaseTranslucentHandle Method </seealso>
            <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> used. </param>
            <param name="annotationBounds"> A bounding rectangle for the annotation. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used for drawing lines. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for filling objects. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.ReleaseTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Release the HDC and drawing objects created with <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GetTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)"/>. </summary>
            <seealso cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GetTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)"/>
            <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> used. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderTranslucentPointsAnnotation(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Boolean)">
            <summary> Renders a translucent annotation from the specified points. </summary>
            <param name="points"> An array of points for the annotation. </param>
            <param name="data"> The annotation to render.  This must derive from <see cref="T:Atalasoft.Annotate.PointBaseData"/>. </param>
            <param name="outline"> The outline pen used. </param>
            <param name="fill"> The fill used. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used when rendering. </param>
            <param name="closeFigure"> Indicates whether the points should form a closed figure. </param>
            <returns> Returns a point that can be used for the locked image. </returns>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.Renderer.AnnotationRenderingEngine~RenderTranslucentPointsAnnotation&quot;]/*"/>
            </overloads>
            <overloads> Renders a translucent point based annotation. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderTranslucentPointsAnnotation(Atalasoft.Annotate.PointBaseData,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Boolean)">
            <summary> Renders a point based translucent annotation. </summary>
            <param name="data"> The annotation to render.  This must derive from <see cref="T:Atalasoft.Annotate.PointBaseData"/>. </param>
            <param name="outline"> The outline pen used. </param>
            <param name="fill"> The fill used. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used when rendering. </param>
            <param name="closeFigure"> Indicates whether the points should form a closed figure. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.BurnTranslucentAnnotation(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationImage)">
            <summary> This method is used to burn translucent (highlighter) annotations onto an image. </summary>
            <exception> Thrown if the Image or ImageObject property of the RenderEnvironment is null (Nothing in VB).
            </exception>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.Renderer.AnnotationRenderingEngine~BurnTranslucentAnnotation&quot;]/*"/>
            </overloads>
            <param name="environment"> The RenderEnvironment containing the image to burn onto. </param>
            <param name="bounds"> The bounding rectangle where the annotation will be placed. </param>
            <param name="color"> The color of the highlighter. </param>
            <param name="mask"> A mask image used to apply the highlight effect. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GripRenderer">
            <summary>
            Gets the <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer"/> used to render grips.
            </summary>
            <value>
            The annotation grip renderer.
            </value>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.DrawMethods">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.DrawMethods.CornerJoin">
            <summary>
            Corner style used where lines join.
            </summary>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.OcrRegionRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.OcrRegionData"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.OcrRegionRenderingEngine.#ctor">
            <summary>Creates a new instance of <strong>OcrRegionRenderingEngine</strong>.</summary>
            <summary> Creates a new instance of <STRONG>OcrRegionRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.OcrRegionRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary>
            Called to render an annotation.
            </summary>
            <param name="annotation">The annotation to render.</param>
            <param name="e">A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering.</param>
            <exception cref="T:System.ArgumentNullException">
            annotation
            or
            e
            </exception>
            <exception cref="T:System.ArgumentException">Only OcrRegionData objects can be rendered using the OcrRegionRenderingEngine.;annotation</exception>
            <remarks>
            This class will simply render a rectangle with the name of the annotation. For custom annotations a new
            class implementing <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer"/> or derived from another renderer must be created.
            </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.RectangleRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.RectangleData"/> objects. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.RectangleRenderingEngine.lck">
            <summary>
            The LCK
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RectangleRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>RectangleRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RectangleRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.RectangleData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.EllipseRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.EllipseData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.EllipseRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>EllipseRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.EllipseRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders an <see cref="T:Atalasoft.Annotate.EllipseData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.LineRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.LineData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.LineRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>LineRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.LineRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.LineData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.LinesRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.LinesData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.LinesRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>LinesRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.LinesRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.LinesData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.FreehandRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.FreehandData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.FreehandRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>FreehandRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.FreehandRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.FreehandData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.PolygonRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.PolygonData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.PolygonRenderingEngine.#ctor">
            <summary>Creates a new instance of <strong>PolygonRenderingEngine</strong>.</summary>
            <summary> Creates a new instance of <STRONG>PolygonRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.PolygonRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.PolygonData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.TextAnnotationRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.TextData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.TextAnnotationRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>TextAnnotationRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.TextAnnotationRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.TextData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.EmbeddedImageRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.EmbeddedImageData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.EmbeddedImageRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>EmbeddedImageRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.EmbeddedImageRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders an <see cref="T:Atalasoft.Annotate.EmbeddedImageData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.ReferencedImageRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.ReferencedImageData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.ReferencedImageRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>ReferencedImageRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.ReferencedImageRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.ReferencedImageData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.HotSpotRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.HotSpotData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.HotSpotRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>HotSpotRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.HotSpotRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.HotSpotData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.HotSpotFreehandRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.HotSpotFreehandData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.HotSpotFreehandRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.HotSpotFreehandRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.RubberStampRenderingEngine">
            <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.RubberStampData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RubberStampRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>RubberStampRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RubberStampRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <summary> Renders a <see cref="T:Atalasoft.Annotate.RubberStampData"/> object. </summary>
            <param name="annotation"> The annotation to render. </param>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> containing information used for rendering. </param>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.LayerRenderingEngine">
            <summary> This class is used to render <see cref="T:Atalasoft.Annotate.LayerData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.LayerRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>LayerRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.LayerRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <commentsfrom cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)" filter=""/>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.CalloutRenderingEngine">
            <summary> This class is used to render <see cref="T:Atalasoft.Annotate.CalloutData"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.CalloutRenderingEngine.#ctor">
            <summary> Creates a new instance of <STRONG>CalloutRenderingEngine</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.CalloutRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
            <commentsfrom cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)" filter=""/>
        </member>
        <member name="T:Atalasoft.Annotate.Renderer.RenderEnvironment">
            <summary> This class is passed into the <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer"/> methods to provide information for the
            rendering process. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.RenderEnvironment._graphics">
            <summary> The graphics object used to render the annotation onto. </summary>
            <value> The graphics used when rendering. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.RenderEnvironment._units">
            <summary> Gets the units of measure used by the annotation Locate and Size. </summary>
            <value> The units of measure used by the annotations. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.RenderEnvironment._transform">
            <summary> Gets the transformation matrix used by the <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> control. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> transformation matrix. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.RenderEnvironment._resolution">
            <summary> The number of units per pixel. </summary>
            <value> The resolution of this object. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.RenderEnvironment._device">
            <summary> Gets the type of device being rendered onto. </summary>
            <value> The device to render onto. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.RenderEnvironment._image">
            <summary> Gets the image when rendering to an image. </summary>
            <value> The image being rendered onto. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.RenderEnvironment._imageResolution">
            <summary> Gets the resolution of the image.  This is only needed if a Graphics object is provided instead of an <see cref="T:Atalasoft.Annotate.AnnotationImage"/>. </summary>
            <value> The resolution of the image. </value>
        </member>
        <member name="F:Atalasoft.Annotate.Renderer.RenderEnvironment._viewerResolution">
            <summary> Gets the resolution of the viewer. </summary>
            <value> The viewer resolution. </value>
            <remarks> The viewer resolution is used for Font creation in the <see cref="T:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine"/>. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor">
            <summary>Creates a new instance of RenderEnvironment.</summary>
            <summary> Creates a new instance of <STRONG>RenderEnvironment</STRONG>. </summary>
            <overloads> Constructs a <STRONG>RenderEnvironment</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics,System.Drawing.PointF,Atalasoft.Annotate.AnnotationUnit,System.Drawing.Drawing2D.Matrix,System.Drawing.PointF)">
            <summary> Creates a new instance of RenderEnvironment specifying information when rendering to a Graphics object
            retrieved from an image. </summary>
            <param name="device"> The device used when rendering. </param>
            <param name="graphics"> A Graphics object to render onto. </param>
            <param name="resolution"> The resolution to render at. </param>
            <param name="units"> The units of measure used by the annotation. </param>
            <param name="transform"> A transformation matrix used when rendering. </param>
            <param name="imageResolution"> The resolution of the image. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics,System.Drawing.PointF,Atalasoft.Annotate.AnnotationUnit,System.Drawing.Drawing2D.Matrix,System.Drawing.PointF,System.Drawing.PointF)">
            <summary> Creates a new instance of RenderEnvironment specifying its properties. </summary>
            <param name="device"> The device used when rendering. </param>
            <param name="graphics"> A Graphics object to render onto. </param>
            <param name="resolution"> The resolution to render at </param>
            <param name="units"> The units of measure used by the annotation. </param>
            <param name="transform"> A transformation matrix used when rendering. </param>
            <param name="imageResolution"> The resolution of the image. </param>
            <param name="viewerResolution"> The resolution of the viewer. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF,Atalasoft.Annotate.AnnotationUnit,System.Drawing.Drawing2D.Matrix)">
            <summary> Creates a new instance of RenderEnvironment specifying parameters for burning annotations onto an image.
            </summary>
            <exception> Thrown if the image.BitCount is less than 24. </exception>
            <param name="image"> The image to burn onto. </param>
            <param name="resolution"> The resolution to render at. </param>
            <param name="units"> The units of measure used by the annotation. </param>
            <param name="transform"> A transformation matrix used when burning. </param>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Dispose">
            <summary> Releases resources used by the object. </summary>
            <overloads> Disposes the <STRONG>RenderEnvironment</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Dispose(System.Boolean)">
            <summary> Release resources used by the object. </summary>
            <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Dispose"/> method. </param>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.ImageResolution">
            <summary> Gets the resolution of the image.  This is only needed if a Graphics object is provided instead of an <see cref="T:Atalasoft.Annotate.AnnotationImage"/>. </summary>
            <value> The resolution of the image. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.ViewerResolution">
            <summary> Gets the resolution of the viewer. </summary>
            <value> The viewer resolution. </value>
            <remarks> The viewer resolution is used for Font creation in the <see cref="T:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine"/>. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Graphics">
            <summary> The graphics object used to render the annotation onto. </summary>
            <value> The graphics used when rendering. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Image">
            <summary> Gets the image when rendering to an image. </summary>
            <value> The image being rendered onto. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Units">
            <summary> Gets the units of measure used by the annotation Locate and Size. </summary>
            <value> The units of measure used by the annotations. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Resolution">
            <summary> The number of units per pixel. </summary>
            <value> The resolution of this object. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Transform">
            <summary> Gets the transformation matrix used by the <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> control. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> transformation matrix. </value>
        </member>
        <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Device">
            <summary> Gets the type of device being rendered onto. </summary>
            <value> The device to render onto. </value>
        </member>
        <member name="T:Atalasoft.Annotate.RubberStampData">
            <summary> The annotation data object for a RubberStampAnnotation. </summary>
            <seealso> RubberStampAnnotation Class </seealso>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.#ctor">
            <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> with default parameters. </summary>
            <overloads> Constructs a <STRONG>RubberStampData</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the annotation text. </summary>
            <param name="text"> The text drawn for the rubber stamp. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
            <summary> Create a new instance of <STRONG>RubberStampData</STRONG> specifying the annotation text and font.
            </summary>
            <param name="text"> The text drawn for the rubber stamp. </param>
            <param name="font"> The font used for the annotation text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
            <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the annotation text, font, font
            brush, fill outline and corner radius. </summary>
            <param name="text"> The text drawn for the rubber stamp. </param>
            <param name="font"> The font used for the annotation text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for filling the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used for drawing the outline of the annotation. </param>
            <param name="cornerRadius"> The radius used on the corners. </param>
            <param name="padding"> Space added around the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF)">
            <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle of the
            annotation. </summary>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF,System.String)">
            <summary> Creates an instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle and text of the
            annotation. </summary>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="text"> The text drawn for the rubber stamp. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
            <summary> Creates an instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle, text and font.
            </summary>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="text"> The text drawn for the rubber stamp. </param>
            <param name="font"> The font used for the annotation text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
            <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle, text, font,
            font brush, fill, outline and corner radius. </summary>
            <param name="bounds"> The bounding rectangle of the annotation. </param>
            <param name="text"> The text drawn for the rubber stamp. </param>
            <param name="font"> The font used for the annotation text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for filling the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used for drawing the outline of the annotation. </param>
            <param name="cornerRadius"> The radius used on the corners. </param>
            <param name="padding"> <para>Space added around the text.</para> </param>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> from serialized data. </summary>
            <param name="info"> The SerializationInfo object containing information about this annotation. </param>
            <param name="context"> A StreamingContext for this data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
            <summary>
            Fills the data object with cloned property values.
            </summary>
            <param name="data">A class that derives from <STRONG>AnnotationData</STRONG>.</param>
            <example> AnnotationData Class </example>
            <remarks>
            This method should be called by classes that derive from <STRONG>AnnotationData</STRONG> when they need to
            create a clone of the object.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.Clone">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.Clone" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.Equals(System.Object)">
            <summary> Determines if another <STRONG>RubberStampData</STRONG> object has the same property settings. </summary>
            <returns> True if the object provided has the same property values. </returns>
            <remarks> Some unique properties are not compared, such as <see cref="P:Atalasoft.Annotate.AnnotationData.Name"/> and <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime"/>. </remarks>
            <param name="obj"> An <STRONG>RubberStampData</STRONG> object to compare. </param>
        </member>
        <member name="M:Atalasoft.Annotate.RubberStampData.GetHashCode">
            <commentsfrom cref="M:Atalasoft.Annotate.AnnotationData.GetHashCode" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.RubberStampData.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.AnnotationData.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.RubberStampData.Padding">
            <summary> Gets or sets the amount of space around the text. </summary>
            <value> The amount of space around the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RubberStampData.CornerRadius">
            <summary> Gets or sets the radius used for the corners of the annotation. </summary>
            <value> The corner radius of the rectangle. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RubberStampData.Text">
            <summary> Gets or sets the text for this annotation. </summary>
            <value> The annotation text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RubberStampData.FontBrush">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the font. </summary>
            <value> The brush used when rendering the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RubberStampData.Fill">
            <summary> Gets or sets the fill used for the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RubberStampData.Outline">
            <summary> Gets or sets the outline of the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.RubberStampData.Font">
            <summary> Gets or sets the font for the text. </summary>
            <value> The font used when rendering the text. </value>
        </member>
        <member name="T:Atalasoft.Annotate.SerializationInfoHelper">
            <summary> This class contains methods used when serializing or deserializing annotations. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.SerializationInfoHelper.#ctor(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Annotate.SerializationInfoHelper"/> class.
            </summary>
            <param name="info">The information.</param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationController">
            <summary> The <STRONG>AnnotationController</STRONG> is the central hub for DotImage. It contains a <see cref="T:Atalasoft.Annotate.UI.LayerCollection"/> for any number of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> objects, each containing any number of
            annotations. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._parent">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent control where the annotations will be rendered. </summary>
            <value> The control where the annotations will be rendered. </value>
            <remarks> Each AnnotationController must have its own IAnnotate parent. Giving multiple AnnotationController objects
            the same parent will cause unforeseen consequences and is not supported. This property should be set to
            <STRONG>null</STRONG> (Nothing in Visual Basic) when the controller is being replaced by another
            AnnotationController. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._activeAnnotation">
            <summary> Gets or sets the currently selected annotation. </summary>
            <value> The active annotation being used. </value>
            <remarks> <para>An annotation becomes active when the user selects it using the mouse. When multiple annotations are
            selected the <STRONG>ActiveAnnotation</STRONG> will be the last annotation selected by the user.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._currentLayer">
            <summary> Gets or sets the current active layer. </summary>
            <value> The current <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> being used. </value>
            <remarks> <para>When an annotation is selected, either through code or by the user, the layer it's contained in
            becomes the current layer. When multiple annotations in different layers are selected, the last selected
            annotation's layer will become the current layer.</para>
            <para>When an annotation is created by the user, it will be added as a child of the current layer.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._layers">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.LayerCollection"/> used by the <STRONG>AnnotationController</STRONG>.
            </summary>
            <value> The <see cref="T:Atalasoft.Annotate.UI.LayerCollection"/> used for this controller. </value>
            <remarks> Each AnnotationController must have its own LayerCollection. Setting the Layers property of more than one
            AnnotationController to the same LayerCollection will have unforeseen consequences. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._selectedAnnotations">
            <summary> Gets an array of annotations currently selected. </summary>
            <value> An array of <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> containing the currently selected annotations. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._createAnnotation">
            <overloads> These methods are used to prepare the <STRONG>AnnotationController</STRONG> to create a new annotation
            on mouse events.  An annotation can be manually added using the <see cref="P:Atalasoft.Annotate.UI.LayerAnnotation.Items"/> collection of a
            <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/>. </overloads>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._undoManager">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager"/> used by the controller. </summary>
            <value> The undo manager used by the controller. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._suspendPaint">
            <summary> Use this method to suspend painting any annotations until the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.ResumePaint(System.Boolean)"/> method is called. </summary>
            <remarks> This method is useful when multiple annotations or multiple properties of an annotation are being modified
            for a single action. Use <see cref="M:Atalasoft.Annotate.UI.AnnotationController.ResumePaint(System.Boolean)"/> to allow rendering of the annotations to
            resume. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._factories">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/> containing <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory"/> objects
            used to create annotations from AnnotationData classes. </summary>
            <value> The annotation factory collection used to create <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects from <see cref="T:Atalasoft.Annotate.AnnotationData"/> classes. </value>
            <remarks> The UI factories are used when deserializing <see cref="T:Atalasoft.Annotate.AnnotationData"/> classes. When custom annotations
            are used for serialization an <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory"/> for the UI should be added to the factory
            collection. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._site">
            <summary> <para>Gets or sets the site of the control.</para> </summary>
            <value> The ISite associated with the Control, if any. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._toolTip">
            <summary> Gets or sets the tooltip control used for annotation tooltips. </summary>
            <value> The tooltip control used for annotation tooltips. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._defaultSecurity">
            <summary> Gets or sets the default security used for new annotations. </summary>
            <value> The default security used for annotations. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._annotationConfinement">
            <summary> Gets or sets the annotation confinement used to keep annotations within a specific area of the control.
            </summary>
            <value> The annotation confinement. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._interactMode">
            <summary> Gets or sets a value specifying the user interactive mode of the <STRONG>AnnotationController</STRONG>.
            </summary>
            <value> The interaction mode of the <STRONG>AnnotationController</STRONG>. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._isDirty">
            <summary> Gets a value indicating whether the annotations have been modified since the last load or save. </summary>
            <value> A value indicating whether the data needs to be saved. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._multiSelectKey">
            <summary> Gets or sets the key held down to select multiple annotations. </summary>
            <value> The key held down to select multiple annotations. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._smoothingMode">
            <summary> Gets or sets the smoothing mode used when drawing annotations. </summary>
            <value> The smoothing mode used when drawing annotations. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._createMouseButton">
            <summary> Gets or sets the mouse button used for creating annotations. </summary>
            <value> The mouse button used for creating annotations. Defaults to <STRONG>Left</STRONG>. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._rotationSnapInterval">
            <summary> <para>Gets or sets the interval used for snapping interactive rotation to degrees.</para>
            <para>This is used to help users when rotating an annotation, making it easier to stop at whole degrees. The snap
            area is determined by the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapThreshold"/> property.</para> </summary>
            <value> The degree interval used for interactive rotation snapping. </value>
            <remarks> This value must be from 0 to 180 and evenly divisible into 360. When setting this property the value will
            automatically be converted into a valid value. </remarks>
            <seealso cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapThreshold"/>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~RotationSnapInterval&quot;]/*"/>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._rotationSnapThreshold">
            <summary> Gets or sets the amount of deviation from the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval"/> that
            will be used to snap to the rotation interval. </summary>
            <value> The amount of deviation from the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval"/>. </value>
            <remarks> This value must be from 0 to half the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval"/>. If the
            property is set to an invalid value it will be automatically corrected. </remarks>
            <seealso cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval"/>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~RotationSnapThreshold&quot;]/*"/>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationController._clipToDocument">
            <summary> Gets or sets a value indicating whether the annotation rendering is clipped to the document bounds.
            </summary>
            <value> Indicates if the annotation rendering is clipped to the document bounds. </value>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationController</STRONG>. </summary>
            <overloads> Creates a new <STRONG>AnnotationController</STRONG> used to handle mouse events from the viewer for
            manipulating annotations. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.#ctor(Atalasoft.Annotate.UI.IAnnotate)">
            <summary> Creates a new instance of <STRONG>AnnotationController</STRONG> specifying the <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/>
            parent control. </summary>
            <param name="parent"> An object that will be used as the parent control for the controller. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.InvalidateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)">
            <summary> Forces an annotation to be redrawn. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the annotation argument is null (Nothing in VB). </exception>
            <param name="annotation"> The annotation to invalidate. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.SuspendPaint">
            <summary>
            Use this method to suspend painting any annotations until the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~ResumePaint.html">ResumePaint</a>
            method is called.
            </summary>
            <remarks>
            This method is useful when multiple annotations or multiple properties of an
            annotation are being modified for a single action. Use
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~ResumePaint.html">ResumePaint</a>
            to allow rendering of the annotations to resume.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.ResumePaint(System.Boolean)">
            <summary> Resumes painting after it has been suspended with <see cref="M:Atalasoft.Annotate.UI.AnnotationController.SuspendPaint"/>.
            </summary>
            <param name="forceRefresh"> Indicates whether the <STRONG>AnnotationController</STRONG> should force a refresh.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Clone">
            <summary> Creates a copy of the <STRONG>AnnotationController</STRONG> including all of the layers and annotations.
            </summary>
            <returns> A copy of the <STRONG>AnnotationController</STRONG>. </returns>
            <remarks> The undo/redo items are not cloned in this process. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)">
            <summary>
            Call this method to prepare the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> for creating a new annotation with the mouse.
            </summary>
            <remarks>
            Use the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.ExitCreateMode"/> method to cancel creating an annotation.
            </remarks>
            <example>
                The following example creates a new ReferencedImageAnnotation and prepares the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> 
                to render the annotation when the user drags the mouse on the AnnotateViewer.
                <code lang="CS" title="CreateAnnotation">
            OpenFileDialog dlg = new OpenFileDialog();
            dlg.Filter = "Images|*.bmp;*.jpg;*.png;*.tif;*.gif";
            if (dlg.ShowDialog(this) == DialogResult.OK)
            {
                ReferencedImageAnnotation ann = new ReferencedImageAnnotation(dlg.FileName, true);
                this.annotateViewer1.Annotations.CreateAnnotation(ann);
            }
            dlg.Dispose();
                </code>
            	<code lang="VB" title="CreateAnnotationVB">
            Dim dlg As OpenFileDialog =  New OpenFileDialog() 
            dlg.Filter = "Images|*.bmp;*.jpg;*.png;*.tif;*.gif"
            If dlg.ShowDialog(Me) = DialogResult.OK Then
                Dim ann As ReferencedImageAnnotation =  New ReferencedImageAnnotation(dlg.FileName,True) 
                Me.annotateViewer1.Annotations.CreateAnnotation(ann)
            End If
            dlg.Dispose()
                </code>
            </example>
            <param name="annotation">The annotation to create.</param>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~CreateAnnotation(AnnotationUI)&quot;]/*"/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI,Atalasoft.Annotate.CreateAnnotationMode)">
            <summary> Call this method to prepare the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> for creating a new annotation with the
            mouse, specifying the creation mode to use. </summary>
            <param name="annotation"> The annotation to create. </param>
            <param name="createMode"> The mode used to create the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Dispose">
            <summary> Releases memory used by the <STRONG>AnnotationController</STRONG> and all of its annotations. </summary>
            <remarks> All annotations and supporting objects implementing the IDisposeable interface will be disposed in this
            process. To prevent them from being disposed they must be removed from the controller prior to calling this method.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Dispose(System.Boolean)">
            <summary> Releases resources used by the <STRONG>AnnotationController</STRONG>. </summary>
            <param name="disposing"> A value indicating whether this method was called from the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.Dispose"/> method or a finalizer. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.FindAnnotationLayer(Atalasoft.Annotate.UI.AnnotationUI)">
            <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> containing a specified annotation. </summary>
            <returns> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> containing the annotation or null (Nothing in Visual Basic) if the
            annotation was not found. </returns>
            <remarks> This method will being searching through all of the layers in the <see cref="T:Atalasoft.Annotate.UI.LayerCollection"/>. Use the
            <see cref="M:Atalasoft.Annotate.UI.AnnotationController.FindAnnotationLayer(Atalasoft.Annotate.UI.AnnotationUI)"/> overload to specify a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> from
            which searching will being. </remarks>
            <param name="annotation"> The annotation to search for. </param>
            <overloads> These methods are used to location the parent layer of an annotation. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.FindAnnotationLayer(Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.UI.AnnotationUI)">
            <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> containing a specified annotation. </summary>
            <returns> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> containing the annotation or null (Nothing in Visual Basic) if the
            annotation is not found. </returns>
            <param name="hostLayer"> The host layer to being searching from. </param>
            <param name="annotation"> The annotation to search for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Group">
            <summary> Combines all selected annotations into a new <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> object and adds this layer to
            the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer"/>. </summary>
            <overloads> Use these methods to combine multiple annotations into a group which can be moved and resized together
            as a single object. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Group(Atalasoft.Annotate.UI.AnnotationUI[])">
            <summary> Combines annotations into a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> and adds it to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer"/>. </summary>
            <remarks> This method will remove the annotations from the current layer they are in and place them into a new
            LayerAnnotation. </remarks>
            <param name="annotations"> An array of annotations to group. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,System.Runtime.Serialization.IFormatter)">
            <summary> Loads annotation data from a file using the supplied formatter and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers"/> collection. </summary>
            <param name="fileName"> The filename for the annotation data. </param>
            <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
            <overloads> Use these methods to load annotation data into the controller. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
            <summary> Loads annotation data from a stream using the supplied formatter into the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers"/> collection. </summary>
            <param name="stream"> A stream containing annotation data. </param>
            <param name="formatter"> An IFormatter used to deserialize the data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary> Loads annotation data from a file using the formatter and adds the annotations to the provided layer.
            </summary>
            <param name="fileName"> A filename for the annotation data. </param>
            <param name="layer"> A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> where these annotations will be loaded. </param>
            <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary> Loads annotation data from a stream using the formatter and adds the annotations to the provided layer.
            </summary>
            <param name="stream"> A stream containing the annotation data. </param>
            <param name="layer"> A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> where the annotations will be added. </param>
            <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.InternalLoad(System.Object,Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary>
            Loads annotation data from preconstructed objects.  This method is for testing only.
            </summary>
            <param name="data">an AnnotationData tree</param>
            <param name="layer">A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> where the annotations will be added.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary> Loads annotation data from a file and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers"/> collection. </summary>
            <exception cref="T:System.IO.FileNotFoundException"> Thrown if there is an error reading the data. </exception>
            <param name="fileName"> The file containing the annotation data. </param>
            <param name="format"> The format of the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary>
            Loads annotation data from a file and adds the annotations to the specified
            layer.
            </summary>
            <param name="fileName">The file containing the annotation data.</param>
            <param name="layer">The LayerAnnotation where annotations will be added.</param>
            <param name="format">The format of the annotation data.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error reading the data.</exception>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],System.Runtime.Serialization.IFormatter)">
            <summary>
            Loads annotation data from a byte array using the supplied formatter and adds
            them to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers"/>.
            </summary>
            <param name="annotationData">A byte array containing the annotation data.</param>
            <param name="formatter">An IFormatter used to deserialize the data.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary> Loads annotation data into the specified layer using the provided formatter. </summary>
            <param name="annotationData"> A byte array containing the annotation data to read. </param>
            <param name="layer"> The layer to store the annotations. </param>
            <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],Atalasoft.Annotate.AnnotationDataFormat)">
            <summary> Loads annotation data from a byte array and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers"/> collection. </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException"> Thrown if there is an error reading the data. </exception>
            <param name="annotationData"> A byte array containing the annotation data. </param>
            <param name="format"> The format of the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary> Loads annotation data from a byte array and adds the annotations to the specified layer. </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException"> Thrown if there is an error reading the data. </exception>
            <param name="annotationData"> A byte array containing the annotation data. </param>
            <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> where annotations will be added. </param>
            <param name="format"> The format of the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary> Loads annotation data from a stream and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers"/> collection. </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException"> Thrown if there is an error reading the data. </exception>
            <param name="stream"> A stream containing the annotation data. </param>
            <param name="format"> The format of the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary> Loads annotation data from a stream and adds the annotations to the specified layer. </summary>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error reading the data.</exception>
            <param name="stream"> The stream containing annotation data. </param>
            <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> where annotations will be added. </param>
            <param name="format"> The format of the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.Runtime.Serialization.IFormatter)">
            <summary> Saves the annotations to a byte array using the specified formatter. </summary>
            <returns> A byte array containing the serialized data. </returns>
            <param name="formatter"> The formatter used to serialize the annotation data. </param>
            <overloads> Use these methods to save the annotations into the specified format. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary> Returns a byte array containing the annotation data from a specified <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/>.  This
            is useful when saving annotation data to be embedded into image metadata. </summary>
            <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> containing the annotations to save. </param>
            <param name="formatter"> The formatter used to convert the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
            <summary> Saves the annotations to a stream using the specified formatter. </summary>
            <param name="stream"> A stream where the data will be stored. </param>
            <param name="formatter"> The formatter used for serializing the data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary> Saves the specified layer to a stream using the formatter supplied. </summary>
            <param name="stream"> The stream where data will be stored. </param>
            <param name="layer"> The layer to save. </param>
            <param name="formatter"> The formatter used to serialize the data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,System.Runtime.Serialization.IFormatter)">
            <summary> Saves the annotations to a file using the specified formatter. </summary>
            <param name="fileName"> The full path and filename that will be created. </param>
            <param name="formatter"> The formatter use to serialize the data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
            <summary> Saves a layer to a file using the specified formatter. </summary>
            <param name="fileName"> The full path and filename that will be created. </param>
            <param name="layer"> The layer to save. </param>
            <param name="formatter"> The formatter used to serialize the data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary> Saves the annotations to a file using a predefined formatter. </summary>
            <param name="fileName"> The full path and filename that will be created. </param>
            <param name="format"> The format used to save the data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary> Saves a layer to a file using a predefined format. </summary>
            <param name="fileName"> The full path and filename that will be created. </param>
            <param name="layer"> The layer to save. </param>
            <param name="format"> The format used to save the data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary> Writes annotation data to the specified stream. </summary>
            <param name="stream"> The stream where data will be stored. </param>
            <param name="format"> The format used to save the data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
            <summary> Writes annotation data from a layer into the specified stream. </summary>
            <param name="stream"> The stream where annotation data will be stored. </param>
            <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> that will be saved. </param>
            <param name="format"> The format used when saving the annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Ungroup">
            <summary> Ungroups the currently selected annotation. </summary>
            <remarks> This method will do nothing if the currently selected annotation is not a group. </remarks>
            <overloads> Use these methods to separate annotations that are combined into a group. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Ungroup(Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary> Removes annotations from one layer and adds them to another. </summary>
            <remarks> If the <EM>groupLayer</EM> is contained within a layer currently in the LayerCollection it will be removed
            from the collection. </remarks>
            <param name="groupLayer"> The layer containing annotations to ungroup. </param>
            <param name="hostLayer"> The layer where annotation will be added. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnAnnotationCreated(Atalasoft.Annotate.AnnotationEventArgs)">
            <summary> Called when a new annotation has been created by the user. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs"/> containing the new annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnSelectionChanged(System.EventArgs)">
            <summary> Called when an annotation selection has changed. </summary>
            <param name="e"> An EventArgs for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
            <summary> Called when a scroll event has been detected. </summary>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnCurrentLayerChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer"/> property has changed. </summary>
            <param name="e"> An EventArgs for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnHotSpotClicked(Atalasoft.Annotate.AnnotationEventArgs)">
            <summary> Called when a hot spot annotation has been clicked. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs"/> containing the hot spot annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnClick(Atalasoft.Annotate.AnnotationEventArgs)">
            <summary> Called when a Click event is received from the parent control. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs"/> containing the annotation that was clicked. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnDoubleClick(Atalasoft.Annotate.AnnotationEventArgs)">
            <summary> Called when a DoubleClick event has been received from the parent control. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs"/> containing the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary> Called when a MouseDown event is received from the parent control. </summary>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary> Called when a MouseMove event is received from the parent control. </summary>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary> Called when a MouseUp event is received from the parent control. </summary>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMoving(Atalasoft.Annotate.AnnotationEventArgs)">
            <summary> Called while an annotation is being moved by the user. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs"/> containing the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnResizing(Atalasoft.Annotate.AnnotationEventArgs)">
            <summary> Called while an annotation is being resized by the user. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs"/> containing the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnRotating(Atalasoft.Annotate.AnnotationEventArgs)">
            <summary> Called while the annotation is being rotated by the user. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs"/> containing the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary> Called when a Paint event is received from the parent control. </summary>
            <param name="e"> A PaintEventArgs containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.RenderAnnotations(Atalasoft.Annotate.AnnotationImage)">
            <summary>Renders the annotations to the supplied image.</summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the image argument is null (Nothing in VB).</exception>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~RenderAnnotations(AnnotationImage)&quot;]/*"/>
            <example>
                The following example gets a <strong>Bitmap</strong> from an
                <strong>AtalaImage</strong>, renders the annotations onto the Bitmap and converts
                it back to an AtalaImage for viewing in an <strong>AnnotateViewer</strong>.
                <code lang="CS" title="Render Annotations Example">
            // We are only burning the current image.
            // Because we can't get a Graphics object from an indexed image
            // we may need to convert it to 24-bit.
            if (this.annotateViewer1.Image.ColorDepth &lt; 24)
            {
                Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand cmd = new Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand(PixelFormat.Pixel24bppBgr);
                this.annotateViewer1.ApplyCommand(cmd);
            }
             
            Bitmap bmp = this.annotateViewer1.Image.ToBitmap();
            this.annotateViewer1.Annotations.RenderAnnotations(new AnnotationImage(bmp));
            AtalaImage img = AtalaImage.FromBitmap(bmp);
             
            this.annotateViewer1.Image = img;
                </code>
            	<code lang="VB" title="RenderAnnotationsVB">
            ' We are only burning the current image.
            ' Because we can't get a Graphics object from an indexed image
            ' we may need to convert it to 24-bit.
            If Me.annotateViewer1.Image.ColorDepth &lt; 24 Then
                Dim cmd As Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand =  New Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand(PixelFormat.Pixel24bppBgr) 
                Me.annotateViewer1.ApplyCommand(cmd)
            End If
             
            Dim bmp As Bitmap =  Me.annotateViewer1.Image.ToBitmap() 
            Me.annotateViewer1.Annotations.RenderAnnotations(New AnnotationImage(bmp))
            Dim img As AtalaImage =  AtalaImage.FromBitmap(bmp) 
             
            Me.annotateViewer1.Image = img
                </code>
            </example>
            <param name="image">The image that will be rendered onto.</param>
            <overloads> These methods are used to force the annotations to render onto the specified image or Graphics object.
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.RenderAnnotations(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics)">
            <summary> Renders the annotations to a <STRONG>Graphics</STRONG> object </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the graphics object is null (Nothing in VB).</exception>
            <param name="device"> Indicates the device that created the <STRONG>Graphics</STRONG> object. </param>
            <param name="graphics"> The <STRONG>Graphics</STRONG> object used for rendering. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.RenderAnnotations(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics,Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary>
            Renders the annotations in a specified layer to a <strong>Graphics</strong>
            object.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the graphics or layer arguments are null (Nothing in VB).</exception>
            <param name="device">Indicates the device that created the <strong>Graphics</strong> object.</param>
            <param name="graphics">The <strong>Graphics</strong> object used for rendering.</param>
            <param name="layer">The layer to render.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.SelectFromBounds(System.Drawing.RectangleF,System.Boolean)">
            <summary>Selects annotations that are partially or fully within a rectangular area.</summary>
            <param name="bounds">
            The bounding rectangle to look for annotations. This value must be specified in
            document space.
            </param>
            <param name="fullyContained">
            Indicates if the annotation has to be fully within the bounds before it's
            selected.
            </param>
            <overloads> Use these methods to select annotations from a rectangle specifying the bounds in document space.
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.SelectFromBounds(Atalasoft.Annotate.UI.LayerAnnotation,System.Drawing.RectangleF,System.Boolean)">
            <summary> Selects annotations from a layer that are without a bounding region. </summary>
            <param name="layer"> The layer to search for annotations. </param>
            <param name="bounds"> The bounding rectangle to search. This value must be specified in document space. </param>
            <param name="fullyContained"> Indicates if the annotation has to be fully within the bounds before it's selected.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.ExitCreateMode">
            <summary> This method will exit 'create mode' started with <see cref="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)"/>.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Refresh">
            <summary> This method will cause the control to redraw itself. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)">
            <summary> Rotates the annotations in 90 degree increments. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the layer index is invalid for the Layers collection. </exception>
            <remarks> If the annotation has a <STRONG>Translucent</STRONG> property set to true or its
            <STRONG>CanRotate</STRONG> property set to false, its location will change but it will not rotate. </remarks>
            <param name="rotation"> The amount of rotation. </param>
            <param name="layerIndex"> The index of the layer to rotate. </param>
            <overloads> Rotates the annotations in one or all layers. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation)">
            <summary> Rotates all layers in the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers"/> collection. </summary>
            <remarks> If the annotation has a <STRONG>Translucent</STRONG> property set to true or its
            <STRONG>CanRotate</STRONG> property set to false, its location will change but it will not rotate. </remarks>
            <param name="rotation"> The rotation amount. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary> Rotates the specified layer. </summary>
            <remarks> If the annotation has a <STRONG>Translucent</STRONG> property set to true or its
            <STRONG>CanRotate</STRONG> property set to false, its location will change but it will not rotate. </remarks>
            <exception> Thrown if the layer is null (Nothing in VB). </exception>
            <param name="rotation"> The amount of rotation. </param>
            <param name="layer"> The layer to rotate. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Cut">
            <summary> Cuts the selected annotation(s) and places them onto the clipboard. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Copy">
            <summary> Copies the selected annotation(s) to the clipboard. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.Paste">
            <summary> Pastes annotation data from the clipboard into the current layer. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.SelectAll(System.Boolean)">
            <summary> Selects all of the annotations on the current layer or all layers. </summary>
            <param name="allLayers"> Indicates whether to select annotations on all of the layers. If this is
            <STRONG>false</STRONG>, only the current layer annotations are selected. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.ClearSelection">
            <summary> Unselects all of the selected annotations. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.CanPaste">
            <summary> Returns a value indicating whether there is annotation data on the clipboard. </summary>
            <returns> True if there is annotation data on the clipboard. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.ChangeAnnotationPosition(Atalasoft.Annotate.ChangePositionMethod)">
            <summary> Changes the position of the selected annotation within the stacking order. </summary>
            <param name="method"> The type of reordering to perform. </param>
            <overloads> Used to change the top-down order of the annotations and layers. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.ChangeAnnotationPosition(Atalasoft.Annotate.UI.AnnotationUI,Atalasoft.Annotate.ChangePositionMethod)">
            <summary> Changes the position of an annotation or layer within the stacking order. </summary>
            <param name="annotation"> The annotation or layer to change. </param>
            <param name="method"> The type of ordering to perform. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.AnnotationFromPoint(System.Drawing.PointF)">
            <summary> Returns the annotation located at a specific point on the control. </summary>
            <returns> The annotation at the location or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if there is no
            annotation at that location. </returns>
            <param name="vsPoint"> The point to search for an annotation.  This point should be specified in view space.
            </param>
            <overloads> Used to test if an annotation exists at the specified point in viewer space. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.AnnotationFromPoint(Atalasoft.Annotate.UI.LayerAnnotation,System.Drawing.PointF)">
            <summary> Returns the annotation at the specified point of a specified layer. </summary>
            <returns> The annotation at the location or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if there is no
            annotation at that location. </returns>
            <param name="layer"> The layer to search for annotations. </param>
            <param name="vsPoint"> The point to search for an annotation.  This point should be specified in view space.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.NotifyController(System.Object,Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary> This method is used by layer and annotation objects to notify the <STRONG>AnnotationController</STRONG> of
            events. </summary>
            <param name="sender"> The object sending this notification. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> containing information about this event.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.CountAnnotations">
            <summary> Returns the number of annotations in all of the layers. </summary>
            <returns> The number of annotations in the controller. </returns>
            <remarks> If a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> is being used as a group it will only count as 1, even though it may
            contain several child annotations. </remarks>
            <overloads> These methods are used to count the number of annotations in all layers or only a specified layer.
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.CountAnnotations(Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary> Returns the number of annotations in the provided layer. </summary>
            <remarks> If a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> is being used as a group it will only count as 1, even though it may
            contain several child annotations. </remarks>
            <returns> The number of annotations in the layer. </returns>
            <param name="layer"> The layer to count. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationController.GetTopLevelLayer(Atalasoft.Annotate.UI.AnnotationUI)">
            <summary> Returns the top level <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> for the supplied annotation. This method will scan
            through the nested layers until it finds the top most layer. </summary>
            <returns> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> that is loaded in the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers"/>
            collection or null (Nothing in VB) if no parent layer is found. </returns>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
            <param name="annotation">The annotation where the search will begin.</param>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationDeserialization">
            <summary> Raised when an object is deserialized to allow developers to cancel or modify the object before its added
            into the controller. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.HotSpotClicked">
            <summary> Raised when a hot spot annotation is clicked. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.Rotated">
            <summary> Raised when an annotation is rotated by the user. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.Rotating">
            <summary> Raised while an annotation is being rotated by the user. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationCreated">
            <summary> Raised when an annotation is created by the user. </summary>
            <remarks> This event is only raised when an annotation is added by the user drawing it with the mouse. Adding
            annotations to a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> will not raise this event. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.Click">
            <summary> Raised when an annotation is clicked with the mouse. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.Disposed">
            <summary> Raised when the <STRONG>AnnotationController</STRONG> has been disposed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.DoubleClick">
            <summary> Raised when an annotation is double-clicked by the user. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.Moved">
            <summary> Raised when an annotation is moved. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.Moving">
            <summary> Raised while an annotation is being moved. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.Resized">
            <summary> Raised when an annotation is resized. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.Resizing">
            <summary> Raised while an annotation is being resized. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.SelectionChanged">
            <summary> Raise when there has been a change in the annotation selection. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationController.CurrentLayerChanged">
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer"/> property has changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.ClipToDocument">
            <summary> Gets or sets a value indicating whether the annotation rendering is clipped to the document bounds.
            </summary>
            <value> Indicates if the annotation rendering is clipped to the document bounds. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval">
            <summary> <para>Gets or sets the interval used for snapping interactive rotation to degrees.</para>
            <para>This is used to help users when rotating an annotation, making it easier to stop at whole degrees. The snap
            area is determined by the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapThreshold"/> property.</para> </summary>
            <value>The degree interval used for interactive rotation snapping.</value>
            <remarks>
            This value must be from 0 to 180 and evenly divisible into 360. When setting this
            property the value will automatically be converted into a valid value.
            </remarks>
            <seealso cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapThreshold">RotationSnapThreshold Property</seealso>
            <example>
                The following settings will cause the rotation to snap at 10 degree intervals when
                the rotation gets within 2 degrees of the interval.
                <code lang="CS" title="RotationSnapCS">
            this.annotateViewer1.RotationSnapInterval = 10;
            this.annotateViewer1.RotationSnapThreshold = 2;
                </code>
            	<code lang="VB" title="RotationSnapVB">
            Me.annotateViewer1.RotationSnapInterval = 10
            Me.annotateViewer1.RotationSnapThreshold = 2
                </code>
            </example>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~RotationSnapInterval&quot;]/*"/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapThreshold">
            <summary>
            Gets or sets the amount of deviation from the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval"/>
            that will be used to snap to the rotation interval.
            </summary>
            <value>
            The amount of deviation from the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval"/>.
            </value>
            <remarks>
            This value must be from 0 to half the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval"/>.
            If the property is set to an invalid value it will be automatically corrected.
            </remarks>
            <seealso cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval">RotationSnapInterval Property</seealso>
            <example>
                The following settings will cause the rotation to snap at 10 degree intervals when
                the rotation gets within 2 degrees of the interval.
                <code lang="CS" title="RotationSnapCS">
            this.annotateViewer1.RotationSnapInterval = 10;
            this.annotateViewer1.RotationSnapThreshold = 2;
                </code>
            	<code lang="VB" title="RotationSnapVB">
            Me.annotateViewer1.RotationSnapInterval = 10
            Me.annotateViewer1.RotationSnapThreshold = 2
                </code>
            </example>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~RotationSnapThreshold&quot;]/*"/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.CreateMouseButton">
            <summary> Gets or sets the mouse button used for creating annotations. </summary>
            <value> The mouse button used for creating annotations. Defaults to <STRONG>Left</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.SmoothingMode">
            <summary> Gets or sets the smoothing mode used when drawing annotations. </summary>
            <value> The smoothing mode used when drawing annotations. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.MultiSelectKey">
            <summary> Gets or sets the key held down to select multiple annotations. </summary>
            <value> The key held down to select multiple annotations. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.IsDirty">
            <summary> Gets a value indicating whether the annotations have been modified since the last load or save. </summary>
            <value> A value indicating whether the data needs to be saved. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode">
            <summary> Gets or sets a value specifying the user interactive mode of the <STRONG>AnnotationController</STRONG>.
            </summary>
            <value> The interaction mode of the <STRONG>AnnotationController</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.AnnotationConfinement">
            <summary> Gets or sets the annotation confinement used to keep annotations within a specific area of the control.
            </summary>
            <value> The annotation confinement. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.DefaultSecurity">
            <summary> Gets or sets the default security used for new annotations. </summary>
            <value> The default security used for annotations. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.Factories">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/> containing <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory"/> objects
            used to create annotations from AnnotationData classes. </summary>
            <value> The annotation factory collection used to create <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects from <see cref="T:Atalasoft.Annotate.AnnotationData"/> classes. </value>
            <remarks> The UI factories are used when deserializing <see cref="T:Atalasoft.Annotate.AnnotationData"/> classes. When custom annotations
            are used for serialization an <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory"/> for the UI should be added to the factory
            collection. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.UndoManager">
            <summary>Gets the AnnotationUndoManager used by the controller.</summary>
            <value>The undo manager used by the controller.</value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.ActiveAnnotation">
            <summary> Gets or sets the currently selected annotation. </summary>
            <value> The active annotation being used. </value>
            <remarks> <para>An annotation becomes active when the user selects it using the mouse. When multiple annotations are
            selected the <STRONG>ActiveAnnotation</STRONG> will be the last annotation selected by the user.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer">
            <summary> Gets or sets the current active layer. </summary>
            <value> The current <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> being used. </value>
            <remarks> <para>When an annotation is selected, either through code or by the user, the layer it's contained in
            becomes the current layer. When multiple annotations in different layers are selected, the last selected
            annotation's layer will become the current layer.</para>
            <para>When an annotation is created by the user, it will be added as a child of the current layer.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.Layers">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.LayerCollection"/> used by the <STRONG>AnnotationController</STRONG>.
            </summary>
            <value> The <see cref="T:Atalasoft.Annotate.UI.LayerCollection"/> used for this controller. </value>
            <remarks> Each AnnotationController must have its own LayerCollection. Setting the Layers property of more than one
            AnnotationController to the same LayerCollection will have unforeseen consequences. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.Parent">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> parent control where the annotations will be rendered. </summary>
            <value> The control where the annotations will be rendered. </value>
            <remarks> Each AnnotationController must have its own IAnnotate parent. Giving multiple AnnotationController objects
            the same parent will cause unforeseen consequences and is not supported. This property should be set to
            <STRONG>null</STRONG> (Nothing in Visual Basic) when the controller is being replaced by another
            AnnotationController. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.SelectedAnnotations">
            <summary> Gets an array of annotations currently selected. </summary>
            <value> An array of <see cref="T:Atalasoft.Annotate.UI.IAnnotate"/> containing the currently selected annotations. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.ToolTip">
            <summary> Gets or sets the tooltip control used for annotation tooltips. </summary>
            <value> The tooltip control used for annotation tooltips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.Site">
            <summary> <para>Gets or sets the site of the control.</para> </summary>
            <value> The ISite associated with the Control, if any. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationController.WaitingToCreate">
            <summary> Gets a value indicating whether the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> is waiting for the user to create
            an annotation with the mouse. </summary>
            <value> A value indicating if the <STRONG>AnnotationController</STRONG> is ready to create a new annotation.
            </value>
            <remarks> <para>This property will return true between the time <see cref="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)"/>
            is called and the user begins to create the annotation.</para>
            <para>To cancel out of 'create' mode call the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.ExitCreateMode"/> method.</para>
            </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationCursors">
            <summary> <STRONG>AnnotationCursors</STRONG> is a used to hold all of the <STRONG>Cursor</STRONG> objects for the
            annotations.  This simplifies changing the appearance of the cursors. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.RotateCursor">
            <summary> Gets or sets the cursor used for the rotation grip. </summary>
            <value> The cursor used for the rotation grip. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.MoveCursor">
            <summary> Gets or sets the cursor used to indicate a move operation. </summary>
            <value> The cursor used for moving. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.DefaultCursor">
            <summary> Gets or sets the default cursor used when the pointer is not over an annotation or grip. </summary>
            <value> The default cursor. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.NorthSouthCursor">
            <summary> Gets or sets the cursor used for the top and bottom center grips. </summary>
            <value> The cursor for the top and bottom center grips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.EastWestCursor">
            <summary> Gets or sets the cursor used when over the left or right center grip. </summary>
            <value> The cursor for the left and right center grip. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.NortheastSouthwestCursor">
            <summary> Gets or sets the cursor used for the top-right and bottom-left grips. </summary>
            <value> The cursor used for the top-right and bottom-left grips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.NorthwestSoutheastCursor">
            <summary> Gets or sets the cursor used for the top-left and bottom-right grips. </summary>
            <value> The cursor used for the top-left and bottom-right grips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.HotSpotCursor">
            <summary> Gets or sets the cursor used for hot spots.  This is only shown when <see cref="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode"/> is set to <STRONG>View</STRONG>. </summary>
            <value> The cursor used for hot spots. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationKeyBinder">
            <summary> The <STRONG>AnnotationKeyBinder</STRONG> class is used to bind key press events to annotation actions.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationKeyBinder&quot;]/*"/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationKeyBinder.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationKeyBinder</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationKeyBinder.Contains(System.Windows.Forms.Keys)">
            <summary> Returns a value indicating if the <STRONG>AnnotationKeyBinder</STRONG> contains a specific key. </summary>
            <returns> <STRONG>True</STRONG> if the <STRONG>AnnotationKeyBinder</STRONG> contains the specified key. </returns>
            <param name="key"> The key to search for. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationKeyBinder.Item(System.Windows.Forms.Keys)">
            <summary>
            Gets or sets the <see cref="T:Atalasoft.Annotate.UI.AnnotationKey"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:Atalasoft.Annotate.UI.AnnotationKey"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationKey">
            <summary> This class is used with the <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyBinder"/> to define the action or handler to call when
            a specific key is pressed. </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationKey&quot;]/*"/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationKey.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationKey</STRONG>. </summary>
            <overloads> Constructs an <STRONG>AnnotationKey</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationKey.#ctor(Atalasoft.Annotate.UI.AnnotationKeyAction)">
            <summary> Creates a new instance of <STRONG>AnnotationKey</STRONG> specifying its action. </summary>
            <param name="action"> The action to take when the key is pressed. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationKey.#ctor(Atalasoft.Annotate.UI.AnnotationKeyAction,Atalasoft.Annotate.UI.AnnotationKeyEventHandler)">
            <summary> Creates a new instance of <STRONG>AnnotationKey</STRONG> specifying the action and event handler of the
            key event. </summary>
            <param name="action"> The action to take when the key is pressed. </param>
            <param name="handler"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyEventHandler"/> called to perform this action. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationKey.Action">
            <summary> Gets or sets the action for this key. </summary>
            <value> The action of the key. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationKey.Handler">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyEventHandler"/> that will be called to perform the action.
            </summary>
            <value> The handler for this action. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationKeyAction">
            <summary> This enumeration is used to define the actions used with <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyBinder"/>. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.None">
            <summary> No action is taken. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectNext">
            <summary> The next annotation in the collection is selected.  If the current annotation is the last in the
            collection, the first annotation will be selected. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectPrevious">
            <summary> The previous annotation in the collection is selected.  If the current annotation is at index zero, the
            last annotation in the collection will be selected. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectLeft">
            <summary> Selects the annotation who has the next lowest X location value. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectRight">
            <summary> Selects the annotation who has the next highest X location value. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectAbove">
            <summary> Selects the annotation who has the next lowest Y location value. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectBelow">
            <summary> Selects the annotation who has the next highest Y location value. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveLeft">
            <summary> Moves the selected annotations to the left. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveRight">
            <summary> Moves the selected annotations to the right. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveUp">
            <summary> <para>Moves the selected annotations up.</para> </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveDown">
            <summary> Moves the selected annotations down. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.RotateCounterclockwise">
            <summary> Rotates the active annotation counterclockwise. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.RotateClockwise">
            <summary> Rotates the active annotation clockwise. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.IncreaseWidth">
            <summary> Increases the width of the active annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.DecreaseWidth">
            <summary> Decreases the width of the active annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.IncreaseHeight">
            <summary> Increases the height of the active annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.DecreaseHeight">
            <summary> Decreases the height of the active annotation. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.ClearSelection">
            <summary> Unselects all annotations. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationKeyEventHandler">
            <summary> This event handler is used with the <see cref="T:Atalasoft.Annotate.UI.AnnotationKey"/> class to process key actions. </summary>
            <param name="sender"> The object sending the event. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyEventArgs"/> containing information about this event. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationKeyEventArgs">
            <summary> This class is sent to the <see cref="T:Atalasoft.Annotate.UI.AnnotationKey"/> handler during a key press event. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationUI,Atalasoft.Annotate.UI.AnnotationKeyAction,System.Boolean,System.Windows.Forms.KeyEventArgs)">
            <summary> Creates a new instance of <STRONG>AnnotationKeyEventArgs</STRONG> specifying its parameters. </summary>
            <param name="annotation"> The annotation being affected by this event. </param>
            <param name="action"> The action to take. </param>
            <param name="repeat"> Indicates whether this is a repeat event caused from a key being held down. </param>
            <param name="e"> The <STRONG>KeyEventArgs</STRONG> from the key press event. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.Annotation">
            <summary> Gets the annotation being modified. </summary>
            <value> The annotation being modified. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.Action">
            <summary> Gets the action to be taken by this event. </summary>
            <value> The action to take. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.Repeat">
            <summary> Gets a value indicating if this is a repeat event caused by the user holding down a key. </summary>
            <value> Indicates a repeat event from a key being held down. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.KeyEventArgs">
            <summary> Gets the <STRONG>KeyEventArgs</STRONG> from the key press event. </summary>
            <value> The <STRONG>KeyEventArgs</STRONG> from this event. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs">
            <summary> This class is passed to mouse event handlers. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Single,System.Single,System.Int32)">
            <summary> Creates a new instance of <STRONG>AnnotationMouseEventArgs</STRONG> specifying its parameters. </summary>
            <param name="button"> The mouse button being pressed. </param>
            <param name="clicks"> The click count. </param>
            <param name="x"> The x position of the mouse. </param>
            <param name="y"> The y position of the mouse. </param>
            <param name="delta"> The delta of the mouse wheel. </param>
            <overloads> Constructs an <STRONG>AnnotationMouseEventArgs</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.#ctor(System.Windows.Forms.MouseEventArgs)">
            <summary> Creates a new instance of <STRONG>AnnotationMouseEventArgs</STRONG> from a <STRONG>MouseEventArgs</STRONG>
            object. </summary>
            <param name="e"> A <STRONG>MouseEventArgs</STRONG> containing information for this event. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Processed">
            <summary> Gets or sets a value indicating whether the event has been handled. </summary>
            <value> A value indicating whether the event has been handled. </value>
            <remarks> Annotations can set this property to true to prevent the base <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> class from
            processing mouse move events. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Button">
            <summary> Gets which mouse button was pressed. </summary>
            <value> The mouse button that was pressed. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Clicks">
            <summary> Gets the number of times the mouse button was pressed and released. </summary>
            <value> The number of mouse clicks. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Delta">
            <summary> Gets a signed count of the number of detents the mouse wheel has rotated. A detent is one notch of the
            mouse wheel. </summary>
            <value> The delta for the mouse wheel. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.X">
            <summary> Gets the x-coordinate of the mouse. </summary>
            <value> The x position of the mouse. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Y">
            <summary> Gets the y-coordinate of the mouse. </summary>
            <value> The y position of the mouse. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationMouseEventHandler">
            <summary> This event handler is used with several mouse events. </summary>
            <param name="sender"> The object sending the event. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationUI">
            <summary> This abstract class represents the base annotation object. All annotations must derive from
            <STRONG>AnnotationUI</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.#ctor(Atalasoft.Annotate.AnnotationData)">
            <summary>
            A constructor for the AnnotationUI object specifying the releated
            AnnotationData.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the data parameter is null.</exception>
            <param name="data">
            The AnnotationData for this annotation. This parameter cannot be null (Nothing in
            Visual Basic).
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            A constructor for AnnotationUI specifying the serialization information for this
            annotation.
            </summary>
            <param name="info">The SerializationInfo object containing information about this annotation.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this annotation. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo where data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.AddGripsToRegion(Atalasoft.Annotate.AnnotationRegion)">
            <summary>
            Adds the annotation grips to a region. The grips are added in annotation space.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the region argument is null (Nothing in VB).</exception>
            <seealso cref="M:Atalasoft.Annotate.UI.AnnotationUI.GetRegion(Atalasoft.Annotate.AnnotateSpace)">GetRegion Add</seealso>
            <example>
            See the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.GetRegion(Atalasoft.Annotate.AnnotateSpace)"/> method for an example of using <strong>AddGripsToRegion</strong>.
            </example>
            <param name="region"> The <see cref="T:Atalasoft.Annotate.AnnotationRegion"/> to which grips will be added. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary> Returns the new confined location of the annotation when a confinement bounds and new location offset are
            provided. </summary>
            <param name="dsConfinedBounds"> The bounding rectangle in document space for the confinement. </param>
            <param name="dsLocationOffset"> The difference between the current and suggested new location of the annotation in
            document space units. </param>
            <overloads> These methods are used by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> to handle annotation confinement.
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary> <para>Returns the new confined location of the annotation when the annotation bounds, a confinement bounds
            and new location offset are provided.</para>
            <para>This overload is useful when only a portion of the annotation bounds should be taken into account for this
            calculation.</para> </summary>
            <param name="dsAnnotationBounds"> The bounding rectangle of the annotation in document space. </param>
            <param name="dsConfinedBounds"> The bounding rectangle in document space for the confinement. </param>
            <param name="dsLocationOffset"> The difference between the current and suggested new location of the annotation in
            document space units. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedRotation(System.Drawing.RectangleF,System.Single)">
            <summary>
            Gets the confined rotation.
            </summary>
            <param name="dsConfinedBounds">The ds confined bounds.</param>
            <param name="newAngle">The new angle.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedGripPosition(System.Drawing.RectangleF,Atalasoft.Annotate.UI.AnnotationGrip,System.Drawing.PointF,System.Boolean@)">
            <summary>
            Gets the confined grip position.
            </summary>
            <param name="dsConfinedBounds">The ds confined bounds.</param>
            <param name="grip">The grip.</param>
            <param name="dsRequestedPosition">The ds requested position.</param>
            <param name="ignoreMove">if set to <c>true</c> [ignore move].</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetViewerParameters">
            <summary> This method is used to get information about the viewer where the annotations are rendered, including
            resolution, zoom (scale) level and scrollbar position. </summary>
            <returns> An <see cref="T:Atalasoft.Annotate.UI.AnnotateViewerParameters"/> object containing the viewer information. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>
            Returns a rectangular region for this annotation, including its grips if
            selected.
            </summary>
            <returns>The region of this annotation in the specified space.</returns>
            <example>
                The following is an example of how a custom annotation may override the
                <strong>GetRegion</strong> method.
                <code lang="CS" title="GetRegionCS">
            public override AnnotationRegion GetRegion(AnnotateSpace space)
            {
                // Create the region in annotation space.
                AnnotationRegion reg = new AnnotationRegion(new RectangleF(PointF.Empty, _data.Size));
                if (this.Selected &amp;&amp; this.Grips != null)
                    AddGripsToRegion(reg);
             
                ApplyRegionTransform(reg, space);
                return reg;
            }
                </code>
            	<code lang="VB" title="GetRegionVB">
            Public Overrides Function GetRegion(ByVal space As AnnotateSpace) As AnnotationRegion
                ' Create the region in annotation space.
                Dim reg As AnnotationRegion =  New AnnotationRegion(New RectangleF(PointF.Empty,_data.Size)) 
                If Not Me.Selected And Me.Grips Is Nothing Then
                    AddGripsToRegion(reg)
                End If
             
                ApplyRegionTransform(reg, space)
                Return reg
            End Function
                </code>
            </example>
            <seealso cref="M:Atalasoft.Annotate.UI.AnnotationUI.AddGripsToRegion(Atalasoft.Annotate.AnnotationRegion)">AddGripsToRegion Add</seealso>
            <seealso cref="M:Atalasoft.Annotate.UI.AnnotationUI.ApplyRegionTransform(Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.AnnotateSpace)">ApplyRegionTransform Add</seealso>
            <param name="space">The space coordinate system used to generate this region.</param>
            <summary> Returns a rectangular region for this annotation, including its grips if selected. </summary>
            <returns> The region of this annotation in the specified space. </returns>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationUI~GetRegion&quot;]/*"/>
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.ApplyRegionTransform(Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.AnnotateSpace)">
            <summary>
            Use this method to convert a region from annotation space to document or view
            space.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the region argument is null (Nothing in VB).</exception>
            <seealso cref="M:Atalasoft.Annotate.UI.AnnotationUI.GetRegion(Atalasoft.Annotate.AnnotateSpace)">GetRegion Add</seealso>
            <example>
            See the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationUI~GetRegion.html">GetRegion</a>
            method for an example of using <strong>ApplyRegionTransform</strong>.
            </example>
            <param name="region"> The region to convert. This must be a region in annotation space. </param>
            <param name="space"> The space to convert the region into. If this argument is
            <STRONG>AnnotateSpace.Annotation</STRONG>, no transform is applied. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.BeginCreate">
            <summary> This method is called by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> when the user is beginning to create this
            annotation using the mouse. </summary>
            <remarks> Use this method to prepare the annotation for creation by receiving the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/>, <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/> and <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/>
            method calls. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseDownEvent(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseDown"/> event on the annotation. </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/> method is called as a result of using
            <STRONG>RaiseMouseDownEvent</STRONG>. </remarks>
            <exception> Thrown if the event args is null (Nothing in VB). </exception>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseDown"/> event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseMoveEvent(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseMove"/> event on the annotation. </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/> method is called as a result of using
            <STRONG>RaiseMouseMoveEvent</STRONG>. </remarks>
            <exception> Thrown if the event args is null (Nothing in VB). </exception>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseUpEvent(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseUp"/> event on the annotation. </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/> method is called as a result of using
            <STRONG>RaiseMouseUpEvent</STRONG>. </remarks>
            <returns> True if the annotation is finished being created.  Point base annotations will return false while being
            created until the final point. </returns>
            <exception> Thrown if the event args is null (Nothing in VB). </exception>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMovingEvent(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
            <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Moving"/> event on the annotation. </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"/> method is called as a result of using
            <STRONG>RaiseMovingEvent</STRONG>. </remarks>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information about this event.  This
            may be null (Nothing in VB). </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseRotatedEvent">
            <summary> This method invokes the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Rotated"/> event. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseOnRotateDocument(Atalasoft.Annotate.DocumentRotation)">
            <summary> Use this method to force the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)"/> method to be called. </summary>
            <param name="rotation"> The amount of rotation applied. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseGripPositionChangedEvent(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)">
            <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged"/> event on the annotation.
            </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)"/> method is called as a result of using
            <STRONG>RaiseGripPositionChangedEvent</STRONG>. </remarks>
            <exception> Thrown if the event args is null (Nothing in VB). </exception>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseResizedEvent">
            <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Resized"/> event on the annotation. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMovedEvent">
            <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Moved"/> event on the annotation. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseScrollPositionChangedEvent(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
            <summary> Use this method to force the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)"/> method to be called.
            </summary>
            <exception> Thrown if the event args is null (Nothing in VB). </exception>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)">
            <summary> Called when the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)"/> method is used. </summary>
            <param name="rotation"> The amount of rotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
            <summary> Called when the <STRONG>IAnnotate</STRONG>. <see cref="P:Atalasoft.Annotate.UI.IAnnotate.Transform"/> indicates a change in its
            offset (scroll position). </summary>
            <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs"/> containing information for this change. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)">
            <summary> Called when a grip of the annotation has been moved by the user using the mouse. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseClickEvent">
            <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Click"/> event on the annotation. </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnClick(System.EventArgs)"/> method will be called as a result of using
            <STRONG>RaiseClickEvent.</STRONG> </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnClick(System.EventArgs)">
            <summary> Called when the user has clicked on the annotation. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseDoubleClickEvent">
            <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.DoubleClick"/> event on the annotation. </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnDoubleClick(System.EventArgs)"/> method is called as a result of using
            <STRONG>RaiseDoubleClickEvent</STRONG>. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnDoubleClick(System.EventArgs)">
            <summary> Called when the annotation is double-clicked. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <summary> Called when the grips of an annotation have been dragged past the opposite grip. </summary>
            <remarks> This method will only be called if the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMirror"/> property of the annotation
            is true. </remarks>
            <param name="direction"> The direction in which the annotation should be mirrored. </param>
            <param name="maintainPosition"> Determines whether the mirror is performed in place or if the annotation pivots
            along its location. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary> Called when the user clicks down on the annotation. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseEnterEvent">
            <summary> Use to force the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseEnter"/> event for the annotation. </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseEnter(System.EventArgs)"/> method is called as a result of using
            <STRONG>RaiseMouseEnterEvent</STRONG>. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseEnter(System.EventArgs)">
            <summary> Called when the mouse is moved into the annotation region. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseExitEvent">
            <summary> Use to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseExit"/> event on the annotation. </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseExit(System.EventArgs)"/> method is called as a result of using
            <STRONG>RaiseMouseExitEvent</STRONG>. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseExit(System.EventArgs)">
            <summary> Called when the mouse is moved out of the annotation region. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary> Called when the user has moved the mouse over the annotation. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary> Called when the user has released the mouse over the annotation. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoved(System.EventArgs)">
            <summary> Called when a move to a new location has completed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
            <summary> Called while an annotation is being moved by the user. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information about this event.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotating(System.EventArgs)">
            <summary> Called while an annotation is being rotated by the user. </summary>
            <param name="e"> An EventArgs for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Size"/> property of the annotation has changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs"/> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotated(System.EventArgs)">
            <summary> Called when the annotation has been rotated by the user. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnResized(System.EventArgs)">
            <summary> Called when a resize on the annotation has completed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnResizing(System.EventArgs)">
            <summary> Called while the annotation is being resized by the user. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotate(System.EventArgs)">
            <summary> Called when the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.Rotate(System.Single)"/> method is called on the annotation. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnSelectedChanged(System.EventArgs)">
            <summary> Called when the <see cref="P:Atalasoft.Annotate.UI.AnnotationUI.Selected"/> property of the annotation has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary> Called after a property of the annotation or related <see cref="T:Atalasoft.Annotate.AnnotationData"/> has been modified.
            </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> containing information on this changed.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary> Called when a property of the annotation or <see cref="T:Atalasoft.Annotate.AnnotationData"/> is about to be changed.
            </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> containing information about this change.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
            <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanged"/> event.
            </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.SetGrips(Atalasoft.Annotate.UI.IAnnotationGrips)">
            <summary> Sets the grips used by the annotation. </summary>
            <remarks> Use this method in derived classes to set the Grips property. </remarks>
            <param name="grips"> The grips to use. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.CreateRenderTransform">
            <summary> Returns the <STRONG>Matrix</STRONG> used by the renderer to transform the annotation. </summary>
            <returns> The transform <STRONG>Matrix</STRONG> used when rendering. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.TransformRectangle(System.Drawing.RectangleF)">
            <summary> Applies the render transformation matrix to a rectangle. </summary>
            <returns> The transformed rectangle. </returns>
            <param name="rectangle"> The rectangle to transform. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetOnePixel">
            <summary> Returns the equivalent of 1 pixel in resolution units. </summary>
            <returns> The equivalent of 1 pixel in resolution units. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Clone">
            <summary> Creates a copy of this annotation. </summary>
            <returns> A copy of this <STRONG>AnnotationUI</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Remove">
            <summary> Forces the annotation to remove itself from its parent layer. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Rotate(System.Single)">
            <summary> Rotates the annotation by the specified number of degrees. </summary>
            <remarks> This <EM>degrees</EM> parameter is added the the Rotate value of the annotation in order to determine the
            full rotation of the annotation. </remarks>
            <param name="degrees"> The number of degrees to rotate the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <summary> Mirrors (flips) the annotation horizontally or vertically. </summary>
            <remarks> The <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)"/> method is called as a result of using Mirror. </remarks>
            <param name="direction"> The direction to flip the annotation. </param>
            <param name="maintainPosition"> Determines whether the mirror is performed in place or if the annotation pivots
            along its location. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnControllerChanged(System.EventArgs)">
            <summary> Called when the Controller property has changed. </summary>
            <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Click">
            <summary>Raised when the annotation has been clicked with the mouse.</summary>
            <summary> Raised when the annotation has been clicked with the mouse. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.DoubleClick">
            <summary>Raised when the annotation has been double-clicked with the mouse.</summary>
            <summary> Raised when the annotation has been double-clicked with the mouse. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseDown">
            <summary>Raised when a mouse button is pressed while on top of the annotation.</summary>
            <summary> Raised when a mouse button is pressed while on top of the annotation. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseEnter">
            <summary>Raised when the mouse enters the annotation region.</summary>
            <summary> Raised when the mouse enters the annotation region. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseExit">
            <summary>Raised when the mouse exists the annotation region.</summary>
            <summary> Raised when the mouse exists the annotation region. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseMove">
            <summary>Raised when the mouse is moved over the annotation.</summary>
            <summary> Raised when the mouse is moved over the annotation. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseUp">
            <summary>Raised when the mouse button is released from an annotation.</summary>
            <summary> Raised when the mouse button is released from an annotation. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Moved">
            <summary>Raised when the annotation has been moved.</summary>
            <summary> Raised when the annotation has been moved. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Moving">
            <summary>Raised while the annotation is being moved.</summary>
            <summary> Raised while the annotation is being moved. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Resized">
            <summary>Raised when the annotation has been resized.</summary>
            <summary> Raised when the annotation has been resized. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Resizing">
            <summary>Raised while the annotation is being resized.</summary>
            <summary> Raised while the annotation is being resized. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Rotated">
            <summary>
            Raised after the annotation has been rotated by the user.
            </summary>
            <summary> Raised after the annotation has been rotated by the user. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Rotating">
            <summary> Raise while an annotation is being rotated. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.SelectedChanged">
            <summary> Raised when the <see cref="P:Atalasoft.Annotate.UI.AnnotationUI.Selected"/> property changes. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged">
            <summary> Raised when a grip for the annotation has been moved. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanging">
            <summary> Raised when a property of the annotation or <see cref="T:Atalasoft.Annotate.AnnotationData"/> is going to be changed.
            </summary>
            <remarks>This will be raised before the property value has been modified.</remarks>
            <seealso cref="E:Atalasoft.Annotate.UI.AnnotationUI.AnnotationControllerNotification">AnnotationControllerNotification Event</seealso>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanged">
            <summary> Raised when a property value has changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUI.AnnotationControllerNotification">
            <summary>Raised after a property value has been changed.</summary>
            <seealso cref="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanging">PropertyChanging Event</seealso>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanMirror">
            <summary>
            Gets or sets a value indicating whether can mirror.
            </summary>
            <value>
              <c>true</c> if can mirror; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanMove">
            <summary>
            Gets or sets a value indicating whether can move.
            </summary>
            <value>
              <c>true</c> if can move; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanResize">
            <summary>
            Gets or sets a value indicating whether can resize.
            </summary>
            <value>
              <c>true</c> if can resize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanRotate">
            <summary>
            Gets or sets a value indicating whether can rotate.
            </summary>
            <value>
              <c>true</c> if can rotate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanSelect">
            <summary>
            Gets or sets a value indicating whether can select.
            </summary>
            <value>
              <c>true</c> if can select; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
            <value>
            The creation time.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ModifiedTime">
            <summary>
            Gets or sets the modification time.
            </summary>
            <value>
            The modification time.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Security">
            <summary>
            Gets or sets the security.
            </summary>
            <value>
            The security.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value>
            The tool tip.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>
            The transform.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.HitTestRectangle">
            <summary> Gets a rectangle used for hit testing or <STRONG>RectangleF.Empty</STRONG> to use the default hit testing
            method. </summary>
            <value> A rectangle to use for hit testing or RectangleF.Empty to indicate that the default hit testing method
            should be used. </value>
            <remarks> The default hit testing method will ignore transparent areas of the annotation.  This property can be used
            to override this behavior. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Controller">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> for this annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> used with this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ParentLayer">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> that contains this annotation. </summary>
            <value> The parent layer for this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ContextMenu">
            <summary> Gets or sets a <STRONG>ContextMenu</STRONG> object that will be displayed when the user right-clicks on
            the annotation. </summary>
            <value> The context menu for the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ContextMenuStrip">
            <summary> Gets or sets a <STRONG>ContextMenuStrip</STRONG> object that will be displayed when the user right-clicks
            on the annotation. </summary>
            <value> The context menu for the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Grips">
            <summary> Gets the grips used for the annotation. </summary>
            <value> The annotation grips. </value>
            <remarks> Derived classes can use the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.SetGrips(Atalasoft.Annotate.UI.IAnnotationGrips)"/> method to change the grips used by the
            annotation. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Data">
            <summary>Gets the AnnotationData object associated with this annotation.</summary>
            <value>The AnnotationData object for this annotation.</value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.State">
            <summary> Gets or sets the current state of the annotation. </summary>
            <value> The current state of the annotation. </value>
            <remarks> The primary usage of this property is to keep track of where the annotation is at in the creation process.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Selected">
            <summary> Gets or sets a value indicating whether this annotation the selected. </summary>
            <value> A value indicating if the annotation is selected. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Bounds">
            <summary> Gets the bounding rectangle for the annotation. </summary>
            <value> The bounding rectangle for the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Visible">
            <summary> Gets or sets a value indicating whether the annotation is visible. </summary>
            <value> A value indicating if the annotation is visible. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Location">
            <summary> Gets or sets the location of the annotation in document space. </summary>
            <value> The location of the top-left corner of the annotation in document space. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Size">
            <summary> Gets or sets the size of the annotation. </summary>
            <value> The size of the annotation. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotateViewerParameters">
            <summary> This class is returned by <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.GetViewerParameters"/> to provide information about the
            viewer the annotations are rendered on. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotateViewerParameters.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotateViewerParameters</STRONG>. </summary>
            <overloads> Constructs an <STRONG>AnnotateViewerParameters</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotateViewerParameters.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>AnnotateViewerParameters</STRONG> specifying the resolution, zoom and
            scroll offset. </summary>
            <exception> Thrown if the zoom is less than or equal to 0. </exception>
            <param name="resolution"> The resolution of the viewer. </param>
            <param name="zoom"> The zoom level of the viewer. </param>
            <param name="scrollOffset"> The scroll position (offset from the top-left corner) of the document. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotateViewerParameters.Resolution">
            <summary> Gets the resolution of the viewer. </summary>
            <value> The viewer resolution. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotateViewerParameters.Zoom">
            <summary> Gets the zoom level of the viewer. </summary>
            <value> The zoom level of the viewer. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotateViewerParameters.ScrollOffset">
            <summary> Gets the scroll position (offset from the top-left corner) of the document. </summary>
            <value> The scroll offset of the document. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationUICollection">
            <summary> This class holds a collection of annotation objects. <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/>s use this collection to
            hold the <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects they contain. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG>. </summary>
            <overloads> Constructs an <STRONG>AnnotationUICollection</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor(System.Boolean)">
            <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG> used for storage. </summary>
            <remarks> This overload is primarily for internal use but can be used to store annotations outside of a layer.
            </remarks>
            <param name="storage"> Indicates whether this collection is only used for storage. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor(Atalasoft.Annotate.UI.AnnotationUI[])">
            <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG> specifying an array of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects. </summary>
            <exception> Thrown if the annotations argument is null (Nothing in VB). </exception>
            <param name="annotations"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects to initialize the collection with.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG> from serialized information. </summary>
            <exception> Thrown if the info parameter is null. </exception>
            <param name="info"> The SerializationInfo object containing information about this collection. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this collection. </summary>
            <exception> Thrown if the info parameter is null. </exception>
            <param name="info"> The SerializationInfo object where data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.IndexOf(Atalasoft.Annotate.UI.AnnotationUI)">
            <summary> Returns the index of a specified annotation. </summary>
            <returns> The collection index of the annotation or -1 if the annotation was not found. </returns>
            <exception> Thrown if the annotation is null (Nothing in VB). </exception>
            <param name="annotation"> The annotation to search for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Add(Atalasoft.Annotate.UI.AnnotationUI)">
            <summary> Adds a single annotation to the collection. </summary>
            <exception> Thrown if the annotation parameter is null. </exception>
            <param name="annotation"> The annotation to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.AddRange(Atalasoft.Annotate.UI.AnnotationUI[])">
            <summary> Adds an array of annotations to the collection. </summary>
            <exception> Thrown if the annotations parameter is null. </exception>
            <param name="annotations"> An array of annotations to add. </param>
            <overloads> Use these methods to add multiple annotations into the collection. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.AddRange(Atalasoft.Annotate.UI.AnnotationUICollection)">
            <summary> Adds annotations from another <STRONG>AnnotationUICollection</STRONG> to this collection. </summary>
            <exception> Thrown if the annotations parameter is null. </exception>
            <param name="annotations"> An <STRONG>AnnotationUICollection</STRONG> containing items to add into this collection.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Remove(Atalasoft.Annotate.UI.AnnotationUI)">
            <summary> Removes an annotation from the collection. </summary>
            <exception> Thrown if the annotation parameter is null. </exception>
            <param name="annotation"> The annotation to remove. </param>
            <overloads> Use these methods to remove one or more annotations from the collection. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Remove(Atalasoft.Annotate.UI.AnnotationUI[])">
            <summary> Removes multiple annotations from the collection. </summary>
            <exception> Thrown if the annotations argument is null (Nothing in VB). </exception>
            <param name="annotations"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects to remove. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnRemove(System.Int32,System.Object)">
            <summary> Called when an annotation is removed from the collection. </summary>
            <param name="index"> The index of the annotation being removed. </param>
            <param name="value"> The annotation being removed. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Contains(Atalasoft.Annotate.UI.AnnotationUI)">
            <summary> Determines if an annotation is contained within the collection. </summary>
            <returns> True if the annotation is within the collection. </returns>
            <exception> Thrown if the annotation parameter is null. </exception>
            <param name="annotation"> The annotation to search for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Insert(System.Int32,Atalasoft.Annotate.UI.AnnotationUI)">
            <summary>
            Inserts an annotation into the collection at the specified position.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the annotation parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the annotation already exists in the collection.
            To move an annotation to a different location, use the ChangePosition method.</exception>
            <param name="index"> The index in the collection where the annotation will be inserted. </param>
            <param name="annotation"> The annotation to insert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.CopyTo(System.Int32,Atalasoft.Annotate.UI.AnnotationUI[],System.Int32,System.Int32)">
            <summary> Copies annotations from this collection into an array. </summary>
            <exception> Thrown if the index or arrayIndex arguments are invalid. </exception>
            <exception> Thrown if array is null (Nothing in VB). </exception>
            <param name="index"> The index of this collection where copying will begin. </param>
            <param name="array"> The array to copy items into. </param>
            <param name="arrayIndex"> The index in the array where copying will begin. </param>
            <param name="count"> The number of items to copy. </param>
            <overloads> Use these methods to copy the annotations into an array. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.CopyTo(Atalasoft.Annotate.UI.AnnotationUI[])">
            <summary> Copies all of the items from this collection into an array. </summary>
            <exception> Thrown if the array is null (Nothing in VB). </exception>
            <param name="array"> The array where items will be copied. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.CopyTo(Atalasoft.Annotate.UI.AnnotationUI[],System.Int32)">
            <summary> Copies items into the specifed array. </summary>
            <exception> Thrown if the array is null (Nothing in VB). </exception>
            <exception> Thrown if the index is invalid. </exception>
            <param name="array"> The array to copy items into. </param>
            <param name="index"> An index in the target array where copying will being. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Clone">
            <summary>Creates a copy of this collection and all items it contains.</summary>
            <returns>A copy of this AnnotationUICollection.</returns>
            <summary> Creates a copy of this collection and all items it contains. </summary>
            <returns> A copy of this <STRONG>AnnotationUICollection</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnClear">
            <summary> Called when the <STRONG>Clear</STRONG> method is used. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnClearComplete">
            <summary> Called when the clear operation has finished. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnInsertComplete(System.Int32,System.Object)">
            <summary> Called when an insert operation has finished. </summary>
            <param name="index"> The index of the item inserted. </param>
            <param name="value"> The item that was inserted.  This could be an array of objects. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary> Called when a remove operation has finished. </summary>
            <param name="index"> The index of the item removed. </param>
            <param name="value"> The item that was removed.  This may be an array of objects. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary> Called when an item has been swapped with another. </summary>
            <param name="index"> The index of the item. </param>
            <param name="oldValue"> The old item. </param>
            <param name="newValue"> The new item. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
            <summary> Called when there is a change to the collection. </summary>
            <param name="args"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs"/> containing information about this change.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Dispose">
            <summary> Disposes this collection and all items it contains. </summary>
            <overloads> Disposes the <STRONG>AnnotationUICollection</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Dispose(System.Boolean)">
            <summary> Releases resources used by this object. </summary>
            <param name="disposing"> A value indicating whether this method was called from the public <see cref="M:Atalasoft.Annotate.UI.AnnotationUICollection.Dispose"/> method. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnDeserialization(System.Object)">
            <summary> Called after an object has been fully deserialized by a serialization formatter. </summary>
            <param name="sender"> This parameter is not used and will be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB).
            </param>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUICollection.CollectionChanged">
            <summary> Raised when there has been a change in the collection. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUICollection.AnnotationControllerNotification">
            <summary> Raised when there has been a change to an item in this collection. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUICollection.PropertyChanging">
            <summary> Raise before a change is applied to an item in this collection. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUICollection.Item(System.Int32)">
            <summary>Gets the AnnotationUI at the specified index.</summary>
            <param name="index">The index in the collection of the annotation to retrieve.</param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection">
            <summary> This class is a collection of <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory"/> objects which are used to create new <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects from <see cref="T:Atalasoft.Annotate.AnnotationData"/>. </summary>
            <remarks> The <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> keeps this collection in its <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Factories"/> property. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationUIFactoryCollection</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Add(Atalasoft.Annotate.UI.IAnnotationUIFactory)">
            <summary> Adds an <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory"/> to the collection. </summary>
            <exception> Thrown if the factory parameter is null. </exception>
            <param name="factory"> The factory to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Insert(System.Int32,Atalasoft.Annotate.UI.IAnnotationUIFactory)">
            <summary> Inserts an item into the collection. </summary>
            <exception> Thrown if the factory is null (Nothing in VB). </exception>
            <exception> Thrown if the index is invalid. </exception>
            <param name="index"> The index where the item will be inserted. </param>
            <param name="factory"> The factory to insert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Remove(Atalasoft.Annotate.UI.IAnnotationUIFactory)">
            <summary> Removes a factory from the collection. </summary>
            <exception> Thrown if the factory parameter is null. </exception>
            <param name="factory"> The factory to remove. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Replace(Atalasoft.Annotate.UI.IAnnotationUIFactory,Atalasoft.Annotate.UI.IAnnotationUIFactory)">
            <summary> Replaces a factory in the collection. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the oldFactory or newFactory parameter is null.</exception>
            <remarks> If the old factory is not found in the collection, the new factory will be added to the end of the
            collection. </remarks>
            <param name="oldFactory"> The factory currently in the collection. </param>
            <param name="newFactory"> The new factory that will replace the old one. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.GetAnnotationFromData(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a new <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> object for the <see cref="T:Atalasoft.Annotate.AnnotationData"/> provided. </summary>
            <returns> A new <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> object for the <see cref="T:Atalasoft.Annotate.AnnotationData"/> or a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation"/> if no <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory"/> can be found for the data. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object from which the <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> must be
            created. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Item(System.Int32)">
            <summary>Get the IAnnotationUIFactory at the specified index.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
            <param name="index">The index of the item to return.</param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotationFactory">
            <summary> This class generates an <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation"/> object from an <see cref="T:Atalasoft.Annotate.EmbeddedImageData"/> class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UI.IAnnotationUIFactory">
            <summary> This interface must be implemented by any class used as an annotation UI factory. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.IAnnotationUIFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> object for a specific <see cref="T:Atalasoft.Annotate.AnnotationData"/> class.
            </summary>
            <returns> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> object or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if the
            factory is unable to create the object. </returns>
            <param name="data"> The annotation data from which a UI is requested. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns an <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation"/> if the data object is an <see cref="T:Atalasoft.Annotate.EmbeddedImageData"/>
            class. </summary>
            <returns> An <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the <EM>data</EM> parameter is not an <see cref="T:Atalasoft.Annotate.EmbeddedImageData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.EmbeddedImageData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.FreehandAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.FreehandData"/> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>FreehandAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns an <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation"/> if the data object is an <see cref="T:Atalasoft.Annotate.FreehandData"/> class.
            </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.FreehandData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.FreehandData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.EllipseAnnotationFactory">
            <summary> This class generates an <see cref="T:Atalasoft.Annotate.UI.EllipseAnnotation"/> object from an <see cref="T:Atalasoft.Annotate.EllipseData"/> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>EllipseAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns an <see cref="T:Atalasoft.Annotate.UI.EllipseAnnotation"/> if the data object is an <see cref="T:Atalasoft.Annotate.EllipseData"/> class.
            </summary>
            <returns> An <see cref="T:Atalasoft.Annotate.UI.EllipseAnnotation"/> or null (Nothing in Visual Basic) if the <EM>data</EM> parameter is not
            an <see cref="T:Atalasoft.Annotate.EllipseData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.OcrRegionAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.OcrRegionData"/> class
            for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>OcrRegionAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.OcrRegionData"/> class.
            </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.OcrRegionData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.OcrRegionData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.HotSpotAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.AnnotationData"/> class
            for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>HotSpotAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.HotSpotData"/> class.
            </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.HotSpotData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.HotSpotData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData"/> class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData"/> class. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.HotSpotFreehandData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.LayerAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.LayerData"/> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>LayerAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.LayerData"/> class. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.LayerData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.LayerData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.LineAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.LineAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.LineData"/> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>LineAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.LineAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.LineData"/> class. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.LineAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.LineData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.LineData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.LinesAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.LinesData"/> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>LinesAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.LinesData"/> class. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.LinesData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.LinesData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.PolygonAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.PolygonData"/> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>PolygonAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.PolygonData"/> class.
            </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.PolygonData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.PolygonData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.RectangleAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.RectangleData"/> class
            for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>RectangleAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.RectangleData"/> class.
            </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.RectangleData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.RectangleData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.ReferencedImageAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.ReferencedImageData"/> class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>ReferencedImageAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.ReferencedImageData"/> class. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.ReferencedImageData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.ReferencedImageData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.TextAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.TextAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.TextData"/> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>TextAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <returns> A <see cref="T:Atalasoft.Annotate.UI.TextAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.TextData"/> object. </returns>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.TextData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.CalloutAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.CalloutData"/> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>CalloutAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.CalloutData"/> class.
            </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation"/> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.CalloutData"/> object. </returns>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.RubberStampAnnotationFactory">
            <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.RubberStampAnnotation"/> object from a <see cref="T:Atalasoft.Annotate.RubberStampData"/>
            class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotationFactory.#ctor">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotationFactory</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
            <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.RubberStampAnnotation"/> if the data object is a <see cref="T:Atalasoft.Annotate.RubberStampData"/> class.
            </summary>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.RubberStampData"/> object for the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationUndoManager">
            <summary> The <STRONG>AnnotationUndoManager</STRONG> keeps track of annotation changes and allows undo and redo
            functionality. </summary>
            <remarks> In addition to annotation property changes, the undo manager will track adding and removing annotations
            from a layer. This includes adding and removing LayerAnnotation objects in the 
            LayerCollection. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationUndoManager</STRONG>. </summary>
            <remarks> The AnnotationController will automatically create an <STRONG>AnnotationUndoManager</STRONG>
            for its UndoManager property. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.GetUndoDescriptions">
            <summary> Returns a string array of the descriptions in the order which they would be undone. This is useful for
            displaying a list of items to undo. For displaying only the latest undo description use the <see cref="P:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoDescription"/> method. </summary>
            <returns> An array of string descriptions for the undos. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.GetRedoDescriptions">
            <summary> Returns a string array of the descriptions in the order which they would be redone. This is useful for
            displaying a list of items to redo. For displaying only the latest redo description use the <see cref="P:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoDescription"/> method. </summary>
            <returns> A string array containing the redo descriptions. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.AddUndo(Atalasoft.Annotate.UI.AnnotationUndo)">
            <summary> Adds an undo to the collection. </summary>
            <remarks> <para>Adding an undo will clear any redo objects.</para>
            <para>Use the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo"/> method to restore this change.</para> </remarks>
            <exception cref="T:System.ArgumentNullException"> Thrown if the undo argument is null (Nothing in VB). </exception>
            <param name="undo"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo"/> to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo">
            <summary> Performs an undo on the collection and raises the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest"/> event
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo"/> that was processed. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo">
            <summary> Performs a redo on the collection and raises the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest"/> event
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo"/> that was processed. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Clear">
            <summary> Clears the undo and redo collections. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.BeginUndoMerge">
            <summary> This method puts the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager"/> into a collective undo state. All calls to <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.AddUndo(Atalasoft.Annotate.UI.AnnotationUndo)"/> will be collected until the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.EndUndoMerge(System.String)"/>
            method has been called. </summary>
            <remarks> Use this method along with <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.EndUndoMerge(System.String)"/> to place multiple undo
            operations into a single undo request. </remarks>
            <example> EndUndoMerge Example </example>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.EndUndoMerge(System.String)">
            <summary> Exits the collective undo state and stores all actions added since the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.BeginUndoMerge"/> call as a single undo operation. </summary>
            <example>
                The following example combines multiple property changes into a single undo using
                the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.BeginUndoMerge"/> and <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.EndUndoMerge(System.String)"/> methods. 
                <code lang="CS" title="UndoMerge">
            // Tell the AnnotationUndoManager to combine the undo changes.
            this.annotateViewer1.Annotations.UndoManager.BeginUndoMerge();
             
            // Make some changes to the active annotation.
            AnnotationUI ann = this.annotateViewer1.Annotations.ActiveAnnotation;
            ann.Data.Name = "My New Name";
            ann.Data.Size = new SizeF(100, 120);
            ann.Data.Location = new PointF(45, 60);
             
            // Store the above changes into a single undo.
            this.annotateViewer1.Annotations.UndoManager.EndUndoMerge();
                </code>
            	<code lang="VB" title="UndoMergeVB">
            ' Tell the AnnotationUndoManager to combine the undo changes.
            Me.annotateViewer1.Annotations.UndoManager.BeginUndoMerge()
             
            ' Make some changes to the active annotation.
            Dim ann As AnnotationUI =  Me.annotateViewer1.Annotations.ActiveAnnotation 
            ann.Data.Name = "My New Name"
            ann.Data.Size = New SizeF(100, 120)
            ann.Data.Location = New PointF(45, 60)
             
            ' Store the above changes into a single undo.
            Me.annotateViewer1.Annotations.UndoManager.EndUndoMerge()
                </code>
            </example>
            <param name="description">A short description of the collective undo action.</param>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationUndoManager~EndUndoMerge&quot;]/*"/>
            </overloads>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest">
            <summary> Raised when a call to <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo"/> has been requested. </summary>
            <remarks> The <STRONG>AnnotationUndoManager</STRONG> itself does not perform the undo action. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest">
            <summary> Raised when a call to <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo"/> has been requested. </summary>
            <remarks> The <STRONG>AnnotationUndoManager</STRONG> itself does not perform the redo action. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoListChanged">
            <summary> Raised when the items in the undo stack have changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoDescription">
            <summary> Gets the description string of the undo that will be performed when <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo"/> is called. </summary>
            <value> The description of the undo that will be performed. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoDescription">
            <summary> Gets the description string of the redo that will be performed when <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo"/> is called. </summary>
            <value> The description of the next redo. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.Levels">
            <summary> Gets or sets the number of undo/redo levels to keep in memory. </summary>
            <value> The number of undo/redo levels. </value>
            <exception> Thrown if the value is set to less than zero. </exception>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoCount">
            <summary> Gets the number of undos available. </summary>
            <value> The number of undos currently in the manager. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoCount">
            <summary> Gets the number of redos available. </summary>
            <value> The number of redos in the manager. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.Merging">
            <summary>
            Gets a value indicating whether the manager is merging undos added into a single
            undo action.
            </summary>
            <value>A value indicating if the manager is merging undos.</value>
            <remarks>
            This property will be true between calls to the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationUndoManager~BeginUndoMerge.html">BeginUndoMerge</a>
            and
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationUndoManager~EndUndoMerge.html">EndUndoMerge</a>
            methods which allow multiple undos to be merged into a single undo action.
            </remarks>
            <summary> Gets a value indicating whether the manager is merging undos added into a single undo action. </summary>
            <value> A value indicating if the manager is merging undos. </value>
            <remarks> This property will be true between calls to the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.BeginUndoMerge"/> and
            <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.EndUndoMerge(System.String)"/> methods which allow multiple undos to be merged into a single undo
            action. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationUndo">
            <summary> This class is used to store an undo or redo change for an object. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._item">
            <summary> Gets the object that was changed. </summary>
            <value> The object to perform the undo or redo on. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._propertyName">
            <summary> Gets the name of the property that was changed. </summary>
            <value> The name of the property to undo or redo. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._value">
            <summary> Gets the value of the object or property. </summary>
            <value> The value of the object or property that was changed. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._change">
            <summary> Gets the type of undo change being performed. </summary>
            <value> The type of change to undo or redo. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._description">
            <summary> Gets the description of the undo. </summary>
            <value> A short string describing the undo action. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._index">
            <summary> Gets the index of the item. </summary>
            <value> The index of the item or -1 if there is no index. </value>
            <remarks> This property is used to undo/redo collection inserts. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._undoMethodName">
            <summary> Gets the name of the method that will be called when an undo is performed. </summary>
            <value> The name of the method called by <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo"/>. </value>
            <seealso> UndoMethodParameters Property </seealso>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._redoMethodName">
            <summary> Gets the name of the method called when performing a redo. </summary>
            <value> The name of the method used by <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo"/>. </value>
            <seealso> RedoMethodParameters Property </seealso>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._undoMethodParameters">
            <summary> Gets an object array of parameters sent to the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo"/> method. </summary>
            <value> An object array of parameters used by the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo"/> method. </value>
            <seealso> UndoMethodName Property </seealso>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationUndo._redoMethodParameters">
            <summary> Gets an object array containing the parameters used by the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo"/>
            method. </summary>
            <seealso> RedoMethodName Property </seealso>
            <value> An object array of parameters for the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo"/> method. </value>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,Atalasoft.Annotate.UndoChange,System.String)">
            <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being modified and the
            type of change being performed. </summary>
            <param name="item"> The object being changed. </param>
            <param name="change"> The type of change being performed. </param>
            <param name="description"> A short string describing the undo. </param>
            <overloads> Constructs an <STRONG>AnnotationUndo</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.Object,Atalasoft.Annotate.UndoChange,System.String)">
            <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being changed, the current
            value of the object and the type of change being performed. </summary>
            <param name="item"> The object being changed. </param>
            <param name="value"> The current value of the object. </param>
            <param name="change"> The type of change being performed. </param>
            <param name="description"> A short string describing the undo. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.String,System.Object,System.String)">
            <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being changed, name of the
            property being changed, the current value of the property and a description of the undo. </summary>
            <param name="item"> The object being changed. </param>
            <param name="propertyName"> The name of the property being changed. </param>
            <param name="value"> The current value of the property. </param>
            <param name="description"> A short string describing the undo. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.Object,System.Int32,Atalasoft.Annotate.UndoChange,System.String)">
            <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being changed, the current
            value of the object and the type of change being performed. </summary>
            <param name="item"> The object being changed. </param>
            <param name="value"> The current value of the object. </param>
            <param name="index"> The index of the item or -1 if no index is required. </param>
            <param name="change"> The type of change being performed. </param>
            <param name="description"> A short string describing the undo. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.String,System.Object[],System.String,System.Object[],System.String)">
            <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> for methods. </summary>
            <param name="item"> The object where the undo and redo methods exist. </param>
            <param name="undoMethodName"> The name of the method called when an undo is performed. </param>
            <param name="undoMethodParameters"> An object array containing the parameters sent to the undo method or
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if no parameters are required. </param>
            <param name="redoMethodName"> The name of the method called when a redo is performed. </param>
            <param name="redoMethodParameters"> An object array containing the parameters sent to the redo method or
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if no parameters are required. </param>
            <param name="description"> A string description of this undo action. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.UndoMethodName">
            <summary> Gets the name of the method that will be called when an undo is performed. </summary>
            <value> The name of the method called by <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo"/>. </value>
            <seealso> UndoMethodParameters Property </seealso>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.RedoMethodName">
            <summary> Gets the name of the method called when performing a redo. </summary>
            <value> The name of the method used by <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo"/>. </value>
            <seealso> RedoMethodParameters Property </seealso>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.UndoMethodParameters">
            <summary> Gets an object array of parameters sent to the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo"/> method. </summary>
            <value> An object array of parameters used by the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo"/> method. </value>
            <seealso> UndoMethodName Property </seealso>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.RedoMethodParameters">
            <summary> Gets an object array containing the parameters used by the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo"/>
            method. </summary>
            <seealso> RedoMethodName Property </seealso>
            <value> An object array of parameters for the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo"/> method. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Index">
            <summary> Gets the index of the item. </summary>
            <value> The index of the item or -1 if there is no index. </value>
            <remarks> This property is used to undo/redo collection inserts. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Description">
            <summary> Gets the description of the undo. </summary>
            <value> A short string describing the undo action. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Item">
            <summary> Gets the object that was changed. </summary>
            <value> The object to perform the undo or redo on. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Change">
            <summary> Gets the type of undo change being performed. </summary>
            <value> The type of change to undo or redo. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.PropertyName">
            <summary> Gets the name of the property that was changed. </summary>
            <value> The name of the property to undo or redo. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Value">
            <summary> Gets the value of the object or property. </summary>
            <value> The value of the object or property that was changed. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.UndoEventArgs">
            <summary> This class contains information for the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest"/> and <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest"/> events. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.UndoEventArgs._undo">
            <summary> Gets the undo for this operation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo"/> for this operation. </value>
        </member>
        <member name="M:Atalasoft.Annotate.UI.UndoEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationUndo)">
            <summary> Creates a new instance of <STRONG>UndoEventArgs</STRONG> specifying the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo"/> for
            this action. </summary>
            <param name="undo"> The undo for this action. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.UndoEventArgs.Undo">
            <summary> Gets the undo for this operation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo"/> for this operation. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.UndoEventHandler">
            <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest"/> and <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest"/> events of the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager"/>. </summary>
            <param name="sender"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager"/> sending the request. </param>
            <param name="e"> The <see cref="T:Atalasoft.Annotate.UI.UndoEventArgs"/> containing information about this event. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.CalloutAnnotation">
            <summary> <para>This annotation is designed to provide additional information on a specific area of the document. 
            It contains an editable text area and a leader line used to point to the area of the document.</para>
            <para>When creating this annotation, the first click sets the target for the leader and a second click sets the
            annotation location.  It can also be created by pressing down the mouse button to set the leader and dragging.  Both
            annotation and leader point can be repositioned independently after the annotation has been created.</para>
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>CalloutAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(Atalasoft.Annotate.CalloutData)">
            <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.CalloutData"/>
            object used by the annotation. </summary>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.CalloutData"/> used with this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the text for the annotation.
            </summary>
            <param name="text"> The text for the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single)">
            <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the text, font and font brush for
            the annotation. </summary>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
            <param name="fontBrush"> The brush used to render the text. </param>
            <param name="padding"> The amount of space around the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single)">
            <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the text, font, font brush,
            outline and line pen. </summary>
            <exception> Thrown if the leaderFlatLength is less than 0. </exception>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
            <param name="fontBrush"> The brush used to render the text. </param>
            <param name="padding"> The amount of space around the text. </param>
            <param name="fill"> The brush used to fill the text area of the annotation. </param>
            <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
            <param name="leader"> The pen used to render the line of the annotation. </param>
            <param name="leaderFlatLength"> The length from the annotation to the leader bend. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single,System.Drawing.PointF,System.Boolean)">
            <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying its parameters. </summary>
            <exception> Thrown if the leaderFlatLength is less than 0. </exception>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
            <param name="fontBrush"> The brush used to render the text. </param>
            <param name="padding"> The amount of space around the text. </param>
            <param name="fill"> The brush used to fill the text area of the annotation. </param>
            <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
            <param name="leader"> The pen used to render the line of the annotation. </param>
            <param name="leaderFlatLength"> The length from the annotation to the leader bend. </param>
            <param name="targetPosition"> The document position the line will point to. </param>
            <param name="autoSize"> Indicates whether the annotation will automatically resize to fit the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> from serialized information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information for this annotation. </param>
            <param name="context"> A <STRONG>StreamingContext</STRONG> for the serialized information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Dispose">
            <summary> Releases resources used by the annotation. </summary>
            <overloads> Disposes the <STRONG>CalloutAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Dispose(System.Boolean)">
            <summary> Releases resources used by the annotation. </summary>
            <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.UI.CalloutAnnotation.Dispose"/> method. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.ShowEditDialog">
            <summary> Adds an edit control to the viewer to allow the user to change the text. </summary>
            <remarks> This method can be overridden to provide a custom edit control. </remarks>
            <overloads>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.CalloutAnnotation~ShowEditDialog&quot;]/*"/>
            </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.HideEditDialog">
            <summary> Removes the edit control from the viewer. </summary>
            <remarks> This method can be overridden to provide a custom edit control. </remarks>
            <example> ShowEditDialog Example </example>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)">
            <summary>
            Called when the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)"/> method is used.
            </summary>
            <param name="rotation">The amount of rotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary>
            Returns the new confined location of the annotation when a confinement bounds and new location offset are
            provided.
            </summary>
            <param name="dsConfinedBounds">The bounding rectangle in document space for the confinement.</param>
            <param name="dsLocationOffset">The difference between the current and suggested new location of the annotation in
            document space units.</param>
            <returns></returns>
            <overloads> These methods are used by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> to handle annotation confinement.
              </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnDoubleClick(System.EventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnDoubleClick(System.EventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnSelectedChanged(System.EventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnSelectedChanged(System.EventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnResizing(System.EventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnResizing(System.EventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnRotating(System.EventArgs)">
            <summary>
            Called while an annotation is being rotated by the user.
            </summary>
            <param name="e">An EventArgs for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.GetRegion(Atalasoft.Annotate.AnnotateSpace)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.BeginCreate">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.BeginCreate" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Text">
            <summary> Gets or sets the text of the annotation. </summary>
            <value> The text of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Font">
            <summary> Gets or sets the font used to render the text. </summary>
            <value> The font used to render the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.FontBrush">
            <summary> Gets or sets the brush used to render the text. </summary>
            <value> The brush used to render the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Fill">
            <summary> Gets or sets the brush used to fill the text area of the annotation. </summary>
            <value> The brush used to fill the text area. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Outline">
            <summary> Gets or sets the pen used to outline the text area of the annotation. </summary>
            <value> The pen used for the text area outline. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.LeaderFlatLength">
            <summary> Gets or sets the length of the leader line to the bend. </summary>
            <value> The length of the leader line to the bend. </value>
            <exception> Thrown if the value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Leader">
            <summary> Gets or sets the pen used for the line of the annotation. </summary>
            <value> The pen used for the line or null (Nothing in VB) if a leader isn't used. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.TargetPosition">
            <summary> Gets or sets the position on the document the line will point to. </summary>
            <value> The position on the document this callout will point to. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.AutoSize">
            <summary> Gets or sets a value indicating whether the annotation will automatically resize to fit the text.
            </summary>
            <value> A value indicating whether the annotation will resize to fit the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.AllowEditing">
            <summary>
            Gets or sets a value indicating whether [allow editing].
            </summary>
            <value>
              <c>true</c> if [allow editing]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.EditMode">
            <summary> Gets or sets a value indicating whether the annotation text is currently in edit mode. </summary>
            <value> A value indicating whether the annotation text is in edit mode. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.EllipseAnnotation">
            <summary> This class uses an <see cref="T:Atalasoft.Annotate.EllipseData"/> object to generate an ellipse annotation. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG>. </summary>
            <overloads> Constructs an <STRONG>EllipseAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(Atalasoft.Annotate.EllipseData)">
            <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the ellipse data. </summary>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.EllipseData"/> object used by this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> from serialized information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for this annotation. </param>
            <param name="context"> A StreamingContext for this data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the bounding rectangle and fill.
            </summary>
            <param name="rectangle"> The bounding rectangle of the ellipse. </param>
            <param name="fill"> The fill used by the ellipse. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the bounding rectangle and
            outline. </summary>
            <param name="rectangle"> The bounding rectangle of the ellipse. </param>
            <param name="outline"> The outline used by the ellipse. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,System.Boolean)">
            <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the rectangle, fill and
            translucent properties. </summary>
            <param name="rectangle"> The rectangle for this annotation. </param>
            <param name="fill"> The AnnotationBrush used to fill this annotation. </param>
            <param name="translucent"> A value indicating whether this annotation will act as a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the bounding rectangle, fill,
            outline and shadow options. </summary>
            <param name="rectangle"> The bounding rectangle of the ellipse. </param>
            <param name="fill"> The fill used by the ellipse. </param>
            <param name="outline"> The outline used by the ellipse. </param>
            <param name="shadow"> A value indicating whether or not the ellipse has a shadow. </param>
            <param name="shadowOffset"> The amount of offset from the annotation for the shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying its fill and outline. </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the fill, outline, shadow brush
            and shadow offset. </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to draw the shadow of the annotation. </param>
            <param name="shadowOffset"> The amount of offset from the annotation for the shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>
            Returns a rectangular region for this annotation, including its grips if
            selected.
            </summary>
            <param name="space">The space coordinate system used to generate this region.</param>
            <returns>
            The region of this annotation in the specified space.
            </returns>
            <example>
            The following is an example of how a custom annotation may override the
              <strong>GetRegion</strong> method.
              <code lang="CS" title="GetRegionCS">
            public override AnnotationRegion GetRegion(AnnotateSpace space)
            {
            Create the region in annotation space.
            AnnotationRegion reg = new AnnotationRegion(new RectangleF(PointF.Empty, _data.Size));
            if (this.Selected &amp;&amp; this.Grips != null)
            AddGripsToRegion(reg);
            ApplyRegionTransform(reg, space);
            return reg;
            }
              </code>
              <code lang="VB" title="GetRegionVB">
            Public Overrides Function GetRegion(ByVal space As AnnotateSpace) As AnnotationRegion
            ' Create the region in annotation space.
            Dim reg As AnnotationRegion =  New AnnotationRegion(New RectangleF(PointF.Empty,_data.Size))
            If Not Me.Selected And Me.Grips Is Nothing Then
            AddGripsToRegion(reg)
            End If
            ApplyRegionTransform(reg, space)
            Return reg
            End Function
              </code>
              </example>
              <overloads>
              <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationUI~GetRegion&quot;]/*"/>
              </overloads>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used draw the drop shadow. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Fill">
            <summary> Gets or sets the fill used for the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Outline">
            <summary> Gets or sets the outline of the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.ShadowOffset">
            <summary> Gets or sets the shadow offset. </summary>
            <value> The offset used to specifying the position of the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Translucent">
            <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
            <value> A value indicating whether this annotation is used as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)"/> method. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation">
            <summary>
            This is an image annotation that will embed the image into the serialized XMP or
            WANG data.
            </summary>
            <summary> This is an image annotation that will embed the image into the serialized XMP or WANG data. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.EmbeddedImageAnnotation._keepAspectRatio">
            <summary> Gets or sets a value indicating whether the image ratio is maintained while resizing. </summary>
            <value> Indicates if the image ratio is maintained. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.EmbeddedImageAnnotation._allowClickThrough">
            <summary> Gets or sets a value indicating whether to allow mouse clicks to pass through transparent areas of the
            image. </summary>
            <value> A value indicating if mouse clicks will pass through transparent areas. </value>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG>. </summary>
            <overloads> Constructs an <STRONG>EmbeddedImageAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.EmbeddedImageData)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.EmbeddedImageData"/> used by the annotation. </summary>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.EmbeddedImageData"/> for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image. </summary>
            <param name="image"> The image for the annotation. </param>
            <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image, whether or not to
            maintain the aspect ratio and the initial location of this object. </summary>
            <param name="image"> The image for the annotation. </param>
            <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
            <param name="location"> The initial location of this annotation on the document. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image, shadow and shadow
            offset. </summary>
            <param name="image"> The image to embed. </param>
            <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image, initial location,
            shadow and shadow offset. </summary>
            <param name="image"> The image to embed. </param>
            <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
            <param name="location"> The initial location of this annotation on the document. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> from serialized information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo containing information for this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Dispose">
            <summary> Releases resources used by the annotation. </summary>
            <overloads> Disposes the <STRONG>EmbeddedImageAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Dispose(System.Boolean)">
            <summary> Called when disposing or finalizing to release resources used by the annotation. </summary>
            <param name="disposing"> A value indicating whether the annotation is being disposed or finalized. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with annotation information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object where the data will be added. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>
            Returns a rectangular region for this annotation, including its grips if
            selected.
            </summary>
            <param name="space">The space coordinate system used to generate this region.</param>
            <returns>
            The region of this annotation in the specified space.
            </returns>
            <example>
            The following is an example of how a custom annotation may override the
              <strong>GetRegion</strong> method.
              <code lang="CS" title="GetRegionCS">
            public override AnnotationRegion GetRegion(AnnotateSpace space)
            {
            Create the region in annotation space.
            AnnotationRegion reg = new AnnotationRegion(new RectangleF(PointF.Empty, _data.Size));
            if (this.Selected &amp;&amp; this.Grips != null)
            AddGripsToRegion(reg);
            ApplyRegionTransform(reg, space);
            return reg;
            }
              </code>
              <code lang="VB" title="GetRegionVB">
            Public Overrides Function GetRegion(ByVal space As AnnotateSpace) As AnnotationRegion
            ' Create the region in annotation space.
            Dim reg As AnnotationRegion =  New AnnotationRegion(New RectangleF(PointF.Empty,_data.Size))
            If Not Me.Selected And Me.Grips Is Nothing Then
            AddGripsToRegion(reg)
            End If
            ApplyRegionTransform(reg, space)
            Return reg
            End Function
              </code>
              </example>
              <overloads>
              <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationUI~GetRegion&quot;]/*"/>
              </overloads>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.HitTestRectangle">
            <summary>
            Gets a rectangle used for hit testing or <STRONG>RectangleF.Empty</STRONG> to use the default hit testing
            method.
            </summary>
            <value>
            A rectangle to use for hit testing or RectangleF.Empty to indicate that the default hit testing method
            should be used.
            </value>
            <remarks>
            The default hit testing method will ignore transparent areas of the annotation.  This property can be used
            to override this behavior.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.AllowClickThrough">
            <summary> Gets or sets a value indicating whether to allow mouse clicks to pass through transparent areas of the
            image. </summary>
            <value> A value indicating if mouse clicks will pass through transparent areas. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether the image ratio is maintained while resizing.
            </summary>
            <value>Indicates if the image ratio is maintained.</value>
            <summary> Gets or sets a value indicating whether the image ratio is maintained while resizing. </summary>
            <value> Indicates if the image ratio is maintained. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Image">
            <summary>
            Gets or sets the image of the annotation.
            </summary>
            <value>The image to embed.</value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Shadow">
            <summary>Gets or sets the AnnotationBrush used draw the drop shadow.</summary>
            <value>The AnnotationBrush used for the drop shadow.</value>
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used draw the drop shadow. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.ShadowOffset">
            <summary>Gets or sets the shadow offset.</summary>
            <value>The offset used to specifying the position of the drop shadow.</value>
            <summary> Gets or sets the shadow offset. </summary>
            <value> The offset used to specifying the position of the drop shadow. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.Exporters.AnnotationExporter">
            <summary> An abstract base class that encompasses elements for exporting annotations. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Annotate.UI.Exporters.AnnotationExporter"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)">
            <summary> Exports a single page of annotations to a given stream. </summary>
            <param name="sourceStream"> The original source stream for the document. </param>
            <param name="destStream"> The destination stream for the document. </param>
            <param name="pageSize"> The size of the source page. </param>
            <param name="units"> The units in which the page size is expressed. </param>
            <param name="resolution"> The resolution of the page. </param>
            <param name="layer"> The page of annotations to export. </param>
            <param name="frameIndex"> The page number for exporting. </param>
            <overloads> Exports annotations from a given source stream to a given destination stream. </overloads>
            <remarks> Source stream is necessary for some file formats like PDF which require an entire document to hold the
            annotations.  Other formats may ignore the source stream entirely. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.UI.LayerCollection)">
            <summary> Exports a multiple pages of annotations to a given stream. </summary>
            <remarks> To create a page with no annotations, add an empty LayerAnnotation to the collection. </remarks>
            <param name="sourceStream"> The original source stream for the document. </param>
            <param name="destStream"> The destination stream for the document. </param>
            <param name="pageSizes"> An array of sizes of the source pages. </param>
            <param name="units"> An array of units in which the page sizes are expressed. </param>
            <param name="resolutions"> An array of resolutions of the pages. </param>
            <param name="layers"> A collection of pages of annotations. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)">
            <summary> Export a set of annotations over an existing stream. </summary>
            <param name="destStream"> The destination stream for the document. </param>
            <param name="pageSize"> The size of the source page. </param>
            <param name="units"> The units in which the page size is expressed. </param>
            <param name="resolution"> The resolution of the page. </param>
            <param name="layer"> The page of annotations to export. </param>
            <param name="frameIndex"> The page number for exporting. </param>
            <overloads> Export a set of annotations over an existing stream. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.UI.LayerCollection)">
            <summary> Export a set of annotations over an existing stream. </summary>
            <param name="destStream"> The destination stream for the document. </param>
            <param name="pageSizes"> An array of sizes of the source pages. </param>
            <param name="units"> An array of units in which the page sizes are expressed. </param>
            <param name="resolutions"> An array of resolutions of the pages. </param>
            <param name="layers"> A collection of pages of annotations. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.IsValidFormat(System.IO.Stream)">
            <summary> Determines if the stream is the correct format. </summary>
            <returns> Returns true if the stream contains valid data for this AnnotationExporter, false otherwise. </returns>
            <param name="stm"> A non-null stream </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.Construct">
            <summary> A factory method to construct a new AnnotationExporter. </summary>
            <returns> A new AnnotationExporter object. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)">
            <overloads> Low level implementation of Export. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.UI.LayerCollection)">
            <overloads> Low level implementation of Export. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)">
            <overloads> Low level implementation of ExportOver. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.UI.LayerCollection)">
            <overloads> Low level implementation of ExportOver. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary> Copies the entire source stream to the destination stream. </summary>
            <param name="sourceStream"> A non-null stream with annotation source data </param>
            <param name="destStream"> a non-null stream to which the source data will be copied. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.CanExportOver">
            <summary> Indicates whether or not this AnnotationExporter can write annotations to a stream without affecting
            existing contents. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.CanExport">
            <summary> Indicates whether or not this AnnotationExporter can do a simple export. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UI.FreehandAnnotation">
            <summary> This class is used for a freehand drawing annotation. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UI.PointBaseAnnotation">
            <summary>
            This abstract class is used to simplify creating annotations that are defined
            with multiple points instead of a rectangular structure.
            </summary>
            <remarks>
            The PointBaseAnnotation class takes care of most user interaction code required
            for points based annotations such as the Freehand, Lines and Polygon annotations.
            Annotations derived from PointBaseAnnotation essentially only need to add custom
            constructors to function properly.
            </remarks>
            <summary> This abstract class is used to simplify creating annotations that are defined with multiple points instead
            of a rectangular structure. </summary>
            <remarks> The <STRONG>PointBaseAnnotation</STRONG> class takes care of most user interaction code required for
            points based annotations such as the Freehand, Lines and Polygon annotations. Annotations derived from
            PointBaseAnnotation essentially only need to add custom constructors and override the <STRONG>GetRegion</STRONG>
            method to function properly. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.UI.PointBaseAnnotation._gripMode">
            <summary> Gets or sets whether a <see cref="T:Atalasoft.Annotate.UI.RectangleGrips"/> or <see cref="T:Atalasoft.Annotate.UI.PointGrips"/> object is used for this
            annotation. </summary>
            <value> A value indicating which type of grips to use for this annotation. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.PointBaseAnnotation._freehandStyle">
            <summary> Gets or sets a value indicating whether this annotation should create in the same style as a <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation"/>. </summary>
            <value> A value indicating if the points are added by multiple clicks or by dragging the mouse. </value>
            <remarks> <para>Setting this property to <STRONG>true</STRONG> will allow the user to create the annotation by
            dragging the mouse. Points are added as the mouse moves.</para>
            <para>To create an annotation where the user must make multiple mouse clicks, one per point, this property should be
            set to <STRONG>false</STRONG>.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.#ctor(Atalasoft.Annotate.PointBaseData)">
            <summary>Creates a new instance of PointBaseAnnotation.</summary>
            <remarks>This is an abstract class and cannot be created directly.</remarks>
            <param name="data">A PointBaseData object for this annotation.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of PointBaseAnnotation from serialized data.</summary>
            <param name="info">The SerializationInfo object containing information about this annotation.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <summary> Fills a SerializationInfo object with information about this annotation. </summary>
            <param name="info"> The SerializationInfo where data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary>
            Returns the new confined location of the annotation when a confinement bounds and new location offset are
            provided.
            </summary>
            <param name="dsConfinedBounds">The bounding rectangle in document space for the confinement.</param>
            <param name="dsLocationOffset">The difference between the current and suggested new location of the annotation in
            document space units.</param>
            <returns></returns>
            <overloads> These methods are used by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> to handle annotation confinement.
              </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.GetConfinedRotation(System.Drawing.RectangleF,System.Single)">
            <summary>
            Gets the confined rotation.
            </summary>
            <param name="dsConfinedBounds">The ds confined bounds.</param>
            <param name="newAngle">The new angle.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.BeginCreate">
            <summary>
            This method is called by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> when the user is beginning to create this
            annotation using the mouse.
            </summary>
            <remarks>
            Use this method to prepare the annotation for creation by receiving the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/>, <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/> and <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/>
            method calls.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary>
            Called when the user clicks down on the annotation.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary>
            Called when the user has moved the mouse over the annotation.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary>
            Called when the user has released the mouse over the annotation.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)">
            <summary>
            Called when a grip of the annotation has been moved by the user using the mouse.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs"/> containing information about this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
            <summary>
            Called while an annotation is being moved by the user.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information about this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnResized(System.EventArgs)">
            <summary>
            Called when a resize on the annotation has completed.
            </summary>
            <param name="e">An <STRONG>EventArgs</STRONG> for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
            <summary>
            Called when the grips of an annotation have been dragged past the opposite grip.
            </summary>
            <param name="direction">The direction in which the annotation should be mirrored.</param>
            <param name="maintainPosition">Determines whether the mirror is performed in place or if the annotation pivots
            along its location.</param>
            <remarks>
            This method will only be called if the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMirror"/> property of the annotation
            is true.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary>
            Called after a property of the annotation or related <see cref="T:Atalasoft.Annotate.AnnotationData"/> has been modified.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> containing information on this changed.</param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointBaseAnnotation.GripMode">
            <summary>
            Gets or sets whether a RectangleGrips or PointGrips object is used for this
            annotation.
            </summary>
            <value>A value indicating which type of grips to use for this annotation.</value>
            <summary> Gets or sets whether a <see cref="T:Atalasoft.Annotate.UI.RectangleGrips"/> or <see cref="T:Atalasoft.Annotate.UI.PointGrips"/> object is used for this
            annotation. </summary>
            <value> A value indicating which type of grips to use for this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointBaseAnnotation.FreehandStyle">
            <summary>
            Gets or sets a value indicating whether this annotation should create in the same
            style as a FreehandAnnotation.
            </summary>
            <value>
            A value indicating if the points are added by multiple clicks or by dragging the
            mouse.
            </value>
            <remarks>
            	<para>Setting this property to <strong>true</strong> will allow the user to create
                the annotation by dragging the mouse. Points are added as the mouse moves.</para>
            	<para>To create an annotation where the user must make multiple mouse clicks, one
                per point, this property should be set to <strong>false</strong>.</para>
            </remarks>
            <summary> Gets or sets a value indicating whether this annotation should create in the same style as a <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation"/>. </summary>
            <value> A value indicating if the points are added by multiple clicks or by dragging the mouse. </value>
            <remarks> <para>Setting this property to <STRONG>true</STRONG> will allow the user to create the annotation by
            dragging the mouse. Points are added as the mouse moves.</para>
            <para>To create an annotation where the user must make multiple mouse clicks, one per point, this property should be
            set to <STRONG>false</STRONG>.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>FreehandAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.FreehandData)">
            <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.FreehandData"/>
            object for this annotation. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the data parameter is null.</exception>
            <param name="data"> A <see cref="T:Atalasoft.Annotate.FreehandData"/> object used for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the initial points. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the points parameter is null.</exception>
            <param name="points"> The initial points for the freehand. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.AnnotationPen"/>
            used for drawing the lines or curves. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the points parameter is null.</exception>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> for the lines or curves. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the outline and initial
            points.</para> </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
            <param name="outline"> The outline for the freehand. </param>
            <param name="points"> The initial points for the freehand. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the outline, fill and initial
            points.</para> </summary>
            <exception cref="T:System.ArgumentNullException" caption="">Thrown if the points parameter is null or if both outline and fill parameters are null.</exception>
            <param name="outline"> The outline for the freehand. </param>
            <param name="fill"> The fill for the freehand. </param>
            <param name="points"> The initial point for the freehand. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the fill, outline and translucent
            properties. </summary>
            <exception> Thrown if both fill and outline are null (Nothing in VB). </exception>
            <param name="fill"> The fill for the freehand. </param>
            <param name="outline"> The outline for the freehand. </param>
            <param name="translucent"> <para>Indicates whether the line will be translucent, giving it a highlighter
            effect.</para> </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the points, fill, outline and
            translucent properties. </summary>
            <exception> Thrown if points is null or if both fill and outline are null (Nothing in VB). </exception>
            <param name="points"> The initial points for the freehand. </param>
            <param name="fill"> The fill for the freehand. </param>
            <param name="outline"> The outline for the freehand. </param>
            <param name="translucent"> <para>Indicates whether the line will be translucent, giving it a highlighter
            effect.</para> </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the point collection, fill,
            outline and translucent properties. </summary>
            <exception> Thrown if both fill and outline are null (Nothing in VB). </exception>
            <param name="points"> The initial point collection for the freehand. </param>
            <param name="fill"> The fill for the freehand. </param>
            <param name="outline"> The outline for the freehand. </param>
            <param name="translucent"> <para>Indicates whether the line will be translucent, giving it a highlighter
            effect.</para> </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> from serialized information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo object containing information about this annotation. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>Returns a region for this annotation.</summary>
            <returns>A region for this annotation.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary>
            Called when the user has released the mouse over the annotation.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary>
            Called after a property of the annotation or related <see cref="T:Atalasoft.Annotate.AnnotationData"/> has been modified.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> containing information on this changed.</param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.LineType">
            <remarks> If the <STRONG>FreehandLineType.Beziers</STRONG> value is used, padding will be added to the end (if
            required) to provide a valid number of points for Bezier curves. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Outline">
            <summary> Gets or sets the outline for this freehand. </summary>
            <value> The outline for this freehand. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.ClosedShape">
            <summary> Gets or sets a value indicating whether the freehand is a closed shape. </summary>
            <value> Indicates if the freehand is a closed shape. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Fill">
            <summary> Gets or sets the fill for the freehand. </summary>
            <value> The fill of the freehand. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Translucent">
            <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
            <value> A value indicating whether this annotation is used as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)"/> method. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Points">
            <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the points for the freehand. </summary>
            <value> A collection of points for this annotation.  Theses points must be specified in annotation space. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.HotSpotAnnotation">
            <summary> <para>This annotations can be used to add rectangular hot spots on a document.  When the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode"/> is set to <STRONG>View</STRONG> the hot spot annotations will be
            invisible but the cursor will change when hovering over it to indicate that area can be clicked.</para>
            <para>For a non-rectangular area use the <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation"/>.</para> </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>HotSpotAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(Atalasoft.Annotate.HotSpotData)">
            <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the annotation data. </summary>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.HotSpotData"/> for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds fill.
            </summary>
            <param name="rectangle"> The bounding rectangle for this object. </param>
            <param name="fill"> The fill used when not active. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds and outline.
            </summary>
            <param name="rectangle"> The bounding rectangle for this object. </param>
            <param name="outline"> The outline used when not active. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds, fill and
            outline. </summary>
            <param name="rectangle"> The bounding rectangle for this object. </param>
            <param name="fill"> The fill used when not active. </param>
            <param name="outline"> The outline used when not active. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds, active and
            inactive fill, and outline. </summary>
            <param name="rectangle"> The bounding rectangle for this object. </param>
            <param name="fill"> The fill used when not active. </param>
            <param name="outline"> The outline used when not active. </param>
            <param name="activeFill"> The fill used when the annotation is active. </param>
            <param name="activeOutline"> The outline used when the annotation is active. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> from serialized information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The serialization information of this object. </param>
            <param name="context"> A context containing information about this object. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
            <summary>
            Called while an annotation is being moved by the user.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs"/> containing information about this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.HitTestRectangle">
            <summary>
            Gets a rectangle used for hit testing or <STRONG>RectangleF.Empty</STRONG> to use the default hit testing
            method.
            </summary>
            <value>
            A rectangle to use for hit testing or RectangleF.Empty to indicate that the default hit testing method
            should be used.
            </value>
            <remarks>
            The default hit testing method will ignore transparent areas of the annotation.  This property can be used
            to override this behavior.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.Active">
            <summary>
            Gets or sets a value indicating whether [active].
            </summary>
            <value>
              <c>true</c> if [active]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>
            The fill.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.Outline">
            <summary>
            Gets or sets the outline.
            </summary>
            <value>
            The outline.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.ActiveFill">
            <summary>
            Gets or sets the active fill.
            </summary>
            <value>
            The active fill.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.ActiveOutline">
            <summary>
            Gets or sets the active outline.
            </summary>
            <value>
            The active outline.
            </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation">
            <summary> <para>This annotation can be used to create a freehand hot spot area on the document.  When the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode"/> is set to <STRONG>View</STRONG> the hot spot annotations will be
            invisible but the cursor will change when hovering over it to indicate that area can be clicked.</para>
            <para>For a rectangular hot spot use the <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation"/>.</para> </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>HotSpotFreehandAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.HotSpotFreehandData)">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the annotation data.
            </summary>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> A <see cref="T:Atalasoft.Annotate.HotSpotFreehandData"/> object for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the initial points.
            </summary>
            <exception> Thrown if the points parameter is null. </exception>
            <param name="points"> The initial points for the freehand.  These must be specified in annotation space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the fill. </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the fill. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the outline, fill and
            initial points. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
            <param name="fill"> The fill for the freehand. </param>
            <param name="points"> The initial point for the freehand. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the fill and active fill.
            </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the fill. </param>
            <param name="activeFill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used when the <see cref="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Active"/> property is true. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the outline, fill and
            initial points. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
            <param name="fill"> The fill for the freehand. </param>
            <param name="activeFill"> The fill used when the hotspot is active. </param>
            <param name="points"> The initial point for the freehand. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> from serialized information.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
            <param name="info"> The serialization information for this object. </param>
            <param name="context"> The streaming context for this object. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>Returns a region for this annotation.</summary>
            <returns>A region for this annotation.</returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary>
            Called when the user has released the mouse over the annotation.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Active">
            <summary> Gets or sets whether this hot spot is active. </summary>
            <value> A value indicating if this hot spot is active. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.LineType">
            <summary>Gets or sets the LineType used for the lines or curves of this annotation.</summary>
            <value>The line type for this annotation.</value>
            <summary> Gets or sets the LineType used for the lines or curves of this annotation. </summary>
            <value> The line type for this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.ActiveFill">
            <summary>
            Gets or sets the fill used when the HotSpot is active.
            </summary>
            <value>The active fill.</value>
            <summary> Gets or sets the fill used when the HotSpot is active. </summary>
            <value> The active fill. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Fill">
            <summary>
            Gets or sets the fill used when the HotSpot is not active.
            </summary>
            <value>The inactive fill.</value>
            <summary> Gets or sets the fill used when the HotSpot is not active. </summary>
            <value> The inactive fill. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Points">
            <summary>
            Gets the PointFCollection used for this freehand.
            </summary>
            <value>The points collection.</value>
            <summary> Gets the <see cref="T:Atalasoft.Annotate.PointFCollection"/> used for this freehand. </summary>
            <value> The points collection.  These must be specified in annotation space. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.IAnnotate">
            <summary>
            This interface must be implemented by any control hosting annotations. The
               <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController.html">AnnotationController</a>
               requires the properties of this interface for rendering and user interaction.
            </summary>
            <summary> This interface must be implemented by any control hosting annotations. The 
            AnnotationController requires the properties of this interface for rendering and user interaction.
            </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotate.Control">
            <summary>Gets the control used to render the annotations onto.</summary>
            <value>The control hosting the annotations.</value>
            <remarks>
            The
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController.html">AnnotationController</a>
            uses paint and mouse events to render and control the annotations.
            </remarks>
            <summary> Gets the control used to render the annotations onto. </summary>
            <value> The control hosting the annotations. </value>
            <remarks> The AnnotationController uses paint and mouse events to render and control the annotations.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotate.Units">
            <summary>Gets the units of measure for the document.</summary>
            <value>The units of measure for the document.</value>
            <summary> Gets the units of measure for the document. </summary>
            <value> The units of measure for the document. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotate.Resolution">
            <summary>Gets the resolution of the document.</summary>
            <value>The resolution of the document.</value>
            <summary> Gets the resolution of the document. </summary>
            <value> The resolution of the document. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotate.Transform">
            <summary>Gets a transformation matrix used by the host control.</summary>
            <value>A transformation matrix for the control.</value>
            <remarks>
            This matrix is used to represent any offsets from scrolling and scaling that need
            to be reflected in the rendered annotations.
            </remarks>
            <summary> Gets a transformation matrix used by the host control. </summary>
            <value> A transformation matrix for the control. </value>
            <remarks> This matrix is used to represent any offsets from scrolling and scaling that need to be reflected in the
            rendered annotations. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotate.DocumentBounds">
            <summary>Gets the bounding rectangle of the document area.</summary>
            <value>The bounding rectangle of the document.</value>
            <summary> Gets the bounding rectangle of the document area. </summary>
            <value> The bounding rectangle of the document. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotate.KeyBinder">
            <summary>
            Gets the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationKeyBinder.html">AnnotationKeyBinder</a>
            used for binding annotation actions to key press events.
            </summary>
            <value>
            The
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationKeyBinder.html">AnnotationKeyBinder</a>
            used for this host or <strong>null</strong> (<strong>Nothing</strong> in VB) if key
            binding is not supported.
            </value>
            <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyBinder"/> used for binding annotation actions to key press events.
            </summary>
            <value> The <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyBinder"/> used for this host or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG>
            in VB) if key binding is not supported. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.IAnnotationGrips">
            <summary> This interface must be implemented by any class acting as annotation grips. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.IAnnotationGrips.GripFromPoint(System.Drawing.PointF)">
            <summary> Returns a grip from the specified position. </summary>
            <returns> The grip at the location provided or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if there was
            no grip found. </returns>
            <param name="point"> The point to search for. This position must be in annotation space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.IAnnotationGrips.GetRegion">
            <summary> Returns a Region for the grips. </summary>
            <returns> A render for the grips. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.IAnnotationGrips.GetEnumerator">
            <summary> An <STRONG>IEnumerator</STRONG> used to allow enumeration through the collection. </summary>
            <returns> The IEnumerator for this class. </returns>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Item(System.Int32)">
            <summary>
            Returns an <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> object from the collection at the specified index.
            </summary>
            <value>The grip at the specified index.</value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Fill">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for filling the grips. </summary>
            <value> The brush used to fill the grips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Outline">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the grip. </summary>
            <value> The pen used for the outline. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.RotationFill">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill a rotation grip. </summary>
            <value> The brush used to fill a rotation grip. </value>
            <remarks> If this property is <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) the <see cref="P:Atalasoft.Annotate.UI.IAnnotationGrips.Fill"/> value will be used. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.RotationOutline">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of a rotation grip. </summary>
            <value> The pen used to draw the outline of a rotation grip. </value>
            <remarks> If this value is <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) the <see cref="P:Atalasoft.Annotate.UI.IAnnotationGrips.Outline"/> property will be used. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Size">
            <summary> Gets the size of the grips in pixels. </summary>
            <value> The size of the grips in pixels. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Count">
            <summary> Gets the number of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> objects in the collection. </summary>
            <value> The number of grips in the collection. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationGrip">
            <summary> This class represents a single grip.  To access these grip objects use the <see cref="P:Atalasoft.Annotate.UI.AnnotationUI.Grips"/> property of the annotation. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationGrip.#ctor">
            <summary> Creates a new instance of <STRONG>AnnotationGrip</STRONG>. </summary>
            <overloads> Creates a single annotation grip. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationGrip.#ctor(System.Drawing.PointF,Atalasoft.Annotate.AnnotationGripState)">
            <summary> Creates a new instance of <STRONG>AnnotationGrip</STRONG> specifying the grip position and state.
            </summary>
            <param name="position"> The position of the grip in annotation space. </param>
            <param name="state"> The initial state of the grip. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationGrip.#ctor(System.Drawing.PointF,Atalasoft.Annotate.AnnotationGripState,Atalasoft.Annotate.AnnotationGripAction)">
            <summary> Creates a new instance of <STRONG>AnnotationGrip</STRONG> specifying the grip position, state and its
            action. </summary>
            <param name="position"> The position of the grip in annotation space. </param>
            <param name="state"> The initial state of the grip. </param>
            <param name="action"> Defines the action to take when this grip is dragged with the mouse. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.Action">
            <summary> Gets or sets the action to take when the grip is dragged with the mouse. </summary>
            <value> The grip action. </value>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationGrip~Action&quot;]/*"/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.State">
            <summary> Gets or sets the state of the grip. </summary>
            <value> The grip state. </value>
            <remarks> This is useful is the <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer"/> being used renders the grips differently based
            on its state. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.Position">
            <summary> Gets or sets the position of the grip in annotation space. </summary>
            <value> The position of the grip in annotation space. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.Visible">
            <summary> Gets or sets the visibility of the grip. </summary>
            <value> Indicates if the grip is visible. </value>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationGrip~Visible&quot;]/*"/>
        </member>
        <member name="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs">
            <summary> This class is used to with the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged"/> event. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs._grip">
            <summary> Gets the grip being modified. </summary>
            <value> The grip being modified. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs._newPosition">
            <summary> Gets the new location for the grip in annotation space. </summary>
            <value> The new location for the grip. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs._confinement">
            <summary> Gets the viewer confinement rectangle. </summary>
            <value> The viewer confinement rectangle. </value>
        </member>
        <member name="M:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationGrip,System.Drawing.PointF,System.Drawing.RectangleF)">
            <summary> Creates a new instance of <STRONG>AnnotationGripChangedEventArgs</STRONG>. </summary>
            <param name="grip"> The grip being modified. </param>
            <param name="newPosition"> The new position of the grip in annotation space. </param>
            <param name="confinement"> The viewer confinement rectangle. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.Grip">
            <summary> Gets the grip being modified. </summary>
            <value> The grip being modified. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.NewPosition">
            <summary> Gets the new location for the grip in annotation space. </summary>
            <value> The new location for the grip. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.Confinement">
            <summary> Gets the viewer confinement rectangle. </summary>
            <value> The viewer confinement rectangle. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.GripPositionChangedEventHandler">
            <summary> This event handler is used with the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged"/> event. </summary>
            <param name="sender"> The object sending the event. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs"/> containing information about this event. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImporterFactory">
            <summary> A delegate for constructing annotations from data that a given AnnotationImporter doesn't understand.
            </summary>
            <returns> A new AnnotationUI object or null.  If the delegate returns null, this annotation is ignored. </returns>
            <remarks> The data object will be specific to a given type of AnnotationImporter. </remarks>
            <param name="importer"> The AnnotationImporter that attempted to import the annotation </param>
            <param name="location"> The location on the target page where the annotation will go </param>
            <param name="data"> The data used to construct the annotation. </param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImportEventHandler">
            <summary>
            Defines a handler to be called on annotation import.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The <see cref="T:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventHandler">
            <summary>
            Defines a handler to be called on annotation page import.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs">
            <summary> An object representing information about an annotation being imported. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.#ctor(Atalasoft.Annotate.UI.Importers.AnnotationImporter,Atalasoft.Annotate.UI.AnnotationUI,System.Int32,System.Int32)">
            <summary> Constructs a new AnnotationImportEventArgs object. </summary>
            <param name="importer"> The AnnotationImporter that has imported the annotation. </param>
            <param name="annotation"> The AnnotationUI object that was imported. </param>
            <param name="page"> The page from which the AnnotationUI object was imported. </param>
            <param name="annotIndex"> The index on the page of the AnnotationUI object. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.Importer">
            <summary> Gets the index on the page of the AnnotationUI object. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.Annotation">
            <summary> Gets the AnnotationImporter that has imported the annotation. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.Page">
            <summary> Gets the index on the page of the AnnotationUI object. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.AnnotationIndex">
            <summary> Gets the index on the page of the AnnotationUI object. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs">
            <summary> An object representing information about a page of annotations being imported. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs.#ctor(Atalasoft.Annotate.UI.Importers.AnnotationImporter,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)">
            <summary> Constructs a new AnnotationPageImportEventArgs object. </summary>
            <param name="importer"> The AnnotationImporter importing the page. </param>
            <param name="layer"> The layer of annotations imported. </param>
            <param name="page"> The page number of the annotations being imported. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs.Importer">
            <summary> Gets the AnnotationImporter importing the page. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs.Layer">
            <summary> Gets the layer of annotations imported. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs.Page">
            <summary> Gets the page number of the annotations being imported. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImporter">
            <summary> <para>AnnotationImporter is an abstract base class used to define how annotations are imported from
            arbitrary data files into DotImage.</para>
            <para><FONT color="#ff0000">This class is obsolete:  Use AnnotationDataImporter instead.</FONT></para>
            </summary>
            <remarks> Since this class is abstract, you can't use it directly. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Load">
            <summary> The load method is used to allow an AnnotationImporter to load and to possibly cache annotations.
            </summary>
            <remarks> Load is called automatically by any method that needs to access internal annotation data (e.g., PageCount
            or Import).  Load is present for clients who want to control when annotation data is specifically loaded. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Import">
            <summary> Imports all annotations as LayerCollection. </summary>
            <returns> A new LayerCollection object representing annotations for the entire document.  Each LayerAnnotation
            within the collection represents one page of annotations.  If a page has no annotations, the LayerAnnotation will be
            non-null, but empty. </returns>
            <overloads> Imports annotations from a source </overloads>
            <remarks> <see cref="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Load"/> must be called before any of the Import methods. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Import(System.Int32)">
            <summary> Imports a page of annotations as LayerAnnotation. </summary>
            <returns> A LayerAnnotation containing a set of annotations from the page. </returns>
            <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Import(System.Int32,System.Int32)">
            <summary> Imports a single annotation from a given page of annotations. </summary>
            <returns> A single AnnotationUI object representing the imported annotation. </returns>
            <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
            <param name="annotIndex"> The zero-based annotation which will be imported.  annotIndex is range checked against the
            number of annotations of the page.  The number of annotations on a page is available through <see cref="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.GetAnnotationCount(System.Int32)"/>. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.GetAnnotationCount(System.Int32)">
            <summary> Returns the number of annotations on a conceptual page of a document. </summary>
            <param name="page"> page is an integer that represents the conceptual zero based page index of a document.  It will
            be range checked against the total number of pages in the document. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.OnAnnotationImported(Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs)">
            <summary> Fires the AnnotationImported event. </summary>
            <remarks> This event is fired after an annotation has been imported. </remarks>
            <param name="e"> The AnnotationImportEventArgs for this event </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.OnAnnotationPageImported(Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs)">
            <summary> Fires the AnnotationPageImported event. </summary>
            <returns> The event is fired after a page of annotations has been imported. </returns>
            <param name="e"> The AnnotationPageImportEventArgs for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.OnAnnotationPageImporting(Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs)">
            <summary> Fires the AnnotationPageImporting event. </summary>
            <returns> This event is fired before a page of annotations will be imported. </returns>
            <param name="e"> The AnnotationPageImport events args for this event. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.IsValidFormat(System.IO.Stream)">
            <summary> Indicates whether or not an AnnotationImporter can recognize a particular data format. </summary>
            <returns> true indicates that the AnnotationImporter recognizes this format. </returns>
            <remarks> The stream should be left in the same state on exit as on entrance. </remarks>
            <param name="stm"> A non-null stream used to recognize file format. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.FromStream(System.IO.Stream)">
            <summary> Constructs a new annotation importer associated with a given stream. </summary>
            <returns> A new annotation importer for importing annotations. </returns>
            <param name="stm"> A non-null stream containing annotation data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLLoad">
            <summary> The low-level implementation of Load </summary>
            <remarks> LLLoad should only ever be called once per stream. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLGetPageCount">
            <summary> The low-level implementation of PageCount </summary>
            <returns> Returns the number of pages in the document. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLGetAnnotationCount(System.Int32)">
            <summary> Low level implementation of GetAnnotationCount </summary>
            <returns> An integer representing the number of annotations on the page. </returns>
            <param name="page"> A zero-based integer representing the page from which the annotations are being counted.  Page
            will always be in range. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLImport(System.Int32)">
            <summary> Imports all annotations as LayerCollection. </summary>
            <returns> A LayerAnnotation containing a set of annotations from the page. </returns>
            <remarks> page will always be in range. </remarks>
            <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
            <overloads> The low-level implementation of Import </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLImport(System.Int32,System.Int32)">
            <overloads> The low-level implementation of Import </overloads>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.PageCount">
            <summary> Returns the total number of pages in a document. </summary>
            <remarks> It is not necessary to call Load before accessing PageCount; this will happen automatically. </remarks>
        </member>
        <member name="E:Atalasoft.Annotate.UI.Importers.AnnotationImporter.AnnotationImported">
            <summary> Raised after a single annotation has been imported. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.Importers.AnnotationImporter.AnnotationPageImported">
            <summary> Raised after a page of annotations has been imported. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.Importers.AnnotationImporter.AnnotationPageImporting">
            <summary> Raised before a page of annotations will be imported. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.ThrowOnError">
            <summary> Gets or sets whether or not the importer will throw or suppress exceptions. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LastErrors">
            <summary> Gets a collection of strings representing errors encountered while importing annotations. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.FailsafeAnnotationFactory">
            <summary> Gets or sets a delegate that is used to create annotations if an importer is unable to do so. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Units">
            <summary> Sets or gets the units of the target for the annotations. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Resolution">
            <summary> Sets or gets the resolution of the target for the annotations. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection">
            <summary> This is a collection used to contain a set of AnnotationImporter objects. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.#ctor">
            <summary> Constructs a new AnnotationImporterCollection. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Add(Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
            <summary> Adds an AnnotationImporter to the end of the collection. </summary>
            <param name="value"> The AnnotationImporter to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.IndexOf(Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
            <summary> Finds the index of a given AnnotationImporter within the collection. </summary>
            <returns> A value 0 or greater if the AnnotationImporter was found, less than zero if not. </returns>
            <param name="value"> The AnnotationImporter to find. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Insert(System.Int32,Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
            <summary> Inserts an AnnotationImporter into the collection. </summary>
            <param name="index"> The index before which the AnnotationImporter will be inserted. </param>
            <param name="value"> The AnnotationImporter to insert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Remove(Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
            <summary> Removes an AnnotationImporter from the colection. </summary>
            <param name="value"> The AnnotationImporter to remove. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Contains(Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
            <summary> Returns true if the collection contains a given AnnotationImporter. </summary>
            <param name="value"> The AnnotationImported that to search for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.CopyTo(Atalasoft.Annotate.UI.Importers.AnnotationImporter[],System.Int32)">
            <summary> Copies the entire contents of the collection to an array. </summary>
            <param name="array"> The array that will be used for copying. </param>
            <param name="index"> The start of the array. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter">
            <summary>
            Summary description for XmpImporter.
            </summary>
            <summary> <para>An object for importing annotations from a stream of XMP data.</para>
            <para><FONT color="#ff0000">This class is obsolete:  Use XmpAnnotationDataImporter
            instead.</FONT></para> </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.#ctor(Atalasoft.Annotate.UI.AnnotationController)">
            <summary> Constructs a new XmpAnnotationImporter object. </summary>
            <param name="controller"> A hosting AnnotationController object. </param>
            <overloads> Constructs a new XmpAnnotationImporter object. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.#ctor(Atalasoft.Annotate.UI.AnnotationController,System.IO.Stream)">
            <summary> Constructs a new XmpAnnotationImporter object. </summary>
            <param name="controller"> A hosting AnnotationController object. </param>
            <param name="stm"> A stream from which annotations will be imported. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.FromStream(System.IO.Stream)">
            <summary> Constructs a new XmpAnnotationImporter for the given stream. </summary>
            <param name="stm"> A non-null stream containing XMP data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.IsValidFormat(System.IO.Stream)">
            <summary> Indicates if the stream contains XMP data. </summary>
            <returns> Returns true if the stream contains XMP data; false otherwise. </returns>
            <param name="stm"> A non-null stream containing XMP data. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLLoad">
            <summary>
            The low-level implementation of Load
            </summary>
            <exception cref="T:Atalasoft.Imaging.Codec.CodecException">Xmp data stream is neither JPEG nor TIFF.</exception>
            <remarks>
            LLLoad should only ever be called once per stream.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLGetPageCount">
            <summary>
            The low-level implementation of PageCount
            </summary>
            <returns>
            Returns the number of pages in the document.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLGetAnnotationCount(System.Int32)">
            <summary>
            Low level implementation of GetAnnotationCount
            </summary>
            <param name="page">A zero-based integer representing the page from which the annotations are being counted.  Page
            will always be in range.</param>
            <returns>
            An integer representing the number of annotations on the page.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLImport(System.Int32)">
            <summary>
            Imports all annotations as LayerCollection.
            </summary>
            <param name="page">The zero-based page from which annotations will be imported.  page is range checked against the
            document.</param>
            <returns>
            A LayerAnnotation containing a set of annotations from the page.
            </returns>
            <overloads> The low-level implementation of Import </overloads>
            <remarks>
            page will always be in range.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLImport(System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="page"></param>
            <param name="annotIndex"></param>
            <returns></returns>
            <overloads> The low-level implementation of Import </overloads>
        </member>
        <member name="T:Atalasoft.Annotate.UI.LayerAnnotation">
            <summary> A <STRONG>LayerAnnotation</STRONG> is a collection of other annotations, including other
            <STRONG>LayerAnnotation</STRONG> objects. </summary>
            <remarks> The <STRONG>LayerAnnotation</STRONG> can be used as a 'group' by setting its <see cref="P:Atalasoft.Annotate.UI.LayerAnnotation.GroupAnnotation"/> property to true. This will allow all of the annotations it contains to be
            moved and resized as a single unit. </remarks>
        </member>
        <member name="F:Atalasoft.Annotate.UI.LayerAnnotation._items">
            <summary> Gets an <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection"/> for this layer. </summary>
            <value> An collection of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects. </value>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>LayerAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor(Atalasoft.Annotate.LayerData)">
            <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.LayerData"/> for this
            annotation. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.LayerData"/> for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor(Atalasoft.Annotate.UI.AnnotationUICollection)">
            <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG> specifying an <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection"/> for this layer. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the annotations argument is null (Nothing in VB). </exception>
            <param name="annotations"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection"/> for this layer. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG> from serialized information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo object containing information for this layer. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnControllerChanged(System.EventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnControllerChanged(System.EventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this layer. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo object where information is stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnResizing(System.EventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnResizing(System.EventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnChildAnnotationPropertyChanged(System.Object,Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
            <summary> Called when a property of a child annotation has changed. </summary>
            <param name="sender"> The annotation that has changed. </param>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs"/> containing information for this change.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary> Gets the combined region for all annotations contained in this layer. </summary>
            <returns> A Region for this layer. </returns>
            <param name="space"> Indicates the space coordinates to return. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Dispose">
            <summary> Disposes this layer and all items it contains. </summary>
            <overloads> Disposes the <STRONG>LayerAnnotation</STRONG> and all of its child objects. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Dispose(System.Boolean)">
            <summary> Releases resources used by the layer and its contained annotations. </summary>
            <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.UI.LayerAnnotation.Dispose"/>
            method. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnDeserialization(System.Object)">
            <summary> Called when a formatter is finished deserializing the <STRONG>LayerAnnotation</STRONG>. </summary>
            <param name="sender"> The object calling this method.  This is normally null (Nothing in VB). </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.CreateAnnotationUIObjects(Atalasoft.Annotate.UI.AnnotationUIFactoryCollection)">
            <summary> Use this method to force the <STRONG>LayerAnnotation</STRONG> to create <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects
            for its <see cref="T:Atalasoft.Annotate.AnnotationData"/> objects after deserialization or after using the constructor taking a <see cref="T:Atalasoft.Annotate.LayerData"/>. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the factories argument is null (Nothing in VB).</exception>
            <remarks> This method is automatically called when annotations are deserialized using the AnnotationController.Load method. </remarks>
            <param name="factories"> The UI factories that will be used to create the annotation objects.  Normally this will be
            the <STRONG>AnnotationController</STRONG>.<see cref="P:Atalasoft.Annotate.UI.AnnotationController.Factories"/> property. </param>
        </member>
        <member name="E:Atalasoft.Annotate.UI.LayerAnnotation.ChildAnnotationPropertyChanged">
            <summary> This event is raised when a property of an annotation contained in the layer has been changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LayerAnnotation.Bounds">
            <commentsfrom cref="P:Atalasoft.Annotate.UI.AnnotationUI.Bounds" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LayerAnnotation.GroupAnnotation">
            <summary> Gets or sets a value indicating whether the annotations in this layer are acting as a single group.
            </summary>
            <value> A value indicating whether this layer is a group. </value>
            <remarks> Setting this property to true will allow all contained annotations to be moved and resized together rather
            than separately. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LayerAnnotation.Items">
            <summary> Gets an <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection"/> for this layer. </summary>
            <value> An collection of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/> objects. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.LayerCollection">
            <summary> This class is used to hold a collection of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> objects. </summary>
            <remarks> The order of the layers in the <STRONG>LayerCollection</STRONG> determines the stacking (z-order) used
            when rendering. For instance, the layer at index 1 is rendered on top of the layer at index 0. The order can be
            changed using the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.ChangeAnnotationPosition(Atalasoft.Annotate.ChangePositionMethod)"/> method; this is because a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> derives from <see cref="T:Atalasoft.Annotate.UI.AnnotationUI"/>. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.#ctor">
            <summary> Creates a new instance of <STRONG>LayerCollection</STRONG>. </summary>
            <overloads> Constructs a <STRONG>LayerCollection</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LayerCollection</STRONG> from serialized information. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo object containing information about this collection. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.UI.LayerCollection"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this collection. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo object where information will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Dispose">
            <summary> Releases memory used by this collection and all of its annotations. </summary>
            <overloads> Disposes the <STRONG>LayerCollection</STRONG> and all contained layers. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Dispose(System.Boolean)">
            <summary> Releases resources used by the collection and all of its <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> objects. </summary>
            <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.UI.LayerCollection.Dispose"/>
            method. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Add(Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary>
            Adds a layer to the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the layer parameter is null.</exception>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.AddRange(Atalasoft.Annotate.UI.LayerAnnotation[])">
            <summary> Adds an array of layers to the collection. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the layers parameter is null. </exception>
            <param name="layers"> An array of layers to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Contains(Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary> Returns a value indicating whether a layer is contains within the collection. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
            <param name="layer"> The layer to search for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.CopyTo(Atalasoft.Annotate.UI.LayerAnnotation[],System.Int32)">
            <summary> Copies items into the specified array. </summary>
            <param name="array"> The array to copy items into. </param>
            <param name="index"> The index in the target array to begin copying items. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.IndexOf(Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary> Returns the position of a layer within the collection or -1 if the layer is not in the collection.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
            <param name="layer"> The layer to search for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Insert(System.Int32,Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary> Inserts a layer into the collection at the specified index. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
            <param name="index"> The position within the collection this layer should be placed. </param>
            <param name="layer"> The layer to insert. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Remove(Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary> Removes a layer from the collection. </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
            <param name="layer"> The layer to remove. </param>
            <overloads> Use these methods to remove a layer from the collection. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Remove(Atalasoft.Annotate.UI.LayerAnnotation[])">
            <summary> Removes an array of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> objects from the collection. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the layers argument is null (Nothing in VB). </exception>
            <param name="layers"> An array of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation"/> to remove. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Replace(System.Int32,Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary> Replaces a layer at the specified index with the provided layer. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the index is invalid for this collection. </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown if the new layer is null (Nothing in VB). </exception>
            <param name="index"> The index of the layer to replace. </param>
            <param name="newLayer"> The new layer to insert into the collection. </param>
            <overloads> These methods are used to replace a layer in the collection. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.Replace(Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.UI.LayerAnnotation)">
            <summary> Replaces an existing layer with another one. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if either argument is null (Nothing in VB). </exception>
            <exception cref="T:System.ArgumentException"> Thrown if the old layer does not exist in the collection. </exception>
            <param name="oldLayer"> The layer currently in the collection. </param>
            <param name="newLayer"> The layer to insert into the collection. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnControllerChanged">
            <summary> Called when the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> using this <STRONG>LayerCollection</STRONG> has
            changed. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnClear">
            <summary> Called when the <STRONG>Clear</STRONG> method is invoked. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnClearComplete">
            <summary> Called when the Clear method has completed. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary> Called when an item has been added or inserted into the collection. </summary>
            <param name="index"> The index where the item was placed. </param>
            <param name="value"> The items that was added. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary> Called when a remove method has completed. </summary>
            <param name="index"> The index of the item that was removed. </param>
            <param name="value"> The item that was removed. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary> Called when an item in the collection has been changed. </summary>
            <param name="index"> The index of the item that was changed. </param>
            <param name="oldValue"> The old value of the item. </param>
            <param name="newValue"> The new value of the item. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
            <summary> Called when there is any change to the collection. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs"/> containing information about this event.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
            <summary> Called when a change has been made to the collection or an object in the collection. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs"/> containing information about this
            change. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <summary> Called before this collection or an object in the collection has been changed. </summary>
            <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs"/> containing information about this change.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnDeserialization(System.Object)">
            <summary> Called after an object has been fully deserialized by a serialization formatter. </summary>
            <param name="sender"> The formatter deserializing the data. </param>
        </member>
        <member name="E:Atalasoft.Annotate.UI.LayerCollection.CollectionChanged">
            <summary> Raised when there has been a change in the collection. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.LayerCollection.PropertyChanging">
            <summary> Raised before this collection or an item in the collection has been changed. </summary>
        </member>
        <member name="E:Atalasoft.Annotate.UI.LayerCollection.AnnotationControllerNotification">
            <summary> Raised after this collection or an item in the collection has been changed. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LayerCollection.Controller">
            <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> for this <STRONG>LayerCollection</STRONG>. </summary>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LayerCollection.Item(System.Int32)">
            <summary>
            Gets the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.LayerAnnotation.html">LayerAnnotation</a> at
            the specified index in the collection.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
            <param name="index">The index of the item to get.</param>
        </member>
        <member name="T:Atalasoft.Annotate.UI.LineAnnotation">
            <summary> This is a single line annotation from <see cref="P:Atalasoft.Annotate.UI.LineAnnotation.StartPoint"/> to <see cref="P:Atalasoft.Annotate.UI.LineAnnotation.EndPoint"/>. </summary>
            <remarks> This annotation can be created with a single click and drag or by clicking once for the start point and a
            second time for the end point. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>LineAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.LineData)">
            <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.LineData"/> used for
            this annotation. </summary>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.LineData"/> object for the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline, starting and ending
            points.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
            <param name="startPoint"> The starting point of the line. </param>
            <param name="endPoint"> The ending point of the line. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary> <para><STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG></para>
            <para>Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline, starting and ending
            points.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
            <param name="startPoint"> The starting point of the line. </param>
            <param name="endPoint"> The ending point of the line. </param>
            <param name="translucent"> A value indicating if this annotation should act as a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline and translucent
            properties. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
            <param name="translucent"> A value indicating whether the line will be translucent, giving it a highlighter effect.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the start and end points, outline and
            translucent properties. </summary>
            <param name="startPoint"> The starting point of the line. </param>
            <param name="endPoint"> The ending point of the line. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </param>
            <param name="translucent"> A value indicating whether the line will be translucent, giving it a highlighter effect.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> from serialized information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo object containing information for this annotation. </param>
            <param name="context"> The StreamingContext of this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.BeginCreate">
            <summary>
            This method is called by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController"/> when the user is beginning to create this
            annotation using the mouse.
            </summary>
            <remarks>
            Use this method to prepare the annotation for creation by receiving the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/>, <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/> and <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"/>
            method calls.
            </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary>
            Called when the user clicks down on the annotation.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary>
            Called when the user has moved the mouse over the annotation.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <summary>
            Called when the user has released the mouse over the annotation.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs"/> containing information about this event.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>
            Returns a rectangular region for this annotation, including its grips if
            selected.
            </summary>
            <param name="space">The space coordinate system used to generate this region.</param>
            <returns>
            The region of this annotation in the specified space.
            </returns>
            <example>
            The following is an example of how a custom annotation may override the <strong>GetRegion</strong> method.
            <code lang="CS" title="GetRegionCS">
            public override AnnotationRegion GetRegion(AnnotateSpace space)
            {
            Create the region in annotation space.
            AnnotationRegion reg = new AnnotationRegion(new RectangleF(PointF.Empty, _data.Size));
            if (this.Selected &amp;&amp; this.Grips != null)
            AddGripsToRegion(reg);
            ApplyRegionTransform(reg, space);
            return reg;
            }
            </code>
              <code lang="VB" title="GetRegionVB">
            Public Overrides Function GetRegion(ByVal space As AnnotateSpace) As AnnotationRegion
            ' Create the region in annotation space.
            Dim reg As AnnotationRegion =  New AnnotationRegion(New RectangleF(PointF.Empty,_data.Size))
            If Not Me.Selected And Me.Grips Is Nothing Then
            AddGripsToRegion(reg)
            End If
            ApplyRegionTransform(reg, space)
            Return reg
            End Function
              </code>
              </example>
              <overloads>
              <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationUI~GetRegion&quot;]/*"/>
              </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)">
            <summary>
            Called when a grip of the annotation has been moved by the user using the mouse.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs"/> containing information about this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
            <summary>
            Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Size"/> property of the annotation has changed.
            </summary>
            <param name="e">An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs"/> containing information for this event.</param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LineAnnotation.Translucent">
            <summary> Gets or sets a value indicating whether this annotation is used has a highlighter. </summary>
            <value> A value indicating if this annotation is a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)"/> method. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LineAnnotation.Outline">
            <summary> Gets or sets the outline for this annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the line. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LineAnnotation.StartPoint">
            <summary> Gets or sets the starting point for the line. </summary>
            <value> The starting point for the line in annotation space. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LineAnnotation.EndPoint">
            <summary> Gets or sets the ending point for the line. </summary>
            <value> The ending point for the line in annotation space. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LineAnnotation.Bounds">
            <summary>
            Gets the bounding rectangle for the annotation.
            </summary>
            <value>
            The bounding rectangle for the annotation.
            </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.LinesAnnotation">
            <summary> The <STRONG>LinesAnnoation</STRONG> represents a series of points connected by straight lines. </summary>
            <remarks> <para>To generate a <STRONG>LinesAnnotation</STRONG>, the user clicks the left mouse button to set each
            point. The user can stop adding points by clicking the right mouse button.</para>
            <para>There must be at least two points in the <see cref="P:Atalasoft.Annotate.UI.LinesAnnotation.Points"/> collection for this
            annotation.</para> </remarks>
            <example>
                The following code creates a new LinesAnnotation and prepares the
                AnnotationController for the user to create the annotation using a mouse. 
                <code lang="CS" title="LinesAnnotation">
            LinesAnnotation lines = new LinesAnnotation(new AnnotationPen(Color.ForestGreen, 1));
            this.annotateViewer1.Annotations.CreateAnnotation(lines);
                </code>
            	<code lang="VB" title="LinesAnnotationVB">
            Dim lines As LinesAnnotation =  New LinesAnnotation(New AnnotationPen(Color.ForestGreen,1)) 
            Me.annotateViewer1.Annotations.CreateAnnotation(lines)
                </code>
            </example>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.LinesAnnotation&quot;]/*"/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>LinesAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.LinesData)">
            <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.LinesData"/> used by
            this annotation. </summary>
            <exception> Thrown if the data argument is null (Nothing in VB). </exception>
            <param name="data"> A <see cref="T:Atalasoft.Annotate.LinesData"/> object for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection)">
            <summary> <para><STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG></para>
            <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline and end points.</para>
            </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the line end points. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
            <summary> <para><STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG></para>
            <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline and an array of end
            points.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="points"> An array of end points for the lines.  These must be specified in annotation space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection,System.Boolean)">
            <summary> <para><STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG></para>
            <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline, points and whether this
            annotation is a highlighter.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the line end points. </param>
            <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[],System.Boolean)">
            <summary> <para><STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG></para>
            <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline, an array of points and
            whether this annotation is a highlighter.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="points"> An array of end points for the lines.  These must be specified in annotation space. </param>
            <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the points, outline and translucent
            properties. </summary>
            <exception> Thrown if the points argument is null (Nothing in VB). </exception>
            <param name="points"> An array of end points for the lines.  These must be specified in annotation space. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="translucent"> A value indicating whether the lines will be translucent, giving it a highlighter effect.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
            <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the point collection, outline and
            translucent properties. </summary>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the line end points. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </param>
            <param name="translucent"> A value indicating whether the lines will be translucent, giving it a highlighter effect.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> from serialized information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The serialization information containing data for this object. </param>
            <param name="context"> The StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>Returns a region for this annotation.</summary>
            <returns>A region for this LinesAnnotation.</returns>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LinesAnnotation.Outline">
            <summary> Gets or sets the outline for the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the lines. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LinesAnnotation.Translucent">
            <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
            <value> A value indicating if this annotation should act as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)"/> method. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.LinesAnnotation.Points">
            <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the points for this annotation. </summary>
            <value> The points for this annotation in annotation space. </value>
            <remarks> The <STRONG>LinesAnnotation</STRONG> must have at least two points in the collection. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.UI.OcrRegionAnnotation">
            <summary> This annotation is used to select an area of the image to OCR is a separate process. </summary>
            <remarks> This annotation does not perform OCR, it simply creates a selection for use by another process. </remarks>
        </member>
        <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG>. </summary>
            <overloads> Constructs an <STRONG>OcrRegionAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor(System.Drawing.RectangleF,System.Int32,System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG> specifying its bounds, sequence order and
            color. </summary>
            <exception> Thrown if the sequenceOrder is less than 1. </exception>
            <param name="bounds"> The selection bounds for the annotation. </param>
            <param name="sequenceOrder"> The sequence number for the annotation.  This must be 1 or greater. </param>
            <param name="color"> The color for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor(Atalasoft.Annotate.OcrRegionData)">
            <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG> from an <see cref="T:Atalasoft.Annotate.OcrRegionData"/> object.
            </summary>
            <param name="data"> The data object for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG> from serialization information. </summary>
            <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information for this annotation. </param>
            <param name="context"> A <STRONG>StreamingContext</STRONG> for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="P:Atalasoft.Annotate.UI.OcrRegionAnnotation.HitTestRectangle">
            <summary>
            Gets a rectangle used for hit testing or <STRONG>RectangleF.Empty</STRONG> to use the default hit testing
            method.
            </summary>
            <value>
            A rectangle to use for hit testing or RectangleF.Empty to indicate that the default hit testing method
            should be used.
            </value>
            <remarks>
            The default hit testing method will ignore transparent areas of the annotation.  This property can be used
            to override this behavior.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.OcrRegionAnnotation.Color">
            <summary>
            Gets or sets the color to draw OCR region selection.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.OcrRegionAnnotation.SequenceOrder">
            <summary>
            Gets or sets the sequence order.
            </summary>
            <value>
            The sequence order.
            </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.PointGrips">
            <summary> <para><STRONG>PointGrips</STRONG> is the base class implementation used for annotation grips. All
            annotations in <STRONG>DotImage</STRONG> use <STRONG>PointGrips</STRONG> or <see cref="T:Atalasoft.Annotate.UI.RectangleGrips"/>, which
            derives from <STRONG>PointGrips</STRONG>.</para>
            <para>In essence, <STRONG>PointGrips</STRONG> is a collection of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> objects.</para>
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.#ctor">
            <summary> Creates a new instance of <STRONG>PointGrips</STRONG>. </summary>
            <overloads> Constructs a <STRONG>PointGrips</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.#ctor(System.Drawing.PointF[])">
            <summary> Creates a new instance of <STRONG>PointGrips</STRONG> specifying an array of points. </summary>
            <param name="points"> An array of points that will be used to generate <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> objects which
            are then added to the collection. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.#ctor(Atalasoft.Annotate.UI.AnnotationGrip[])">
            <summary> Creates a new instance of <STRONG>PointGrips</STRONG> specifying an array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/>
            objects. </summary>
            <param name="grips"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> objects to add to the collection. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.Add(Atalasoft.Annotate.UI.AnnotationGrip)">
            <summary> Adds an <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> to the collection. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the grip argument is null (Nothing in VB). </exception>
            <param name="grip"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.AddRange(Atalasoft.Annotate.UI.AnnotationGrip[])">
            <summary> Adds an array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> objects to the collection. </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the grips argument is null (Nothing in VB).</exception>
            <param name="grips"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> objects to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.Insert(System.Int32,Atalasoft.Annotate.UI.AnnotationGrip)">
            <summary> Inserts an <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> object into the collection at the specified index. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index value is out of range for this collection.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the grip argument is null (Nothing in VB).</exception>
            <param name="index"> The index where the grip will be placed. </param>
            <param name="grip"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> object to add. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.Clear">
            <summary> Clears the collection. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.IndexOf(Atalasoft.Annotate.UI.AnnotationGrip)">
            <summary> Returns the index of a grip within the collection. </summary>
            <returns> The index of the grip or -1 if the grip was not found in the collection. </returns>
            <exception cref="T:System.ArgumentNullException"> Thrown if the grip argument is null (Nothing in VB). </exception>
            <param name="grip"> The grip to search for. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.OffsetPoints(System.Single,System.Single)">
            <summary> Applies an offset to all of the grip positions. </summary>
            <param name="x"> The amount to offset the grip positions in the x-axis. </param>
            <param name="y"> The amount to offset the grip position in the y-axis. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.Remove(Atalasoft.Annotate.UI.AnnotationGrip)">
            <summary> Removes a grip from the collection. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the grip argument is null (Nothing in VB). </exception>
            <param name="grip"> The grip to remove. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.RemoveAt(System.Int32)">
            <summary> Removes a grip at the specified index from the collection. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index argument is out of range for this collection.</exception>
            <param name="index"> The index of the grip to remove. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.Replace(System.Int32,Atalasoft.Annotate.UI.AnnotationGrip)">
            <summary> Replaces a grip in the collection with another one. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index argument is out of range for this collection.</exception>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the newGrip argument is null (Nothing in VB).</exception>
            <param name="index"> The index of the grip to replace. </param>
            <param name="newGrip"> The new grip that will be used. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.GetRegion">
            <summary> Returns a region for the grips. </summary>
            <returns> A region for the annotation grips. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.GetEnumerator">
            <summary> Returns an <STRONG>IEnumerator</STRONG> for this grip collection. </summary>
            <returns> An <STRONG>IEnumerator</STRONG> for the collection. </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.GetGripBounds(Atalasoft.Annotate.UI.AnnotationGrip)">
            <summary> Returns a bounding rectangle for a single grip. </summary>
            <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the grip argument is null (Nothing in VB).</exception>
            <param name="grip"> The grip to get bounds from. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PointGrips.GripFromPoint(System.Drawing.PointF)">
            <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> located at a specified point. </summary>
            <returns> The <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> found at the specified point or <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in Visual Basic) if no grip exists at that point. </returns>
            <param name="point"> The point to search for a grip. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointGrips.Count">
            <summary> Returns the number of grips in the collection. </summary>
            <value> The number of grips in the collection. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointGrips.Bounds">
            <summary> Returns a bounding rectangle for all of the grips. </summary>
            <value> A bounding rectangle for the grips. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointGrips.Item(System.Int32)">
            <commentsfrom cref="P:Atalasoft.Annotate.UI.IAnnotationGrips.Item(System.Int32)" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointGrips.Fill">
            <commentsfrom cref="P:Atalasoft.Annotate.UI.IAnnotationGrips.Fill" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointGrips.Outline">
            <commentsfrom cref="P:Atalasoft.Annotate.UI.IAnnotationGrips.Outline" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointGrips.Size">
            <commentsfrom cref="P:Atalasoft.Annotate.UI.IAnnotationGrips.Size" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointGrips.RotationFill">
            <commentsfrom cref="P:Atalasoft.Annotate.UI.IAnnotationGrips.RotationFill" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PointGrips.RotationOutline">
            <commentsfrom cref="P:Atalasoft.Annotate.UI.IAnnotationGrips.RotationOutline" filter=""/>
        </member>
        <member name="T:Atalasoft.Annotate.UI.PolygonAnnotation">
            <summary> A <STRONG>PolygonAnnotation</STRONG> is a series of points used to draw a polygon with an optional fill.
            </summary>
            <remarks> <para>To generate a polygon, the user clicks the left mouse button to set each point. The user can stop
            adding points by clicking the right mouse button.</para>
            <para>A polygon requires at least three points in the Points collection.</para> </remarks>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.PolygonAnnotation&quot;]/*"/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>PolygonAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.PolygonData)">
            <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.PolygonData"/> for
            this annotation. </summary>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.PolygonData"/> for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)">
            <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline and fill. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.PointFCollection)">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill and points
            collection.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the initial points for the polygon in annotation
            space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
            <summary> <para>This overload is obsolete and may be removed in a future release.</para>
            <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill and an array of
            points.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="points"> An array of PointF objects specifying the initial points of the polygon in annotation space.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill and shadow
            settings. </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.PointFCollection)">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill, shadow settings and
            points of the polygon.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the initial points for the polygon in annotation
            space. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Drawing.PointF[])">
            <summary> <para><FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT></para>
            <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill, shadow settings and
            array of points for the polygon.</para> </summary>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="points"> An array of PointF objects specifying the initial points of the polygon in annotation space.
            </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
            <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying its fill, outline, shadow, shadow
            offset and translucent properties. </summary>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="translucent"> A value indicating whether the annotation will be translucent, giving it a highlighter
            effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
            <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the points, fill, outline, shadow,
            shadow offset and translucent properties. </summary>
            <param name="points"> An array of PointF objects specifying the initial points of the polygon in annotation space.
            </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="translucent"> A value indicating whether the annotation will be translucent, giving it a highlighter
            effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
            <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the point collection, fill,
            outline, shadow, shadow offset and translucent properties. </summary>
            <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the initial points for the polygon in annotation
            space. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for a drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="translucent"> A value indicating whether the annotation will be translucent, giving it a highlighter
            effect. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about the annotation. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>Returns a region for the PolygonAnnotation.</summary>
            <returns>The region for this annotation.</returns>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Bounds">
            <summary>
            Gets the bounding rectangle for the annotation.
            </summary>
            <value>
            The bounding rectangle for the annotation.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Translucent">
            <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
            <value> A value indicating whether this annotation is used as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)"/> method. </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Points">
            <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection"/> containing the points for this polygon in annotation space.
            </summary>
            <value> The points used by this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Outline">
            <summary> Gets or sets the outline for the annotation. </summary>
            <value> The outline of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Fill">
            <summary> Gets or sets the fill for the annotation. </summary>
            <value> The fill for the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </summary>
            <value> The fill for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.ShadowOffset">
            <summary> Gets or sets the drop shadow offset. </summary>
            <value> The offset specifying the position of the drop shadow. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.RectangleAnnotation">
            <summary> This is a rectangular annotation with an optional shadow brush. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>RectangleAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(Atalasoft.Annotate.RectangleData)">
            <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.RectangleData"/>.
            </summary>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.RectangleData"/> for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the fill and outline. </summary>
            <param name="fill"> The fill used for the annotation. </param>
            <param name="outline"> The outline used for the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the fill, outline and shadow
            options. </summary>
            <param name="fill"> The fill for the annotation. </param>
            <param name="outline"> The outline for the annotation. </param>
            <param name="shadow"> The shadow brush for the annotation. </param>
            <param name="shadowOffset"> The offset used for the shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the rectangle, fill and outline.
            </summary>
            <param name="rectangle"> The rectangle for the annotation. </param>
            <param name="fill"> The fill for this annotation. </param>
            <param name="outline"> The outline for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the rectangle, fill, outline and
            shadow options. </summary>
            <param name="rectangle"> The rectangle for the annotation. </param>
            <param name="fill"> The fill for the annotation. </param>
            <param name="outline"> The outline for the annotation. </param>
            <param name="shadow"> The shadow brush for the annotation. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> from serialized data. </summary>
            <param name="info"> A SerializationInfo object containing the information for this annotation. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>
            Returns a rectangular region for this annotation, including its grips if
            selected.
            </summary>
            <param name="space">The space coordinate system used to generate this region.</param>
            <returns>
            The region of this annotation in the specified space.
            </returns>
            <example>
            The following is an example of how a custom annotation may override the
              <strong>GetRegion</strong> method.
              <code lang="CS" title="GetRegionCS">
            public override AnnotationRegion GetRegion(AnnotateSpace space)
            {
            Create the region in annotation space.
            AnnotationRegion reg = new AnnotationRegion(new RectangleF(PointF.Empty, _data.Size));
            if (this.Selected &amp;&amp; this.Grips != null)
            AddGripsToRegion(reg);
            ApplyRegionTransform(reg, space);
            return reg;
            }
              </code>
              <code lang="VB" title="GetRegionVB">
            Public Overrides Function GetRegion(ByVal space As AnnotateSpace) As AnnotationRegion
            ' Create the region in annotation space.
            Dim reg As AnnotationRegion =  New AnnotationRegion(New RectangleF(PointF.Empty,_data.Size))
            If Not Me.Selected And Me.Grips Is Nothing Then
            AddGripsToRegion(reg)
            End If
            ApplyRegionTransform(reg, space)
            Return reg
            End Function
              </code>
              </example>
              <overloads>
              <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationUI~GetRegion&quot;]/*"/>
              </overloads>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Shadow">
            <summary>Gets or sets the AnnotationBrush used draw the drop shadow.</summary>
            <value>The AnnotationBrush used for the drop shadow.</value>
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used draw the drop shadow. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Fill">
            <summary>Gets or sets the fill used for the annotation.</summary>
            <value>The AnnotationBrush used to fill the annotation.</value>
            <summary> Gets or sets the fill used for the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Outline">
            <summary>Gets or sets the outline of the annotation.</summary>
            <value>The AnnotationPen used to draw the outline of the annotation.</value>
            <summary> Gets or sets the outline of the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.ShadowOffset">
            <summary>Gets or sets the shadow offset.</summary>
            <value>The offset used to specifying the position of the drop shadow.</value>
            <summary> Gets or sets the shadow offset. </summary>
            <value> The offset used to specifying the position of the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Translucent">
            <summary>
            Gets or sets a value indicating whether this annotation is used as a
            highlighter.
            </summary>
            <value>A value indicating whether this annotation is used as a highlighter.</value>
            <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
            <value> A value indicating whether this annotation is used as a highlighter. </value>
            <remarks> Setting <STRONG>Translucent</STRONG> to <STRONG>true</STRONG> will disable rotation for the annotation. 
            This also affects the behavior of the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)"/> method. </remarks>
        </member>
        <member name="T:Atalasoft.Annotate.UI.RectangleGrips">
            <summary>
            This class represents a group of AnnotationGrip objects for rectangular shaped
            annotations.
            </summary>
            <summary> This class represents a group of <STRONG>AnnotationGrip</STRONG> objects for rectangular shaped
            annotations. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.RectangleGrips._gripsToDisplay">
            <summary> Gets or sets the grips to display. </summary>
            <value> The grips to display. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.RectangleGrips._aspectRatio">
            <summary> Gets or sets a value used for the width-to-height ratio. </summary>
            <value> The width-to-height ratio for the annotation. A value of zero will disable this feature. </value>
            <remarks> Use this property to force annotation resizing to maintain a specific aspect ratio. The height of the
            annotation is calculated by multiplying the annotation width by this aspect ratio value. </remarks>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.RectangleGrips~AspectRatio&quot;]/*"/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleGrips.#ctor">
            <summary> Creates a new instance of <STRONG>RectangleGrips</STRONG>. </summary>
            <overloads> Constructs a <STRONG>RectangleGrips</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleGrips.#ctor(Atalasoft.Annotate.RectangleGripDisplay)">
            <summary> Creates a new instance of <STRONG>RectangleGrips</STRONG> specifying the grips to display. </summary>
            <param name="gripsToDisplay"> The grips to display. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleGrips.PrepareGrips">
            <summary>Initializes the grips.</summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleGrips.GetGripDefinition(Atalasoft.Annotate.UI.AnnotationGrip)">
            <summary> Returns which rectangle grip the <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip"/> object represents. </summary>
            <returns> A <see cref="T:Atalasoft.Annotate.RectangleGrip"/> value for this grip. </returns>
            <param name="grip"> The grip to lookup. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RectangleGrips.UpdatePositions(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary> Forces the grips to reset their positions based on a bounding rectangle. </summary>
            <param name="bounds"> A bounding rectangle defining the grip locations. </param>
            <param name="resolution"> The viewer resolution. </param>
            <param name="scale"> The scale (zoom) of the viewer. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RectangleGrips.GripsToDisplay">
            <summary> Gets or sets the grips to display. </summary>
            <value> The grips to display. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RectangleGrips.ShowRotationGrips">
            <summary> Gets or sets a value indicating whether rotation grips are displayed. </summary>
            <value> A value indicating whether rotation grips are displayed. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RectangleGrips.AspectRatio">
            <summary> Gets or sets a value used for the width-to-height ratio. </summary>
            <value> The width-to-height ratio for the annotation. A value of zero will disable this feature. </value>
            <remarks> Use this property to force annotation resizing to maintain a specific aspect ratio. The height of the
            annotation is calculated by multiplying the annotation width by this aspect ratio value. </remarks>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.RectangleGrips~AspectRatio&quot;]/*"/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RectangleGrips.Rectangle">
            <summary> Gets the bounding rectangle of the grips. </summary>
        </member>
        <member name="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation">
            <summary> This annotation references a local image by filename. When viewing this annotation on multiple systems,
            the image file must be provided at the same location of each system. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>ReferencedImageAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(Atalasoft.Annotate.ReferencedImageData)">
            <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the annotation data.
            </summary>
            <param name="data"> A <see cref="T:Atalasoft.Annotate.ReferencedImageData"/> object for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename of the image.
            </summary>
            <param name="fileName"> The filename of the image for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String,System.Boolean)">
            <summary> Creates an instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename of the image and
            indicating whether the aspect ratio should be maintained. </summary>
            <param name="fileName"> The filename of the image for this annotation. </param>
            <param name="keepAspectRatio"> Indicates if the image ratio is maintained. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String,System.Boolean,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename, location and
            whether the aspect ratio should be maintained. </summary>
            <param name="fileName"> The filename of the image for this annotation. </param>
            <param name="keepAspectRatio"> Indicates if the image ratio is maintained. </param>
            <param name="location"> The location of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String,System.Boolean,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename, initial
            location, shadow, shadow offset and indicates whether the image aspect ratio should be maintained. </summary>
            <param name="fileName"> The filename of the image for this annotation. </param>
            <param name="keepAspectRatio"> Indicates if the image ratio is maintained. </param>
            <param name="location"> The location of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> from serialized information.
            </summary>
            <param name="info"> The SerializationInfo object containing information for this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose">
            <summary> Releases resources used by the annotation. </summary>
            <overloads> Disposes the <STRONG>ReferencedImageAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose(System.Boolean)">
            <summary> Called by <see cref="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose"/> or the finalizer to release resources.
            </summary>
            <param name="disposing"> A value indicating whether this method was called from <see cref="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose"/> or the finalizer. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Fills a SerializationInfo object with information about this annotation.
            </summary>
            <param name="info">The SerializationInfo where data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
            <summary>
            Returns a rectangular region for this annotation, including its grips if
            selected.
            </summary>
            <param name="space">The space coordinate system used to generate this region.</param>
            <returns>
            The region of this annotation in the specified space.
            </returns>
            <example>
            The following is an example of how a custom annotation may override the
              <strong>GetRegion</strong> method.
              <code lang="CS" title="GetRegionCS">
            public override AnnotationRegion GetRegion(AnnotateSpace space)
            {
            Create the region in annotation space.
            AnnotationRegion reg = new AnnotationRegion(new RectangleF(PointF.Empty, _data.Size));
            if (this.Selected &amp;&amp; this.Grips != null)
            AddGripsToRegion(reg);
            ApplyRegionTransform(reg, space);
            return reg;
            }
              </code>
              <code lang="VB" title="GetRegionVB">
            Public Overrides Function GetRegion(ByVal space As AnnotateSpace) As AnnotationRegion
            ' Create the region in annotation space.
            Dim reg As AnnotationRegion =  New AnnotationRegion(New RectangleF(PointF.Empty,_data.Size))
            If Not Me.Selected And Me.Grips Is Nothing Then
            AddGripsToRegion(reg)
            End If
            ApplyRegionTransform(reg, space)
            Return reg
            End Function
              </code>
              </example>
              <overloads>
              <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.DotAnnotate~Atalasoft.Annotate.UI.AnnotationUI~GetRegion&quot;]/*"/>
              </overloads>
        </member>
        <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.HitTestRectangle">
            <summary>
            Gets a rectangle used for hit testing or <STRONG>RectangleF.Empty</STRONG> to use the default hit testing
            method.
            </summary>
            <value>
            A rectangle to use for hit testing or RectangleF.Empty to indicate that the default hit testing method
            should be used.
            </value>
            <remarks>
            The default hit testing method will ignore transparent areas of the annotation.  This property can be used
            to override this behavior.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.AllowClickThrough">
            <summary> Gets or sets a value indicating whether mouse clicks will pass through transparent areas of the image.
            </summary>
            <value> A value indicating whether mouse clicks pass through transparent areas. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.FileName">
            <summary> Gets or sets the filename of the annotation image. </summary>
            <value> The filename of the image for this annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Shadow">
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used draw the drop shadow. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.ShadowOffset">
            <summary>Gets or sets the shadow offset.</summary>
            <value>The offset used to specifying the position of the drop shadow.</value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.KeepAspectRatio">
            <summary> Gets or sets a value indicating whether the image ratio is maintained while resizing. </summary>
            <value> Indicates if the image ratio is maintained. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.RubberStampAnnotation">
            <summary> This annotation provides a text message with a rounded rectangle outline similar to a rubber stamp.
            </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.RubberStampAnnotation._allowClickThrough">
            <summary> Gets or sets a value indicating whether mouse clicks will pass through transparent areas of the
            annotation. </summary>
            <value> A value indicating whether mouse clicks will pass through transparent areas. </value>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(Atalasoft.Annotate.RubberStampData)">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> providing the <see cref="T:Atalasoft.Annotate.RubberStampData"/> used by the annotation. </summary>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.RubberStampData"/> used by this annotation. </param>
            <overloads> Constructs a <STRONG>RubberStampAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the annotation text.
            </summary>
            <param name="text"> The annotation text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the text and font. </summary>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying its parameters. </summary>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
            <param name="fontBrush"> The brush used for the text. </param>
            <param name="fill"> The fill for the annotation. </param>
            <param name="outline"> The outline for the annotation. </param>
            <param name="cornerRadius"> A value providing the rounding radius of the rectangle corners. </param>
            <param name="padding"> Padding applied around the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF)">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the rectangle. </summary>
            <param name="bounds"> The rectangle for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the rectangle and text.
            </summary>
            <param name="bounds"> The rectangle for this annotation. </param>
            <param name="text"> The text for this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the rectangle, text and font.
            </summary>
            <param name="bounds"> The rectangle for the annotation. </param>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the annotation parameters.
            </summary>
            <param name="bounds"> The rectangle for the annotation. </param>
            <param name="text"> The text for the annotation. </param>
            <param name="font"> The font used to render the text. </param>
            <param name="fontBrush"> The brush used for the text. </param>
            <param name="fill"> The fill for the annotation. </param>
            <param name="outline"> The outline for the annotation. </param>
            <param name="cornerRadius"> A value providing the rounding radius of the rectangle corners. </param>
            <param name="padding"> Padding applied around the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> from serialized information. </summary>
            <param name="info"> The SerializationInfo object containing the annotation information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Fills a SerializationInfo object with information about this annotation.
            </summary>
            <param name="info">The SerializationInfo where data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.HitTestRectangle">
            <summary>
            Gets a rectangle used for hit testing or <STRONG>RectangleF.Empty</STRONG> to use the default hit testing
            method.
            </summary>
            <value>
            A rectangle to use for hit testing or RectangleF.Empty to indicate that the default hit testing method
            should be used.
            </value>
            <remarks>
            The default hit testing method will ignore transparent areas of the annotation.  This property can be used
            to override this behavior.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.AllowClickThrough">
            <summary> Gets or sets a value indicating whether mouse clicks will pass through transparent areas of the
            annotation. </summary>
            <value> A value indicating whether mouse clicks will pass through transparent areas. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.CornerRadius">
            <summary>
            Gets or sets the corner radius.
            </summary>
            <value>
            The corner radius.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Padding">
            <summary> Gets or sets the padding around the text. </summary>
            <value> Padding applied around the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Text">
            <summary>Gets or sets the text for this annotation.</summary>
            <value>The annotation text.</value>
            <summary> Gets or sets the text for this annotation. </summary>
            <value> The annotation text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.FontBrush">
            <summary>Gets or sets the AnnotationBrush used for the font.</summary>
            <value>The brush used when rendering the text.</value>
            <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the font. </summary>
            <value> The brush used when rendering the text. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Fill">
            <summary>Gets or sets the fill used for the annotation.</summary>
            <value>The AnnotationBrush used to fill the annotation.</value>
            <summary> Gets or sets the fill used for the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Outline">
            <summary>Gets or sets the outline of the annotation.</summary>
            <value>The AnnotationPen used to draw the outline of the annotation.</value>
            <summary> Gets or sets the outline of the annotation. </summary>
            <value> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to draw the outline of the annotation. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Font">
            <summary>Gets or sets the font for the text.</summary>
            <value>The font used when rendering the text.</value>
            <summary> Gets or sets the font for the text. </summary>
            <value> The font used when rendering the text. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs">
            <summary> This class is used with the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)"/> method. </summary>
        </member>
        <member name="F:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs._previousPosition">
            <summary> Gets the previous scroll position. </summary>
            <value> The previous scroll position. </value>
        </member>
        <member name="F:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs._newPosition">
            <summary> Gets the new scroll position. </summary>
            <value> The new scroll position. </value>
        </member>
        <member name="M:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary> Creates a new instance of <STRONG>ScrollPositionChangedEventArgs</STRONG>. </summary>
            <param name="previousPosition"> The previous scroll position. </param>
            <param name="newPosition"> The new scroll position. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs.PreviousPosition">
            <summary> Gets the previous scroll position. </summary>
            <value> The previous scroll position. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs.NewPosition">
            <summary> Gets the new scroll position. </summary>
            <value> The new scroll position. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.TextAnnotation">
            <summary> This annotation displays text which can be edited by the user. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Annotate.UI.TextAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor">
            <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG>. </summary>
            <overloads> Constructs a <STRONG>TextAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(Atalasoft.Annotate.TextData)">
            <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.TextData"/> object
            used for this annotation. </summary>
            <param name="data"> The <see cref="T:Atalasoft.Annotate.TextData"/> object used by this annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the annotation text. </summary>
            <param name="text"> The text for the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
            <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the text and font. </summary>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
            <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
            <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the properties for this object.
            </summary>
            <param name="text"> The text for this annotation. </param>
            <param name="font"> The font used for rendering the text. </param>
            <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for rendering the text. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used to fill the background of the annotation. </param>
            <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen"/> used to render the outline of the annotation. </param>
            <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush"/> used for the drop shadow. </param>
            <param name="shadowOffset"> The offset for the shadow. </param>
            <param name="shadowMode"> The type of shadow to render. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> from serialized information. </summary>
            <param name="info"> The SerializationInfo object containing information for this object. </param>
            <param name="context"> A StreamingContext for the information. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Fills a SerializationInfo object with information about this annotation.
            </summary>
            <param name="info">The SerializationInfo where data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Dispose">
            <summary> Releases resources used by the annotation. </summary>
            <overloads> Disposes the <STRONG>TextAnnotation</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Clone">
            <summary>
            Creates a copy of this annotation.
            </summary>
            <returns>
            A copy of this <STRONG>AnnotationUI</STRONG>.
            </returns>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Dispose(System.Boolean)">
            <summary> Releases resources used by the annotation. </summary>
            <param name="disposing"> Indicates if this method is called from the public <see cref="M:Atalasoft.Annotate.UI.TextAnnotation.Dispose"/>
            method. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnDoubleClick(System.EventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnDoubleClick(System.EventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnSelectedChanged(System.EventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnSelectedChanged(System.EventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnResizing(System.EventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnResizing(System.EventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnRotating(System.EventArgs)">
            <summary>
            Called while an annotation is being rotated by the user.
            </summary>
            <param name="e">An EventArgs for this event.</param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
            <commentsfrom cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)" filter=""/>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.ShowEditDialog">
            <summary> Displays an edit control in the viewer to allow text to be edited. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.HideEditDialog">
            <summary> Removes the edit control from the viewer. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TextAnnotation.CreateFont(Atalasoft.Annotate.AnnotationFont)">
            <summary> Creates a <STRONG>System.Drawing.Font</STRONG> from an <see cref="T:Atalasoft.Annotate.AnnotationFont"/>. </summary>
            <param name="annFont"> The <see cref="T:Atalasoft.Annotate.AnnotationFont"/> used to create the Font. </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AutoSelectOnEdit">
            <summary> Gets or sets a value indicating whether the text is automatically selected when the annotation is put into
            'Edit' mode. </summary>
            <value> Indicates if the text is automatically selected when switched to 'Edit' mode. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.RenderingHint">
            <summary>
            Gets or sets the rendering hint.
            </summary>
            <value>
            The rendering hint.
            </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.HitTestRectangle">
            <summary>
            Gets a rectangle used for hit testing or <STRONG>RectangleF.Empty</STRONG> to use the default hit testing
            method.
            </summary>
            <value>
            A rectangle to use for hit testing or RectangleF.Empty to indicate that the default hit testing method
            should be used.
            </value>
            <remarks>
            The default hit testing method will ignore transparent areas of the annotation.  This property can be used
            to override this behavior.
            </remarks>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AllowClickThrough">
            <summary> Gets or sets a value indicating whether mouse clicks can pass through transparent areas of the annotation.
            </summary>
            <value> A value indicating whether mouse clicks pass through transparent areas. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AllowEditing">
            <summary> Gets or sets a value indicating whether double-clicking on the annotation will switch into edit mode.
            </summary>
            <value> A value indicating whether double-clicking on the annotation will switch into edit mode. </value>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AutoSize">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.AutoSize" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Padding">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.Padding" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.FormatFlags">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.FormatFlags" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Trimming">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.Trimming" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.LineAlignment">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.LineAlignment" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Alignment">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.Alignment" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Text">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.Text" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.FontBrush">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.FontBrush" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Font">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.Font" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Shadow">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.Shadow" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Fill">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.Fill" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Outline">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.Outline" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.ShadowOffset">
            <commentsfrom cref="P:Atalasoft.Annotate.TextData.ShadowOffset" filter=""/>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TextAnnotation.EditMode">
            <summary> Gets or sets a value indicating whether the annotation text is currently in edit mode. </summary>
            <value> A value indicating whether the annotation text is in edit mode. </value>
        </member>
        <member name="T:Atalasoft.Annotate.UI.TransparentRichTextBox">
            <summary> This class is used by the <see cref="T:Atalasoft.Annotate.UI.TextAnnotation"/> and <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation"/> for editing
            text. </summary>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TransparentRichTextBox.#ctor(System.Boolean)">
            <summary> Creates a new instance of <STRONG>TransparentRichTextBox</STRONG>. </summary>
            <param name="transparentBackground"> Indicates if the textbox will have a transparent background. </param>
        </member>
        <member name="M:Atalasoft.Annotate.UI.TransparentRichTextBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary> <para>Paints the background of the control.</para> </summary>
            <param name="pevent"> A <STRONG>PaintEventArgs</STRONG> that contains information about the control to paint.
            </param>
        </member>
        <member name="P:Atalasoft.Annotate.UI.TransparentRichTextBox.CreateParams">
            <summary> Gets the required creation parameters when the control handle is created. </summary>
            <value> A CreateParams object that contains the required creation parameters when the handle to the control is
            created. </value>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaFile64Stream">
            <summary> A custom Stream object that is used to read and write images to a file.  This is the default stream object
            used when specifying filenames for images. Deprecated, use StreamHandler64 in preferance to this class. </summary>
            <remarks> This File Stream object is approximately 20% faster than the <STRONG>System.IO.FileStream </STRONG>object
            for loading images. </remarks>
            ATTENTION: Is the above remark still true given newer versions of the CLR? mkalininskij
        </member>
        <member name="T:Atalasoft.Imaging.AtalaFileStream">
            <summary> A custom Stream object that is used to read and write images to a file.  This is the default stream object
            used when specifying filenames for images. Deprecated, use AtalaFile64Stream in preferance to this class.</summary>
            <remarks> This File Stream object is approximately 20% faster than the <STRONG>System.IO.FileStream </STRONG>object
            for loading images. </remarks>
            ATTENTION: Is the above remark still true given newer versions of the CLR? mkalininskij
        </member>
        <member name="F:Atalasoft.Imaging.AtalaFileStream.Source">
            <summary> Gets the unmanaged handle to the file stream. </summary>
            <value> The unmanaged handle to the file stream. </value>
        </member>
        <member name="F:Atalasoft.Imaging.AtalaFileStream.CanReadAFS">
            <summary> Gets a value indicating if the stream can be read. </summary>
            <value> A value indicating if the stream can be read. </value>
            <value> A value indicating whether the stream can be read. </value>
        </member>
        <member name="F:Atalasoft.Imaging.AtalaFileStream.CanWriteAFS">
            <summary> Gets a value indicating if the stream can be written to. </summary>
            <value> A value indicating if the stream can be written to. </value>
            <value> A value indicating whether the stream can be written to. </value>
        </member>
        <member name="F:Atalasoft.Imaging.AtalaFileStream.CanSeekAFS">
            <value> A value indicating if the steam is seekable. </value>
            <summary> Gets a value indicating if the steam is seekable. </summary>
            <value> A value indicating whether the stream can seek. </value>
            <remarks> This property also indicates whether the <see cref="P:Atalasoft.Imaging.AtalaFileStream.Length"/> and <see cref="P:Atalasoft.Imaging.AtalaFileStream.Position"/> properties can be
            used. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.AtalaFileStream.Access">
            <summary> Determines whether this stream is a source or destination stream. </summary>
            <value> The read-only, source or read/write, destination nature of the stream. </value>
        </member>
        <member name="F:Atalasoft.Imaging.AtalaFileStream.name">
            <summary> Gets the name of the file for this stream. </summary>
            <value> The name of the file for this stream. </value>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary> Initializes a new instance of <STRONG>AtalaFileStream</STRONG>. </summary>
            <param name="fileName"> The file name that this stream will write to or read from. </param>
            <param name="fileMode"> Specifies how the operating system should open the file to read or write. </param>
            <param name="fileAccess"> Specified if the file is read, write, or read/write. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Close">
            <summary> Closes the stream. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Dispose">
            <summary> This will dispose of any resources used by the stream. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Flush">
            <summary> Forces any unwritten data to be committed. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary> Reads data from the stream into a byte array. </summary>
            <returns> The number of bytes read. </returns>
            <param name="buffer"> The byte array that will hold the image data. </param>
            <param name="offset"> The starting position in the byte array to begin storing data. </param>
            <param name="count"> The number of bytes to read. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek">
            <summary> Moves the file pointer to the beginning of the stream. </summary>
            <returns> The new position within the file. </returns>
            <overloads> Moves the file pointer for an open stream. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary> Moves the file pointer to a specific position within the stream. </summary>
            <returns> The new position within the file. </returns>
            <param name="offset"> The number of bytes to move the pointer, up to a maximum value of 2^31 - 1. </param>
            <param name="origin"> Specifies whether the <EM>offset</EM> is from the beginning, end or current position. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary> Writes data to the stream. </summary>
            <param name="buffer"> A byte array containing the data to write. </param>
            <param name="offset"> The starting position within the buffer to begin writing from. </param>
            <param name="count"> The number of bytes to write. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.SetLength(System.Int64)">
            <summary> Sets the size of the stream. </summary>
            <remarks> If the <EM>length</EM> is less than the current stream size, data on the end of the stream will be
            truncated. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Name">
            <summary> Gets the name of the file for this stream. </summary>
            <value> The name of the file for this stream. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.CanRead">
            <summary> Gets a value indicating if the stream can be read. </summary>
            <value> A value indicating if the stream can be read. </value>
            <value> A value indicating whether the stream can be read. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.CanWrite">
            <summary> Gets a value indicating if the stream can be written to. </summary>
            <value> A value indicating if the stream can be written to. </value>
            <value> A value indicating whether the stream can be written to. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.CanSeek">
            <value> A value indicating if the steam is seekable. </value>
            <summary> Gets a value indicating if the steam is seekable. </summary>
            <value> A value indicating whether the stream can seek. </value>
            <remarks> This property also indicates whether the <see cref="P:Atalasoft.Imaging.AtalaFileStream.Length"/> and <see cref="P:Atalasoft.Imaging.AtalaFileStream.Position"/> properties can be
            used. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Length">
            <summary> Gets the length of the stream in bytes. </summary>
            <value> The length of the stream in bytes, up to a maximum value of 2^31 - 1. </value>
            <remarks> The <see cref="P:Atalasoft.Imaging.AtalaFileStream.CanSeek"/> property must return true before you can get the length of the stream.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Position">
            <summary> Gets the current position of the stream pointer. </summary>
            <value> The current position of the stream pointer, up to a maximum value of 2^31 - 1. </value>
            <remarks> The <see cref="P:Atalasoft.Imaging.AtalaFileStream.CanSeek"/> property must return true before you can access the Position of the stream.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Handle">
            <summary> Gets or sets the unmanaged handle to the file stream. </summary>
            <value> The unmanaged handle to the file stream. </value>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFile64Stream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary> Initializes a new instance of <STRONG>AtalaFileStream</STRONG>. </summary>
            <param name="fileName"> The file name that this stream will write to or read from. </param>
            <param name="fileMode"> Specifies how the operating system should open the file to read or write. </param>
            <param name="fileAccess"> Specified if the file is read, write, or read/write. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFile64Stream.Close">
            <summary> Closes the stream. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFile64Stream.Seek">
            <summary> Moves the file pointer to the beginning of the stream. </summary>
            <returns> The new position within the file. </returns>
            <overloads> Moves the file pointer for an open stream. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFile64Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary> Moves the file pointer to a specific position within the stream. </summary>
            <returns> The new position within the file </returns>
            <param name="offset"> The number of bytes to move the pointer, up to a maximum value of 2^31 - 1. </param>
            <param name="origin"> Specifies whether the <EM>offset</EM> is from the beginning, end or current position. </param>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFile64Stream.Length">
            <summary> Gets the length of the stream in bytes. </summary>
            <value> The length of the stream in bytes. </value>
            <remarks> The <see cref="P:Atalasoft.Imaging.AtalaFileStream.CanSeek"/> property must return true before you can get the length of the stream.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFile64Stream.Position">
            <summary> Gets the current position of the stream pointer. </summary>
            <value> The current position of the stream pointer. </value>
            <remarks> The <see cref="P:Atalasoft.Imaging.AtalaFileStream.CanSeek"/> property must return true before you can access the Position of the stream.
            </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaImage">
            <summary> The <STRONG>AtalaImage</STRONG> object holds the raw image data, a <STRONG>Palette</STRONG>, and methods
            used to access this data. </summary>
            <remarks> <para>Image data is stored in a 32-bit row aligned buffer.  See <see cref="M:Atalasoft.Imaging.AtalaImage.ToDib"/> and <see cref="M:Atalasoft.Imaging.AtalaImage.FromDib(System.IntPtr,System.Boolean)"/> for methods that will export or import from a DIB (Device Independent Bitmap).</para>
            <para>The <STRONG>AtalaImage</STRONG> is used throughout <EM>DotImage</EM> and is similar to the
            <STRONG>Bitmap</STRONG> object in .NET.</para> </remarks>
            <example>
<code lang="CS" title="Create an AtalaImage from a file (C#)"><![CDATA[
AtalaImage image = new AtalaImage("image.png");
]]></code>

<code lang="VB" title="Create an AtalaImage from a file (Visual Basic)"><![CDATA[
Dim image As AtalaImage = New AtalaImage("image.png")
]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.OnChangePixelFormat(Atalasoft.Imaging.PixelFormatChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ChangePixelFormat"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Imaging.PixelFormatChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates an instance of an <STRONG>AtalaImage</STRONG>, with serialization info. </summary>
            <overloads> Creates a new instance of AtalaImage. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Used to serialize this <STRONG>AtalaImage</STRONG>. </summary>
            <remarks> <STRONG>AtalaImage</STRONG> objects are serialized as PNG images. </remarks>
            <param name="info"> The SerializationInfo object used to store this <STRONG>AtalaImage</STRONG>. </param>
            <param name="context"> The <STRONG>StreamingContext</STRONG> for this serialization. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImage"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary> Initialize a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImage"/> class specifying the Width, Height, and PixelFormat.
            </summary>
            <remarks> The image data is not set to a particular color and might end up with some noise in the image.  See the
            overload with a specific color or palette index to fill the background with a specified color. </remarks>
            <param name="width"> Width of the image. </param>
            <param name="height"> Height of the image. </param>
            <param name="pixelFormat"> PixelFormat of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Drawing.Color)">
            <summary> Initialize a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImage"/> class specifying the Width, Height, PixelFormat, and Color
            to initialize the image background to. </summary>
            <param name="width"> Width of the image. </param>
            <param name="height"> Height of the image. </param>
            <param name="pixelFormat"> PixelFormat of the image. </param>
            <param name="fillColor"> The color to fill the image with. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImage"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format.</param>
            <param name="fillPaletteIndex">Index of the fill palette.</param>
            <exception cref="T:System.ArgumentException">
            Pixel Format must contain a palette when specifying the palette index to fill the image with.
            or
            Palette Index must be 0 or 1 for 1-bit images;fillPaletteIndex
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(Atalasoft.Imaging.Memory.PixelMemory,System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary> Initialize a new instance of the %AtalaImage% class specifying the PixelMemory, Width, Height, and
            PixelFormat. </summary>
            <param name="memory"> A PixelMemory object that represents an image's memory </param>
            <param name="width"> Width of the image. </param>
            <param name="height"> Height of the image. </param>
            <param name="pixelFormat"> PixelFormat of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String)">
            <summary>
            Initialize a new instance of a <see cref="T:Atalasoft.Imaging.AtalaImage"/> class specifying the file of the image to open.
            </summary>
            <param name="fileName">The path of the file to open.</param>
            <remarks> A URL formatted string can be passed to download a file.  If the address is pointing to an FTP site, you
            may need to include the username and password in the URL to allow access to the file. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Initialize a new instance of an <STRONG>AtalaImage</STRONG> class specifying an image file and a page
            index to decode. </summary>
            <param name="fileName"> The path of the file to open. </param>
            <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Initialize a new instance of a <see cref="T:Atalasoft.Imaging.AtalaImage"/> class specifying the file of the image to open.
            </summary>
            <param name="fileName">The path of the file to open.</param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
            <remarks> A URL formatted string can be passed to download a file.  If the address is pointing to an FTP site, you
            may need to include the username and password in the URL to allow access to the file.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String,System.Int32,System.Boolean,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Initialize a new instance of a <see cref="T:Atalasoft.Imaging.AtalaImage"/> class specifying the file of the image to open.
            Private -- only used in FromURL
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="frameIndex">Index of the frame.</param>
            <param name="cacheOnClient">if set to <c>true</c> cache on the client.</param>
            <param name="progress">The progress handler.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream)">
            <summary> Initialize a new instance of a <STRONG>AtalaImage</STRONG> class specifying a <STRONG>Stream</STRONG>.
            </summary>
            <remarks> The stream passed in can be a <STRONG>FileStream</STRONG>, <STRONG>MemoryStream</STRONG>, or other
            seekable stream.  The appropriate <STRONG>ImageDecoder</STRONG> will be used to read the image. </remarks>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Initialize a new instance of an <STRONG>AtalaImage</STRONG> class specifying an image
            <STRONG>Stream</STRONG> and a page index to decode. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.Codec.ImageDecoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Initialize a new instance of an <STRONG>AtalaImage</STRONG> class specifying a <STRONG>Stream</STRONG>,
            <STRONG>ImageDecoder</STRONG> to use for decoding the image, and a progress delegate. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
            <param name="decoder"> The <STRONG>ImageDecoder</STRONG> to use for loading the specified encoded image. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Initialize a new instance of a %AtalaImage% class specifying a <see cref="T:System.IO.Stream"/> and a progress
            delegate. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder)">
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
            <summary> Returns a byte array containing an encoded image. </summary>
            <returns> A byte array containing an encoded image. </returns>
            <overloads> Saves this AtalaImage into a byte array. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <returns> A byte array containing an encoded image. </returns>
            <summary> Returns a byte array containing an encoded image. </summary>
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[])">
            <summary> Creates a new <STRONG> AtalaImage</STRONG>    from a byte array containing an encoded image. </summary>
            <param name="buffer"> A byte array containing the encoded image. </param>
            <overloads> Creates a new <STRONG>AtalaImage</STRONG> from an image stored in a byte array. </overloads>
            <remarks> Another method of accomplishing the same thing would be to create a <STRONG>MemoryStream</STRONG> from the
            byte array, and passing it into the <STRONG>AtalaImage</STRONG> constructor with a stream.  This method was added
            for convenience. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[],Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Creates a new <STRONG></STRONG>AtalaImage from a byte array containing an encoded image. </summary>
            <param name="buffer"> A byte array containing the encoded image. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromURL(System.String,System.Int32,System.Boolean,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> loaded from the url.
            </summary>
            <param name="url">A URL to an image</param>
            <param name="frameIndex">The frame of the image to load from a multi-framed image.</param>
            <param name="cacheOnClient">true if you want to cache the image in the local Windows Temporary Internet Files folder.</param>
            <param name="progress">A handler to receive progress events while loading the image.</param>
            <returns>The <see cref="T:Atalasoft.Imaging.AtalaImage"/> loaded from this URL.</returns>		
            <overloads> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> decoded from a specified URL path. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromURL(System.String,System.Boolean,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> loaded from the url.
            </summary>
            <returns>The <see cref="T:Atalasoft.Imaging.AtalaImage"/> loaded from this URL.</returns>	
            <param name="url"> The URL string </param>
            <param name="cacheOnClient"> When true, will cache the data on the client, using the IE Local cache </param>
            <param name="progress"> A progress delegate </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary> Fills a specified rectangle in this image with a specified solid color. </summary>
            <param name="rect"> The rectangular area to fill. </param>
            <param name="fillColor"> The color of the fill area. </param>
            <remarks> This method is faster then using the Drawing namespace to draw a simple solid rectangle. </remarks>
            <overloads> Fills a rectangular area of an <STRONG>AtalaImage</STRONG> with a solid color. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Int32)">
            <summary> Fills a specified rectangle in this image with a specified index. </summary>
            <param name="rect"> The rectangular area to fill. </param>
            <param name="fillIndex"> The palette index or grayscale value to fill. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsColormapped(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns <B>true</B> if the specified <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> contains a palette. </summary>
            <returns> <B>True</B> if this AtalaImage contains a palette, <B>false</B> if it does not. </returns>
            <param name="pixelFormat"> The <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> to use when determining if there is an palette. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelFormatDepth(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns the color depth in bits per pixels associated with a specified <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/>. </summary>
            <returns> The color depth in bits per pixels associated with a specified <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/>. </returns>
            <overloads>
            <example>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
int bd = AtalaImage.GetPixelFormatDepth(PixelFormat.Pixel16bppGrayscale);
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
Dim bd As Integer = AtalaImage.GetPixelFormatDepth(PixelFormat.Pixel16bppGrayscale)
]]></code>
</example>
            </overloads>
            <param name="pixelFormat"> The <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> to retrieve the color depth from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsTwoBytePerComponent(Atalasoft.Imaging.PixelFormat)">
            <summary> This method can be used to determine if a PixelFormat is a "Two Byte Per Component" image format.
            </summary>
            <returns> True if the <EM>pixelFormat</EM> parameter is a "Two Byte Per Component" image format. </returns>
            <param name="pixelFormat"> The PixelFormat to test. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsContinuous(Atalasoft.Imaging.PixelFormat)">
            <summary> <para>Returns <STRONG>true</STRONG> if the <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> passed in is a continuous-tone format. </para>
            </summary>
            <returns> <B>true</B> if continuous, <B>false</B> if not. </returns>
            <remarks> <para>A continuous-tone pixel format means that the pixel value is the intentity of the color or channel
            value.  Colormapped images are not continuous.</para> </remarks>
            <param name="pixelFormat"> The <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> to test for continuous-tone. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatHasAlpha(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns <EM>true</EM> if the specified <STRONG>PixelFormat</STRONG> contains an alpha channel. </summary>
            <returns> <EM>True</EM> if this <STRONG>AtalaImage</STRONG> contains an alpha channel. </returns>
            <remarks> If this image is colormapped, the palette might contain an alpha value less than 255.  If so the mapped
            pixel value will contain alpha even though this function returns <B>false</B>.  Check if the palette has alpha to be
            sure. </remarks>
            <overloads>
            <example>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
bool hasAlpha = AtalaImage.PixelFormatHasAlpha(PixelFormat.Pixel32bppBgra);
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
Dim hasAlpha As Boolean = AtalaImage.PixelFormatHasAlpha(PixelFormat.Pixel32bppBgra)
]]></code>
</example>
            </overloads>
            <param name="pixelFormat"> The <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> to use when determining if there is an alpha channel. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Dispose">
            <summary> Call this method to destroy this <STRONG>AtalaImage</STRONG> data and free memory. </summary>
            <remarks> <para>The garbage collector will eventually free this memory if dispose is not called. By calling
            <EM>Dispose</EM> the memory is freed immediately, important for images occupying many kilobytes of memory.</para>
            <para>After the image is disposed, any function calls that access the AtalaImage.ImageData will result
            in an <STRONG>ObjectIsDisposedException</STRONG>.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Finalize">
            <summary>
            The Destructor that will automatically be called by the garbage collector
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Clone">
            <summary>
            Returns a deep copy of this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.
            </summary>
            <returns>A deep copy of this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatFromBitsPerPixel(System.Int32)">
            <summary>
            Returns the PixelFormat from bits per pixel.
            </summary>
            <param name="depth">The depth.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary> Returns a new <see cref="T:Atalasoft.Imaging.AtalaImage"/> object with a different <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> from this <STRONG>AtalaImage</STRONG>.
            </summary>
            <returns> A new <see cref="T:Atalasoft.Imaging.AtalaImage"/> object with a different %PixelFormat% from this <STRONG>AtalaImage</STRONG>. </returns>
            <overloads>
            <example>
<code lang="CS" title="GetChangedPixelFormat Example (C#)"><![CDATA[
// Load an image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");
AtalaImage converted = null;

// Convert the image to 8-bit Grayscale.
// Be sure the image is a different PixelFormat or an exception is thrown.
if (image.PixelFormat != PixelFormat.Pixel8bppGrayscale)
{
    converted = image.GetChangedPixelFormat(PixelFormat.Pixel8bppGrayscale);
    image.Dispose();
}
else
    converted = image;
]]></code>

<code lang="VB" title="GetChangedPixelFormat Example (Visual Basic)"><![CDATA[
' Load an image.
Dim image As AtalaImage = New AtalaImage("D:\Test Images\1.jpg") 
Dim converted As AtalaImage = Nothing 
 
' Convert the image to 8-bit Grayscale.
' Be sure the image is a different PixelFormat or an exception is thrown.
If image.PixelFormat <> PixelFormat.Pixel8bppGrayscale Then
    converted = image.GetChangedPixelFormat(PixelFormat.Pixel8bppGrayscale)
    image.Dispose()
Else 
    converted = image
End If
]]></code>
</example>
            </overloads>
            <overloads> This function converts an <STRONG>AtalaImage</STRONG> from one <STRONG>PixelFormat</STRONG> to another.
            </overloads>
            <remarks> The ChangePixelFormatCommand can also be used to change the pixelformat, using a Command.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile,System.Boolean)">
            <returns>An <see cref="T:Atalasoft.Imaging.AtalaImage"/> object with a different <see cref="T:Atalasoft.Imaging.PixelFormat"/> from this AtalaImage.</returns>
            <summary> Returns a new <see cref="T:Atalasoft.Imaging.AtalaImage"/> object with a different <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> from this <STRONG>AtalaImage</STRONG>
            specifying a <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> and if the ChangedPixelFormat event
            should fire. </summary>
            <param name="newPixelFormat"> The PixelFormat that the new AtalaImage will contain. </param>
            <param name="destProfile"> The color profile to use when converting to and from the CMYK colorspace. </param>
            <param name="fireChangedPixelFormatEvent"> Speicifies if the ChangedPixelFormat should fire. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns a new <see cref="T:Atalasoft.Imaging.AtalaImage"/> object with a different <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> from this <STRONG>AtalaImage</STRONG>.
            </summary>
            <returns> An <see cref="T:Atalasoft.Imaging.AtalaImage"/> object from a Bitmap object. </returns>
            <param name="newPixelFormat"> The PixelFormat that the new AtalaImage will contain. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelIndex(System.Int32,System.Int32)">
            <summary> Gets the palette index of the specified pixel in this <STRONG>AtalaImage</STRONG>. </summary>
            <returns> The palette index of the specified pixel. </returns>
            <param name="x"> <B>x</B> coordinate in the image. </param>
            <param name="y"> <B>y</B> coordinate in the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelCmykColor(System.Int32,System.Int32)">
            <summary> Get the color of a pixel in CMYK space </summary>
            <returns> A structure of type CmykColor representing the color of the pixel. </returns>
            <remarks> If the original image is not in CMYK, the color value will be converted to CMYK. </remarks>
            <param name="x"> The x coordinate of the pixel </param>
            <param name="y"> The y coordinate of the pixel </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelColor(System.Int32,System.Int32)">
            <summary> Returns the <STRONG>System.Drawing.Color</STRONG> of the specified pixel in this
            <STRONG>AtalaImage</STRONG>. </summary>
            <returns> The <STRONG>System.Drawing.Color</STRONG> of the specified pixel. </returns>
            <param name="x"> <B>x</B> coordinate in the image. </param>
            <param name="y"> <B>y</B> coordinate in the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelCmykColor(System.Int32,System.Int32,Atalasoft.Imaging.CmykColor)">
            <summary> Set the color of a pixel in CMYK space </summary>
            <remarks> If the image is not a CMYK image, newColor will be converted to the proper color space. </remarks>
            <param name="x"> The X coordinate of the pixel </param>
            <param name="y"> The Y coordinate of the pixel </param>
            <param name="newColor"> The color to set </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToString">
            <summary> <para>Returns a textual description of this <STRONG>AtalaImage</STRONG> object.</para> </summary>
            <returns> A string containing the width, height and pixel format of this image. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Saves this <see cref="T:Atalasoft.Imaging.AtalaImage"/> to a <see cref="T:System.IO.Stream"/> object specifying an <see cref="T:Atalasoft.Imaging.Codec.ImageType"/>.
            </summary>
            <returns>The number of bytes saved to the file.</returns>
            <param name="stream"> A stream containing the file which the image will be encoded to. </param>
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
            <overloads> Saves this <STRONG>AtalaImage</STRONG> to a file or stream. </overloads>
            <overloads>
            <example>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
AtalaImage image = new AtalaImage(100, 100, PixelFormat.Pixel24bppBgr);
image.Save("c:\\test.jpg", new JpegEncoder(80), null);
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
AtalaImage image = New AtalaImage(100, 100, PixelFormat.Pixel24bppBgr)
image.Save("c:\test.jpg", New JpegEncoder(80), Nothing)
]]></code>
</example>
            </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Saves this <see cref="T:Atalasoft.Imaging.AtalaImage"/> to a file specifying an <see cref="T:Atalasoft.Imaging.Codec.ImageType"/> and a <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/>.
            </summary>
            <returns>The number of bytes saved to the file.</returns>
            <remarks> <para>To specify encoder settings, use the overload containing the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> parameter.</para>
            <para>This method can be used to save an image to an FTP server.  If the <EM>fileName</EM> is pointing to an FTP
            server, you may need to include the username and password in the URL to allow the file to be saved.</para></remarks>
            <example> Save Method </example>
            <param name="fileName"> The filename to save this %AtalaImage% to. </param>
            <param name="type"> The image type to save this image as. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Saves this %AtalaImage% to a  file specifying an <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> and progress callback.
            </summary>
            <remarks> This method can be used to save an image to an FTP server.  If the <EM>fileName</EM> is pointing to an FTP
            server, you may need to include the username and password in the URL to allow the file to be saved.</remarks>
            <param name="fileName"> The filename to save this %AtalaImage% to. </param>
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels">
            <summary> Returns an array of grayscale <see cref="T:Atalasoft.Imaging.AtalaImage"/> objects representing each 8-bit or 16-bit channel in the source
            image. </summary>
            <returns> An array of grayscale <see cref="T:Atalasoft.Imaging.AtalaImage"/> objects composing of individual channels of the source image.
            </returns>
            <remarks> The returned array contains grayscale images representing the source image channels in the same order as
            the channels are in the image.  Keep in mind that this means a Pixel24bitRgb contains channels in the order of blue,
            green, and red. </remarks>
            <overloads> Splits each color channel of this AtalaImage into separate images. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.KillPointer">
            <summary>
            Sets the imagePointer pointer to 0 and reinitializes the properties.  This is used if the image data is being handled somewhere else (a bitmap for instance)
            </summary>
            <summary> Sets the imagePointer pointer to 0 and reinitializes the properties.  This is used if the image data is
            being handled somewhere else (a bitmap for instance) </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetAllocatedCopy">
            <summary> Returns an copy of the image except the image data is allocated, not copied</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetAllocatedCopy(System.Drawing.Size)">
            <summary> Returns an copy of the image except the image data is allocated, not copied </summary>
            <param name="size"> Size of the new image to allocate </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetGraphics">
            <summary> Returns a <STRONG>System.Drawing.Graphics</STRONG> object allowing GDI+ operations to draw onto this
            <STRONG>AtalaImage</STRONG>. </summary>
            <returns> A <STRONG>System.Drawing.Graphics</STRONG> object allowing GDI+ operations to draw onto this
            <STRONG>AtalaImage</STRONG>. </returns>
            <remarks> A <STRONG>Graphics</STRONG> object can only be obtained with PixelFormats that support GDI+ drawing such
            as 24-bit RGB and 32-bit RGBA. </remarks>
            <exception> Thrown by the .NET Framework if the Graphics object does not support an image of the source AtalaImage
            PixelFormat. </exception>
            <exception> Thrown if the PixelFormat of this AtalaImage is not supported by a System.Drawing.Bitmap. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary> Draws this <STRONG>AtalaImage</STRONG> onto a <STRONG>System.Drawing.Graphics</STRONG> object at a
            specified location and size. </summary>
            <param name="graphics"> The Graphics object to draw on. </param>
            <param name="destRect"> The rectangular area of the Graphics object to draw on. </param>
            <overloads> Draws this <STRONG>AtalaImage</STRONG> to a graphics object. </overloads>
            <remarks> Unlike GDI+, this <EM>Draw</EM> method will not convert the image to 32-bit when drawing to a Graphics
            object. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary> Draws a specified area of this <STRONG>AtalaImage</STRONG> onto a <STRONG>System.Drawing.Graphics</STRONG>
            object at the specified location and size. </summary>
            <param name="graphics"> The Graphics object to draw on. </param>
            <param name="destRect"> The rectangular area of the Graphics object to draw on. </param>
            <param name="srcRect"> The rectangular area of the source image to draw. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmapData(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.ColorPalette)">
            <summary> Returns an %AtalaImage% that contains the same image pointer that's in the specified
            <STRONG>BitmapData</STRONG> object. </summary>
            <returns> An %AtalaImage% that contains the same image pointer that's in the specified BitmapData object. 
            </returns>
            <remarks> Use this method to set an existing <STRONG>Bitmap</STRONG> object to an <STRONG>AtalaImage</STRONG>
            without copying the data.  This method should be used with care as the source <STRONG>Bitmap</STRONG> will always
            control the image memory, and can be disposed by the garbage collector if all references are removed. </remarks>
            <overloads>
            <example>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
BitmapData bd = srcBitmap.LockBits(new Rectangle(Point.Empty, srcBitmap.Size),   ImageLockMode.ReadWrite, srcBitmap.PixelFormat);
//pass in the Bitmap Bits, with a null palette
AtalaImage image = AtalaImage.FromBitmapData(bd, null);
BlurGaussianCommand blur = new BlurGaussianCommand(2);
AtalaImage newImage = blur.ApplyToImage(image);
srcBitmap.UnlockBits(bd);
//the Bitmap only points to the newImage.  The newImage still controls the memory and it will need//to be disposed when done.
Bitmap bm = new Bitmap(newImage.Width, newImage.Height, newImage.RowStride, (System.Drawing.Imaging.PixelFormat)((int)newImage.PixelFormat), newImage.ImageData);
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
Dim bd As BitmapData = srcBitmap.LockBits(New Rectangle(Point.Empty, srcBitmap.Size), _
   ImageLockMode.ReadWrite, srcBitmap.PixelFormat)
'pass in the Bitmap Bits, with a null palette
Dim image As AtalaImage = AtalaImage.FromBitmapData(bd, Nothing)
Dim blur As BlurGaussianCommand = New BlurGaussianCommand(2)
Dim newImage As AtalaImage = blur.ApplyToImage(image)
srcBitmap.UnlockBits(bd)
'the Bitmap only points to the newImage.  The newImage still controls the memory and it will need'to be disposed when done.
Dim newBitmap As Bitmap = New Bitmap(newImage.Width, newImage.Height, newImage.RowStride, _
   CType(CType(newImage.PixelFormat, Integer), System.Drawing.Imaging.PixelFormat), newImage.ImageData);
]]></code>
</example>
            </overloads>
            <param name="bd"> The <STRONG>BitmapData</STRONG> created from a Bitmap by locking the bits. </param>
            <param name="palette"> The palette of the Bitmap.  Set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the Bitmap doesn't contain a palette. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromDib(System.IntPtr,System.Boolean)">
            <summary> Returns an <STRONG> AtalaImage</STRONG>    from a DIB (Device Independent Bitmap) pointer. </summary>
            <returns> An <STRONG> AtalaImage</STRONG>    from a DIB (Device Independent Bitmap) pointer. </returns>
            <remarks> The memory will be handled and disposed by the returned <STRONG>AtalaImage</STRONG> object if <EM>copy
            </EM>is set to <EM>true</EM>. </remarks>
            <param name="dibPointer"> The DIB (device independent bitmap) pointer. </param>
            <param name="copy"> Indicates if the DIB data is copied into the <STRONG> AtalaImage</STRONG>   . </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToDib">
            <summary> Returns a pointer to a DIB (Device Independent Bitmap) copied from this AtalaImage. </summary>
            <remarks> The pointer must be freed by the calling application with GlobalFree or Marshal.FreeHGlobal. </remarks>
            <returns> A DIB (device independent bitmap) pointer. </returns>
            <overloads> Generates a DIB (Device Independent Bitmap) from this AtalaImage. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToDib(System.IO.Stream)">
            <summary> Fills the given stream with a DIB (Device Independent Bitmap) copied from this AtalaImage. </summary>
            <param name="stream"> The stream which will be filled with the DIB </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromHBitmap(System.IntPtr)">
            <summary> Returns an <STRONG>AtalaImage</STRONG> from an hBitmap handle. </summary>
            <returns> An <STRONG>AtalaImage</STRONG> from an hBitmap handle. </returns>
            <param name="hBitmap"> The hBitmap handle </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmap(System.Drawing.Bitmap,System.Boolean)">
            <summary> Converts a specified Bitmap into an AtalaImage by taking ownership of the Bitmap data, or returning a copy
            of the Bitmap data. </summary>
            <remarks> <para>When setting atalaImageWillOwnBitmap to true, do not Dispose the Bitmap.  The AtalaImage object
            holds onto a reference to the Bitmap object, so the garbage collector will not free the Bitmap data until the host
            AtalaImage goes out of scope or is disposed.  </para>
            <para>When atalaImageWillOwnBitmap is false, a copy is returned and it's up to the caller to dispose the
            Bitmap.</para> </remarks>
            <param name="bitmap"> The source Bitmap to convert </param>
            <param name="atalaImageWillOwnBitmap"> When true, the Bitmap data will be owned by the AtalaImage. </param>
            <returns> A copy of a GDI+ <STRONG>System.Drawing.Bitmap</STRONG> object in the form of an <see cref="T:Atalasoft.Imaging.AtalaImage"/> object.
            </returns>
            <overloads> Converts a specified <STRONG>Bitmap</STRONG> into an <STRONG>AtalaImage</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmap(System.Drawing.Bitmap)">
            <summary> Returns an AtalaImage containing a copy of the Bitmap. </summary>
            <remarks> It's up to the caller to dispose the Bitmap.  The AtalaImage object does not own the bitmap data.
            </remarks>
            <returns> A copy of the Bitmap data in the form of an AtalaImage object. </returns>
            <param name="bitmap"> The bitmap to create a copy from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetBitmap">
            <returns>A <see cref="T:System.Drawing.Bitmap"/> object from this <see cref="T:Atalasoft.Imaging.AtalaImage"/> data.</returns>
            <summary> Returns a <STRONG>System.Drawing.Bitmap</STRONG> object copied from this %AtalaImage%.  </summary>
            <returns> A <STRONG>System.Drawing.Bitmap</STRONG> object copied from this %AtalaImage%.  </returns>
            <remarks> This method will always copy the image data into a new <STRONG>Bitmap</STRONG> object. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.UnregisteredWatermark(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Unregistereds the watermark.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IntPtr,System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary> <para>Initialize a new instance of the %AtalaImage% class specifying the image pointer, Width, Height, and
            PixelFormat. </para>
            <para>This method is obsolete.  Please use the constructor that takes a PixelMemory object instead.</para>
            </summary>
            <remarks> <para>This constructor can be used to create an <STRONG>AtalaImage</STRONG> object from existing image
            data.  The memory pointer will be managed by the <STRONG>AtalaImage</STRONG> object, so do not free the memory once
            the pointer is assigned to this object. </para>
            <para>The RowStride of the image data must be 32-bit (DWORD) aligned.</para> </remarks>
            <seealso> FromDib Method </seealso>
            <param name="imageData"> The memory pointer of the image bits of an unpacked DIB (Device Independent Bitmap).
            </param>
            <param name="width"> Width of the image. </param>
            <param name="height"> Height of the image. </param>
            <param name="pixelFormat"> PixelFormat of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CountColors">
            <summary>
            Count the number of unique colors in this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.
            </summary>
            <returns>The number of unique colors in this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.</returns>
            <remarks>For colormapped images, this method could return a different number of colors
            then what's stored in the <see cref="P:Atalasoft.Imaging.Palette.Colors"/> property.  That is because this method actually
            loops through each pixel in the image to count the unique number of colors.  However these
            colors might occupy more then the first x colors in the palette.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToBitmap">
            <summary>
            Returns a <see cref="T:System.Drawing.Bitmap"/> object from this <see cref="T:Atalasoft.Imaging.AtalaImage"/> data.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> object from this <see cref="T:Atalasoft.Imaging.AtalaImage"/> data.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary> Returns an array of grayscale %AtalaImage% objects representing specified 8-bit or 16-bit channels in the
            source image. </summary>
            <returns> An array of grayscale %AtalaImage% objects representing specified 8-bit or 16-bit channels in the source
            image. </returns>
            <param name="channels"> The channels mask to apply.  The returned array will contain a null AtalaImage if that
            particular channel's bit flag is not set. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CombineChannels(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.AtalaImage[])">
            <summary>
            Combines the channels.
            </summary>
            <param name="desiredPixelFormat">The desired pixel format.</param>
            <param name="channels">The channels.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            Must contain between 2 and 4 images;channels
            or
            All channel images must be of equal size;channels
            or
            All channel images must be grayscale;channels
            or
            PixelFormat does not match number of channels;desiredPixelFormat
            or
            PixelFormat does not match number of channels;desiredPixelFormat
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPackedBuffer(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Gets the packed buffer.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">image</exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Flip(Atalasoft.Imaging.FlipDirection)">
            <summary>
            Flips the image in the specified direction.
            </summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelIndex(System.Int32,System.Int32,System.Byte)">
            <summary>
            Sets the index of the pixel.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">x, y;One or more parameters are invalid for this image.</exception>
            <exception cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException">Image must be colormapped to use GetPixelIndex.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of the pixel.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="newColor">The new color.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">x, y;One or more parameters are invalid for this image.</exception>
            <exception cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException">Pixel Format not compatible with SetPixelColor.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ImageFromClipboard(System.IntPtr)">
            <summary>
            Creates a new AtalaImage from data on the clipboard.
            </summary>
            <param name="ownerHandle">Handle to a window which will act as the clipboard parent.</param>
            <returns>An AtalaImage object or null on failure.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CopyToClipboard(System.IntPtr)">
            <summary>Copies the image data onto the clipboard.</summary>
            <param name="ownerHandle">Handle to a window which will act as the clipboard parent.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary> Draws a specified area of this <STRONG>AtalaImage</STRONG> onto a <STRONG>System.Drawing.Graphics</STRONG>
            object at the specified location and size. </summary>
            <remarks> This method will draw the image onto a graphics object and convert to a bottom-top Bitmap if necessary. 
            Some devices such as printers will fail when drawing a top-bottom image such as those internally stored in DotImage
            and .NET. </remarks>
            <param name="graphics"> The Graphics object to draw on. </param>
            <param name="destRect"> The rectangular area of the Graphics object to draw on. </param>
            <param name="srcRect"> The rectangular area of the source image to draw. </param>
            <param name="renderBottomTop"> When true, the image will be forced to draw bottom to top. </param>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.DitherErrorMax">
            <summary> Gets or sets the diffusion or dither error that's applied to an image when converting to from a continuous
            tone to colormapped format. </summary>
            <value> The diffusion or dither error that's applied to an image when converting to from a continuous tone to
            colormapped format. </value>
            <remarks> <para>This value can be from 0 to 127 where 0 is with no error diffusion and 127 is maximum error
            diffusion.</para>
            <para>See the Dithering topic for more information. </para> </remarks>
            <seealso> Dithering </seealso>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.PixelFormatChanger">
            <summary> Get or set the class used to convert image pixel formats. </summary>
            <value> An object of type <STRONG>PixelFormatChanger</STRONG> that can be used to convert images from one
            PixelFormat to another. </value>
            <remarks> <para>This class is used by AtalaImage.<see cref="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat)"/> as well as by all
            DotImage image commands.  By changing this property, a client can control how all pixel format conversions are
            manager.</para>
            <para>By default this property is set to an instance of <see cref="T:Atalasoft.Imaging.AtalaPixelFormatChanger"/>.</para> </remarks>
            <seealso> DocumentPixelFormatChanger Class </seealso>
            <seealso> AtalaPixelFormatChanger Class </seealso>
        </member>
        <member name="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat">
            <summary>
            Occurs when the image data changes PixelFormats.
            </summary>
            <remarks> This static event is usually fired when a particular method is not compatible with the current
            <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> and it needs to be changed.  By handling this event, you may show a dialog to the user that the
            current PixelFormat will be changed and allow that operation to be cancelled by setting the Cancel property in the
            <see cref="T:Atalasoft.Imaging.PixelFormatChangeEventArgs"/> to true. </remarks>
            <example>
<code lang="CS" title="ChangePixelFormat Example (C#)"><![CDATA[
// Setup the event handler.
AtalaImage.ChangePixelFormat += new PixelFormatChangeEventHandler(OnPixelFormatChange);

// Force the handler to cancel the operation.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");
AtalaImage gray = image.GetChangedPixelFormat(PixelFormat.Pixel8bppGrayscale, null, true);

image.Dispose();
if (gray != null)
    gray.Dispose();


private void OnPixelFormatChange(object sender, PixelFormatChangeEventArgs e)
{
    // Don't allow a 24-bit image to be converted to 8-bit grayscale.
    if (e.CurrentPixelFormat == PixelFormat.Pixel24bppBgr && e.NewPixelFormat == PixelFormat.Pixel8bppGrayscale)
        e.Cancel = true;
}
]]></code>

<code lang="VB" title="ChangePixelFormat Example (Visual Basic)"><![CDATA[
Private  Sub OnPixelFormatChange(ByVal sender As Object, ByVal e As PixelFormatChangeEventArgs) Handles AtalaImage.ChangePixelFormat
    ' Don't allow a 24-bit image to be converted to 8-bit grayscale.
    If e.CurrentPixelFormat = PixelFormat.Pixel24bppBgr And e.NewPixelFormat = PixelFormat.Pixel8bppGrayscale Then
        e.Cancel = True
    End If
End Sub

' Force the handler to cancel the operation.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
Dim gray As AtalaImage =  image.GetChangedPixelFormat(PixelFormat.Pixel8bppGrayscale, Nothing, True) 
 
image.Dispose()
If Not gray Is Nothing Then
    gray.Dispose()
End If
]]></code>
</example>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Edition">
            <summary> Gets the type of license being used. </summary>
            <value> The type of license being used. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Resolution">
            <summary>
            Get or set the Resolution of this <see cref="T:Atalasoft.Imaging.AtalaImage"/> object
            </summary>
            <value> The resolution, usually in Dots Per Inch of this AtalaImage object. </value>
            <remarks> If the image is loaded from a file, Resolution will contain the value stored in the file.  The resolution
            will be persisted into new <STRONG>AtalaImage</STRONG> objects that are based off of this one. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.PixelFormat">
            <summary>
            Sets or returns the <see cref="T:Atalasoft.Imaging.PixelFormat"/> of this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.
            </summary>
            <value>The <see cref="T:Atalasoft.Imaging.PixelFormat"/> of this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.</value>
            <remarks> See ChangePixelFormatCommand for changing the <STRONG>PixelFormat</STRONG>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Width">
            <summary>
            Returns the width of this <see cref="T:Atalasoft.Imaging.AtalaImage"/> in pixels.
            </summary>
            <value>The width of this <see cref="T:Atalasoft.Imaging.AtalaImage"/> in pixels.</value>
            <seealso cref="P:Atalasoft.Imaging.AtalaImage.Size"/>
            <seealso cref="P:Atalasoft.Imaging.AtalaImage.Height"/>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Height">
            <summary> Gets the height of this AtalaImage in pixels. </summary>
            <seealso cref="P:Atalasoft.Imaging.AtalaImage.Size"/>
            <seealso cref="P:Atalasoft.Imaging.AtalaImage.Width"/>
            <value> The height of this image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Size">
            <summary> Gets the size of this <see cref="T:Atalasoft.Imaging.AtalaImage"/> in pixels. </summary>
            <value> The size of this <see cref="T:Atalasoft.Imaging.AtalaImage"/> in pixels. </value>
            <seealso cref="P:Atalasoft.Imaging.AtalaImage.Width"/>
            <seealso cref="P:Atalasoft.Imaging.AtalaImage.Height"/>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.PixelMemory">
            <summary> Provides access to the memory that represents an image. </summary>
            <value> An object of type PixelMemory that encapsulates the representation of an image's memory. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.RowStride">
            <summary>
            Get the number of bytes in each row of this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.
            </summary>
            <returns>The number of bytes in each row of this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.</returns>
            <remarks> DIB images, which AtalaImage is based on, require the image data to be 32-bit aligned.  If the width is
            not divisible by 4 bytes, then padding will be added to the width.  This property returns the width including pixel
            data and padding. </remarks>
            <value> The number of bytes in each row of this image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ColorDepth">
            <summary>
            Returns the number of bits per pixel of this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.
            </summary>
            <returns>The number of bits per pixel of this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.</returns>
            <remarks>The Colordepth can be changed by setting <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat"/> property to the appropriate format.</remarks>
            <value> The number of bits per pixel of this AtalaImage. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Palette">
            <summary>
            Returns the palette object of this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.
            </summary>
            <remarks> If the image does not contain a palette, this property will return <STRONG>null</STRONG> (<STRONG>Nothing
            </STRONG>in VB). </remarks>
            <value> The palette of this image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ColorProfile">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> associated with this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.</summary>
            <remarks> <para>Any conversions to a colorspace to and from CMYK and RGB will use this profile for the
            conversion.</para><para>Image Formats that can contain an embedded profile such as Tiff, Jpeg, and Png will use this
            profile to embed into the image.  Likewise, when images are loaded containing a color profile, this property will
            contain that profile.</para> </remarks>
            <value> The <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> associated with this <see cref="T:Atalasoft.Imaging.AtalaImage"/>. </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ImageData">
            <remarks>Similarly to the GDI+ Bitmap object, the memory bits <b>AtalaImage</b> can be directly 
            manipulated with this pointer.  There is no need to Lock the pointer.</remarks>
            <summary> Gets the memory address of this AtalaImage. This property is unsupported.  Using it
            will cause a compilation error.  Use PixelMemory instead.</summary>
            <example>
<para>This example shows how to use unsafe C# code to manipulate the image data directly.  The /unsafe compiler directive must be used.</para>
<code lang="CS" title="Directly Manipulate Pixels (C#)"><![CDATA[

]]></code>
</example>
            <value> <para>This property is unsupported.  Using it will cause a compilation error. Use PixelMemory instead.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.BitmapMirror">
            <remarks>The image data is tied to the <see cref="T:Atalasoft.Imaging.AtalaImage"/> object from which the Bitmap was created.
            As long as the AtalaImage is still in scope, the Bitmap may be used.  The intension of this property is to 
            call and methods that require a Bitmap object such as <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)"/>.</remarks>
            <value>A <see cref="T:System.Drawing.Bitmap"/> object mirroring this <see cref="T:Atalasoft.Imaging.AtalaImage"/>.</value>
            <summary> Gets the Bitmap mirror of this %AtalaImage%. </summary>
            <seealso cref="M:Atalasoft.Imaging.AtalaImage.GetBitmap"/>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaImageEditor">
            <summary> Allows visual designers to add <STRONG>AtalaImage</STRONG> objects in design time. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImageEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImageEditor"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method. If the <see cref="T:System.Drawing.Design.UITypeEditor" /> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
            <exception cref="T:System.ArgumentNullException">provider;provider cannot be null</exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paints a representation of the value of an object using the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs" />.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Design.PaintValueEventArgs" /> that indicates what to paint and where to paint it.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates whether the specified context supports painting a representation of an object's value within the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
            <returns>
            true if <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)" /> is implemented; otherwise, false.
            </returns>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaInt128">
            <summary> A 128 bit Integer value type used in JPEG2000 metadata. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToString">
            <summary> Returns a string representing the <STRONG>AtalaInt128</STRONG> in base 10. </summary>
            <returns> A string representing the <STRONG>AtalaInt128</STRONG> in base 10. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToString(System.Int32)">
            <summary> Returns a string representing the <STRONG>AtalaInt128</STRONG> in sign-and-magnitude format in the
            specified radix. </summary>
            <returns> A string representing the <STRONG>AtalaInt128</STRONG> in sign-and-magnitude format in the specified
            radix. </returns>
            <param name="radix"> The numeric base to use in the string. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToHexString">
            <summary> Returns a hex string with the contents of the <STRONG>AtalaInt128.</STRONG> </summary>
            <returns> A hex string representation of the <STRONG>AtalaInt128</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.IntValue">
            <summary> Returns the lowest 4 bytes of the <STRONG>AtalaInt128</STRONG> as an Integer. </summary>
            <returns> The lowest 4 bytes of the value. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.LongValue">
            <summary> Returns the lowest 8 bytes of the <STRONG>AtalaInt128</STRONG> as a Long. </summary>
            <returns> The lowest 8 bytes of the value. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.Int64)">
            <summary> Creates a new instance of <STRONG>AtalaInt128</STRONG> from a long. </summary>
            <param name="value"> The value to use for the <STRONG>AtalaInt128</STRONG>. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(Atalasoft.Imaging.AtalaInt128)">
            <summary> Creates a new copy of an <STRONG>AtalaInt128</STRONG>. </summary>
            <param name="i128"> The <STRONG>AtalaInt128</STRONG> to create a copy of. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.String,System.Int32)">
            <summary> Creates a new instance of <STRONG>AtalaInt128</STRONG> from a string. </summary>
            <exception> Thrown if the value argument is null (Nothing in VB). </exception>
            <remarks> Note that string values are specified in the lt;signgt;lt;magnitudegt; format. </remarks>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage~Atalasoft.Imaging.AtalaInt128~_ctor(string,int)&quot;]/*"/>
            <exception> Thrown if the string value is invalid. </exception>
            <param name="value"> The numeric string to build the <STRONG>AtalaInt128</STRONG> from. </param>
            <param name="radix"> The numeric base.  Values of 10 and 16 are common. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.Byte[])">
            <exception> Thrown if the inData argument is null (Nothing in VB). </exception>
            <exception> Thrown if the inData argument contains too many bytes. </exception>
            <summary> Creates a new instance of <STRONG>AtalaInt128</STRONG> from an array of bytes. </summary>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage~Atalasoft.Imaging.AtalaInt128~_ctor(byte[])&quot;]/*"/>
            <remarks> Note that this method of initialization does not allow the sign to be specified. </remarks>
            <param name="inData"> <para>The byte values.  </para>
            <para>The lowest index of the input byte array (i.e [0]) should contain the most significant byte of the number, and
            the highest index should contain the least significant byte.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.Byte[],System.Int32)">
            <exception> Thrown if the inLen is greater than the inData length or if inLen is greater than 4. </exception>
            <summary> Creates a new instance of <STRONG>AtalaInt128</STRONG> from an array of bytes. </summary>
            <param name="inData"> <para>The byte values.  </para>
            <para>The lowest index of the input byte array (i.e [0]) should contain the most significant byte of the number, and
            the highest index should contain the least significant byte.</para> </param>
            <param name="inLen"> The number of bytes from the inData to use. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Implicit(System.Int64)~Atalasoft.Imaging.AtalaInt128">
            <summary>
            Overloading of the typecast operator
            </summary>
            <param name="value">long</param>
            <returns>AtalaInt128</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Implicit(System.Int32)~Atalasoft.Imaging.AtalaInt128">
            <summary>
            Overloading of the typecast operator
            </summary>
            <param name="value">int</param>
            <returns>AtalaInt128</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Addition(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            operator overloading +
            </summary>
            <param name="bi1">AtalaInt128</param>
            <param name="bi2">AtalaInt128</param>
            <returns>AtalaInt128</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Add(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary> Performs an addition of two <STRONG>AtalaInt128</STRONG> objects. </summary>
            <returns> The results of the calculation. </returns>
            <overloads>
            <example>
<code lang="CS"><![CDATA[
AtalaInt128 a1 = new AtalaInt128(1234);
AtalaInt128 a2 = new AtalaInt128(5678);
AtalaInt128 result = a1 + a2;
]]></code>

<code lang="VB"><![CDATA[
Dim a1 As New AtalaInt128(1234)
Dim a2 As New AtalaInt128(5678)
Dim result As AtalaInt128 = a1 + a2
]]></code>
</example>
            </overloads>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
            <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Increment(Atalasoft.Imaging.AtalaInt128)">
            <summary>
            increments the value
            </summary>
            <param name="bi1">The bi1.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Increment(Atalasoft.Imaging.AtalaInt128)">
            <summary> Increments the <STRONG>AtalaInt128</STRONG>. </summary>
            <returns> The new value. </returns>
            <remarks> The standard <STRONG>Increment</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object
            instead of calling this method. </remarks>
            <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to increment. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Subtract(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary> Performs a subtraction of two <STRONG>AtalaInt128</STRONG> objects. </summary>
            <returns> The results of the calculation. </returns>
            <overloads>
            <example>
<code lang="CS"><![CDATA[
AtalaInt128 a1 = new AtalaInt128(1234);
AtalaInt128 a2 = new AtalaInt128(5678);
AtalaInt128 result = a1 - a2;
]]></code>

<code lang="VB"><![CDATA[
Dim a1 As New AtalaInt128(1234)
Dim a2 As New AtalaInt128(5678)
Dim result As AtalaInt128 = a1 - a2
]]></code>
</example>
            </overloads>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
            <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Subtraction(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates the difference between the two values
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns></returns>
            <exception cref="T:System.ArithmeticException"></exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Decrement(Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Decrements the specified value.
            </summary>
            <param name="bi1">The bi1.</param>
            <returns></returns>
            <exception cref="T:System.ArithmeticException">Underflow in --.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Decrement(Atalasoft.Imaging.AtalaInt128)">
            <summary> Reduces the value by 1. </summary>
            <returns> The new value. </returns>
            <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to decrement. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Multiply(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates the product between the two values
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns></returns>
            <exception cref="T:System.ArithmeticException">
            Multiplication overflow.
            or
            Multiplication overflow.
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Multiply(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <returns> The results of the calculation. </returns>
            <summary> Performs a multiplication operation on two <STRONG>AtalaInt128</STRONG> objects. </summary>
            <remarks> The standard <STRONG>Multiplication</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object
            instead of calling this method. </remarks>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
            <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_LeftShift(Atalasoft.Imaging.AtalaInt128,System.Int32)">
            <summary>
            Calculates the left shift the values
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="shiftVal">The shift.</param>
            <returns></returns>
            <exception cref="T:System.ArithmeticException">
            Multiplication overflow.
            or
            Multiplication overflow.
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.LeftShift(Atalasoft.Imaging.AtalaInt128,System.Int32)">
            <summary> Performs a left bit shift on an <STRONG>AtalaInt128</STRONG>. </summary>
            <remarks> The standard <STRONG>Left-Shift</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object
            instead of calling this method. </remarks>
            <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to shift. </param>
            <param name="shiftVal"> The amount to shift. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_RightShift(Atalasoft.Imaging.AtalaInt128,System.Int32)">
            <summary>
            Calculates the right shift the values
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="shiftVal">The shift.</param>
            <returns></returns>
            <exception cref="T:System.ArithmeticException">
            Multiplication overflow.
            or
            Multiplication overflow.
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.RightShift(Atalasoft.Imaging.AtalaInt128,System.Int32)">
            <returns> The results of the calculation. </returns>
            <summary> Performs a right bit shift on an <STRONG>AtalaInt128</STRONG>. </summary>
            <remarks> The standard <STRONG>Right-Shift</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object
            instead of calling this method. </remarks>
            <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to shift. </param>
            <param name="shiftVal"> The amount of shifting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_OnesComplement(Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates the 1-s complement of the value
            </summary>
            <param name="bi1">The bi1.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.OnesComplement(Atalasoft.Imaging.AtalaInt128)">
            <remarks> The standard <STRONG>Bitwise Complement</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG>
            object instead of calling this method. </remarks>
            <returns> The results of the calculation. </returns>
            <summary> Performs a bitwise complement on an <STRONG>AtalaInt128</STRONG>. </summary>
            <param name="bi1"> The <STRONG>AtalaInt128</STRONG> for this calculation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_UnaryNegation(Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates the 2-s compplement of the value
            </summary>
            <param name="bi1">The bi1.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Negate(Atalasoft.Imaging.AtalaInt128)">
            <summary> Negates an <STRONG>AtalaInt128</STRONG> object. </summary>
            <returns> The results of the calculation. </returns>
            <remarks> The standard <STRONG>Negate</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object instead
            of calling this method. </remarks>
            <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to negate. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Equality(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates if the two values are equal.
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns><c>true</c> if equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Equals(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary> Returns true if both <STRONG>AtalaInt128</STRONG> objects are equal. </summary>
            <returns> True if the values are equal. </returns>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> to test. </param>
            <param name="bi2"> The <STRONG>AtalaInt128</STRONG> to test against. </param>
            <overloads> These methods are used to determine if two <STRONG>AtalaInt128</STRONG> values are equal. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Inequality(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates if the two values are not equal.
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns><c>true</c> if not equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Equals(System.Object)">
            <returns> True if the value is equal to the <STRONG>AtalaInt128</STRONG>. </returns>
            <summary> Returns a value indicating whether another <STRONG>AtalaInt128</STRONG> is equal to this instance.</summary>
            <param name="obj"> An <STRONG>AtalaInt128</STRONG> to test against. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.GetHashCode">
            <summary> Returns the hash code for this <STRONG>AtalaInt128</STRONG>. </summary>
            <returns> The <STRONG>AtalaInt128</STRONG> hash code. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Compare(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary> Compares two <STRONG>AtalaInt128</STRONG> objects. </summary>
            <returns> Returns -1 if bi1 is less than bi2, 1 of bi1 is greater than bi2 or 0 if the values are equal. </returns>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> to compare. </param>
            <param name="bi2"> The <STRONG>AtalaInt128</STRONG> to compare against. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_GreaterThan(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates if the first value is greater than the other.
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns><c>true</c> if the first is greater, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_LessThan(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates if the first value is less than the other.
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns><c>true</c> if the first is less, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_GreaterThanOrEqual(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates if the first value is greater than or equal to the other.
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns><c>true</c> if the first is greater than or equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_LessThanOrEqual(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates if the first value is less than or equal to the other.
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns><c>true</c> if the first is less than or equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Divide(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary> Performs a division on two <STRONG>AtalaInt128</STRONG> objects. </summary>
            <returns> The results of the calculation. </returns>
            <remarks> The standard <STRONG>Divition</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object instead
            of calling this method. </remarks>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
            <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Division(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates the quotient of the two values
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_Modulus(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates the remainder of the quotient of the two values
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Modulus(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary> Performs a modulus calculation on two <STRONG>AtalaInt128</STRONG> objects. </summary>
            <returns> The results of the calculation. </returns>
            <remarks> The standard <STRONG>Modulus</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object instead
            of calling this method. </remarks>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
            <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_BitwiseAnd(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates the bit-wise AND of the two values
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.BitwiseAnd(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary> Performs a bitwise AND of two <STRONG>AtalaInt128</STRONG> objects. </summary>
            <returns> The results of the calculation. </returns>
            <remarks> The standard <STRONG>AND</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object instead of
            calling this method. </remarks>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
            <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_BitwiseOr(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates the bit-wise OR of the two values
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.BitwiseOr(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <returns> The results of the calculation. </returns>
            <summary> Performs a bitwise OR on two <STRONG>AtalaInt128</STRONG> objects. </summary>
            <remarks> The standard <STRONG>OR</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object instead of
            calling this method. </remarks>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
            <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Xor(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <returns> The results of the calculation. </returns>
            <summary> Performs an XOR operation on two <STRONG>AtalaInt128</STRONG> objects. </summary>
            <remarks> The standard <STRONG>Exclusive Or</STRONG> operator can be used on <STRONG>AtalaInt128</STRONG> object
            instead of calling this method. </remarks>
            <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
            <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.op_ExclusiveOr(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Calculates the bit-wise XOR of the two values
            </summary>
            <param name="bi1">The bi1.</param>
            <param name="bi2">The bi2.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaInt128Collection">
            <summary> A collection of AtalaInt128 structures. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128Collection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128Collection.Add(Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Adds 'source' to the end of the CollectionBase.
            </summary>
            <param name="source">given object of UuidBox</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128Collection.Contains(Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Determines whether the CollectionBase contains 'source'.
            </summary>
            <param name="source">given object of UuidBox</param>
            <returns>boolean</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128Collection.CopyTo(Atalasoft.Imaging.AtalaInt128[],System.Int32)">
            <summary>
            Copies the entire CollectionBase to 'dest', starting at 'index' of the target array.
            </summary>
            <param name="dest">target array of UuidBox</param>
            <param name="index">index of target array</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128Collection.IndexOf(Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Searches for 'source' and returns the zero-based index of the first occurrence 
            within the entire CollectionBase.
            </summary>
            <param name="source">given object of UuidBox</param>
            <returns>the zero-based index of the first occurrence</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128Collection.Insert(System.Int32,Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Inserts 'source' into the CollectionBase at 'index'.
            </summary>
            <param name="index">specified index</param>
            <param name="source">given object of UuidBox</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128Collection.Remove(Atalasoft.Imaging.AtalaInt128)">
            <summary>
            Removes the first occurrence of 'source' from the CollectionBase.
            </summary>
            <param name="source">given object of UuidBox</param>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaInt128Collection.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.BinaryPaletteEnforcer">
            <summary>
            A <see cref="T:Atalasoft.Imaging.ResourceReleaser`1"/> that inverts a 1BPP <see cref="T:Atalasoft.Imaging.AtalaImage"/> on creation if it does not
            have the desired photometric interpretation, and inverts it again at the end of its lifetime.
            </summary>
            <remarks>The photometric interpretation of a 1BPP image corresponds to the order of its two palette entries.
            MinIsWhite corresponds to the 0-index representing white pixels, and MinIsBlack corresponds to the 0-index
            representing black pixels.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ResourceReleaser`1">
            <summary> This is a tool that can be used for managing the automatic releasing of resources via the using statement.</summary>
            <example>
<code lang="CS"><![CDATA[

]]></code>
</example>
            <remarks> See <see cref="T:Atalasoft.Imaging.Memory.PixelMemoryLocker">PixelMemoryLock</see> for a concrete example of this class. </remarks>
            <typeparam> The type of the object that will be managed. </typeparam>
        </member>
        <member name="F:Atalasoft.Imaging.ResourceReleaser`1.mVal">
            <summary>
            The backing field for the val parameter.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ResourceReleaser`1.#ctor(`0,System.Action{`0})">
            <summary> Constructs a new ResourceReleaser object with the value and action given. </summary>
            <param name="val"> Val is an object that should be managed by the ResourceReleaser </param>
            <param name="action"> Action is an action that will be executed upon disposal of the ResourceReleaser.  Action will
            be passed val when it is executed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ResourceReleaser`1.Dispose">
            <summary>Disposes the ResourceReleaser.</summary>
            <remarks> Upon disposal, the ResourceReleaser will invoke the original action passed to it in the construction,
            passing in the original val from the constructor.  ResourceReleaser does not check val for null.  That is up to the
            action. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ResourceReleaser`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.ResourceReleaser`1"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ResourceReleaser`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforceMinIsWhite(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Returns an instance of a <see cref="T:Atalasoft.Imaging.BinaryPaletteEnforcer"/> that enforces a MinIsWhite
            photometric interpretation of the image until it is released.
            </summary>
            <param name="image">The image to enforce upon.</param>
            <returns>An auto-releasing <see cref="T:Atalasoft.Imaging.ResourceReleaser`1"/>.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforceMinIsBlack(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Returns an instance of a <see cref="T:Atalasoft.Imaging.BinaryPaletteEnforcer"/> that enforces a MinIsBlack
            photometric interpretation of the image until it is released.
            </summary>
            <param name="image">The image to enforce upon.</param>
            <returns>An auto-releasing <see cref="T:Atalasoft.Imaging.ResourceReleaser`1"/>.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforcerState">
            <summary>
            The internal state of a <see cref="T:Atalasoft.Imaging.BinaryPaletteEnforcer"/> instance.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforcerState.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean)">
            <summary>
            Creates a new instance of a <see cref="T:Atalasoft.Imaging.BinaryPaletteEnforcer"/> state object with a given
            image and enforcement.
            </summary>
            <param name="image">The image to enforce upon.</param>
            <param name="enforceMinIsWhite">The interpretation to enforce.</param>
        </member>
        <member name="M:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforcerState.Release">
            <summary>
            Releases the image from enforcement.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.CmykColor">
            <summary> CmykColor defines a color that consists of cyan, magenta, yellow, and black components. </summary>
            <remarks> This class represents a color with 8-bit components. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.#ctor(System.Int32)">
            <summary> Construct a new CmykColor from the 32-bit integer provided. </summary>
            <param name="packedCmyk"> PackedCmyk represents the 4 components as 4 8 bit values with c in the upper byte,
            followed by m, y, and k. </param>
            <overloads> Construct a new CmykColor structure </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Construct a new CmykColor from the four components provided </summary>
            <remarks> Each value must be in the range 0-255. </remarks>
            <param name="c"> The cyan component of this color. </param>
            <param name="m"> The magenta component of this color. </param>
            <param name="y"> The yellow component of this color. </param>
            <param name="k"> The black component of this color. </param>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.#ctor(System.Drawing.Color)">
            <summary> Construct a new CmykColor from the RGB color. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.Equals(System.Object)">
            <summary> Test for equality with another object. </summary>
            <param name="obj"> The compare to compare against. </param>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.op_Equality(Atalasoft.Imaging.CmykColor,Atalasoft.Imaging.CmykColor)">
            <summary> Implements the equality operator. </summary>
            <returns> True if the objects represent the same color, false otherwise. </returns>
            <param name="c1"> The first color to compare </param>
            <param name="c2"> The second color to compare </param>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.op_Inequality(Atalasoft.Imaging.CmykColor,Atalasoft.Imaging.CmykColor)">
            <summary> Implements the not-equals operator </summary>
            <returns> True if the colors are different, false otherwise. </returns>
            <param name="c1"> The first color to compare </param>
            <param name="c2"> The second color to compare </param>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.GetHashCode">
            <summary> Get the hash code for this object. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.PackedCmyk">
            <summary>
            Gets CMYK color as packed 32-bit integer.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.C">
            <summary> Set or get the cyan component of this color. </summary>
            <remarks> Must be in the range 0-255. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.M">
            <summary> Set or get the magenta component of this color. </summary>
            <remarks> Must be in the range 0-255. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.Y">
            <summary> Set or get the yellow component of this color. </summary>
            <remarks> Must be in the range 0-255. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.K">
            <summary> Set or get the black component of this color. </summary>
            <remarks> Must be in the range 0-255. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.Rgb">
            <summary> Gets the value of the color an RGB Color object. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffDecoder">
            <remarks> <para>By default, when opening a TIFF image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the <see cref="P:Atalasoft.Imaging.Codec.RegisteredDecoders.Decoders"/> collection
            and does not have to be explicitly set. </para>
            <para>TIFF images can contain multiple pages in one file.  You may wish to specify which page to read or get
            information about by specifying the frameindex in the associated Read methods.</para>
            <para>TIFF images can store metadata such as EXIF, IPTC, XMP, and other TIFF tags.  See the
            %Atalasoft.Imaging.Metadata% namespace for more information on reading this information.</para> </remarks>
            <summary> <para>An <STRONG>ImageDecoder</STRONG> used to read Tagged Image File Format (TIFF) images from an image
            <STRONG>Stream</STRONG>.</para> </summary>
            <example>
<para>Split a multi-page TIFF into individual pages</para>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
//initialize an instance of a TiffDecoder
TiffDecoder tiffReader = new TiffDecoder();
//open the file stream
FileStream fs = File.OpenRead(@"C:\Development\Image Database\Tiff\1_multi.tif");
//get the number of pages in the TIFF
int pageCount = tiffReader.GetFrameCount(fs);
//loop through each page in the TIFF
for (int i = 0; i < pageCount; i++)
{
    //seek to the beginning of the file
    fs.Seek(0, SeekOrigin.Begin); 
    //read the specified frameindex
    AtalaImage page = tiffReader.Read(fs, i, null);
    //save the page as a standalone TIFF in the working directory
    page.Save(Path.GetFileNameWithoutExtension(fs.Name) + "_" + i + ".tif", new TiffEncoder(), null);
    //dispose of uneeded image
    page.Dispose();
}
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
'initialize an instance of a TiffDecoder
Dim tiffReader As TiffDecoder = New TiffDecoder() 
'open the file stream
Dim fs As FileStream =  File.OpenRead("C:\Development\Image Database\Tiff\1_multi.tif") 
'get the number of pages in the TIFF
Dim pageCount As Integer =  tiffReader.GetFrameCount(fs) 
'loop through each page in the TIFF
Dim i As Integer
For  i = 0 To pageCount - 1
    'seek to the beginning of the file
    fs.Seek(0, SeekOrigin.Begin) 
    'read the specified frameindex
    Dim page As AtalaImage = tiffReader.Read(fs, i, Nothing) 
    'save the page as a standalone TIFF in the working directory
    page.Save(Path.GetFileNameWithoutExtension(fs.Name) & "_" & i & ".tif", New TiffEncoder(), Nothing)
    'dispose of uneeded image
    page.Dispose()
Next
]]></code>
</example>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageDecoder">
            <summary> A decoder for multiframed images such as multiple page TIFF's and animiated GIF's. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageDecoder">
            <summary> An <STRONG>abstract</STRONG> (<STRONG>MustInherit</STRONG> in Visual Basic) base class that defines a file
            format decoder to read an image from a Stream.  All image decoders used in dotImage must inherit this class.
            </summary>
            <remarks> To load an image from a stream, the <see cref="T:Atalasoft.Imaging.AtalaImage"/> constructor may be used, and passing in a
            string filename, or a <STRONG>Stream</STRONG>.  See the examples below </remarks>
            <example>
<para>Load an image from a Stream</para>
<code lang="CS" title="Load an image from a Stream (C#)"><![CDATA[
FileStream fs = System.IO.File.OpenRead(@"c:\test.tif");
AtalaImage image = new AtalaImage(fs);
]]></code>

<code lang="VB" title="Load an image from a Stream (Visual Basic)"><![CDATA[
Dim fs As FileStream = System.IO.File.OpenRead("c:\test.tif")
Dim image As AtalaImage = New AtalaImage(fs);
]]></code>

<para>Load an image from a file</para>
<code lang="CS" title="Load an image from a file (C#)"><![CDATA[
AtalaImage image = new AtalaImage(@"c:\test.tif");
]]></code>

<code lang="VB" title="Load an image from a file (Visual Basic)"><![CDATA[
Dim image As AtalaImage = New AtalaImage("c:\test.tif");
]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.IsValidFormat(System.IO.Stream)">
            <summary> Checks the stream to determine if the image can be read by the decoder that derives this class. </summary>
            <returns> <STRONG>True </STRONG>if the encoded image can be read by this decoder, otherwise <STRONG>false</STRONG>.
            </returns>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from an image stored in a file without decoding the image data. </summary>
            <returns> An <see cref="T:Atalasoft.Imaging.Codec.ImageInfo"/> object containing information about the image such as size and bitdepth. </returns>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Decode an image in a specified image <STRONG>Stream</STRONG>. </summary>
            <returns> An <STRONG>AtalaImage</STRONG> containing the decoded image. </returns>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageDecoder.SupportedImageType">
            <summary> Returns the <see cref="T:Atalasoft.Imaging.Codec.ImageType"/> that the implemented decoder class supports. </summary>
            <remarks> If the decoder supports a format not included with dotImage, then this will return Unknown. </remarks>
            <value> The <see cref="T:Atalasoft.Imaging.Codec.ImageType"/> that the implemented decoder class supports. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetFrameCount(System.IO.Stream)">
            <summary> Returns the number of frames in the image </summary>
            <returns> The number of frames in the image </returns>
            <param name="stream"> The input Stream. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <overloads> Retreive information in an image stored in a file without decoding the image data. </overloads>
            <param name="stream"> The input Stream. </param>
            <param name="frameIndex"> The zero based frame index. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Read a given frame in an encoded image using this decoder. </summary>
            <param name="stream"> The input Stream. </param>
            <param name="frameIndex"> The zero based frame index. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IRegionReadable">
            <summary> This interface is applied to ImageDecoders to enable them to read a specified region of the image without
            decoding the entire image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.IRegionReadable.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Decodes the specified region and returns an AtalaImage object representing the image data. </summary>
            <param name="stream"> The encoded image stream. </param>
            <param name="region"> The rectangular image to read. </param>
            <param name="frameIndex"> The zero based frame index if the image supports multiple frames. </param>
            <param name="progress"> Progress Delegate </param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IScaledDecoder">
            <summary> This interface is applied to ImageDecoders that have the ability to decode an image stream to a specified
            scale. </summary>
            <remarks> Decoders that apply this interface are capable of reading extremely large images without loading the full
            size image into memory. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.IScaledDecoder.GetBestScale(System.IO.Stream,System.Int32,System.Double)">
            <summary> If the codec can efficiently generate a scaled image without actually resampling, this will return the
            closest scale given an input scale factor. </summary>
            <remarks> This is most useful for images that have multiple resolutions stored within.  JPEG's can quickly generate
            a scaled image 1/2, 1/4, 1/8, and 1/16 the original size and thus will return one of these sizes. </remarks>
            <returns> The closest stored scale greater than or equal to the requested scale. </returns>
            <param name="stream"> The encoded image stream </param>
            <param name="frameIndex"> The zero based frame index if the source image is multiframed </param>
            <param name="requestedScale"> The scale to request </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.IScaledDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Decodes an image to a specified scale. </summary>
            <param name="stream"> The encoded image </param>
            <param name="frameIndex"> The zero based frame index if the source image is multiframed </param>
            <param name="scaleFactor"> The scale factor to request (ie. 0.5 is 1/2 scale, 1 is full scale) </param>
            <param name="progress"> The progress callback </param>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffDecoder._scaledResampleMethod">
            <summary> Gets or sets the resampling method to use for ReadScaled. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.#ctor">
            <summary> Initializes a new instance of a %TiffDecoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetFrameCount(System.IO.Stream)">
            <summary> Returns the number of pages in an Encoded Tiff file. </summary>
            <param name="stream"> <para>Encoded image stream</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains an TIFF image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary> Retreive information from a Tiff image stored in a Stream without decoding the image data. </summary>
            <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="frameIndex"> The zero based frame index. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Tiff image stored in a Stream without decoding the image data. </summary>
            <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
            <summary> Decodes an image from a supplied TIFF image <STRONG>Stream </STRONG>specifying a frame index. </summary>
            <returns> Returns an decoded <STRONG>AtalaImage</STRONG> from a <STRONG>Stream</STRONG> containing a TIFF encoded
            image. </returns>
            <example> TiffDecoder Class </example>
            <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
            <param name="frameIndex"> The zero based frame index to load from a multi-page TIFF file. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
            <overloads> Decodes an image from a supplied TIFF image <STRONG>Stream.</STRONG> </overloads>
            <returns> Returns an decoded <STRONG>AtalaImage</STRONG> from a <STRONG>Stream</STRONG> containing a TIFF encoded
            image. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
            <summary> Decodes an image from a supplied TIFF image <STRONG>Stream.</STRONG> </summary>
            <returns> Returns an decoded <STRONG>AtalaImage</STRONG> from a <STRONG>Stream</STRONG> containing a TIFF encoded
            image. </returns>
            <example> TiffDecoder Class </example>
            <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Decodes a specified region of a TIFF image given a source Stream. </summary>
            <remarks> <para>This method will read only the strips or tiles that it needs in order to compose and image of the
            indicated rectangular region, and trim any excess data.  This can be significantly faster than reading the entire
            image if only a specified region needs to be decoded.  To maximize benefit of this method, use multiple tiles or
            strips per image.</para>
            <para>For reading only a single strip or tile, see <see cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadStrip(System.IO.Stream,System.Int32,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/> or <see cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadTile(System.IO.Stream,System.Drawing.Point,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>.</para>
            <para>Note that the image data is not corrected for orientation even when <see cref="P:Atalasoft.Imaging.Codec.TiffDecoder.CorrectOrientation"/> is true.</para> </remarks>
            <seealso cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadStrip(System.IO.Stream,System.Int32,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>
            <seealso cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadTile(System.IO.Stream,System.Drawing.Point,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>
            <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
            <exception> Thrown if the region parameter is outside the image bounds. </exception>
            <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
            <param name="region"> A rectangular region of the image to decode. </param>
            <param name="frameIndex"> The zero based frame index to load from a multi-page Tiff file. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadTile(System.IO.Stream,System.Drawing.Point,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Decodes a specified tile from a TIFF image stream that is encoded with strips. </summary>
            <exception> Thrown when the top-left corner of a tile doesn't exist at the location specified. </exception>
            <remarks> <para>This method differs from <see cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/> in that it doesn't check that the
            source image is tiled.  For reading multiple tiles at once, ReadRegion is more efficient.  To determine the tile
            size, query the tag TIFFTAG_TILELENGTH (323) or TIFFTAG_TILEWIDTH (322).  If those tags do not exist, then the image
            is stripped in which case see <see cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadStrip(System.IO.Stream,System.Int32,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>.</para>
            <para>Note that the image data is not corrected for orientation even when <see cref="P:Atalasoft.Imaging.Codec.TiffDecoder.CorrectOrientation"/> is true.</para> </remarks>
            <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
            <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
            <param name="location"> The pixel location of the top left location of the tile. </param>
            <param name="frameIndex"> The zero based frame index to load from a multi-page Tiff file. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadStrip(System.IO.Stream,System.Int32,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <seealso cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadTile(System.IO.Stream,System.Drawing.Point,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>
            <seealso cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>
            <summary> Decodes a specified strip from a TIFF image stream that is encoded with strips. </summary>
            <remarks> <para>This method differs from <see cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/> in that it doesn't check that the
            source image is stripped.  For reading multiple strips at once, ReadRegion is more efficient.  To determine the
            strip height, query the tag TIFFTAG_ROWSPERSTRIP (278).  To determine if an image is stripped, make sure
            TIFFTAG_TILELENGTH (323) or TIFFTAG_TILEWIDTH (322) doesn't exist.</para>
            <para>Note that the image data is not corrected for orientation even when <see cref="P:Atalasoft.Imaging.Codec.TiffDecoder.CorrectOrientation"/> is true.</para> </remarks>
            <exception> Thrown when the strip index doesn't exist within the image. </exception>
            <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
            <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
            <param name="stripIndex"> The zero based strip index to decode. </param>
            <param name="frameIndex"> The zero based frame index to load from a multi-page Tiff file. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadScaled(System.IntPtr,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an AtalaImage at the specified scale. </summary>
            <remarks> This method will decode a TIFF to a smaller size utilizing much less memory and more effienciently than
            reading the entire image then resizing.  Enables DotImage to read very large TIFF images to smaller sizes that
            normally would throw memory exceptions. </remarks>
            <param name="tiffFile"> The encoded image stream </param>
            <param name="frame"> The zero based frame index to read </param>
            <param name="scale"> The requested scale </param>
            <param name="progress"> Progress delegate </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetBestScale(System.IO.Stream,System.Int32,System.Double)">
            <summary> Gets the most effiicient image scale stored within the codec. </summary>
            <returns> Always returns 1.0. </returns>
            <param name="stream"> encoded image stream </param>
            <param name="frameIndex"> Zero based frame index </param>
            <param name="requestedScale"> Requested image scale. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Decodes an image to a specified scale.
            </summary>
            <param name="stream">The encoded image</param>
            <param name="frameIndex">The zero based frame index if the source image is multiframed</param>
            <param name="scaleFactor">The scale factor to request (ie. 0.5 is 1/2 scale, 1 is full scale)</param>
            <param name="progress">The progress callback</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">scaleFactor</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag(System.Int32,System.String,System.Int32)">
            <summary> Gets a TIFF Tag from a TIFF file. </summary>
            <returns> Returns a <see cref="T:Atalasoft.Imaging.Metadata.TiffTag"/> object containing the tag data, or null if the tag does not exist in the
            image. </returns>
            <seealso cref="T:Atalasoft.Imaging.Metadata.TiffTag"/>
            <param name="tagID"> The tag ID to retrieve data from. </param>
            <param name="fileName"> The TIFF filename </param>
            <param name="frameIndex"> The zero based frame index of the page to query. </param>
            <remarks> <para>Information stored in a TIFF file can be obtained with this method.  A <STRONG>TiffTag</STRONG> is
            class containing the object data, data type, and tag id.  The data is typically a string value.</para>
            <para>Not all TIFF Tags are currently supported.  See <A href="TIFFTags.html">TIFF Tags</A> for a list of
            supported tags.</para>
            <para>This method can be used to obtain WANG Annotations data saved as TagID 32932.</para>
            <para>For more comprehensive TIFF Tag handling, see the "/&gt; for a list of supported tags.</para>
            <para>This method can be used to obtain WANG Annotations data saved as TagID 32932.</para>
            <para>For more comprehensive TIFF Tag handling, see the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffFile"/> class in the
            <EM>Atalasoft.dotImage</EM> assembly.</para></remarks>
            <overloads> Gets a TIFF Tag from a file or stream. </overloads>
            <overloads>
            <example>
<para>This example demonstrates how to obtain a simple TIFF Tag from a TIFF image.</para>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
TiffTag tag = TiffDecoder.GetTiffTag((int)TiffTagID.Software, "myimage.tif", 0);
if (tag != null)
  MessageBox.Show(tag.ToString(), this);
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
Dim tag As TiffTag = TiffDecoder.GetTiffTag(TiffTagID.Software, "myimage.tif", 0) 
If Not tag Is Nothing Then
  MessageBox.Show(tag.ToString(), Me)
End If
]]></code>
</example>
            </overloads>
            <returns> Returns a <see cref="T:Atalasoft.Imaging.Metadata.TiffTag"/> object containing the tag data, or null if the tag does not exist in the
            image. </returns>
            <seealso cref="T:Atalasoft.Imaging.Codec.Tiff.TiffFile"/>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag(System.Int32,System.IO.Stream,System.Int32)">
            <summary> Gets a TIFF Tag from a TIFF image stream. </summary>
            <returns> Returns a <see cref="T:Atalasoft.Imaging.Metadata.TiffTag"/> object containing the tag data, or null if the tag does not exist in the
            image. </returns>
            <seealso cref="T:Atalasoft.Imaging.Metadata.TiffTag"/>
            <param name="tagID"> The tag ID to retrieve data from. </param>
            <param name="source"> The TIFF file stream. </param>
            <param name="frameIndex"> The zero based frame index of the page to query. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.ScaledResampleMethod">
            <summary> Gets or sets the resampling method to use for ReadScaled. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.CorrectOrientation">
            <summary> Gets or sets a value that when true (the default) will automatically correct the image orientation by
            rotating and/or flipping based on the TIFF_ORIENTATION tag setting. </summary>
            <remarks> Speed can be improved when setting this value to false on large images where the orientation is a value
            other than 1, however the resulting image will be rotated and/or flipped.  The methods <see cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>, <see cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadTile(System.IO.Stream,System.Drawing.Point,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/>, and <see cref="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadStrip(System.IO.Stream,System.Int32,System.Int32,Atalasoft.Imaging.ProgressEventHandler)"/> ignore
            this setting and will never correct for orientation. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.SupportedImageType">
            <summary>
            Returns the <see cref="T:Atalasoft.Imaging.Codec.ImageType"/> that the implemented decoder class supports.
            </summary>
            <value>
            The <see cref="T:Atalasoft.Imaging.Codec.ImageType"/> that the implemented decoder class supports.
            </value>
            <remarks>
            If the decoder supports a format not included with dotImage, then this will return Unknown.
            </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Tagged Image File Format (TIFF) images to a
            <see cref="T:System.IO.Stream"/>.</para> </summary>
            <remarks> <para>This <STRONG>ImageEncoder</STRONG> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects when saving to specify a TIFF image. </para>
            <para>Metadata can be written with the TIFF image including EXIF, IPTC, XMP, and Photoshop Resources.  See the
            %Atalasoft.Imaging.Metadata% namespace for more information.</para>
            <para>If the image being saved contains a <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/>, it will be embedded within the file.</para>
            <para>If the image being saved is 1-bit, and palette index 0 is black and palette index 1 is white, the image will
            be saved with the photometric value of MINISBLACK.  If other viewers mistakingly view the image reversed, invert the
            image and palette data prior to saving.</para>
            <para>When compressing TIFF images, it's sometimes useful to adjust the StripSize to something other than the
            default. In particular, Deflate and LZW compression work better with larger chunks of data.</para> </remarks>
            <example>
<code lang="CS" title="Append (C#)"><![CDATA[
// Load the image you want to append.
AtalaImage image = new AtalaImage(@"D:\Test Images\TIFF\1-bit.tif");

// Create the TiffEncoder and tell it to append to an existing file.
TiffEncoder tiff = new TiffEncoder(TiffCompression.Group4FaxEncoding, true);

// Append the image.
image.Save(@"D:\Test Images\TIFF\append.tif", tiff, null);

image.Dispose();
]]></code>

<code lang="VB" title="AppendVB (Visual Basic)"><![CDATA[
' Load the image you want to append.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\TIFF\1-bit.tif") 
 
' Create the TiffEncoder and tell it to append to an existing file.
Dim tiff As TiffEncoder =  New TiffEncoder(TiffCompression.Group4FaxEncoding, True) 
 
' Append the image.
image.Save("D:\Test Images\TIFF\append.tif", tiff, Nothing)
 
image.Dispose()
]]></code>
</example>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder">
            <summary> An encoder for multiframed formats such as PDF and animated GIF's. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageEncoder">
            <summary> An <STRONG>abstract</STRONG> (<STRONG>MustInherit</STRONG> in Visual Basic) base class that defines a file
            format encoder to save an image to a file.  All image encoders used in dotImage must inherit this class. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Save an image using this encoder. </summary>
            <returns> The number of bytes written to the file. </returns>
            <param name="stream"> A stream containing the file which the image will be encoded to. </param>
            <param name="image"> The image to save. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageEncoder.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns true if the given PixelFormat can be encoded with the derived encoder. </summary>
            <param name="format"> The PixelFormat </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Saves the image. </summary>
            <overloads> Saves a multi-framed image. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageSource,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Saves the images to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="images">The images to save.</param>
            <param name="progress">The progress handler.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Saving an ImageSource is not implemented in this decoder</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.OnSetEncoderCompression(System.Object,Atalasoft.Imaging.Codec.EncoderCompressionEventArgs)">
            <summary>
            Called when the encoder needs to select a compression.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.SetEncoderCompression">
            <summary>
            Occurs when the encoder needs to select a compression.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IAppendable">
            <summary> <para>An interface that an <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can implement when it supports appending an image to the end of
            an existing file.</para> </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.IAppendable.Append">
            <summary> Gets or sets a value indicating if the image will be appended to the end of a file. </summary>
            <value> A value indicating if the image will be appended to the end of a file. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IAnnotationEncoder">
            <summary>
            Used with encoders that support saving XMP data.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._append">
            <summary> Get or sets a value indicating if the image should be appended to the end of an existing file. </summary>
            <value> A value indicating if the image should be appended to the end of an existing file. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._compression">
            <summary> Gets or sets a value indicating the compression algorithm used when encoding to a file. </summary>
            <value> A value indicating the compression algorithm used when encoding to a file. </value>
            <remarks> When setting the compression, be aware of the PixelFormat.  Some compression types will result in no
            compression when used with an incompatible PixelFormat.  See the <see cref="T:Atalasoft.Imaging.Codec.TiffCompression"/> enumeration for more
            information. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._xmp">
            <summary> Gets or sets XMP data to encode with the image. </summary>
            <value> A byte array containing XMP data. </value>
            <remarks> This property can be used to save XMP Annotation data created with <STRONG>DotImage</STRONG>, our full
            featured Annotations toolkit for the Microsoft .NET Framework. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._useOldJpegCompression">
            <summary> When true, JPEG compression will generate old style JPEG in TIFF compression (compression value 6).
            </summary>
            <remarks> USE WITH CAUTION!! </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._writeImageColorProfile">
            <summary> Controls how the TiffEncoder writes color profiles. </summary>
            <value> <para>When set to true, if an image contains a non-null ColorProfile objects, the ColorProfile will be
            embedded within the Tiff file.</para>
            <para>Default value is false.</para> </value>
            <remarks> ColorProfile objects are not written when the DotImage license is Photo. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TiffEncoder"/>. </summary>
            <overloads> Creates a TiffEncoder. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.#ctor(Atalasoft.Imaging.Codec.TiffCompression)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TiffEncoder"/> specifying the compression. </summary>
            <param name="compression"> A value indicating the compression algorithm used when encoding to a file. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Boolean)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TiffEncoder"/> specifying the compression and if the image should be
            appended to the end of an existing file. </summary>
            <param name="compression"> A value indicating the compression algorithm used when encoding to a file. </param>
            <param name="append"> A value indicating if the image should be appended to the end of an existing file. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.ReportProgress(Atalasoft.Imaging.ProgressEventHandler,Atalasoft.Imaging.ImageSource,System.Int32)">
            <summary>
            Report the progress to the handler if present
            </summary>
            <param name="progress">The progress handler, can be null</param>
            <param name="source">The source of images</param>
            <param name="current">The current value or -1 to say you are done</param>
            <returns>True iff it should continue, false if it was cancelled</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Saves a collection of images to a multi-page TIFF. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to.  This stream must have
            FileAccess.ReadWrite set or else only the first image will be saved. </param>
            <param name="images"> The ImageCollection containing the images to save. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Tiff image to a stream. </summary>
            <returns>The total number of bytes written to the provided stream.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageSource,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Saves the images to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="images">The images to save.</param>
            <param name="progress">The progress handler.</param>
            <returns>The total number of bytes written to the provided stream.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Tiff image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
            <returns>The total number of bytes written to the provided stream.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.IsDangerousToSet(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>
            Predicate, true if a tag is dangerous to add directly to the TiffTags collection of a TiffEncoder
            </summary>
            <param name="tag">the tag to examine</param>
            <returns>true if it is dangerous to add this tag, false otherwise</returns>
            <remarks>
            Generally we consider a tag dangerous if (a) it is automatically and correctly generated by our code
            when needed, or (b) setting it to an incorrect value could crash a TIFF reader. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._photoshopResources">
            <summary> Gets or sets Photoshop resources to be saved with the image. </summary>
            <remarks> Photoshop saves information to a specific TIFF Tag.  This information can be parsed with the <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser"/>.  When <EM>PhotoshopResources</EM> and <EM>IptcTags</EM> are set to a value other
            than null, IptcData will be added to the PhotoshopResource when saved. </remarks>
            <value> Photoshop resources to be saved with the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._iptcTags">
            <summary> Gets or sets IPTC Metadata that will be saved with the image. </summary>
            <value> IPTC Metadata that will be saved with the image. </value>
            <remarks> Setting this property to an <STRONG>IptcCollection</STRONG> allows IPTC tags to be added or inserted into
            a new TIFF image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._saveRichTiffIptc">
            <summary> Gets or sets a value indicating that IPTC data will be stored in the TIFFTAG_RICHTIFFIPTC Tag rather than
            the TIFFTAG_PHOTOSHOP tag. </summary>
            <remarks> Some readers support reading IPTC only in the RICHTIFFIPTC TiffTag.  By default, IPTC data is saved as a
            photoshop tag. </remarks>
            <value> A value indicating that IPTC data will be stored in the TIFFTAG_RICHTIFFIPTC Tag rather than the
            TIFFTAG_PHOTOSHOP tag. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._jpegQuality">
            <summary> Gets or sets the quality level used when saving the image. </summary>
            <value> The quality level. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffEncoder._stripSize">
            <summary> Gets or sets the strip size used when saving the image. </summary>
            <value> The strip size used when saving the image. </value>
            <remarks> <para>The strip size is the number of image rows saved as a single strip in the TIFF.  The default value
            is -1, which will automatically calculate a strip size equal to about 8Kb of uncompressed data.  For higher
            compression, it often makes sense to increase this number.</para>
            <para>If the StripSize is greater than the image height, the actual strip size will equal the image height.</para>
            </remarks>
            <exception> The strip size must be a value greater than or equal to -1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Append">
            <summary> Get or sets a value indicating if the image should be appended to the end of an existing file. </summary>
            <value> A value indicating if the image should be appended to the end of an existing file. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Xmp">
            <summary> Gets or sets XMP data to encode with the image. </summary>
            <value> A byte array containing XMP data. </value>
            <remarks> This property can be used to save XMP Annotation data created with <STRONG>DotImage</STRONG>, our full
            featured Annotations toolkit for the Microsoft .NET Framework. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.TiffTags">
            <summary> Gets or sets a collection of TIFF Tags that will be encoded with the image when writing. </summary>
            <value> A collection of TIFF Tags that will be encoded with the image when writing. </value>
            <remarks> <para>Not all TIFF Tags are supported.  See <see cref="P:Atalasoft.Imaging.Codec.TiffEncoder.TiffTags">TIFF Tags</see> for a list of
            supported tags.  Some standard tags included in this list would be dangerous to modify and will be ignored if an
            attempt is made to add them.  Those exceptions include:</para>
            <para>      IMAGEWIDTH,<BR/>      IMAGELENGTH,<BR/>      BITSPERSAMPLE,<BR/>      COMPRESSION,<BR/>     
            PHOTOMETRIC,<BR/>      STRIPOFFSETS,<BR/>      SAMPLESPERPIXEL,<BR/>      ROWSPERSTRIP,<BR/>     
            STRIPBYTECOUNTS,<BR/>      PLANARCONFIG,<BR/>      JPEGTABLES,<BR/>      JPEGPROC,<BR/>      JPEGIFOFFSET,<BR/>     
            JPEGIFBYTECOUNT,<BR/>      JPEGRESTARTINTERVAL,<BR/>      JPEGLOSSLESSPREDICTORS,<BR/>      JPEGPOINTTRANSFORM,<BR/>
            JPEGQTABLES,<BR/>      JPEGDCTABLES,<BR/>      JPEGACTABLES,<BR/>      YCBCRCOEFFICIENTS,<BR/>     
            YCBCRSUBSAMPLING,<BR/>      YCBCRPOSITIONING</para>
            <para>For more comprehensive TIFF Tag handling, see the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffFile"/> class in the
            <EM>Atalasoft.dotImage</EM> assembly.</para> </remarks>
            <seealso cref="T:Atalasoft.Imaging.Codec.Tiff.TiffFile"/>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.PhotoshopResources">
            <summary> Gets or sets Photoshop resources to be saved with the image. </summary>
            <remarks> Photoshop saves information to a specific TIFF Tag.  This information can be parsed with the <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser"/>.  When <EM>PhotoshopResources</EM> and <EM>IptcTags</EM> are set to a value other
            than null, IptcData will be added to the PhotoshopResource when saved. </remarks>
            <value> Photoshop resources to be saved with the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.IptcTags">
            <summary> Gets or sets IPTC Metadata that will be saved with the image. </summary>
            <value> IPTC Metadata that will be saved with the image. </value>
            <remarks> Setting this property to an <STRONG>IptcCollection</STRONG> allows IPTC tags to be added or inserted into
            a new TIFF image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.SaveRichTiffIptc">
            <summary> Gets or sets a value indicating that IPTC data will be stored in the TIFFTAG_RICHTIFFIPTC Tag rather than
            the TIFFTAG_PHOTOSHOP tag. </summary>
            <remarks> Some readers support reading IPTC only in the RICHTIFFIPTC TiffTag.  By default, IPTC data is saved as a
            photoshop tag. </remarks>
            <value> A value indicating that IPTC data will be stored in the TIFFTAG_RICHTIFFIPTC Tag rather than the
            TIFFTAG_PHOTOSHOP tag. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.UseOldJpegCompression">
            <summary> When true, JPEG compression will generate old style JPEG in TIFF compression (compression value 6).
            </summary>
            <remarks> USE WITH CAUTION!! </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Compression">
            <summary> Gets or sets a value indicating the compression algorithm used when encoding to a file. </summary>
            <value> A value indicating the compression algorithm used when encoding to a file. </value>
            <remarks> When setting the compression, be aware of the PixelFormat.  Some compression types will result in no
            compression when used with an incompatible PixelFormat.  See the <see cref="T:Atalasoft.Imaging.Codec.TiffCompression"/> enumeration for more
            information. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.JpegQuality">
            <summary> Gets or sets the quality level used when saving the image. </summary>
            <value> The quality level. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.StripSize">
            <summary> Gets or sets the strip size used when saving the image. </summary>
            <value> The strip size used when saving the image. </value>
            <remarks> <para>The strip size is the number of image rows saved as a single strip in the TIFF.  The default value
            is -1, which will automatically calculate a strip size equal to about 8Kb of uncompressed data.  For higher
            compression, it often makes sense to increase this number.</para>
            <para>If the StripSize is greater than the image height, the actual strip size will equal the image height.</para>
            </remarks>
            <exception> The strip size must be a value greater than or equal to -1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.TileSize">
            <summary> Gets or sets the size of tiles that are saved when <see cref="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteTiled"/> is true.
            </summary>
            <remarks> <para>The size of tiles that are saved when <see cref="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteTiled"/> is true.  The default value is
            256, 256.</para><para>The tile size must be a multiple of 16. Actual sizes used may be subject to modification based on compression type.</para> </remarks>
            <seealso> WriteTiled Property </seealso>
            <value> The size of tiles that are saved when <see cref="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteTiled"/> is true. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteTiled">
            <summary> Gets or sets a value that when true, will cause TIFF images to be encoded tiled. </summary>
            <remarks> Tiled TIFF images are useful when the image is large, and the reader is capable of reading individual
            tiles.  See <see cref="P:Atalasoft.Imaging.Codec.TiffEncoder.TileSize"/> for setting the tile width and length. </remarks>
            <seealso> TileSize Property </seealso>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.UseLzwPredictor">
            <summary> Gets or sets a value indicating LZW predictor. </summary>
            <remarks> When this value it true and image uses LZW compression, images are generally compressed more. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteImageColorProfile">
            <summary> Controls how the TiffEncoder writes color profiles. </summary>
            <value> <para>When set to true, if an image contains a non-null ColorProfile objects, the ColorProfile will be
            embedded within the Tiff file.</para>
            <para>Default value is false.</para> </value>
            <remarks> ColorProfile objects are not written when the DotImage license is Photo. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpDecoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Windows Bitmap (BMP) images from a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <remarks> By default, when opening a Bmp image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the %RegisteredDecoders% and does not have to be
            explicitly set. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.#ctor">
            <summary> Initializes a new instance of a %BmpDecoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains a Bmp image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Bmp image stored in a Stream without decoding the image data. </summary>
            <overloads> Gets the BMP image information. </overloads>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an %AtalaImage% from a Stream containing a Bmp encoded image. </summary>
            <overloads> Reads the BMP to an AtalaImage. </overloads>
            <returns> An AtalaImage containing the image data. </returns>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpDecoder.SupportedImageType">
            <summary> Returns a Bmp ImageType enumeration value. </summary>
            <value> A Bmp ImageType enumeration value. </value>
            <value> ImageType.Bmp </value>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Windows Bitmap (BMP) images to a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <remarks> This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects
            when saving to specify a BMP image. </remarks>
            <example>
<para>This example demonstrates how to save the current image in a workspace to a  Bmp file.</para>
<code lang="VB" title="Saving a Bmp Image (Visual Basic)"><![CDATA[
myWorkspace.Save("c:\image.bmp", New BmpEncoder())
]]></code>

<code lang="CS" title="Saving a Bmp Image (C#)"><![CDATA[
myWorkspace.Save("c:\\image.bmp", new BmpEncoder());
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.BmpEncoder.compression">
            <summary> The compression to use when writing Bmp images. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.BmpEncoder"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.#ctor(Atalasoft.Imaging.Codec.BmpCompression)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Codec.BmpEncoder"/> specifying the compression to use. </summary>
            <param name="compression"> The compression to use when writing Bmp images. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Bmp image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpEncoder.Compression">
            <summary> The compression to use when writing Bmp images. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.CodecCompression">
            <summary> Derive from this class for any codec's specific compression type. </summary>
            <remarks> For use with the <see cref="E:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.SetEncoderCompression"/> event in <see cref="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder"/>. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.DecoderCollection">
            <summary> <para>A collection of <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/>.</para> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.#ctor">
            <summary> Creates a new instance of DecoderCollection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Add(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary> Adds an ImageDecoder to the collection. </summary>
            <param name="decoder"> The ImageDecoder to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary> Inserts an ImageDecoder into the collection at the specified index. </summary>
            <param name="index"> The index to place the ImageDecoder. </param>
            <param name="decoder"> The ImageDecoder to insert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.IndexOf(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary> Returns the index of a specific ImageDecoder within the collection. </summary>
            <returns> The index of the ImageDecoder or -1 if the decoder is not in the collection. </returns>
            <param name="decoder"> The ImageDecoder to look for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Contains(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary> Determines if a specific ImageDecoder is contained within the collection. </summary>
            <returns> <STRONG>True</STRONG> if the decoder is in the collection. </returns>
            <param name="decoder"> The ImageDecoder to search for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Remove(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary> Removes an ImageDecoder from the collection. </summary>
            <param name="decoder"> The ImageDecoder to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.CopyTo(Atalasoft.Imaging.Codec.ImageDecoder[],System.Int32)">
            <summary> Copies the decoders to an array. </summary>
            <param name="decoders"> An array to hold the ImageDecoders. </param>
            <param name="index"> The starting index in the array to start copying data. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.DecoderCollection.Item(System.Int32)">
            <summary> The indexer of this collection. </summary>
            <value> The ImageDecoder at the specified index. </value>
            <param name="index"> The index of the ImageDecoder to retrieve. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.DecoderDictionary">
            <summary> A dictionary of <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> objects. </summary>
            <remarks>Use this static class to add plug-ins to the project, and enumerate 
            through the current plugins that are set.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Add(Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary> Add a decoder to the project. </summary>
            <param name="imageType"> The image type for the decoder. </param>
            <param name="decoder"> The ImageDecoder to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.CopyTo(System.Collections.DictionaryEntry[],System.Int32)">
            <overloads> Copies items from the dictionary to an array. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Remove(Atalasoft.Imaging.Codec.ImageType)">
            <summary> Removes a decoder from the dictionary. </summary>
            <param name="imageType"> The image type to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Contains(Atalasoft.Imaging.Codec.ImageType)">
            <summary> Determines if a decoder is in the dictionary. </summary>
            <returns> <STRONG>True</STRONG> if the dictionary contains the decoder. </returns>
            <param name="imageType"> The image decoder type. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.DecoderDictionary.Item(Atalasoft.Imaging.Codec.ImageType)">
            <summary> Allows the decoders to be enumerated. </summary>
            <value> The ImageDecoder at that index. </value>
            <param name="index"> The index of the item to retrieve. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EmfDecoder">
            <remarks> <para>By default, when opening an Emf image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the %RegisteredDecoders% and does not have to be
            explicitly set. </para>
            <para>Any vectorized entities saved in the Metafile will be converted to a raster format.</para> </remarks>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Enhanced Metafiles (EMF) images from a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.#ctor">
            <summary> Initializes a new instance of a %EmfDecoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains an Emf image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from an Emf image stored in a Stream without decoding the image data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an %AtalaImage% from a Stream containing an Emf encoded image. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EmfDecoder.SupportedImageType">
            <summary> Returns an Emf ImageType enumeration value. </summary>
            <value> ImageType.Emf </value>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EmfEncoder">
            <summary>
            Summary description for EmfEncoder.
            </summary>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Enhanced Metafiles (EMF) images to a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <remarks> This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects
            when saving to specify a EMF image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfEncoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.EmfEncoder"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an %AtalaImage% as a Emf image to a stream. </summary>
            <summary> Encode an %AtalaImage% as an Emf image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EmfEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs">
            <summary> This object is used for events fired by an <see cref="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder"/> when requesting a
            compression type. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs._image">
            <summary> The AtalaImage that will be encoded. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs._frameIndex">
            <summary> The zero-based frame index (in the output) that is being encoded. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs._compression">
            <summary> The compression that will be used to encode the image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.#ctor(Atalasoft.Imaging.AtalaImage,System.Int32,Atalasoft.Imaging.Codec.CodecCompression)">
            <summary> Creates a new instance of <STRONG>EncoderCompressionEventArgs</STRONG>. </summary>
            <param name="image"> The AtalaImage that is to be encoded. </param>
            <param name="frameIndex"> The zero-based frame index that will be encoded. </param>
            <param name="compression"> The compression that will be used to encode the image. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.Image">
            <summary> Gets the AtalaImage that will be encoded. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.FrameIndex">
            <summary> Gets the zero based frame index that will be encoded. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.Compression">
            <summary> Gets or sets the compression that will be used to encode the image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EncoderCompressionEventHandler">
            <summary> Event handler used when specifying compression in the MultiFramedImageEncoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageType">
            <summary> The supported image file formats that dotImage can either read or write. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Unknown">
            <summary> Image file format is undefined </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Jpeg">
            <summary> Joint Photographic Experts Group. Uses lossy compression commonly used for Photographic type images. Read
            and Write. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Png">
            <summary> Portable Network Graphic supporting lossless compression. Read and Write. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Tiff">
            <summary> Tagged Image File. This is a universal and well known format for many uses inluding FAX and multipaged
            images. Read and Write. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Pcx">
            <summary> ZSoft PaintBrush. Read and Write. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Tga">
            <summary> Truevision Targa. May include an alpha channel. Read and Write. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Bmp">
            <summary> Windows Bitmap. Read and Write. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Wmf">
            <summary> Windows Meta File. Read and Write (raster only). </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Emf">
            <summary> Enhanced Windows Meta File. Read and Write (raster only). </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Psd">
            <summary> Adobe (tm) Photoshop format. Read and Write (flattened image only). </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Wbmp">
            <summary> Wireless Bitmap. Black and White format used with portable devices. Read and Write </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Gif">
            <summary> Graphics Interchange Format (LZW license required). Read and Write. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Tla">
            <summary> A lossless compressed image format similar to PNG with optional encryption. It can store 32, 24, 16, or
            8-bit data. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.Pcd">
            <summary> Kodak (tm) PhotoCD. Read only. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageType.J2k">
            <summary> Jpeg2000. Separate Plug-In requred to read and write. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcdResolution">
            <summary> PhotoCD Resolution (image size) to load. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseQuarter">
            <summary> 1/4 the size and 1/16 the memory of the base image. <I>192 x 128 pixels</I> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseHalf">
            <summary> 1/2 the size and 1/4 the memory of the base image. <I>384 x 256 pixels</I> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.Base">
            <summary> The base size of the PCD image. <I>768 x 512 pixels</I> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX2">
            <summary> Double the size and 4 times the memory of the base image. <I>1536 x 1024 pixels</I> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX4">
            <summary> 4 times the size and 16 times the memory of the base image. <I>3072 x 2048 pixels</I> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX8">
            <summary> 8 times the size and 64 times the memory of the base image. <I>6144 x 4096 pixels</I> </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffCompression">
            <summary> Contains the various compression types available for TIFF images. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.NoCompression">
            <summary> Specify no compression. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group3FaxEncoding">
            <summary> CCITT Group 3 fax encoding. Used on 1-bit images only, otherwise uses no compression. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group4FaxEncoding">
            <summary> CCITT Group 4 fax encoding. Used on 1-bit images only, otherwise uses no compression. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.JpegCompression">
            <summary> Lossy JPEG compression. Used on 8-bit grayscale and 24-bit RGB images only, otherwise uses no compression.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.MacintoshPackbits">
            <summary> A modified RLE (run length encoding) style of compression </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Deflate">
            <summary> ZIPLib compression, similar to PNG and WinZip </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Lzw">
            <summary> LZW compression. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.ModifiedHuffman">
            <summary> CCITT modified Huffman RLE. Used on 1-bit images only, otherwise uses no compression. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Default">
            <summary> Chooses the most appropriate compression depending on the pixel
            format.  1-bpp image will be saved with CCITG4 compression, and everything
            else will use LZW. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpCompression">
            <summary> Contains the various compression types available for Bmp images. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.BmpCompression.None">
            <summary> No compression. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.BmpCompression.Rle">
            <summary> Run Length Compression, only valid for 8-bit image saves. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegScaleFactor">
            <summary> The scaling factor to use when reading a Jpeg image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Full">
            <summary> The full encoded size. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Half">
            <summary> 1/2 the encoded size. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Quarter">
            <summary> 1/4 the encoded size. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Eighth">
            <summary> <para>1/8 the encoded size.</para> </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrameDisposal">
            <summary> The frame disposal method to use for animated GIF images. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.None">
            <summary> No action is taken. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.LeaveImage">
            <summary> Leaves the image in place when the next frame is drawn. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestorePrevious">
            <summary> Restores the previous frame. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestoreBackgroundColor">
            <summary> Restores the area occupied by the image with the animation background color. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ErrorLevel">
            <remarks> This enumeration is used in the <see cref="T:Atalasoft.Imaging.Codec.CodecErrorEventArgs"/> class in order to denote the severity of
            an error. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.None">
            <summary> This value denotes that there is no error present.  While it is not presently used, it is included for the
            sake of completeness. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.Warning">
            <summary> This value denotes that a problem of very mild severity has been detected in a codec. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.Error">
            <summary> This value denotes that a problem of moderate to high severity has been detected in a codec. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.Fatal">
            <summary> This value denotes that there a severe error has occurred that could be fatal to the CLR or the current
            application.  This severity should never be used in released software. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegDctMode">
            <summary> The DCT compression used when saving a JPEG image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.Default">
            <summary> The default compression; usually <STRONG>Slow</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.Slow">
            <summary> Slow but accurate integer algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.Fast">
            <summary> Faster, less accurate integer method. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.FloatingPoint">
            <summary> Floating-point method. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EpsEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Adobe Encapsulated PostScript images to a
            <see cref="T:System.IO.Stream"/>.</para> </summary>
            <remarks> This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or Workspace objects
            when saving to specify an EPS image.  The output format conforms to the Adobe Encapsulated PostScript 3.0
            specification. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EpsEncoder._includeShowPage">
            <summary> Determines whether or not this image will include the PostScript showpage command. </summary>
            <remarks> <para>Some applications that consume EPS do not handle the showpage command gracefully.  Suppressing it
            may help incompatible application handle the image correctly.</para>
            <para> </para>
            <para>Setting this property to false will prevent the image from displaying if it is sent directly to a PostScript
            device.</para>
            <para> </para>
            <para>The default value is <EM>true</EM>.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EpsEncoder._resolution">
            <summary> Sets the output resolution of the image. </summary>
            <remarks> <para>This property is ignored if <see cref="P:Atalasoft.Imaging.Codec.EpsEncoder.UseImageResolution"/> is set to
            <EM>true</EM>.</para>
            <para>The default value is 72 pixels per inch.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EpsEncoder._useImageResolution">
            <summary> Determine whether or not to use the resolution of the image to be saved. </summary>
            <remarks> <para>If this property is set to <EM>true</EM>, then the resolution off the image will be used for
            conversion to EPS.  If the image resolution has no units or the resolution is invalid, it will be treated as 72
            pixels per inch.</para>
            <para> </para>
            <para>Default value is <EM>true</EM>.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EpsEncoder._imageLocation">
            <summary> This sets the relative location of the image in page space in units of points. </summary>
            <remarks> <para>This sets where the image will be rendered on the virtual EPS page.  In page space, the lower left
            corner of the page is (0, 0), as in a conventional Cartesian coordinate system.  ImageLocation is the point at which
            the lower left corner of the image will be placed.</para>
            <para>In EPS, the notion of a page doesn't fully apply, but since EPS can also be rendered on a PostScript device,
            if this point isn't chosen carefully, the image may get clipped.</para>
            <para>By default, ImageLocation is (72, 72), or one inch up and to the right of the lower left corner of a
            page.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EpsEncoder._scale">
            <summary> Sets the output scale of the image. </summary>
            <remarks> <para>Use this to change the scale of the image in the EPS image.  It is initially set to (1, 1), which
            represents no change in scale.  To reduce the image, set this property to values less than 1 but greater than 0.  To
            enlarge the image, set this property to values greater than 1.</para>
            <para> </para>
            <para>Scale does not need to be uniform.  In other words, an image can be enlarged in either the x or y directions
            independently.</para>
            <para> </para>
            <para>Negative values will flip the image as well as scale it.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EpsEncoder._creator">
            <summary> Set the title of the image in the EPS header </summary>
            <remarks> Default value is "Untitled" </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EpsEncoder._title">
            <summary> Set the title of the image in the EPS header </summary>
            <remarks> Default value is "Untitled" </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EpsEncoder._invertBW">
            <summary> Switches the sense of black and white in 1 bit-per-pixel images </summary>
            <remarks> Default value is <EM>true</EM>. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.EpsEncoder._ignoreColorProfile">
            <summary> Allow the EPS encoder to ignore the color profile provided by an image. </summary>
            <remarks> If IgnoreColorProfile is set to <EM>false</EM> and the image contains a color profile, the resulting EPS
            will contain an embedded color profile.  If IgnoreColorProfile is set to <EM>true</EM> the color profile will be
            ignored. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EpsEncoder.#ctor">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Codec.EpsEncoder"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EpsEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as an EPS image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.IgnoreColorProfile">
            <summary> Allow the EPS encoder to ignore the color profile provided by an image. </summary>
            <remarks> If IgnoreColorProfile is set to <EM>false</EM> and the image contains a color profile, the resulting EPS
            will contain an embedded color profile.  If IgnoreColorProfile is set to <EM>true</EM> the color profile will be
            ignored. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.IncludeShowPage">
            <summary> Determines whether or not this image will include the PostScript showpage command. </summary>
            <remarks> <para>Some applications that consume EPS do not handle the showpage command gracefully.  Suppressing it
            may help incompatible application handle the image correctly.</para>
            <para> </para>
            <para>Setting this property to false will prevent the image from displaying if it is sent directly to a PostScript
            device.</para>
            <para> </para>
            <para>The default value is <EM>true</EM>.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Resolution">
            <summary> Sets the output resolution of the image. </summary>
            <remarks> <para>This property is ignored if <see cref="P:Atalasoft.Imaging.Codec.EpsEncoder.UseImageResolution"/> is set to
            <EM>true</EM>.</para>
            <para>The default value is 72 pixels per inch.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.UseImageResolution">
            <summary> Determine whether or not to use the resolution of the image to be saved. </summary>
            <remarks> <para>If this property is set to <EM>true</EM>, then the resolution off the image will be used for
            conversion to EPS.  If the image resolution has no units or the resolution is invalid, it will be treated as 72
            pixels per inch.</para>
            <para> </para>
            <para>Default value is <EM>true</EM>.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.ImageLocation">
            <summary> This sets the relative location of the image in page space in units of points. </summary>
            <remarks> <para>This sets where the image will be rendered on the virtual EPS page.  In page space, the lower left
            corner of the page is (0, 0), as in a conventional Cartesian coordinate system.  ImageLocation is the point at which
            the lower left corner of the image will be placed.</para>
            <para>In EPS, the notion of a page doesn't fully apply, but since EPS can also be rendered on a PostScript device,
            if this point isn't chosen carefully, the image may get clipped.</para>
            <para>By default, ImageLocation is (72, 72), or one inch up and to the right of the lower left corner of a
            page.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Scale">
            <summary> Sets the output scale of the image. </summary>
            <remarks> <para>Use this to change the scale of the image in the EPS image.  It is initially set to (1, 1), which
            represents no change in scale.  To reduce the image, set this property to values less than 1 but greater than 0.  To
            enlarge the image, set this property to values greater than 1.</para>
            <para> </para>
            <para>Scale does not need to be uniform.  In other words, an image can be enlarged in either the x or y directions
            independently.</para>
            <para> </para>
            <para>Negative values will flip the image as well as scale it.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Creator">
            <summary> This property represents the creator field in the header of the resulting EPS image. </summary>
            <remarks> If the string contains carriage return or new line characters, the resulting image may not work properly. 
            By default, this property is set to "%%company-full%%" </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Title">
            <summary> Set the title of the image in the EPS header </summary>
            <remarks> Default value is "Untitled" </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.InvertBW">
            <summary> Switches the sense of black and white in 1 bit-per-pixel images </summary>
            <remarks> Default value is <EM>true</EM>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.SupportedPixelFormats">
            <summary>
            Returns an array of pixel formats supported by this encoder.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.CodecErrorEventArgs">
            <summary> This class is used for encapsulating errors encountered while encoding or decoding image files. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.CodecErrorEventArgs._description">
            <summary> Get the description of the error that has occurred. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecErrorEventArgs.#ctor(System.String,Atalasoft.Imaging.Codec.ErrorLevel)">
            <summary> Construct a new set CodecErrorEventArgs object. </summary>
            <param name="description"> A string description of the error that has occurred. </param>
            <param name="level"> The severity of the error that has occurred. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.CodecErrorEventArgs.Description">
            <summary> Get the description of the error that has occurred. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.CodecErrorEventArgs.ErrorLevel">
            <summary> Get the severity of the error that has occurred. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.CodecErrorEventHandler">
            <summary> Event handler when errors occur when reading images. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageReadException">
            <summary> This exception is thrown when there is a problem reading an image </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor">
            <overloads> Creates an ImageReadException object. </overloads>
            <summary> Creates a new instance of ImageReadException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor(System.String)">
            <summary> Creates a new instance of ImageReadException specifying the exception message. </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of ImageReadException specifying the exception message and inner exception.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception for this error. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.ImageReadException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageWriteException">
            <summary> This exception is thrown when there is a problem writing an image </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor">
            <overloads> Creates an ImageWriteException. </overloads>
            <summary> Creates a new instance of ImageWriteException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor(System.String)">
            <summary> Creates a new instance of ImageWriteException specifying the exception message. </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of ImageWriteException specifying the exception message and inner exception.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception for this error. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.ImageWriteException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.LzwNotLicensedException">
            <summary> This exception is fired when LZW is not licensed yet an attempt is made to use LZW functionality.
            </summary>
            <remarks> This exception is no longer thrown as the LZW patents have expired in all countries. </remarks>
            <seealso> LZW/GIF License </seealso>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor">
            <overloads> Creates an LzwNotLicensedException. </overloads>
            <summary> Creates a new instance of LzwNotLicensedException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor(System.String)">
            <summary> Creates a new instance of LzwNotLicensedException specifying the exception message. </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of LzwNotLicensedException specifying the exception message and inner exception.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception for this error. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.LzwNotLicensedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.CodecException">
            <summary> This exception is thrown when there is an error in the codec (decoder or encoder). </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor">
            <summary> Creates a new instance of <STRONG>CodecException</STRONG>. </summary>
            <overloads> Creates a new instance of <STRONG>CodecException</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>CodecException</STRONG> specifying the error message. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of <STRONG>CodecException</STRONG> specifying the error message and inner
            exception. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.CodecException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifDecoder">
            <remarks> <para>By default, when opening a Gif image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the <see cref="T:Atalasoft.Imaging.Codec.RegisteredDecoders"/> and does not have to be
            explicitly set.</para> </remarks>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Compuserve Graphics Interchange (GIF) images from a
            <see cref="T:System.IO.Stream"/>.</para> </summary>
            <example>
<code lang="CS" title="Animated (C#)"><![CDATA[
// Open the file for reading.
FileStream fs = new FileStream(this.fileName, FileMode.Open, FileAccess.Read);

// Make sure it's a valid GIF.
GifDecoder gif = new GifDecoder();
if (gif.IsValidFormat(fs) == false)
{
    fs.Close();
    return;
}

// Seek back to the beginning of the file.
fs.Seek(0, SeekOrigin.Begin);

// The first time you access the GetFrameCount property,
// all of the frames are read into memory and are waiting
// for you to access them.
int count = gif.GetFrameCount(fs);

// Use the GifFrame properties to reconstruct the animation.
GifFrameCollection col = gif.Frames;

// Close the file.
fs.Close();
]]></code>

<code lang="VB" title="AnimatedVB (Visual Basic)"><![CDATA[
' Open the file for reading.
Dim fs As FileStream =  New FileStream(Me.fileName,FileMode.Open,FileAccess.Read) 
 
' Make sure it's a valid GIF.
Dim gif As GifDecoder =  New GifDecoder() 
If gif.IsValidFormat(fs) = False Then
    fs.Close()
    Return
End If
 
' Seek back to the beginning of the file.
fs.Seek(0, SeekOrigin.Begin)
 
' The first time you access the GetFrameCount property,
' all of the frames are read into memory and are waiting
' for you to access them.
Dim count As Integer =  gif.GetFrameCount(fs) 
 
' Use the GifFrame properties to reconstruct the animation.
Dim col As GifFrameCollection =  gif.Frames 
 
' Close the file.
fs.Close()
]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.#ctor">
            <summary> Initializes a new instance of a %GifDecoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.Codec.GifDecoder"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains a Gif image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetFrameCount(System.IO.Stream)">
            <summary> <para>Gets the number of frames in a GIF.</para> </summary>
            <returns> The number of frames in a GIF. </returns>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Gif image stored in a Stream without decoding the image data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <summary> Retreive information from a Gif image stored in a Stream without decoding the image data. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary> Retreive information from a specified frame in a Gif image stored in a Stream without decoding the image
            data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="frameIndex"> The zero based frame index to load from an animated GIF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an %AtalaImage% from a Stream containing a Gif encoded image. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
            <summary> Returns an %AtalaImage% from a Stream containing a Gif encoded image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns a specified frame to an %AtalaImage% from a Stream containing an animated Gif encoded image.
            </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="frameIndex"> The zero based frame index to load from an animated GIF. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifDecoder.Frames">
            <summary> Gets a GifFrameCollection from an animated GIF. </summary>
            <value> A GifFrameCollection containing information about the annimated GIF. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifDecoder.SupportedImageType">
            <summary> Returns a Gif ImageType enumeration value. </summary>
            <value> ImageType.Gif </value>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Compuserve Graphics Interchange (GIF) images to a
            <see cref="T:System.IO.Stream"/>.</para> </summary>
            <remarks> <para>This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects when saving to specify a GIF image. </para>
            <para> </para>
            <para>Gif Images typicaly have one color which is transparent.  When saving with a GifFrameCollection object, this
            is indicated by the TransparentIndex property of each GifFrame.  </para>
            <para>When saving with a regular AtalaImage or ImageCollection, the transparent index is determined automaticaly. 
            Each color in the palette can have an alpha value between 0 and 255.  The GifEncoder will chose (as the transparent
            color) the first fully transparent color in the palette, that is the first color with an alpha value of 255.</para>
            </remarks>
            <example>
<code lang="CS" title="SaveAnimatedGif (C#)"><![CDATA[
private void CreateAnimatedGif(string fileName, ImageCollection images)
{
    // Find the maximum size of the animation.
    int width = 0;
    int height = 0;
    foreach(AtalaImage img in images)
    {
        if (img.Width > width)
            width = img.Width;

        if (img.Height > height)
            height = img.Height;
    }

    // Create the frame collection.
    GifFrameCollection col = new GifFrameCollection();
    col.Width = width;
    col.Height = height;
    col.LoopCount = 0;  // infinite
    col.TransparentIndex = -1;  // no transparency
    
    // Center each image.
    foreach(AtalaImage img in images)
    {
        GifFrame frame = new GifFrame(img, new Point((width - img.Width) / 2, (height - img.Height) / 2));
        col.Add(frame);
    }

    // Save the image.
    FileStream fs = new FileStream(fileName, FileMode.Create, FileAccess.Write);
    GifEncoder encoder = new GifEncoder();
    encoder.Save(fs, col, null);
    fs.Close();

    // Free the collection.
    col.Dispose();
}
]]></code>

<code lang="VB" title="SaveAnimatedGifVB (Visual Basic)"><![CDATA[
Private  Sub CreateAnimatedGif(ByVal fileName As String, ByVal images As ImageCollection)
    ' Find the maximum size of the animation.
    Dim width As Integer =  0 
    Dim height As Integer =  0 
    Dim img As AtalaImage
    For Each img In images
        If img.Width > width Then
            width = img.Width
        End If
 
        If img.Height > height Then
            height = img.Height
        End If
    Next
 
    ' Create the frame collection.
    Dim col As GifFrameCollection =  New GifFrameCollection() 
    col.Width = width
    col.Height = height
    col.LoopCount = 0  ' infinite
    col.TransparentIndex = -1  ' no transparency
 
    ' Center each image.
    Dim img As AtalaImage
    For Each img In images
        Dim frame As GifFrame =  New GifFrame(img, New Point((width - img.Width) / 2,(height - img.Height) / 2)) 
        col.Add(frame)
    Next
 
    ' Save the image.
    Dim fs As FileStream =  New FileStream(fileName,FileMode.Create,FileAccess.Write) 
    Dim encoder As GifEncoder =  New GifEncoder() 
    encoder.Save(fs, col, Nothing)
    fs.Close()
 
    ' Free the collection.
    col.Dispose()
End Sub
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifEncoder.interlace">
            <summary> Gets or sets a value indicating if the image is saved with a pixel row interlacing pattern.  Default
            <STRONG>false</STRONG> </summary>
            <remarks> Interlacing is a technique that allows a Gif to be displayed gradually. It first displays a blocky image
            which becomes finer and more clear as the image loads. </remarks>
            <value> A value indicating if the image is saved with a pixel row interlacing pattern. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifEncoder.optimizeColorDepth">
            <summary> Gets or sets a value indicating if the bitdepth is optimized based on the number of colors in the palette.
            Default <STRONG>true</STRONG>. </summary>
            <value> A value indicating if the bitdepth is optimized. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.#ctor">
            <summary> Initializes a new instance of a %GifEncoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.#ctor(System.Boolean)">
            <summary> Initializes a new instance of a %BmpEncoder% specifying the interlace setting. </summary>
            <param name="interlace"> A value indicating if the image is saved with a pixel row interlacing pattern. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.#ctor(System.Boolean,System.Boolean)">
            <summary> Creates a new instance of GifEncoder specifying whether to interlace the image and optimize color depth.
            </summary>
            <param name="interlace"> A value indicating if the image is saved with a pixel row
            interlacing pattern. </param>
            <param name="optimizeColorDepth"> A value indicating whether to optimize the color depth. </param>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifEncoder._backgroundIndex">
            <summary> Gets or sets the background index to store in the GIF file. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Gif image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Gif image to a stream. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save(System.IO.Stream,Atalasoft.Imaging.Codec.GifFrameCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Saves an animated GIF image. </summary>
            <param name="stream"> The stream to save the image into. </param>
            <param name="frameCollection"> The GifFrameCollection containing information about each frame in the animation.
            </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.OptimizeColorDepth">
            <summary> Gets or sets a value indicating if the bitdepth is optimized based on the number of colors in the palette.
            Default <STRONG>true</STRONG>. </summary>
            <value> A value indicating if the bitdepth is optimized. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.Interlace">
            <summary> Gets or sets a value indicating if the image is saved with a pixel row interlacing pattern.  Default
            <STRONG>false</STRONG> </summary>
            <remarks> Interlacing is a technique that allows a Gif to be displayed gradually. It first displays a blocky image
            which becomes finer and more clear as the image loads. </remarks>
            <value> A value indicating if the image is saved with a pixel row interlacing pattern. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.BackgroundIndex">
            <summary> Gets or sets the background index to store in the GIF file. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrame">
            <summary> The GifFrame class holds information about a single frame in an animated GIF file. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrame.location">
            <summary> Gets or sets the location to render the image on the animated canvas. </summary>
            <value> The location to render the image on the animated canvas. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrame.delayTime">
            <summary> Gets or sets the number of milliseconds this frame should be displayed. </summary>
            <value> The number of milliseconds this frame should be displayed. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrame.interlaced">
            <summary> Gets or sets a value indicating whether the image is interlaced. </summary>
            <value> A value indicating whether the image is interlaced. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrame.transparentIndex">
            <summary> Gets or sets the transparent index for this image. </summary>
            <value> The transparent index for this image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrame.image">
            <summary> Gets or sets the image for this frame. </summary>
            <value> The AtalaImage for this frame. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrame.frameDisposal">
            <summary> Gets or sets the method of frame disposal to use before rendering the next frame. </summary>
            <value> The method of frame disposal to use before rendering the next frame. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrame.useLocalPalette">
            <summary> Gets or sets a value indicating whether this image uses the global palette or it's own palette. </summary>
            <remarks> Using a global palette for all of the images will reduce the file size. </remarks>
            <value> A value indicating whether this image uses the global palette or it's own palette. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32,System.Boolean,Atalasoft.Imaging.Codec.GifFrameDisposal,System.Int32,System.Boolean)">
            <summary> Creates a new instance of GifFrame specifying the frame image, location, delay time, interlaced, frame
            disposal, transparent index and local palette settings. </summary>
            <param name="image"> The image for this frame. </param>
            <param name="location"> The location to render the image on the animated canvas. </param>
            <param name="delayTime"> The number of milliseconds this frame should be displayed. </param>
            <param name="interlaced"> A value indicating whether the image is interlaced. </param>
            <param name="frameDisposal"> The method of frame disposal to use before rendering the next frame. </param>
            <param name="transparentIndex"> The transparent index for this image. </param>
            <param name="useLocalPalette"> A value indicating whether this image uses the global palette or it's own palette.
            </param>
            <summary> Creates a new instance of GifFrame. </summary>
            <overloads> Creates a new instance of GifFrame. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32)">
            <summary> Creates a new instance of GifFrame specifying the frame image, location and delay time. </summary>
            <param name="image"> The image for this frame. </param>
            <param name="location"> The location to render the image on the animated canvas. </param>
            <param name="delayTime"> The number of milliseconds this frame should be displayed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary> Creates a new instance of GifFrame specifying the frame image and location. </summary>
            <param name="image"> The image for this frame. </param>
            <param name="location"> The location to render the image on the animated canvas. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new instance of GifFrame specifying the frame image. </summary>
            <param name="image"> The image for this frame. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.GifFrame"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.Codec.GifFrame"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.Image">
            <summary> Gets or sets the image for this frame. </summary>
            <value> The AtalaImage for this frame. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.Location">
            <summary> Gets or sets the location to render the image on the animated canvas. </summary>
            <value> The location to render the image on the animated canvas. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.DelayTime">
            <summary> Gets or sets the number of milliseconds this frame should be displayed. </summary>
            <value> The number of milliseconds this frame should be displayed. </value>
            <remarks>The time is measured in 1/100 of a second.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.TransparentIndex">
            
            <summary> Gets or sets the transparent index for this image. </summary>
            <value> The transparent index for this image. </value>
            <remarks>If UseLocalPalette is true, this is an index from the palette for this frame. Otherwise this is an index from the global palette.  A value of -1 turns off transparency.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.Interlaced">
            <summary> Gets or sets a value indicating whether the image is interlaced. </summary>
            <value> A value indicating whether the image is interlaced. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.FrameDisposal">
            <summary> Gets or sets the method of frame disposal to use before rendering the next frame. </summary>
            <value> The method of frame disposal to use before rendering the next frame. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.UseLocalPalette">
            <summary> Gets or sets a value indicating whether this image uses the global palette or it's own palette. </summary>
            <remarks> Using a global palette for all of the images will reduce the file size. </remarks>
            <value> A value indicating whether this image uses the global palette or it's own palette. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrameCollection">
            <summary> <para>The GifFrameCollection class represents an animated GIF file.  It contains all of the frames and
            properties for the animation. </para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameCollection.loopCount">
            <summary> Gets or sets the number of times to loop through the animation. </summary>
            <value> The number of times to loop through the animation. </value>
            <remarks> If this value is 0, the animation loop is infinite. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameCollection.backgroundColorIndex">
            <summary> Gets or sets the index in the global palette used as the background color for the animation canvas.
            </summary>
            <value> The index in the global palette used as the background color for the animation canvas. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameCollection.transparentIndex">
            <summary> Gets or sets the index in the global palette which represents the transparent color. </summary>
            <value> The index in the global palette which represents the transparent color. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameCollection.globalPalette">
            <summary> Gets or sets the palette used by frames in the GIF. </summary>
            <value> The palette used by frames in the GIF. </value>
            <remarks> Using a global palette can decrease the overall size of the animated GIF. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameCollection.width">
            <remarks> All images added to the collection must be equal or less than this size. </remarks>
            <summary> Gets or sets the width of the animation canvas. </summary>
            <value> The width of the animation canvas. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameCollection.height">
            <summary> Gets or sets the height of the animation canvas. </summary>
            <value> The height of the animation canvas. </value>
            <remarks> All images added to the collection must be equal to or less than this size. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.#ctor">
            <summary> Creates a new instance of GifFrameCollection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Dispose">
            <summary> Releases all of the frames from the collection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.Codec.GifFrameCollection"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Add(Atalasoft.Imaging.Codec.GifFrame)">
            <summary> Adds a frame to the collection. </summary>
            <param name="frame"> The GifFrame to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.GifFrame)">
            <summary> Inserts a frame into the collection at the specified position. </summary>
            <param name="index"> The index position which the frame should be placed. </param>
            <param name="frame"> The GifFrame to insert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Remove(Atalasoft.Imaging.Codec.GifFrame)">
            <summary> Removes a frame from the collection. </summary>
            <param name="frame"> The GifFrame to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.IndexOf(Atalasoft.Imaging.Codec.GifFrame)">
            <summary> Looks up the index for a specific frame. </summary>
            <returns> The index of the frame. </returns>
            <param name="frame"> The GifFrame to look for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Contains(Atalasoft.Imaging.Codec.GifFrame)">
            <summary> Checks to see if a specific frame already exists in the collection. </summary>
            <returns> True if the frame exists. </returns>
            <param name="frame"> The GifFrame to look for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.CopyTo(Atalasoft.Imaging.Codec.GifFrame[],System.Int32)">
            <summary> Copies the GifFrames into an array. </summary>
            <param name="frames"> An array of GifFrame in which the collection will be copied. </param>
            <param name="index"> The index in the frames array to begin copying to. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Width">
            <remarks>This is the width of the final output.  All frames must fit inside this area.</remarks>
            <remarks> <para>This is the width of the final output.  All frames must fit inside this area.</para>
            <para>All images added to the collection must be equal or less than this size. </para></remarks>
            <summary> Gets or sets the width of the animation canvas. </summary>
            <value> The width of the animation canvas. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Height">
            <summary> Gets or sets the height of the animation canvas. </summary>
            <value> The height of the animation canvas. </value>
            <remarks><para>All images added to the collection must be equal to or less than this size. </para>
            <para>This is the height of the final output.  All frames must fit inside this area.</para></remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.LoopCount">
            <summary> Gets or sets the number of times to loop through the animation. </summary>
            <value> The number of times to loop through the animation. </value>
            <remarks> If this value is 0, the animation loop is infinite. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.TransparentIndex">
            <remarks>A value of -1 disables transparency.</remarks>
            <summary> Gets or sets the index in the global palette which represents the transparent color. </summary>
            <value> The index in the global palette which represents the transparent color. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.BackgroundColorIndex">
            <summary> Gets or sets the index in the global palette used as the background color for the animation canvas.
            </summary>
            <value> The index in the global palette used as the background color for the animation canvas. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.GlobalPalette">
            <summary> Gets or sets the palette used by frames in the GIF. </summary>
            <value> The palette used by frames in the GIF. </value>
            <remarks><para> Using a global palette can decrease the overall size of the animated GIF.</para> 
            <para>While it's possible to use a separate palette for each image, it's recommended that you only use the global palette.</para></remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Item(System.Int32)">
            <value> A GifFrame at the specified index. </value>
            <summary> Gets a GifFrame at the specified index. </summary>
            <param name="index"> The index of the GifFrame to retrieve. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifImageInfo">
            <summary> Summary description for PngImageInfo. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageInfo">
            <summary> Contains information from an encoded image file. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageInfo.size">
            <summary> The width and height of the image, when read. </summary>
            <value> The width and height of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageInfo.colorDepth">
            <summary> The bits per pixel of the image, when read. </summary>
            <value> The bits per pixel of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageInfo.pixelFormat">
            <summary> The <strong>PixelFormat</strong> which will be returned when the image is read. </summary>
            <remarks> The pixel format to read might be different then the actual format stored within the image. dotImage will
            do it's best to read to the native pixel format and colordepth. </remarks>
            <value> The <STRONG>PixelFormat</STRONG> which will be returned when the image is read. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageInfo.imageType">
            <summary> The image file format. </summary>
            <value> The image file format. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageInfo.resolution">
            <summary> The image resolution, usually in dots per inch</summary>
            <value> The image resolution. Usually units == DotsPerInch but not always. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ImageInfo.frameCount">
            <summary> The number of frames/images/pages in the file. </summary>
            <value> The number of frames/images/pages in the file. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo.#ctor">
            <summary> Initialize a new instance of <see cref="T:Atalasoft.Imaging.Codec.ImageInfo"/>. </summary>
            <overloads> Creates an ImageInfo object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat)">
            <summary> Initialize a new instance of <see cref="T:Atalasoft.Imaging.Codec.ImageInfo"/> specifying its properties. </summary>
            <param name="size"> The width and height of the image, as loaded. </param>
            <param name="colorDepth"> The bits per pixel of the image, as loaded. </param>
            <param name="imageType"> The format of the image file. </param>
            <param name="resolution"> The resolution of the image (usually expressed in dots per inch). </param>
            <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> of the image, as loaded. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Int32)">
            <summary> Initialize a new instance of ImageInfo specifying its properties for a multi-frame image. </summary>
            <param name="size"> The width and height of the image, as loaded. </param>
            <param name="colorDepth"> The bits per pixel of the image, as loaded. </param>
            <param name="imageType"> The format of the image file. </param>
            <param name="resolution"> The resolution of the image (usually expressed in dots per inch). </param>
            <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> of the image, as loaded. </param>
            <param name="frameCount"> <para>The number of frames/images/pages in the file.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Size">
            <summary> The width and height of the image, as loaded. </summary>
            <value> The width and height of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ColorDepth">
            <summary> The bits per pixel of the image, as loaded. </summary>
            <value> The bits per pixel of the image, as loaded. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ImageType">
            <summary> The file format. </summary>
            <value> The file format. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Resolution">
            <summary> The image resolution, usually in dots per inch. </summary>
            <value> The image resolution. Usually units == DotsPerInch but not always. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.PixelFormat">
            <summary> The <strong>PixelFormat</strong> of the image, as loaded. </summary>
            <remarks> The pixel format as loaded might be different then the format of the image in the file.
            dotImage will do its best to read to the native pixel format and colordepth. </remarks>
            <value> The <STRONG>PixelFormat</STRONG> of the image (as loaded). </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.FrameCount">
            <summary> The number of frames/images/pages in the file. </summary>
            <value> The number of frames/images/pages in the file. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifImageInfo.leftOffset">
            <summary> Gets or sets the pixel offset from the left side of the animated screen area. </summary>
            <value> The pixel offset from the left side of the animated screen area. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifImageInfo.topOffset">
            <summary> Gets or sets the pixel offset from the top of the animated screen area. </summary>
            <value> The pixel offset from the top of the animated screen area. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifImageInfo.delayTime">
            <summary> Gets or sets the amount of time to display this frame in milliseconds. </summary>
            <value> The amount of time to display this frame in milliseconds. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifImageInfo.frameDisposal">
            <summary> Gets or sets the frame disposal method to use for this frame. </summary>
            <value> The frame disposal method to use for this frame. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifImageInfo.interlaced">
            <summary> Gets a value indicating if the GIF is interlaced. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifImageInfo._backgroundIndex">
            <summary> Gets the background index in the GIF file. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo.#ctor">
            <summary> Initializes a new instance of %GifImageInfo%. </summary>
            <overloads> Creates a GifImageInfo object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Int32)">
            <summary> Initialize a new instance of %GifImageInfo% specifying it's properties. </summary>
            <param name="size"> The width and height of the image. </param>
            <param name="colorDepth"> The bits per pixel of the image. </param>
            <param name="imageType"> The image type. </param>
            <param name="resolution"> The image resolution, usually expressed in dots per inch. </param>
            <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> which will be returned when the image is read. </param>
            <param name="transIndex"> The transparent pixel index. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TransparentIndex">
            <summary> Gets the transparent index of the Gif. </summary>
            <value> The transparent index of the Gif. </value>
            <remarks> This value may be -1 if no transparent index is used. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.BackgroundIndex">
            <summary> Gets the background index in the GIF file. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.LeftOffset">
            <summary> Gets or sets the pixel offset from the left side of the animated screen area. </summary>
            <value> The pixel offset from the left side of the animated screen area. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TopOffset">
            <summary> Gets or sets the pixel offset from the top of the animated screen area. </summary>
            <value> The pixel offset from the top of the animated screen area. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.DelayTime">
            <summary> Gets or sets the amount of time to display this frame in milliseconds. </summary>
            <value> The amount of time to display this frame in milliseconds. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.FrameDisposal">
            <summary> Gets or sets the frame disposal method to use for this frame. </summary>
            <value> The frame disposal method to use for this frame. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.Interlaced">
            <summary> Gets a value indicating if the GIF is interlaced. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IVectorDecoder">
            <summary>
            Represents a codec that specializes in decoding a vector image file.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.IVectorDecoder.RasterizeScaledRegion(System.IO.Stream,System.Drawing.RectangleF,System.Drawing.SizeF,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Renders a section of the file from the source rectangle into the destination rectangle.
            </summary>
            <param name="stream">The stream containing the vector file.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="dstSize">Size of the destination rectangle.</param>
            <param name="progress">The progress handler.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IMultiFramedVectorDecoder">
            <summary>
            Represents a codec that specializes in decoding a vector image file that can have multiple pages.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.IMultiFramedVectorDecoder.RasterizeScaledRegion(System.IO.Stream,System.Int32,System.Drawing.RectangleF,System.Drawing.SizeF,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>
            Renders a section of the file from the source rectangle into the destination rectangle.
            </summary>
            <param name="stream">The stream containing the vector file.</param>
            <param name="frameIndex">Index of the frame to render.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="dstSize">Size of the destination rectangle.</param>
            <param name="progress">The progress handler.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegDecoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read JPEG images from a <see cref="T:System.IO.Stream"/>.</para> </summary>
            <remarks> <para>By default, when opening a Jpeg image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the %RegisteredDecoders% and does not have to be
            explicitly set. </para>
            <para>Jpeg images can store metadata such as EXIF and IPTC into the images.  See the %Atalasoft.Imaging.Metadata%
            namespace for more information on reading this information from a Jpeg image.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegDecoder.scaleFactor">
            <summary> Gets or sets a value indicating the scale factor to use when reading Jpeg's. </summary>
            <value> The scale factor to use when reading Jpeg's. </value>
            <remarks> The scale factor allows a Jpeg image to be read to a smaller sized image.  This is a good quick way of
            creating thumbnails out of Jpeg images. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegDecoder"/>. </summary>
            <overloads> Creates a new JpegDecoder. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains a Jpeg image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.#ctor(Atalasoft.Imaging.Codec.JpegScaleFactor)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegDecoder"/> specifying the Jpeg scaling factor. </summary>
            <param name="scaleFactor"> The Jpeg scaling factor to use when reading the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Jpeg image stored in a Stream without decoding the image data. </summary>
            <remarks> Many JPEG images do not contain valid resolution information.  In these cases, the image info will contain
            a resolution of 96 pixels per inch. </remarks>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Jpeg encoded image. </summary>
            <remarks> Many JPEG images do not contain valid resolution information.  In these cases, the image info will contain
            a resolution of 96 pixels per inch. </remarks>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.GetBestScale(System.IO.Stream,System.Int32,System.Double)">
            <summary> Gets the best scale given a requested scale factor.  For a JPEG, this would result in either 1, 1/2, 1/4,
            1/16, or 1/32 </summary>
            <param name="stream"> The encoded image stream </param>
            <param name="frameIndex"> not used for JPEG's </param>
            <param name="requestedScale"> The scale to request </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Gets an AtalaImage of the requested scale. </summary>
            <param name="stream"> The encoded image </param>
            <param name="frameIndex"> Not used for JPEG's </param>
            <param name="scaleFactor"> The scale factor </param>
            <param name="progress"> A progress delegate </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.ScaleFactor">
            <summary> Gets or sets a value indicating the scale factor to use when reading Jpeg's. </summary>
            <value> The scale factor to use when reading Jpeg's. </value>
            <remarks> The scale factor allows a Jpeg image to be read to a smaller sized image.  This is a good quick way of
            creating thumbnails out of Jpeg images. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.SupportedImageType">
            <summary> Returns a Jpeg ImageType enumeration value. </summary>
            <value> ImageType.Jpeg </value>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write JPEG images to a <see cref="T:System.IO.Stream"/>.</para> </summary>
            <remarks> <para>This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects when saving to specify a JPEG image. </para>
            <para>Metadata can be written with the JPEG image including EXIF, IPTC and COM Comments.  See the
            <see cref="N:Atalasoft.Imaging.Metadata"/> namespace for more information.</para>
            <para>If the image being saved contains a <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/>, it will be embedded within the file.</para>
            </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegEncoder.quality">
            <summary> Gets or sets the quality level of the Jpeg as it's encoded to a file.  Valid values are 1 - 100 with a
            default of 75. </summary>
            <value> The quality level of the Jpeg as it's encoded to a file. </value>
            <remarks> The lower the quality, the smaller the filesize.  A good range of values is between 70 and 95. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegEncoder.smoothing">
            <summary> Gets or sets the smoothing level when saving a Jpeg image. </summary>
            <remarks> Valid values are 0 to 100 with a default of 0.  Increasing the smoothing value will tend to create smaller
            Jpeg files, however             the image is blurred while saving. </remarks>
            <value> The smoothing level when saving a Jpeg image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegEncoder.progressive">
            <summary> Gets or sets a value indicating if the image is saved progressively. </summary>
            <remarks> A progressive Jpeg will be displayed while it's being loaded from top down in supported viewers such as
            web browsers. </remarks>
            <value> A value indicating if the image is saved progressively. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegEncoder._xmp">
            <summary> Gets or sets a byte array containing XMP data. </summary>
            <value> A byte array containing XMP data. </value>
            <remarks> This property can be used to save XMP Annotation data created with <STRONG>DotImage</STRONG>, our full
            featured Annotations toolkit for the Microsoft .NET Framework. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegEncoder._dctMode">
            <summary> Gets or sets the DCT compression mode used for encoding. </summary>
            <value> The DCT compression. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor">
            <summary> Initializes a new instance of a <strong>JpegEncoder</strong>. </summary>
            <overloads> Creates a JpegEncoder. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.JpegEncoder"/> specifying the quality.
            </summary>
            <param name="quality">The quality level.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor(System.Int32,System.Int32)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegEncoder"/> specifying the quality and smoothing. </summary>
            <param name="quality"> The quality level. </param>
            <param name="smoothing"> The smoothing level. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegEncoder"/> specifying the quality, smoothing, and progressive value.
            </summary>
            <param name="quality"> The quality level. </param>
            <param name="smoothing"> The smoothing level. </param>
            <param name="progressive"> A value indicating if the image is saved progressively. </param>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegEncoder._appMarkers">
            <summary> Gets or sets the JPEG APPn Markers that will be saved with the image. </summary>
            <remarks> Metadata can be preserved in the new image by setting this property to the JPEG Marker collection from the
            source image. </remarks>
            <value> The JPEG APPn Markers that will be saved with the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegEncoder._iptcTags">
            <summary> Gets or sets IPTC Metadata that will be saved with the image. </summary>
            <value> IPTC Metadata that will be saved with the image. </value>
            <remarks> Setting this property to an <STRONG>IptcCollection</STRONG> allows IPTC tags to be added or inserted into
            a new JPEG image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegEncoder._comText">
            <summary> Gets or sets COM Text Markers that are to be saved with the image. </summary>
            <value> COM Text Markers that are to be saved with the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegEncoder._photoshopResources">
            <remarks> Photoshop saves information to the APP13 Jpeg Marker.  This information can be parsed with the <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser"/>.  When <EM>PhotoshopResources</EM> and <EM>IptcTags</EM> are set to a value other
            than null, IptcData will be added to the PhotoshopResource when saved. </remarks>
            <summary> Gets or sets Photoshop resources to be saved with the image. </summary>
            <value> Photoshop resources to be saved with the image. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.SetDownsamplingFactors(System.Int32[],System.Int32[])">
            <summary> Sets the downsampling factors used when compressing the image data.  This will affect both quality and
            file size of the saved image. </summary>
            <remarks> <para>The horizontal and vertical arrays represent the factors for each color channel.  If the image is
            8-bit there should only be a single element in the array.  For 24-bit images there will be three elements.</para>
            <para>The values of these factors range from 1 to 4, but not all value combinations will work.  Those that do not
            work will throw an exception when saving the image.</para> </remarks>
            <overloads>
            <example>
<code lang="CS"><![CDATA[
JpegEncoder encoder = new JpegEncoder(90);
encoder.SetDownsamplingFactors(new int[] { 1, 1, 1 }, new int[] { 1, 1, 1 });
using (FileStream fs = new FileStream(filename, FileMode.Create, FileAccess.Write))
{
    encoder.Save(fs, image, null);
}
]]></code>

<code lang="CS"><![CDATA[
JpegEncoder encoder = new JpegEncoder(90);
encoder.SetDownsamplingFactors(new int[] { 1, 1, 1 }, new int[] { 1, 1, 1 });
using (FileStream fs = new FileStream(filename, FileMode.Create, FileAccess.Write))
{
    encoder.Save(fs, image, null);
}
]]></code>

<code lang="VB"><![CDATA[
Dim encoder As JpegEncoder = New JpegEncoder(90)
Dim factors() As Integer = New Integer() {1, 1, 1}
encoder.SetDownsamplingFactors(factors, factors)

Dim fs As FileStream = New FileStream(filename, FileMode.Create, FileAccess.Write)
encoder.Save(fs, Image, Nothing)
fs.Close()
]]></code>
</example>
            </overloads>
            <seealso> DctMode Property </seealso>
            <param name="horizontalFactors"> An array of horizontal factors used.  This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) to use the default settings.  See remarks below for more information. </param>
            <param name="verticalFactors"> An array of vertical factors used.  This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) to use the default settings.  See remarks below for more information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Jpeg image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.String,System.String)">
            <summary> These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG
            metadata with new metadata. </summary>
            <remarks> By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the
            need to recompress the image data.  This method does not overwrite existing JPEG images, but creates a copy of the
            existing JPEG data.  The original image could be deleted if this method succeeds. </remarks>
            <example> CopyJpegWithNewMarkers Method </example>
            <param name="source"> The source image filename to copy from. </param>
            <param name="dest"> The destintation image filename to copy to. </param>
            <overloads> These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG
            metadata with new metadata. </overloads>
            <remarks> By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the
            need to recompress the image data.  This method does not overwrite existing JPEG images, but creates a copy of the
            existing JPEG data.  The original image could be deleted if this method succeeds. </remarks>
            <overloads>
            <example>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
IptcCollection iptc = new IptcCollection();
iptc.Add(new IptcTag(2, 25, 0, "Testing CopyJpegMarkers"));
FileStream fsIn = new FileStream("myimageIn.jpg", FileMode.Open, FileAccess.Read);
FileStream fsOut = new FileStream("myimageOut.jpg", FileMode.Create, FileAccess.Write);
JpegEncoder jpeg = new JpegEncoder();
jpeg.IptcTags = iptc;
jpeg.CopyJpegWithNewMarkers(fsIn,fsOut);
fsIn.Close();
fsOut.Close();
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
Dim iptc As IptcCollection = new IptcCollection()
iptc.Add(New IptcTag(2, 25, 0, "Testing CopyJpegMarkers"))
Dim fsIn As FileStream = New FileStream("myimageIn.jpg", FileMode.Open, FileAccess.Read)
Dim fsOut As FileStream = New FileStream("myimageOut.jpg", FileMode.Create, FileAccess.Write)
Dim jpeg As JpegEncoder = New JpegEncoder()
jpeg.IptcTags = iptc
jpeg.CopyJpegWithNewMarkers(fsIn, fsOut)
fsIn.Close()
fsOut.Close()
]]></code>
</example>
            </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.String,System.String,Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags)">
            <summary> These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG
            metadata with new metadata. </summary>
            <remarks> By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the
            need to recompress the image data.  This method does not overwrite existing JPEG images, but creates a copy of the
            existing JPEG data.  The original image could be deleted if this method succeeds. </remarks>
            <example> CopyJpegWithNewMarkers Method </example>
            <param name="source"> The source image filename to copy from. </param>
            <param name="dest"> The destintation image filename to copy to. </param>
            <param name="flags"> Specifies the metadata to copy into the new image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.IO.Stream,System.IO.Stream)">
            <summary> Performs a lossless copy of the JPEG image data into a new image while replacing the JPEG metadata with
            new metadata. </summary>
            <remarks> By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the
            need to recompress the image data.  This method does not overwrite existing JPEG images, but creates a copy of the
            existing JPEG data.  The original image could be deleted if this method succeeds. </remarks>
            <example> CopyJpegWithNewMarkers Method </example>
            <param name="source"> The source image stream to copy from. </param>
            <param name="dest"> The destintation image stream to copy to. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags)">
            <summary> These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG
            metadata with new metadata. </summary>
            <remarks> By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the
            need to recompress the image data.  This method does not overwrite existing JPEG images, but creates a copy of the
            existing JPEG data.  The original image could be deleted if this method succeeds. </remarks>
            <example> CopyJpegWithNewMarkers Method </example>
            <param name="source"> The source image stream to copy from. </param>
            <param name="dest"> The destintation image stream to copy to. </param>
            <param name="flags"> Specifies the metadata to copy into the new image. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.ImageType">
            <summary> Get the <STRONG>ImageType</STRONG> associated with this Encoder Setting. </summary>
            <value> The <strong>ImageType</strong> associated with this Encoder Setting. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Xmp">
            <summary> Gets or sets a byte array containing XMP data. </summary>
            <value> A byte array containing XMP data. </value>
            <remarks> This property can be used to save XMP Annotation data created with <STRONG>DotImage</STRONG>, our full
            featured Annotations toolkit for the Microsoft .NET Framework. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.AppMarkers">
            <summary> Gets or sets the JPEG APPn Markers that will be saved with the image. </summary>
            <remarks> Metadata can be preserved in the new image by setting this property to the JPEG Marker collection from the
            source image. </remarks>
            <value> The JPEG APPn Markers that will be saved with the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.IptcTags">
            <summary> Gets or sets IPTC Metadata that will be saved with the image. </summary>
            <value> IPTC Metadata that will be saved with the image. </value>
            <remarks> Setting this property to an <STRONG>IptcCollection</STRONG> allows IPTC tags to be added or inserted into
            a new JPEG image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.ComText">
            <summary> Gets or sets COM Text Markers that are to be saved with the image. </summary>
            <value> COM Text Markers that are to be saved with the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.PhotoshopResources">
            <remarks> Photoshop saves information to the APP13 Jpeg Marker.  This information can be parsed with the <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser"/>.  When <EM>PhotoshopResources</EM> and <EM>IptcTags</EM> are set to a value other
            than null, IptcData will be added to the PhotoshopResource when saved. </remarks>
            <summary> Gets or sets Photoshop resources to be saved with the image. </summary>
            <value> Photoshop resources to be saved with the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.DctMode">
            <summary> Gets or sets the DCT compression mode used for encoding. </summary>
            <value> The DCT compression. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Quality">
            <summary> Gets or sets the quality level of the Jpeg as it's encoded to a file.  Valid values are 1 - 100 with a
            default of 75. </summary>
            <value> The quality level of the Jpeg as it's encoded to a file. </value>
            <remarks> The lower the quality, the smaller the filesize.  A good range of values is between 70 and 95. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Smoothing">
            <summary> Gets or sets the smoothing level when saving a Jpeg image. </summary>
            <remarks> Valid values are 0 to 100 with a default of 0.  Increasing the smoothing value will tend to create smaller
            Jpeg files, however             the image is blurred while saving. </remarks>
            <value> The smoothing level when saving a Jpeg image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Progressive">
            <summary> Gets or sets a value indicating if the image is saved progressively. </summary>
            <remarks> A progressive Jpeg will be displayed while it's being loaded from top down in supported viewers such as
            web browsers. </remarks>
            <value> A value indicating if the image is saved progressively. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegImageInfo">
            <summary> Summary description for JpegImageInfo. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegImageInfo.progressive">
            <summary> Gets a value indicating if the Jpeg is encoded progressively. </summary>
            <value> A value indicating if the Jpeg is encoded progressively. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegImageInfo.arithmetic">
            <summary> Gets a value indicating if the Jpeg is encoded with arithmetic compression. </summary>
            <value> A value indicating if the Jpeg is encoded with arithmetic compression. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo.#ctor">
            <summary> Initialize a new instance of a %JpegImageInfo%. </summary>
            <overloads> Creates a JpegImageInfo object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean,System.Boolean)">
            <summary> Initialize a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegImageInfo"/> specifying it's properties. </summary>
            <param name="size"> The width and height of the image. </param>
            <param name="colorDepth"> The bits per pixel of the image. </param>
            <param name="imageType"> The image type. </param>
            <param name="resolution"> The image resolution, usually expressed in dots per inch. </param>
            <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> which will be returned when the image is read. </param>
            <param name="progressive"> A value indicating if the Jpeg is encoded progressively. </param>
            <param name="arithmetic"> A value indicating if the Jpeg is encoded with arithmetic compression. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Arithmetic">
            <summary> Gets a value indicating if the Jpeg is encoded with arithmetic compression. </summary>
            <value> A value indicating if the Jpeg is encoded with arithmetic compression. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Progressive">
            <summary> Gets a value indicating if the Jpeg is encoded progressively. </summary>
            <value> A value indicating if the Jpeg is encoded progressively. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcdDecoder">
            <remarks> <para>By default, when opening a PhotoCD image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects, this decoder will automatically be selected from the <see cref="T:Atalasoft.Imaging.Codec.RegisteredDecoders"/> and does not
            have to be explicitly set. </para>
            <para>A PhotoCD image contains the same image stored at multiple resolutions.  By specifying the <see cref="P:Atalasoft.Imaging.Codec.PcdDecoder.Resolution"/>
            property, you can choose which resolution image to load.</para> </remarks>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Kodak Photo CD (PCD) images from a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdDecoder.resolution">
            <summary> <para>Gets or sets the resolution to read in a PhotoCD image.</para> </summary>
            <value> <para>The resolution to read in a PhotoCD image.</para> </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.#ctor">
            <summary> Initializes a new instance of a %PcdDecoder%. </summary>
            <overloads> Creates a PcdDecoder. </overloads>
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PcdDecoder"/> with a default resolution of 768 x 512 pixels. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.#ctor(Atalasoft.Imaging.Codec.PcdResolution)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PcdDecoder"/> specifying a resolution. </summary>
            <param name="resolution"> <para>Sets the resolution to read in a PhotoCD image.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains a PhotoCD image.</para> </summary>
            <param name="stream"> The input Stream. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a PhotoCD image stored in a Stream without decoding the image data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a PhotoCD encoded image. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.Resolution">
            <summary> <para>Gets or sets the resolution to read in a PhotoCD image.</para> </summary>
            <value> <para>The resolution to read in a PhotoCD image.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.SupportedImageType">
            <summary> Returns a PhotoCD ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcxDecoder">
            <remarks> By default, when opening a Pcx image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the %RegisteredDecoders% and does not have to be
            explicitly set. </remarks>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Zsoft Paintbrush (PCX) images from a %System.IO.Stream%.</para>
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PcxDecoder"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains a Pcx image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Pcx image stored in a Stream without decoding the image data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Pcx encoded image. </summary>
            <param name="stream"> The stream containing the image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcxDecoder.SupportedImageType">
            <summary> Returns a Pcx ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcxEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write ZSoft Paintbrush (PCX) images to a %System.IO.Stream%.</para>
            </summary>
            <remarks> This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects
            when saving to specify a PCX image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxEncoder.#ctor">
            <summary> Initializes a new instance of a %PcxEncoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an %AtalaImage% as a Pcx image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcxEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngDecoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Portable Network Graphics (PNG) images from a
            <see cref="T:System.IO.Stream"/>.</para> </summary>
            <remarks> By default, when opening a Png image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the <see cref="T:Atalasoft.Imaging.Codec.RegisteredDecoders"/> and does not have to be
            explicitly set. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngDecoder.screenGamma">
            <summary> Gets or sets the screen gamma value that will be used to adjust the colors of a PNG image when read if the
            image contains gamma. </summary>
            <remarks> A value of 0 will ignore the gamma of the image. A value of 2.2 is typical for PC's.  Default 0.
            </remarks>
            <value> The screen gamma value that will be used to adjust the colors of a PNG image when read if the image contains
            gamma. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngDecoder.twoBytePerComponentSupport">
            <summary> Gets or sets a value indicating whether 16-bit per component images are read as 16 or 8-bit per component
            images. </summary>
            <value> A value indicating whether 16-bit per component images are read as 16 or 8-bit per component images.
            </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngDecoder._setAlphaFromTransparentColor">
            <summary> Indicates whether or not the PngDcoder should set the alpha channel in the image using the Png file's
            transparent color. </summary>
            <value> Returns true if the decoder should set the alpha channel, false otherwise.  Default value is false. </value>
            <remarks> GetImageInfo will always return the pixel format appropriate to the file without alpha.  If the
            SetAlphaFromTransparentColor is true, the returned image may be in a different pixel format.  For example, an image
            with a pixel format of Pixel24BppBgr will be Pixel32BppBgra if SetAlphaFromTransparentColor is true and there is a
            transparent color in the png. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PngDecoder"/>. </summary>
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PngDecoder"/> using the default screen gamma. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.#ctor(System.Double)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PcdDecoder"/> with a specified screen gamma. </summary>
            <param name="screenGamma"> The screen gamma value that will be used to adjust the colors of a PNG image when read if
            the image contains gamma. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains an Png image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Png image stored in a Stream without decoding the image data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Png encoded image. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.ScreenGamma">
            <summary> Gets or sets the screen gamma value that will be used to adjust the colors of a PNG image when read if the
            image contains gamma. </summary>
            <remarks> A value of 0 will ignore the gamma of the image. A value of 2.2 is typical for PC's.  Default 0.
            </remarks>
            <value> The screen gamma value that will be used to adjust the colors of a PNG image when read if the image contains
            gamma. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.TwoBytePerComponentSupport">
            <summary> Gets or sets a value indicating whether 16-bit per component images are read as 16 or 8-bit per component
            images. </summary>
            <value> A value indicating whether 16-bit per component images are read as 16 or 8-bit per component images.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.SupportedImageType">
            <summary> Returns a Png ImageType enumeration value. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.SetAlphaFromTransparentColor">
            <summary> Indicates whether or not the PngDcoder should set the alpha channel in the image using the Png file's
            transparent color. </summary>
            <value> Returns true if the decoder should set the alpha channel, false otherwise.  Default value is false. </value>
            <remarks> GetImageInfo will always return the pixel format appropriate to the file without alpha.  If the
            SetAlphaFromTransparentColor is true, the returned image may be in a different pixel format.  For example, an image
            with a pixel format of Pixel24BppBgr will be Pixel32BppBgra if SetAlphaFromTransparentColor is true and there is a
            transparent color in the png. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Portable Network Graphics (PNG) images to a
            <see cref="T:System.IO.Stream"/>.</para> </summary>
            <remarks> <para>This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects when saving to specify a PNG image. </para><para>If the image being saved contains a <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile">ColorProfile</see>, it will be embedded within the file.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngEncoder.interlace">
            <summary> Gets or sets whether Png files are saved with a pixel row interlacing pattern. <I>Defaults
            <B>False</B></I>. </summary>
            <remarks> Interlacing is a technique that allows a PNG to be displayed gradually.  It first displays             a
            blocky image which becomes finer and more clear as the image loads. </remarks>
            <value> The Png Interlace setting. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngEncoder.backgroundColor">
            <summary> Gets or sets the color to use as the default background color for Png images with alpha. </summary>
            <seealso> BackgroundIndex </seealso>
            <value> The color to use as the default background color for Png images with alpha. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngEncoder.backgroundIndex">
            <summary> Gets or sets the palette index or grayscale value to use as the default background color for colormapped
            Png images with alpha. </summary>
            <remarks> Set this value to -1 in order to use the closest color to <a
            href="Atalasoft.dotImage~Atalasoft.Imaging.Codec.PngEncoder~BackgroundColor.html">BackgroundColor</a>. </remarks>
            <value> The palette index or grayscale value to use as the default background color for colormapped Png images with
            alpha. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngEncoder.gamma">
            <summary> Gets or sets the gamma value to write to a PNG image. 0 will not write any value, 2.2 is a typical value
            for PC's. Default 0. </summary>
            <value> The gamma value to write to a PNG image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngEncoder.comText">
            <summary> Gets or sets the COM text metadata to save with the image. </summary>
            <seealso> COM Text Metadata </seealso>
            <remarks> See COM Text Metadata for more information. </remarks>
            <value> The COM text metadata to save with the image. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.#ctor(System.Drawing.Color,System.Double,System.Boolean,Atalasoft.Imaging.Metadata.ComTextCollection)">
            <summary> Initializes a new instance of a %PngEncoder% specifying the background color, gamma, interlace, and COM
            Text value to save. </summary>
            <param name="backgroundColor"> The color to use as the default background color for Png images with alpha. </param>
            <param name="gamma"> The gamma value to write to a PNG image. </param>
            <param name="interlaced"> The Png Interlace setting. </param>
            <param name="comText"> The COM text metadata to save with the image. </param>
            <overloads> Creates a PngEncoder. </overloads>
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PngEncoder"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.#ctor(Atalasoft.Imaging.Metadata.ComTextCollection)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PngEncoder"/> specifying the COM Text metadata to save. </summary>
            <param name="comText"> The COM text metadata to save with the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.PngEncoder"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an %AtalaImage% as a Png image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Interlace">
            <summary> Gets or sets whether Png files are saved with a pixel row interlacing pattern. <I>Defaults
            <B>False</B></I>. </summary>
            <remarks> Interlacing is a technique that allows a PNG to be displayed gradually.  It first displays             a
            blocky image which becomes finer and more clear as the image loads. </remarks>
            <value> The Png Interlace setting. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundColor">
            <summary> Gets or sets the color to use as the default background color for Png images with alpha. </summary>
            <seealso> BackgroundIndex </seealso>
            <remarks> <seealso cref="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundIndex"/> </remarks>
            <value> The color to use as the default background color for Png images with alpha. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundIndex">
            <summary> Gets or sets the palette index or grayscale value to use as the default background color for colormapped
            Png images with alpha. </summary>
            <remarks> Set this value to -1 in order to use the closest color to <a
            href="Atalasoft.dotImage~Atalasoft.Imaging.Codec.PngEncoder~BackgroundColor.html">BackgroundColor</a>. </remarks>
            <value> The palette index or grayscale value to use as the default background color for colormapped Png images with
            alpha. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Gamma">
            <summary> Gets or sets the gamma value to write to a PNG image. 0 will not write any value, 2.2 is a typical value
            for PC's. Default 0. </summary>
            <value> The gamma value to write to a PNG image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.ComText">
            <summary> Gets or sets the COM text metadata to save with the image. </summary>
            <seealso> COM Text Metadata </seealso>
            <remarks> See <see cref="T:Atalasoft.Imaging.Metadata.ComTextCollection"/> for more information. </remarks>
            <value> The COM text metadata to save with the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngImageInfo">
            <summary>
            Summary description for PngImageInfo.
            </summary>
            <summary> Information from a PNG Image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngImageInfo.pngInterlaced">
            <summary> Gets a value indicating if the PNG is interlaced. </summary>
            <value> A value indicating if the PNG is interlaced. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngImageInfo.transparentColor">
            <summary> Gets or sets the transparent color for the PNG image. </summary>
            <value> The transparent color. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PngImageInfo.hasTransparentColor">
            <summary> Indicates that the image contains a transparency color. </summary>
            <value> When HasTransparenctColor is set to true then TransparentColor will be set to a color value for the image
            that is supposed to be transparent. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo.#ctor">
            <overloads> Creates a PngImageInfo object. </overloads>
            <summary> Initialize a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PngImageInfo"/>.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean)">
            <summary> Initialize a new instance of a %PngImageInfo% specifying it's properties. </summary>
            <param name="size"> The width and height of the image. </param>
            <param name="colorDepth"> The bits per pixel of the image. </param>
            <param name="imageType"> The image type. </param>
            <param name="resolution"> The image resolution, usually expressed in dots per inch. </param>
            <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> which will be returned when the image is read. </param>
            <param name="pngInterlaced"> A value indicating if the PNG is interlaced. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.PngInterlaced">
            <summary> Gets a value indicating if the PNG is interlaced. </summary>
            <value> A value indicating if the PNG is interlaced. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.TransparentColor">
            <summary> Gets or sets the transparent color for the PNG image. </summary>
            <value> The transparent color. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.HasTransparentColor">
            <summary> Indicates that the image contains a transparency color. </summary>
            <value> When HasTransparenctColor is set to true then TransparentColor will be set to a color value for the image
            that is supposed to be transparent. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PnmDecoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read PNM/PBM/PGM/PPM images from a <see cref="T:System.IO.Stream"/>.</para> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.#ctor">
            <summary> Initializes an instance of the PnmDecoder. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.GetImageInfo(System.IO.Stream)">
            <overloads> Gets image information from a PNM image. </overloads>
            <summary> Gets image information from a PNM image given an encoded image stream. </summary>
            <param name="stream"> The encoded image stream </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.IsValidFormat(System.IO.Stream)">
            <summary> Returns true of the given stream is a PNM image. </summary>
            <param name="stream"> The encoded image stream </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <overloads> Decodes a PNG image stream into an AtalaImage. </overloads>
            <summary> Decodes a PNG image stream into an AtalaImage. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PnmImageInfo">
            <summary> Information about a PNM Image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageInfo._format">
            <summary> Gets the PNM Format. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageInfo._maxValue">
            <summary> Gets the maximum pixel value, as specified in the file. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.Codec.PnmImageType,System.Int32)">
            <summary> Creates a new instance of PnmImageInfo. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PnmImageInfo.Format">
            <summary> Gets the PNM Format. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PnmImageInfo.MaxValue">
            <summary> Gets the maximum pixel value, as specified in the file. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PnmImageType">
            <summary> The type of Pnm image </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PbmAscii">
            <summary> Blak and White image, ASCII encoded </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PbmBinary">
            <summary> Black and White image </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PgmAscii">
            <summary> Grayscale image, ASCII encoded </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.Pgmbinary">
            <summary> Grayscale image </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PpmAscii">
            <summary> RGB image, ASCII encoded </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PpmBinary">
            <summary> RGB image </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PnmEncoder">
            <summary> Encodes an AtalaImage into a PNM image file. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.PnmEncoder"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmEncoder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.PnmEncoder"/> class.
            </summary>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <overloads> Method that encodes an AtalaImage into a PNM image file. </overloads>
            <summary> Method that encodes an AtalaImage into a PNM image file given an Atalaimage and stream. </summary>
            <param name="stream"> Stream to encode the image into </param>
            <param name="image"> <para>AtalaImage to encode</para> </param>
            <param name="progress"> Progress delegate </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PnmEncoder.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
            <value>
            The maximum value.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PnmEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PsdDecoder">
            <remarks> <para>By default, when opening a Psd image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the <see cref="T:Atalasoft.Imaging.Codec.RegisteredDecoders"/> and does not have to be
            explicitly set. </para>
            <para>Any layering information saved in the PSD image will be lost when read.  This information is read into a
            merged RGB format.</para>
            <para>For obtaining Photoshop Resources from a PSD image, see the <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser">PhotoshopResourceParser</see>
            class.</para> </remarks>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Adobe Photoshop (PSD) images from a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PsdDecoder"/>.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains an Psd image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Psd image stored in a Stream without decoding the image data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Psd encoded image. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.Read(System.IO.Stream,System.Drawing.Color,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Psd encoded image. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="backgroundColor">Background color to use during rendering.</param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetThumbnail(System.IO.Stream)">
            <summary> Gets the thumbnail image stored in the Photoshop Resource of the image. </summary>
            <returns> An <STRONG>AtalaImage</STRONG> containing the thumbnail image. </returns>
            <remarks> See the PhotoshopResourceParser for obtaining the RAW thumbnail data and other photoshop
            specific information. </remarks>
            <seealso> PhotoshopResourceParser Class </seealso>
            <param name="stream"> The PSD image stream. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdDecoder.SupportedImageType">
            <summary> Gets a Psd ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PsdEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Adobe Photoshop (PSD) images to a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <remarks> This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects
            when saving to specify a PSD image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdEncoder.#ctor">
            <summary> Initializes a new instance of a %PsdEncoder%. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PsdEncoder._photoshopResources">
            <remarks> Photoshop resource information can be parsed with the <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser"/>.  When
            <EM>PhotoshopResources</EM> and <EM>IptcTags</EM> are set to a value other than null, IptcData will be added to the
            PhotoshopResource when saved. </remarks>
            <summary> Gets or sets Photoshop resources to be saved with the image. </summary>
            <value> Photoshop resources to be saved with the image. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an %AtalaImage% as a Psd image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.PhotoshopResources">
            <remarks> Photoshop resource information can be parsed with the <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser"/>.  When
            <EM>PhotoshopResources</EM> and <EM>IptcTags</EM> are set to a value other than null, IptcData will be added to the
            PhotoshopResource when saved. </remarks>
            <summary> Gets or sets Photoshop resources to be saved with the image. </summary>
            <value> Photoshop resources to be saved with the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.IptcTags">
            <summary> Gets or sets IPTC Tags that will be saved with the image. </summary>
            <value> IPTC Tags that will be saved with the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PsdImageInfo">
            <summary>
            Provides information about PSD image.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdImageInfo.Channels">
            <summary>
            Gets information about number of channels in PSD image.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.RegisteredDecoders">
            <summary> This class includes static members containing information on image decoders to use in the project when
            reading images as well as methods to obtain a an appropriate decoder based on an image stream or filename.
            </summary>
            <remarks> Any file format extensions, such as the DotImage Jpeg2000 should be registered using this class by adding
            the decoders to the Decoders collection. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.RegisteredDecoders.knownTypeDecoders">
            <summary> Returns a reference to the decoders that are registered in dotImage to load the known dotImage
            <see cref="T:Atalasoft.Imaging.Codec.ImageType">ImageTypes</see>. </summary>
            <value> A reference to the decoders that are registered in dotImage to load the known dotImage
            <see cref="T:Atalasoft.Imaging.Codec.ImageType">ImageTypes</see>. </value>
            <remarks> dotImage is initialized with the standard decoders set to the known image types.  A custom decoder can
            override a standard encoder by setting the custom decoder to the ImageType in this dictionary collection. </remarks>
            <!-- No matching elements were found for the following include tag --><include file="external documentation.txt" path="MyDocs/MyMembers[@name=&quot;Atalasoft.dotImage~Atalasoft.Imaging.Codec.RegisteredDecoders~knownTypeDecoders&quot;]/*"/>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.RegisteredDecoders._decoders">
            <summary> Gets a static collection of Image Decoders that will be used to decode any arbitrary image. </summary>
            <remarks> Add any custom decoders to this collection so that the AtalaImage constructor and Workspace.Open will use
            that decoder when attempting to load an image.  DotImage will loop through each decoder testing the IsValidFormat
            until it returns true.  The decoders collection is order dependent. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String)">
            <summary> Returns information about an encoded image file specifying a filename. </summary>
            <returns> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.Codec.ImageInfo.html">ImageInfo</a> from an existing
            file. </returns>
            <param name="fileName"> A file name containing the encoded image data. </param>
            <summary> Returns information about an encoded image file. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String,System.Int32)">
            <summary> Returns information about an encoded image file specifying a filename and frame index. </summary>
            <returns> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.Codec.ImageInfo.html">ImageInfo</a> from an existing
            file. </returns>
            <param name="fileName"> A file name containing the encoded image data. </param>
            <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to retreive
            information from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary> Returns information about an encoded image file specifying a stream and frame index. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to retreive
            information from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream)">
            <summary> Returns information about an encoded image file specifying a stream. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetDecoder(System.IO.Stream)">
            <summary> Returns an <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/>that can be used to decode the given stream. </summary>
            <remarks> Use this method for obtaining the file format of an image saved to a file.  See %GetImageInfo% for
            obtaining the file format and extended information. </remarks>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetDecoderFromType(System.Type)">
            <summary> Returns an <STRONG>ImageDecoder </STRONG>that matches a specific type. </summary>
            <overloads>
            <example>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
ImageDecoder tiffReader = RegisteredDecoders.GetDecoderFromType(typeof(TiffDecoder));
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
Dim tiffReader As ImageDecoder = RegisteredDecoders.GetDecoderFromType(Type.GetType(TiffDecoder))
]]></code>
</example>
            </overloads>
            <param name="codecType"> The type of decoder to retreive. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.KnownTypeDecoders">
            <summary>
            Gets the known type decoders.
            </summary>
            <value>
            The known type decoders.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.UnknownTypeDecoders">
            <summary> Returns a reference to the decoders that are used for reading images that dotImage doesn't recognize as a
            standard <see cref="T:Atalasoft.Imaging.Codec.ImageType"/>. </summary>
            <value> A reference to the decoders that are used for reading images that dotImage doesn't recognize as a standard
            <see cref="T:Atalasoft.Imaging.Codec.ImageType"/>. </value>
            <remarks> <para>An unlimited number of formats not natively supported by dotImage can be added by including the
            decoders in this collection.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.Decoders">
            <summary> Gets a static collection of Image Decoders that will be used to decode any arbitrary image. </summary>
            <remarks> Add any custom decoders to this collection so that the AtalaImage constructor and Workspace.Open will use
            that decoder when attempting to load an image.  DotImage will loop through each decoder testing the IsValidFormat
            until it returns true.  The decoders collection is order dependent. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TgaDecoder">
            <remarks> <para>By default, when opening a Targa image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the <see cref="T:Atalasoft.Imaging.Codec.RegisteredDecoders"/> and does not have to be
            explicitly set. </para><para>Because there is no identifier when reading Tga images, it is up to the developer to
            detect the file extension, and if "tga" then specify this decoder directly.  In many cases, dotImage cannot guess an
            image is encoded as a TGA.</para> </remarks>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Truevision Targa (TGA) images from a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TgaDecoder"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains an Targa image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Targa image stored in a Stream without decoding the image data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Targa encoded image. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TgaDecoder.SupportedImageType">
            <summary> Returns a Tga ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TgaEncoder">
            <summary>
            Summary description for TgaEncoder.
            </summary>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Truevision Targa (TGA) images to a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <remarks> This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects
            when saving to specify a TGA image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaEncoder.#ctor">
            <summary> Initializes a new instance of a %TgaEncoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Tga image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TgaEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffCodecCompression">
            <summary> This class represents the compression for a TIFF image. </summary>
            <remarks> Used in the <see cref="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder"/> when saving a multipage image to indicate the
            compression settings for each page in a TIFF. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCodecCompression._compression">
            <summary> Gets or sets the TIFF compression to use. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCodecCompression._jpegQuality">
            <summary> Gets or sets the JPEG quality when Compression is set to JPEG. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCodecCompression._useLzwPredictor">
            <summary> Gets or sets the LZW predictor value. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCodecCompression._useOldJpegCompression">
            <summary> Gets or sets a value indicating if Old Style JPEG compression should be used when Compression is set to
            JPEG. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression)">
            <summary> Creates a new instance of <STRONG>TiffCodecCompression</STRONG> specifying the compression type.
            </summary>
            <overloads> Creates a new instance of <STRONG>TiffCodecCompression</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Int32)">
            <summary> Creates a new instance of <STRONG>TiffCodecCompression</STRONG> specifying the compression type and JPEG
            quality. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Int32,System.Boolean)">
            <summary> Creates a new instance of <STRONG>TiffCodecCompression</STRONG> specifying the compression type, JPEG
            Quality, and LZW Predictor. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Int32,System.Boolean,System.Boolean)">
            <summary> Creates a new instance of <STRONG>TiffCodecCompression</STRONG> specifying the compression type, JPEG
            Quality, and LZW Predictor, and whether to use old style JPEG compression. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.Compression">
            <summary> Gets or sets the TIFF compression to use. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.UseOldJpegCompression">
            <summary> Gets or sets a value indicating if Old Style JPEG compression should be used when Compression is set to
            JPEG. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.JpegQuality">
            <summary> Gets or sets the JPEG quality when Compression is set to JPEG. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.UseLzwPredictor">
            <summary> Gets or sets the LZW predictor value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory">
            <summary> Represents a single TIFF page. </summary>
            <remarks> A <STRONG>TiffDirectory</STRONG> represents a single page in a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffFile"/>.  It can be
            constructed by the <STRONG>TiffFile </STRONG>class internally, returning an object that contains all the TIFF tags
            with no binary image data, or it can be constructed by the developer and represent actual image data and tag
            information that will be saved into an existing <STRONG>TiffFile</STRONG>. </remarks>
            <seealso> TiffFile Class </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.Tiff.TiffDirectory._exifTags">
            <summary> Gets or sets a collection of EXIF Tags that will be saved with the image. </summary>
            <remarks> See ExifParser for obtaining EXIF Tags from a TIFF (or JPEG) image.  When this property is set, the
            subsequent <see cref="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Save(System.IO.Stream)"/> will store the EXIF information contained within this property to the file.
            </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.Tiff.TiffDirectory._allowVitalTagChanges">
            <summary> Sets or gets a flag determining if changes should be allowed in vital TIFF tags. </summary>
            <value> True if client code is allowed to change vital tags </value>
            <remarks> <para>When certain tags are modified indiscriminantly, it is possible to permanently damage a TIFF file. 
            In dotImage 5.0 and earlier, it was not possible to modify these tags as doing so was considered an error.</para>
            <para>In the 6.0 and above, these tags are now accessible.  The list of vital tags includes:</para>
            <para>Strip Byte Counts, Strip Offsets, Tile Byte Counts, Tile Offsets, Bits Per Sample, Rows Per Strip</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new <STRONG>TiffDirectory </STRONG>from an AtalaImage </summary>
            <param name="image"> The image data that the <STRONG>TiffDirectory</STRONG> will represent. </param>
            <overloads> Creates a new <STRONG>TiffDirectory</STRONG> instance. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.TiffCompression)">
            <summary> Creates a new <STRONG>TiffDirectory</STRONG> using the specified compression. </summary>
            <param name="image"> The image data that the <strong>TiffDirectory</strong> will
            represent. </param>
            <param name="compression"> The compression to use when the image data is encoded </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.TiffEncoder)">
            <summary> Creates a new <STRONG>TiffDirectory </STRONG>with the specified Tiff Encoder. </summary>
            <param name="image"> The image data that the <STRONG>TiffDirectory</STRONG> will represent. </param>
            <param name="tiff"> The encoding settings to use when the image data is encoded </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Dispose">
            <summary> Disposes the <STRONG>TiffDirectory.</STRONG> </summary>
            <overloads> Disposes the <STRONG>TiffDirectory.</STRONG> </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Dispose(System.Boolean)">
            <summary> Disposes the <STRONG>TiffDirectory.</STRONG> </summary>
            <param name="disposing"> Indicates whether or not the object is being disposed via the Dispose method (true) or the
            finalize method (false) </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.LoadReferenceTagData(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary> Returns the actual data represented by a TIFF tag with a reference to the actual tag data. </summary>
            <remarks> Some TIFF Tags contain a reference pointer (also known as an offset) to the actual tag data.  These tags
            have an <see cref="P:Atalasoft.Imaging.Metadata.TiffTag.IsReference"/> property value set to true.  This method returns the actual data
            referenced by the offset in the tag data. </remarks>
            <returns> Returns an object representing the actual referenced <STRONG>TiffTag</STRONG> data. </returns>
            <param name="tag"> The <see cref="T:Atalasoft.Imaging.Metadata.TiffTag"/> containing the tag offset. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.IsArrayTagModified``1(Atalasoft.Imaging.Codec.Tiff.TiffDirEntry,Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>
            Returns true if tag of array type has changed
            </summary>
            <typeparam name="T">Array's items type</typeparam>
            <param name="orig">original tag data</param>
            <param name="comp">new tag data</param>
            <returns>true if tag's data is changed</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)">
            <summary> Fires the Error event </summary>
            <param name="e"> A CodecErrorEventArgs object specifying the error </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Tags">
            <summary> Gets the collection of <see cref="T:Atalasoft.Imaging.Metadata.TiffTag"/> objects associated with the image. </summary>
            <value> A <see cref="T:Atalasoft.Imaging.Metadata.TiffTagCollection"/> representing all TIFF Tags in the image. </value>
            <remarks> <para>WARNING!!!</para>
            <para>TIFF Tags can be edited, added, and removed using this collection property.  However the developer is expected
            to have full understanding of the TIFF specification.  Editing tags in ways that are not supported by the TIFF
            specification can create a corrupt file.</para>
            <para>For example, changing the ImageWidth, ImageHeight, Compression, Photometric, and others to an unexpected value
            will result in a corrupt TIFF file.</para>
            <para>When reading TIFF Tags, the TiffFile stream must remain open to read some tags that are populated only when
            accessing the Data property.</para> </remarks>
            <example>
<para>Displays all TIFF Tags from a TIFF document.</para>
<code lang="CS" title="GetAllTagsCS (C#)"><![CDATA[
TiffFile file = new TiffFile();
using (Stream fs1 = new FileStream("file1.tif", FileMode.Open, FileAccess.Read, FileShare.Read))
{
        file.Read(fs1);
        foreach (TiffDirectory image in file.Images)
        {
                foreach (TiffTag tag in image.Tags)
                {
                        Console.WriteLine(tag.ToString());
                }
        }
}
]]></code>

<code lang="VB" title="GetAllTagsVB (Visual Basic)"><![CDATA[
Dim file As TiffFile = New TiffFile()
Dim fs1 As Stream = New FileStream("file1.tif", FileMode.Open, FileAccess.Read, FileShare.Read)
Try
        file.Read(fs1)
        ForEach image As TiffDirectory In file.Images
                ForEach tag As TiffTag In image.Tags
                        Console.WriteLine(tag.ToString())
                Next
        Next
Finally
    fs1.Close()
End Try
]]></code>

<para>Adds a new ImageDescription tag to a TIFF File.</para>
<code lang="CS" title="AddNewTagCS (C#)"><![CDATA[
TiffFile file = new TiffFile("multi.tif");
file.Images[0].Tags.Add(
            new TiffTag(TiffTagID.ImageDescription, 
            "Created with the DotImage Example Code", 
            TiffTagDataType.Ascii));
file.Save("multi_newtag.tif");
]]></code>

<code lang="VB" title="AddNewTagVB (Visual Basic)"><![CDATA[
Dim file As TiffFile = New TiffFile("multi.tif") 
file.Images(0).Tags.Add( _
            New TiffTag(TiffTagID.ImageDescription, _
            "Created with the DotImage Example Code", _ 
            TiffTagDataType.Ascii))
file.Save("multi_newtag.tif")
]]></code>
</example>
            <exception> Thrown when the TiffFile's stream is closed when accessing a tag that is originally loaded as a data
            pointer.  This usually is the case for string and binary data. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.ExifTags">
            <summary> Gets or sets a collection of EXIF Tags that will be saved with the image. </summary>
            <remarks> See ExifParser for obtaining EXIF Tags from a TIFF (or JPEG) image.  When this property is set, the
            subsequent <see cref="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Save(System.IO.Stream)"/> will store the EXIF information contained within this property to the file.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.AllowVitalTagChanges">
            <summary> Sets or gets a flag determining if changes should be allowed in vital TIFF tags. </summary>
            <value> True if client code is allowed to change vital tags </value>
            <remarks> <para>When certain tags are modified indiscriminantly, it is possible to permanently damage a TIFF file. 
            In dotImage 5.0 and earlier, it was not possible to modify these tags as doing so was considered an error.</para>
            <para>In the 6.0 and above, these tags are now accessible.  The list of vital tags includes:</para>
            <para>Strip Byte Counts, Strip Offsets, Tile Byte Counts, Tile Offsets, Bits Per Sample, Rows Per Strip</para>
            </remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.CodecError">
            <summary> This event is raised an a non critical error exists when reading a TIFF File. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection">
            <summary> For use as part of a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffFile"/>.  Holds the collection of images that make up the pages in a
            TIFF. </summary>
            <seealso> TiffFile Class </seealso>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.#ctor">
            <summary> Creates a new <STRONG>TiffDirectoryCollection.</STRONG> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Add(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary> Adds a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> to the collection. </summary>
            <returns> The index the <STRONG>TiffDirectory</STRONG> was added at. </returns>
            <param name="value"> The <STRONG>TiffDirectory </STRONG>to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Contains(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary> Checks for the Existance of an entry in the collection. </summary>
            <returns> True if the object exists in the collection, false otherwise. </returns>
            <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> to look for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.CopyTo(Atalasoft.Imaging.Codec.Tiff.TiffDirectory[],System.Int32)">
            <summary> Copies an entry of the collection. </summary>
            <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> to copy to. </param>
            <param name="index"> The index of the entry in the collection to copy. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.IndexOf(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary> Searches for the specified <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> and returns the zero-based index of the first
            occurrence within the entire collection. </summary>
            <returns> The zero-based index of the first occurrence of <I>value</I> within the entire collection, if found;
            otherwise, -1. </returns>
            <param name="value"> The <STRONG>TiffDirectory</STRONG> to search for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary> Adds a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> at a specified index to the collection. </summary>
            <param name="index"> The zero-based index to add the <STRONG>TiffDirectory </STRONG>at. </param>
            <param name="value"> The <STRONG>TiffDirectory</STRONG> to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Remove(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary> Removes a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> from the collection. </summary>
            <param name="value"> The <STRONG>TiffDirectory </STRONG>to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Swap(System.Int32,System.Int32)">
            <summary> Swaps two entries in the collection. </summary>
            <param name="m"> The zero-based index of the first <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> to swap. </param>
            <param name="n"> The zero-based index of the second <STRONG>TiffDirectory</STRONG> to swap. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Item(System.Int32)">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> at the specified index. </summary>
            <value> The <STRONG>TiffDirectory</STRONG> located at the specified index. </value>
            <param name="index"> The zero-based index to get the entry from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirEntry.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirEntry.#ctor(System.UInt16,System.UInt16,System.Int32,System.UInt32,System.UInt16)">
            <summary>
            constructor
            </summary>
            <param name="tag">tag ID</param>
            <param name="type">tag type</param>
            <param name="count">count of data</param>
            <param name="offset">tag offset or tag value</param>
            <param name="byteorder">endianness</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffFile">
            <summary> <STRONG>TiffFile</STRONG> is a class that allows access to a TIFF image file directly, without loading the
            image into memory.  It represents a single TIFF document which can contain multiple pages. </summary>
            <example>
<para>Add an arbitrary TIFF tag.</para>
<code lang="CS" title="AddCS (C#)"><![CDATA[
// open a TiffFile 
TiffFile oneTiff = new TiffFile();
oneTiff.Read(streamOne);
// access a TiffDirectory
TiffDirectory image = oneTiff.images[0];
// access TiffTagCollection
TiffTagCollection tags = image.Tags;
// add Tiff Tags (add copy-right)
Tags.Add(33432, "DotImage");
// add Tiff Tags
string datetime = "2005:07:26 09:31:23";
Tags.Add(306, datetime, TiffTagDataType.Ascii);
// save
oneTiff.Save(targetStream);
]]></code>

<code lang="VB" title="addVB (Visual Basic)"><![CDATA[
' open a TiffFile 
Dim oneTiff As TiffFile = New TiffFile()
oneTiff.Read(streamOne)
' access to a TiffDirectory
Dim image As TiffDirectory = oneTiff.images(0) 
' access to TiffTagCollection
Dim tags As TiffTagCollection = image.Tags 
' add Tiff Tags (add copy-right)
Tags.Add(33432, "DotImage")
' add Tiff Tags
Dim datetime As String = "2005:07:26 09:31:23" 
Tags.Add(306, datetime, TiffTagDataType.Ascii)
' save
oneTiff.Save(targetStream)
]]></code>

<para>Demonstrates how to insert a page into an existing TIFF</para>
<code lang="CS" title="InsertPageCS (C#)"><![CDATA[
using (Stream fs = new FileStream("1_multi.tif", FileMode.Open, FileAccess.Read, FileShare.Read))
{
    TiffFile tFile = new TiffFile();
    tFile.Read(fs);
    TiffDirectory tImage = new TiffDirectory(
        new AtalaImage(100, 100, PixelFormat.Pixel24bppBgr), 
        TiffCompression.JpegCompression);
    tFile.Images.Insert(1, tImage);
    tFile.Save("multi_.tif");
}
File.Delete("multi.tif");
System.IO.File.Move("multi_.tif", "multi.tif");
]]></code>

<code lang="VB" title="InsertPageVB (Visual Basic)"><![CDATA[
Dim fs As Stream = New FileStream("1_multi.tif", FileMode.Open, FileAccess.Read, FileShare.Read)
Dim tFile As TiffFile =  New TiffFile() 
tFile.Read(fs)
Dim tImage As TiffDirectory = New TiffDirectory( _
        New AtalaImage(100, 100, PixelFormat.Pixel24bppBgr), _
        TiffCompression.JpegCompression)
tFile.Images.Insert(1, tImage)
tFile.Save("multi_.tif")
File.Delete("multi.tif")
System.IO.File.Move("multi_.tif", "multi.tif")
]]></code>
</example>
            <seealso> TiffFile Overview </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.Tiff.TiffFile._images">
            <summary> Gets the image collection that is part of this <STRONG>TiffFile</STRONG>. </summary>
            <value> A <STRONG>TiffDirectoryCollection</STRONG> representing each image in the file. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.#ctor">
            <summary> Creates a new <STRONG>TiffFile</STRONG> instance. </summary>
            <overloads> Creates a new <STRONG>TiffFile</STRONG> instance. </overloads>
            <summary> Initializes a new instance of <STRONG>TiffFile</STRONG> </summary>
            <remarks> The initialized TiffFIle contains no pages.  See the <see cref="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Read(System.IO.Stream)"/> method to populate the
            Tags and images. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.GetPageCount(System.IO.Stream)">
            <summary> Returns the number of pages in a TIFF </summary>
            <param name="source"> Encoded image stream </param>
            <returns>number of pages</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Read(System.IO.Stream,System.Int32)">
            <summary> Reads directories and tags for a specific page. </summary>
            <param name="stream"> Encoded image stream </param>
            <param name="frameIndex"> Frame index to read </param>
            <remarks> <para>The same stream or path cannot be used to read and save a <STRONG>TiffFile</STRONG> object.  To
            overwrite an existing TIFF, save the TIFF into a new file, then overwrite the original.</para>
            <para>The stream must remain open while accessing TIFF Tags and managing IFD's.</para> </remarks>
            <summary> Open an existing TIFF Document, parsing the tags for each directory. </summary>
            <overloads> Read will populate the Tags and TiffIfdCollection. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Read(System.IO.Stream)">
            <summary> Reads directories and tags for all pages. </summary>
            <param name="stream"> Encoded image stream </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Save(System.IO.Stream)">
            <summary> Saves the <STRONG>TiffFile</STRONG> to a Stream. </summary>
            <remarks> The <EM>target</EM> stream must be different from the stream or filepath that was used to open the
            <STRONG>TiffFile</STRONG>. </remarks>
            <param name="target"> The Stream to save the <STRONG>TiffFile</STRONG> to. </param>
            <overloads> Saves the <STRONG>TiffFile.</STRONG> </overloads>
            <remarks> The same stream or path cannot be used to open and save a <STRONG>TiffFile</STRONG> object.  To overwrite
            an existing TIFF, save the TIFF into a new file, then overwrite the original. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Save(System.String)">
            <summary> Saves the <STRONG>TiffFile</STRONG> to a file path. </summary>
            <remarks> The <EM>target</EM> stream must be different from the stream or filepath that was used to open the
            <STRONG>TiffFile</STRONG>. </remarks>
            <param name="path"> The file path to save the <STRONG>TiffFile</STRONG> to. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)">
            <summary> Fires the Error event </summary>
            <param name="e"> A CodecErrorEventArgs object specifying the error </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffFile.Images">
            <summary> Gets the image collection that is part of this <STRONG>TiffFile</STRONG>. </summary>
            <value> A <STRONG>TiffDirectoryCollection</STRONG> representing each image in the file. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffFile.TolerateBadTiffStructure">
            <summary>
            Gets or sets a value indicating whether to accept truncated tiff files or not.
            </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Codec.Tiff.TiffFile.CodecError">
            <summary> This event is used by the <STRONG>TiffFile</STRONG> object to report errors that occur when parsing a
            TiffDirectory. </summary>
            <remarks> The DotImage Tiff decoder is aggressive in suppressing errors encountered while parsing damaged or
            somewhat malformed Tiff files.  Normally these errors are not reported.  This event provides a mechanism for an
            application to record, report, or abort in the event of an error. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffFile.IsIntelByteOrder">
            <summary> Sets or gets the byte ordering for this TiffFile object. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffSubIFD">
            <summary>
            tiff sub-ifd 
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffIFD.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffIFD.#ctor(System.UInt32,Atalasoft.Imaging.Codec.Tiff.TiffDirEntryCollection)">
            <summary>
            constructor
            </summary>
            <param name="offset">offset for this IFD</param>
            <param name="entryCollection">collection of directory entries consisting of this IFD</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffIFD.FindJpgBlockPositions(Atalasoft.Imaging.Codec.Tiff.TiffStreamReader,Atalasoft.Imaging.Codec.Tiff.TiffDirEntry,System.Int64@,System.Int64@)">
            <summary>
            Finds start and end positions of jpeg block in the source stream.
            </summary>
            <param name="source">The source stream.</param>
            <param name="tde">JPEG Interchange Format dir entry - tag 513(0x201).</param>
            <param name="startPos">Start position.</param>
            <param name="endPos">End position.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffIFD.NextOffset">
            <summary>
            offset for the next IFD
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffIFD.Offset">
            <summary>
            offset of this IFD
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffIFD.Page">
            <summary>
            current page number
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffIFD.IsPrimaryImage">
            <summary>
            is this IFD contains the primary image data
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffIFD.StripByteCounts">
            <summary>
            array of number of bytes of strips
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffIFD.StripOffsets">
            <summary>
            array of offsets of image data strips
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffSubIFD.Read(System.IO.Stream,Atalasoft.Imaging.Codec.Tiff.TiffByteOrder)">
            <summary>
            read a sub ifd
            </summary>
            <param name="source"></param>
            <param name="byteorder"></param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffSubIFD.ReferenceTagId">
            <summary>
            tag id representing a directory entry having a sub-ifd type data
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffSubIFD.OffsetBackward">
            <summary>
            data position in original stream
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffIFDParser">
            <summary>
            Read TIFF Structure
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffIFDParser.ReadTiff(System.IO.Stream,System.Int32)">
            <summary>
            Read tiff stream, and form IFD by extracting directory entries
            </summary>
            <param name="source">source TIFF image file</param>
            <param name="frameIdx">a specified page</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffIFDParser.ReadTiff(System.IO.Stream)">
            <summary>
            Read tiff stream, and form IFD by extracting directory entries
            </summary>
            <param name="source">source TIFF image file</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffIFDParser.Header">
            <summary>
            Image File Header
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffIFDParser.IFDList">
            <summary>
            List of Image File Directories
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffDocument">
            <summary>The TiffDocument class is used to represent an entire TIFF file in a way that makes it convenient to
            manipulate the pages of the document.  Pages can be reordered, inserted, added, and removed.  The final document can
            then be saved to a new file.  TiffDocument keeps as little in memory at one time as possible.</summary>
            <remarks>When saving, TiffDocument does not recompress image data.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.Tiff.TiffDocument._pages">
            <summary> A collection of <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> objects that represent the contents of the Tiff file. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor">
            <summary> Constructs a new empty TiffDocument. </summary>
            <overloads> Constructs a new TiffDocument object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor(System.IO.Stream)">
            <summary> Constructs a new TiffDocument class, populated the <see cref="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages"/> property with the contents of the
            given stream. </summary>
            <remarks> The constructor will throw an exception if the stream is null or does not represent a TIFF stream.
            </remarks>
            <param name="stream"> A seekable stream whose contents is a TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor(System.IO.Stream,System.Boolean)">
            <summary> Constructs a new TiffDocument class, populated the <see cref="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages"/> property with the contents of the
            given stream. </summary>
            <remarks> The constructor will throw an exception if the stream is null or does not represent a TIFF stream.
            </remarks>
            <param name="stream"> A seekable stream whose contents is a TIFF. </param>
            <param name="tolerateBadTiffStructure">The value indicating whether to process truncated tiff files.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor(System.String)">
            <summary> Constructs a new TiffDocument class, populated the <see cref="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages"/> property with the contents of the
            given file. </summary>
            <remarks> The constructor will throw an exception if the file is null or does not represent a TIFF. </remarks>
            <param name="filename"> A path to a TIFF file. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor(System.String,System.Boolean)">
            <summary> Constructs a new TiffDocument class, populated the <see cref="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages"/> property with the contents of the
            given file. </summary>
            <remarks> The constructor will throw an exception if the file is null or does not represent a TIFF. </remarks>
            <param name="filename"> A path to a TIFF file. </param>
            <param name="tolerateBadTiffStructure">The value indicating whether to process truncated tiff files.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.ValidOutputStream(System.IO.Stream)">
            <summary> Test a stream to see if it can be used as an output stream for this TiffDocument. </summary>
            <returns> Returns <EM>true</EM> if the stream is different from the streams used by each of the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> objects contained within this TiffDocument. </returns>
            <param name="stm"> The stream to write to. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Save(System.IO.Stream)">
            <summary> Saves the contents of this TiffDocument into a new stream. </summary>
            <param name="outputStream"> The stream where the file will be saved.  The outputStream object <STRONG>may
            not</STRONG> be the source of one or more of the TiffDocument's TiffPage objects.  This condition will cause
            TiffDocument to throw an ArgumentException.  The outputStream may not be null. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Save(System.String)">
            <summary> Saves every TiffPage within the TiffDocument object into a new TIFF file. </summary>
            <param name="fileName"> The non-null path to the file to be saved.  The Save method to a path does not check to see
            if the output path is the same as any of the input paths.  If it is, the results will be unpredictable and most
            likely will result in a damaged TIFF file. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine(System.IO.Stream,System.IO.Stream[])">
            <summary> Combines a set of TIFF Streams into a single output TIFF Stream </summary>
            <param name="output"> The output stream that will contain the combined TIFF. </param>
            <param name="sources"> An array of input streams that will be combined into a single output. </param>
            <overloads> Combines two or more TIFF files or streams into a single output stream. </overloads>
            <remarks> Each of these methods use a params array as the final argument so that they can be invoked with or without
            the array object (ie, Combine(outputStream, file1, file2, file2)). </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine(System.IO.Stream,System.String[])">
            <summary> Combines a set of TIFF files into a single output TIFF Stream </summary>
            <param name="output"> The output stream that will contain the combined TIFF. </param>
            <param name="sourceFiles"> An array of input file names that will be combined into a single output. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine(System.String,System.String[])">
            <summary> Combines a set of TIFF files into a single output TIFF file </summary>
            <param name="outputFile"> The output file that will contain the combined TIFF. </param>
            <param name="sourceFiles"> An array of input file names that will be combined into a single output. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages">
            <summary> A collection of <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> objects that represent the contents of the Tiff file. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffPage">
            <summary> An object that represents a page within a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDocument"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPage.#ctor(System.IO.Stream,System.Int32,System.Drawing.Size,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.Dpi)">
            <overloads> 
            <summary>Constructs a new TiffPage object from an AtalaImage</summary>
            <remarks> <para>New TiffPage objects can't be constructed from streams or files.  To get a single page from an
            existing stream, create a TiffDocument object from that stream and get the appropriate TiffPage from the document's
            <see cref="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages">Pages</see> property.</para>
            <para>Internally, this creates a MemoryStream representing a new single page TIFF file with the given image.  It
            will be compressed with the supplied compression scheme (or default if none supplied).</para>
            <para>After the TiffPage object is constructed, it no longer needs the original image and the client code is free to
            dispose it.</para> </remarks>
            </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPage.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.TiffCompression)">
            <summary> Constructs a new TiffPage object from the given image, using the specified compression. </summary>
            <param name="image"> An AtalaImage object to use for a TiffPage </param>
            <param name="compression"> <para>Compression to use for the image</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPage.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary> Constructs a new TiffPage object from the given image. </summary>
            <remarks> Non-destructive compression for the image will be automatically selected. </remarks>
            <param name="image"> An AtalaImage object to use for a TiffPage </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Stream">
            <summary> Returns the stream from which the TiffPage originally came. </summary>
            <remarks> Modifying the stream object (or the contents of the stream) will create unpredictable results. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Frame">
            <summary> Gets the original frame number of this page within its stream </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Size">
            <summary> Returns the dimensions of the page in pixels. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.PixelFormat">
            <summary> Returns the PixelFormat of the page. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Resolution">
            <summary> Returns the resolution of the page. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection">
            <summary> A collection object used to hold a set of <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> objects. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.#ctor">
            <summary> Constructs a new TiffPageCollection </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Add(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary> Adds the TiffPage to the end of this collection. </summary>
            <param name="value"> A TiffPage to add. </param>
            <overloads> Adds a new page to the end </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.IndexOf(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary> Returns the index of a given <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> object. </summary>
            <returns> An integer &gt;= 0 if the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> is in this collection, -1 otherwise. </returns>
            <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> to look for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary> Inserts a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> into this collection at the given location. </summary>
            <param name="index"> The location where the given <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> will be inserted. </param>
            <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> object to insert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Remove(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary> Removes a given <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> from the collection. </summary>
            <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Contains(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary> Indicates if a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> is contained in this collection </summary>
            <returns> <EM>True</EM> if the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> is contained in this collection, <EM>false</EM> otherwise.
            </returns>
            <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage"/> to look for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.CopyTo(Atalasoft.Imaging.Codec.Tiff.TiffPage[],System.Int32)">
            <summary> Copies the contents of this collection into a given array. </summary>
            <param name="array"> An non-null array of TiffPage objects </param>
            <param name="index"> The index in the array where the collection elements will be put </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Add(Atalasoft.Imaging.Codec.Tiff.TiffPageCollection)">
            <summary> Adds the entire contents of the TiffPageCollection to the end of this collection. </summary>
            <param name="other"> A collection of TiffPage objects to add. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Item(System.Int32)">
            <summary> Sets or gets the <EM>n</EM>th item in this collection. </summary>
            <param name="index"> The index of the item to get or set. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TlaDecoder">
            <remarks> <para>By default, when opening a Tla image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the <see cref="T:Atalasoft.Imaging.Codec.RegisteredDecoders"/> and does not have to be
            explicitly set. </para>
            <para>A TLA image can save images in an encrypted format.  A password needs to be supplied for opening these image
            formats.</para> </remarks>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Tla images from a <see cref="T:System.IO.Stream"/>.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TlaDecoder.password">
            <summary> Gets or sets the password to use for reading encrypted Tla images. </summary>
            <value> The password to use for reading encrypted Tla images. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TlaDecoder"/>. </summary>
            <overloads> Creates a TlaDecoder. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.#ctor(System.String)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TlaDecoder"/> specifying the password. </summary>
            <param name="password"> The password to use for reading encrypted Tla images. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains an Tla image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Tla image stored in a Stream without decoding the image data. </summary>
            <overloads> Returns an ImageInfo object containing information about the image. </overloads>
            <returns> An ImageInfo object containing information about the image. </returns>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <remarks> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Tla encoded image. </remarks>
            <overloads> Reads the image data into an AtalaImage object. </overloads>
            <returns> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Tla encoded image. </returns>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The ProgressEventHandler for this process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.Password">
            <summary> Gets or sets the password to use for reading encrypted Tla images. </summary>
            <value> The password to use for reading encrypted Tla images. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.SupportedImageType">
            <summary> Returns a Tla ImageType enumeration value. </summary>
            <value> <para>ImageType.Tla</para> </value>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TlaEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write TLA images to a %System.IO.Stream%.</para> </summary>
            <remarks> This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects
            when saving to specify a TLA image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TlaEncoder.password">
            <summary> Gets or sets the password to use for reading, writing, or obtaining information on encrypted TLA images.
            </summary>
            <value> The password to use for reading, writing, or obtaining information on encrypted TLA images. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TiffEncoder"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.#ctor(System.String)">
            <summary> Initializes a new instance of a TlaEncoder specifying the password to encrypt with. </summary>
            <param name="password"> The password to use for reading, writing, or obtaining information on encrypted TLA images.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Tla image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaEncoder.Password">
            <summary> Gets or sets the password to use for reading, writing, or obtaining information on encrypted TLA images.
            </summary>
            <value> The password to use for reading, writing, or obtaining information on encrypted TLA images. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WbmpDecoder">
            <remarks> <para>By default, when opening a Wbmp image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the <see cref="T:Atalasoft.Imaging.Codec.RegisteredDecoders"/> and does not have to be
            explicitly set. </para>
            <para>A WBMP image is commonly used in PDA devices and is always black and white.</para> </remarks>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Wireless Bitmap (Wbmp) images from a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.#ctor">
            <summary> Initializes a new instance of a %WbmpDecoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains an Wbmp image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Wbmp image stored in a Stream without decoding the image data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <remarks> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Wbmp encoded image. </remarks>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WbmpDecoder.SupportedImageType">
            <summary> Returns a Wbmp ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WbmpEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Wireless Bitmap (WBMP) images to a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <remarks> This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects
            when saving to specify a WBMP image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder.#ctor">
            <summary> Initializes a new instance of a %WbmpEncoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Wbmp image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WbmpEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WmfDecoder">
            <remarks> <para>By default, when opening a Wmf image using the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/>
            objects, this decoder will automatically be selected from the %RegisteredDecoders% and does not have to be
            explicitly set. </para>
            <para>Any vectorized entities saved in the Metafile will be converted to a raster format.</para> </remarks>
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder"/> used to read Windows Metafile (WMF) images from a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.WmfDecoder.defaultSize">
            <summary> Gets or sets the default <see cref="T:System.Drawing.Size"/> when reading a windows metafile. </summary>
            <remarks> Windows metafiles may or may not have dimensions associated with them. If not, then this attribute defines
            the size that will be used. If this value is empty, it will use information that might be stored in the file or a
            default of 640 x 480 pixels. </remarks>
            <value> The default <strong>System.Drawing.Size</strong> when reading a windows metafile. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.#ctor">
            <summary> Initializes a new instance of a %WmfDecoder%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.#ctor(System.Drawing.Size)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.WmfDecoder"/> specifying the size of the image. </summary>
            <param name="defaultSize"> The default <see cref="T:System.Drawing.Size"/> when reading a windows metafile. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary> <para>Returns true if the specified Stream contains an Wmf image.</para> </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.GetImageInfo(System.IO.Stream)">
            <summary> Retreive information from a Wmf image stored in a Stream without decoding the image data. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <remarks> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage"/> from a Stream containing a Wmf encoded image. </remarks>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.DefaultSize">
            <summary> Gets or sets the default <see cref="T:System.Drawing.Size"/> when reading a windows metafile. </summary>
            <remarks> Windows metafiles may or may not have dimensions associated with them. If not, then this attribute defines
            the size that will be used. If this value is empty, it will use information that might be stored in the file or a
            default of 640 x 480 pixels. </remarks>
            <value> The default <strong>System.Drawing.Size</strong> when reading a windows metafile. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.SupportedImageType">
            <summary> Returns a Wmf ImageType enumeration value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WmfEncoder">
            <summary> <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> that will write Windows Metafile (WMF) images to a <see cref="T:System.IO.Stream"/>.</para>
            </summary>
            <remarks> This <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> can be passed into the the <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.Workspace"/> objects
            when saving to specify a WMF image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.WmfEncoder.placeable">
            <summary> Gets or sets a value indicating if an Aldus placeable metafile will be written. </summary>
            <value> A value indicating if an Aldus placeable metafile will be written.  </value>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.#ctor">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.WmfEncoder"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.#ctor(System.Boolean)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.WmfEncoder"/> specifying the placeable value. </summary>
            <param name="placeable"> A value indicating if an Aldus placeable metafile will be written.  </param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage"/> as a Wmf image to a stream. </summary>
            <param name="stream"> A stream that the encoded image data will be saved to. </param>
            <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to encode. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.ImageType">
            <summary> Returns the <STRONG>ImageType</STRONG> associated with thie Encoder Setting. </summary>
            <value> The <strong>ImageType</strong> associated with thie Encoder Setting. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.Placeable">
            <summary> Gets or sets a value indicating if an Aldus placeable metafile will be written. </summary>
            <value> A value indicating if an Aldus placeable metafile will be written.  </value>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.SupportedPixelFormats">
            <summary> Returns an array of pixel formats supported by this encoder. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.RenderingIntent">
            <summary> Indicates different methods to create a color rendering as defined by the International Color Consortium
            (ICC). </summary>
            <remarks> See <a href="http://msdn.microsoft.com">http://msdn.microsoft.com</a> for more information on rendering intents. </remarks>
            <seealso> <a href="http://msdn.microsoft.com/en-us/library/dd372183(v=VS.85).aspx">MSDN Rending Intents</a></seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Pictures">
            <summary> Known as perceptual intent in the ICC specification, causes the full gamut to be compressed or expanded to
            full the gamut of the destination device.  Most suitable for photographic images and is usually the default intent.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Proof">
            <summary> Known as the colorimetric intent in the ICC specification, causes colors that fall outside the range of
            the output device to be set to the nearest color while leaving the other colors unchanged.  Does not preserve the
            white point and is commonly used for proofing printed material. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Graphics">
            <summary> Known as the Saturation intent in the ICC specification, it preserves the saturation of colors as the
            expense of hue and lightness.  Commonly used for business graphics. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Match">
            <summary> Known as the absolute colorimetric intent in the ICC specification, causes colors that fall outside the
            range of the output device to be set to the nearest color while leaving the other colors unchanged.  Preserves the
            white point. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ProfileClass">
            <summary> Indicates the profile class. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Monitor">
            <summary> Display Device Profile </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Printer">
            <summary> Output Device Profile </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Scanner">
            <summary> Input Device Profile </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Link">
            <summary> Device Link Profile </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Abstract">
            <summary> Abstract Profile </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.ColorSpace">
            <summary> Color Space Conversion Profile </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Named">
            <summary> Named Color Profile </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorSpace">
            <summary>
            A value that indicates the color space in which profile data is defined.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Xyz">
            <summary>
            The xyz ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Lab">
            <summary>
            The lab ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Luv">
            <summary>
            The luv ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.YCbCr">
            <summary>
            The y cb cr ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Yxy">
            <summary>
            The yxy ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Rgb">
            <summary>
            The RGB ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Gray">
            <summary>
            The gray ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Hsv">
            <summary>
            The HSV ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Hls">
            <summary>
            The HLS ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Cmyk">
            <summary>
            The cmyk ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Cmy">
            <summary>
            The cmy ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.TwoChannel">
            <summary>
            The two channel ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.ThreeChannel">
            <summary>
            The three channel ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.FourChannel">
            <summary>
            The four channel ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.FiveChannel">
            <summary>
            The five channel ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.SixChannel">
            <summary>
            The six channel ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.SevenChannel">
            <summary>
            The seven channel ColorSpace
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.EightChannel">
            <summary>
            The eight channel ColorSpace
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.Platform">
            <summary> Indicates the platform that the profile is intended for. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.Platform.Apple">
            <summary>
            The apple platform
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.Platform.Microsoft">
            <summary>
            The microsoft platform
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.Platform.SiliconGraphics">
            <summary>
            The silicon graphics platform
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.Platform.Sun">
            <summary>
            The sun platform
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.Platform.Taligent">
            <summary>
            The taligent platform
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ProfileFlags">
            <summary> Bit flags containing hints that the CMM uses to interpret the profile data. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.EmbeddedProfile">
            <summary> The profile is embedded in a bitmap file. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.DependentOnData">
            <summary> The profile can't be used independently of the embedded color data. Used for profiles that are embedded in
            bitmap files </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorType">
            <summary>
            Describes the general color type
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Gray">
            <summary>
            The gray ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Rgb">
            <summary>
            The RGB ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Xyz">
            <summary>
            The xyz ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Yxy">
            <summary>
            The yxy ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Lab">
            <summary>
            The lab ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.ThreeChannel">
            <summary>
            The three channel ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Cmyk">
            <summary>
            The cmyk ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.FiveChannel">
            <summary>
            The five channel ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.SixChannel">
            <summary>
            The six channel ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.SevenChannel">
            <summary>
            The seven channel ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.EightChannel">
            <summary>
            The eight channel ColorType
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Named">
            <summary>
            The named ColorType
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException">
            <summary> This exception fires when the <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> used for a <see cref="T:Atalasoft.Imaging.ColorManagement.ColorTransform"/> are invalid. </summary>
            <remarks> This exception usually means that the appropriate tag for the desired conversion doesn't exist in the
            color profile. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorProfile">
            <summary> <para>A color profile that is used for translating colors.</para> </summary>
            <remarks> <para>Currently, dotImage will read and embed a color profile into a JPEG, TIFF, or PNG image.  The
            profile is used when converting to different color spaces such as CMYK to RGB and RGB to CMYK.</para>
            <para>See <see href="http://www.color.org">www.color.org</see> for a detailed explanation of 
            the ICC and color profiles. </para></remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile.colorSpace">
            <summary> Gets a value that indicates the color space in which the profile data is defined. </summary>
            <value> A value that indicates the color space in which the profile data is defined. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile.platform">
            <summary> Gets the primary platform for which the profile was created. </summary>
            <value> The primary platform for which the profile was created. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile.version">
            <value> The version number of this color profile. </value>
            <summary> Gets the version number of this color profile. </summary>
            <remarks> <para>The string returned is in the format of "0.0.0" where the first number if the major version, the
            second is the minor version, and the last is the bug fix version.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile.connectionColorSpace">
            <summary> Gets a value that indicates the color space in which the profile connection space (PCS) is defined.
            </summary>
            <remarks> Can be either XYZ or Lab. </remarks>
            <value> The color space in which the profile connection space (PCS) is defined. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile.manufacturer">
            <summary> <para>Gets the identification number of the device profile manufacturer.  All manufacturer identification
            numbers are registered with the ICC. </para> </summary>
            <value> The identification number of the device profile manufacturer. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile.model">
            <summary> Gets the device manufacturer's device model number.  All model identification numbers are registered with
            the ICC. </summary>
            <value> The device manufacturer's device model number. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile.creator">
            <summary> Gets a signature of the software that created the profile.  Signatures are registered with the ICC.
            </summary>
            <value> A signature of the software that created the profile. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile.flags">
            <summary> Gets bit flags containing hints that the CMM uses to interpret the profile data. </summary>
            <value> Bit flags containing hints that the CMM uses to interpret the profile data. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile.cmmType">
            <summary> Gets the identification number of the CMM that is used in the profile. Identification numbers are
            registered with the ICC. </summary>
            <value> The identification number of the CMM that is used in the profile. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile._description">
            <summary> Gets the description value stored within the color profile. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorProfile._copyright">
            <summary> Gets the copyright information stored within the color profile. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.IntPtr,System.Int32)">
            <summary> <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> specifying a pointer to the profile memory and the size
            of this memory.</para> </summary>
            <param name="mempointer"> A pointer to the memory containing a color profile. </param>
            <param name="size"> The size of the memory pointer in bytes. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.String)">
            <summary> <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> specifying the filename containing a color
            profile.</para> </summary>
            <param name="fileName"> The file name of the color profile (usually with the ICM or ICC extension). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.IO.Stream)">
            <summary> <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> specifying a stream containing the profile
            memory.</para> </summary>
            <param name="stream"> A stream containing a color profile. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.Byte[])">
            <summary> <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> specifying a byte array containing the profile
            memory.</para> </summary>
            <param name="data"> The bytes that contain the color profile. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Save(System.String)">
            <summary> Save this <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> to a file. </summary>
            <param name="fileName"> <para>The filename of the colorprofile to save.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileBytes">
            <summary>
            Gets the profile bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromSrgb">
            <summary> Returns the standard sRGB Color Profile. </summary>
            <returns> The standard sRGB Color Profile. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.String)">
            <summary> Returns a <STRONG>ColorProfile </STRONG>embedded within an image given the image file name. </summary>
            <returns> A <STRONG>ColorProfile </STRONG>embedded within an image. </returns>
            <param name="fileName"> The filename of the image. </param>
            <summary> Returns a <STRONG>ColorProfile </STRONG>embedded within an image. </summary>
            <returns> A <STRONG>ColorProfile </STRONG>embedded within an image. </returns>
            <remarks> Can be a PNG, TIFF, or JPEG image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.IO.Stream)">
            <summary> Returns a <STRONG>ColorProfile </STRONG>embedded within an image given the image stream. </summary>
            <returns> A <STRONG>ColorProfile </STRONG>embedded within an image. </returns>
            <param name="imageStream"> The encoded image stream. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromGraphics(System.Drawing.Graphics)">
            <returns> The color profile assigned to a specified <see cref="T:System.Drawing.Graphics"/> object. </returns>
            <summary> Returns the color profile assigned to a specified <see cref="T:System.Drawing.Graphics"/> object. </summary>
            <param name="graphics"> A graphics object. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromScreen">
            <summary> Returns the default color profile assigned to the screen. </summary>
            <returns> The default color profile assigned to the screen. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetScreenProfileName">
            <summary> Returns the name of the color profile associated with the current display. </summary>
            <returns> The name of the color profile associated with the current display. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileDirectory">
            <summary> Returns the path of the color profile directory. </summary>
            <returns> The path of the color profile directory. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Class">
            <summary> Gets the profile class. </summary>
            <value> The profile class. </value>
            <remarks> The profile class indicates a type of profile.  For example Input, Display, Color Space Conversion, etc.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ColorSpace">
            <summary> Gets a value that indicates the color space in which the profile data is defined. </summary>
            <value> A value that indicates the color space in which the profile data is defined. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Platform">
            <summary> Gets the primary platform for which the profile was created. </summary>
            <value> The primary platform for which the profile was created. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.RenderingIntent">
            <value> The profile rendering intent. </value>
            <summary> Gets the profile rendering intent. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Version">
            <value> The version number of this color profile. </value>
            <summary> Gets the version number of this color profile. </summary>
            <remarks> <para>The string returned is in the format of "0.0.0" where the first number if the major version, the
            second is the minor version, and the last is the bug fix version.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ConnectionColorSpace">
            <summary> Gets a value that indicates the color space in which the profile connection space (PCS) is defined.
            </summary>
            <remarks> Can be either XYZ or Lab. </remarks>
            <value> The color space in which the profile connection space (PCS) is defined. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Manufacturer">
            <summary> <para>Gets the identification number of the device profile manufacturer.  All manufacturer identification
            numbers are registered with the ICC. </para> </summary>
            <value> The identification number of the device profile manufacturer. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Model">
            <summary> Gets the device manufacturer's device model number.  All model identification numbers are registered with
            the ICC. </summary>
            <value> The device manufacturer's device model number. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Creator">
            <summary> Gets a signature of the software that created the profile.  Signatures are registered with the ICC.
            </summary>
            <value> A signature of the software that created the profile. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Flags">
            <summary> Gets bit flags containing hints that the CMM uses to interpret the profile data. </summary>
            <value> Bit flags containing hints that the CMM uses to interpret the profile data. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.CmmType">
            <summary> Gets the identification number of the CMM that is used in the profile. Identification numbers are
            registered with the ICC. </summary>
            <value> The identification number of the CMM that is used in the profile. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Description">
            <summary> Gets the description value stored within the color profile. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Copyright">
            <summary> Gets the copyright information stored within the color profile. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorTransform">
            <summary> <para>Contains a color transform object and methods to convert from one colorspace to another using a
            <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile"/>.</para> </summary>
            <remarks> This class can be used to translate the colorspace of images or colors.  It is used by the controls to
            view CMYK images and when color management is enabled.  See <see cref="N:Atalasoft.Imaging.ColorManagement"/> for more
            information. </remarks>
            <seealso> Color Management in WinControls </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ColorTransform.blackPointCompensation">
            <summary> Sets or gets a flag indicating whether or not black point compensation will be used </summary>
            <value> True if black point compensation will be used, false otherwise </value>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorTransform"/> specifying a source and destination %ColorProfile%.
            </summary>
            <param name="source"> The source color profile. </param>
            <param name="dest"> The destination color profile. </param>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorTransform"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorTransform"/> specifying a source and destination %ColorProfile% and the
            rendering intent of the translation. </summary>
            <param name="source"> The source color profile. </param>
            <param name="dest"> The destination color profile. </param>
            <param name="renderingIntent"> The rendering intent of the translation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorTransform"/> specifying a source,. destination, and target
            %ColorProfile% and the rendering intents of the translation. </summary>
            <remarks> This constructor is used for proofing images. </remarks>
            <param name="source"> The source color profile. </param>
            <param name="dest"> The destination color profile. </param>
            <param name="target"> The target output device color profile. </param>
            <param name="displayIntent"> The rendering intent to use for the display. </param>
            <param name="proofIntent"> The rendering intent to use for the target device. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColorSpace(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
            <summary> Returns a new image with a translated colorspace. </summary>
            <returns> A new image with a translated colorspace. </returns>
            <param name="image"> The image to translate. </param>
            <param name="destPixelFormat"> The desired <see cref="T:Atalasoft.Imaging.PixelFormat"/> of the returned image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColors(Atalasoft.Imaging.ColorManagement.ColorType,Atalasoft.Imaging.ColorManagement.ColorType,System.Drawing.Color[])">
            <summary> This method converts an array of colors using this <STRONG> ColorTransform</STRONG>   . </summary>
            <returns> An array of Colors. </returns>
            <param name="inputColorType"> The <STRONG>ColorType </STRONG>of the input colors. </param>
            <param name="outputColorType"> The <STRONG>ColorType</STRONG> of the output colors. </param>
            <param name="inputColors"> <para>A parameterr array of color values.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.Dispose">
            <summary> Clean up unmanaged resources. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorTransform.BlackPointCompensation">
            <summary> Sets or gets a flag indicating whether or not black point compensation will be used </summary>
            <value> True if black point compensation will be used, false otherwise </value>
        </member>
        <member name="T:Atalasoft.Imaging.Dpi">
            <summary> Holds the Resolution information. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Dpi.x">
            <summary> Gets the horizontal resolution. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Dpi.y">
            <summary> Gets the vertical resolution. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Dpi.units">
            <summary> Gets the resolution Units. </summary>
            <value> The resolution Units. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ResolutionUnit)">
            <summary>
            Create a new Dpi structure at a specified resolution.
            </summary>
            <param name="x">Horizontal Resolution.</param>
            <param name="y">Vertical Resolution.</param>
            <param name="units">Resolution Units.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.#ctor(System.Double,System.Double,Atalasoft.Imaging.ResolutionUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Dpi"/> struct.
            </summary>
            <param name="x">The x resolution.</param>
            <param name="y">The y resoltion.</param>
            <param name="units">The resolution units.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.Compare(Atalasoft.Imaging.Dpi,Atalasoft.Imaging.Dpi)">
            <summary>
            Compares the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.op_Equality(Atalasoft.Imaging.Dpi,Atalasoft.Imaging.Dpi)">
            <summary>
            Compares the two Dpi objects for equality.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if the objects are equal, <c>false</c> otherwise</returns>
            <remarks>The compares the x and y resolutions and the units, but not compare for equivalence across different units</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.op_Inequality(Atalasoft.Imaging.Dpi,Atalasoft.Imaging.Dpi)">
            <summary>
            Compares the two Dpi objects for inequality.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns><c>true</c> if the objects are not equal, <c>false</c> otherwise</returns>
            <remarks>The compares the x and y resolutions and the units, but not compare for equivalence across different units</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.ConvertTo(Atalasoft.Imaging.ResolutionUnit)">
            <summary>
            Converts to the new units.
            </summary>
            <param name="newUnit">The new unit.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">Internal error - unknown unit conversion</exception>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.X">
            <summary> Gets the horizontal resolution. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.Y">
            <summary> Gets the vertical resolution. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.Units">
            <summary> Gets the resolution Units. </summary>
            <value> The resolution Units. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Canvas">
            <summary> This class is used to draw primitives and text onto an AtalaImage, Bitmap, or Graphics object. </summary>
            <remarks> <para>To use the canvas class, create an instance specifying the object that will be drawn on in the
            constructor.  If you're using the WorkspaceViewer WinControl, you will have to invoke ClearCache to
            show the changes to the image.</para>
            <para>The drawing class has some advantages over using the Graphics object in GDI+.  You may draw directly onto
            grayscale, colormapped, and 1-bit document images.  In addition, you can choose the border color and line type with
            an <STRONG>AtalaPen</STRONG>, and if the drawing entity supports it, a <STRONG>Fill</STRONG> to use to fill the
            inside of the entity.  The various Fill objects can be used for solid, hatched, gradient, or textured filled areas
            for both the border and inside of the entity.</para>
            <para>A <see cref="F:Atalasoft.Imaging.Drawing.Canvas.smoothingLevel"/> can be specified in the canvas object which can be configured to enable
            antialising of the drawn objects.</para>
            <para>In addition, when drawing onto a graphics object, you may specify an inverted pen, using the XOR algorithm
            when drawing any entity  onto the device.  This property is ignored</para></remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Canvas.invertedOnGraphics">
            <summary> Gets or sets a value indicating if entities being drawn on a graphics object will be inverted. </summary>
            <value> A value indicating if entities being drawn on a graphics object will be inverted. </value>
            <remarks> Setting this property to true will cause the pixels beneath the entity to be negated with the XOR
            algorithm.  This is useful when drawing rubber-bands that can quickly be erased be drawing over the same location
            twice.  The selection rectangle in the WinForm Viewport control by default draws on an inverted canvas. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Canvas.smoothingLevel">
            <summary> Gets or sets the amount of antialiasing applied to the entity being drawn onto this canvas. </summary>
            <remarks> <para>Smoothing only works on continuous tone images (grayscale, RGB, or RGBA generally) and will be
            ignored with colormapped images.  By default, all canvas objects start with a smoothing level of 0.  The greater the
            smoothing level the more washed out the entity being drawn will appear.  There is no upper limit to the smoothing
            level but it must be greater than or equal to zero.</para></remarks>
            <value> The amount of antialiasing applied to the entity being drawn onto this canvas. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Canvas._fontQuality">
            <summary> Gets or sets the quality for font rendering. </summary>
            <value> The rendering quality of the font. </value>
            <remarks> <STRONG>ClearType</STRONG> is only available on Windows XP and above. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.#ctor">
            <summary> Initializes a new instance of a %Canvas% object. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Drawing.Canvas"/> object specifying an <see cref="T:Atalasoft.Imaging.AtalaImage"/> to draw on.
            </summary>
            <param name="image"> The image to draw on. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.#ctor(System.Drawing.Graphics)">
            <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Drawing.Canvas"/> object specifying a <see cref="T:System.Drawing.Graphics"/> to draw on.
            </summary>
            <param name="graphics"> The device to draw on. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLine(System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary> Draw a line onto this canvas. </summary>
            <remarks> The line is specified from a start point to an end point and a pen to control it's color, thickness, line
            style, and fill style. </remarks>
            <param name="startPoint"> The start point of the line in image pixel coordinates. </param>
            <param name="endPoint"> The end point of the line in image pixel coordinates. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> controling the line characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLines(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary> Draws multiple connected lines onto this canvas. </summary>
            <remarks> The lines are specifyied with a series of points.  To connect the last point with the first point see
            DrawPolygon. </remarks>
            <param name="points"> An array of points that straight lines are drawn through. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> controlling the line characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary> Draw a series of connected lines that form a closed polygon specifying the border pen and inside fill.
            </summary>
            <remarks> The first and last points are connected, forming the closed polygon. </remarks>
            <param name="points"> An array of points forming a polygon that straight lines are drawn through. </param>
            <param name="pen"> The %AtalaPen% controlling the border characteristics. </param>
            <param name="fill"> The %Fill% specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary> Draw a series of connected lines that form a closed polygon specifying the border pen. </summary>
            <remarks> The first and last points are connected, forming the closed polygon. </remarks>
            <param name="points"> An array of points forming a polygon that straight lines are drawn through. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> controlling the border characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.Fill)">
            <summary> Draw a series of connected lines that form a closed polygon specifying the inside fill. </summary>
            <remarks> The first and last points are connected, forming the closed polygon. </remarks>
            <param name="points"> An array of points forming a polygon that straight lines are drawn through. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill"/> specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary> Draws an ellipse onto this canvas specifying the border pen and Fill. </summary>
            <param name="rect"> The bounding rectangle of the ellipse. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> controlling the border characteristics. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill"/> specifying the fill characteristics. </param>
            <summary> Draws an ellipse onto this canvas. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary> Draws an ellipse onto this canvas specifying the border pen. </summary>
            <param name="rect"> The bounding rectangle of the ellipse. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> controlling the border characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
            <summary> Draws an ellipse onto this canvas specifying the Fill. </summary>
            <param name="rect"> The bounding rectangle of the ellipse. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill"/> specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary> Draws a rectangle onto this canvas specifying the border pen. </summary>
            <param name="rect"> The position and size of the rectangle. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> controlling the border characteristics. </param>
            <summary> Draws a rectangle onto this canvas. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
            <summary> Draws a rectangle onto this canvas specifying the fill. </summary>
            <param name="rect"> The position and size of the rectangle. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill"/> specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary> Draws a rectangle onto this canvas specifying the border pen and fill. </summary>
            <param name="rect"> The position and size of the rectangle. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> controlling the border characteristics. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill"/> specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,System.Drawing.Size)">
            <summary> Draws a rounded rectangle onto this canvas specifying the border pen. </summary>
            <param name="rect"> The position and size of the rectangle. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> controlling the border characteristics. </param>
            <param name="cornerRadius"> The radius in pixels of the corners. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
            <summary> Draws a rounded rectangle onto this canvas specifying the fill. </summary>
            <param name="rect"> The position and size of the rectangle. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill"/> specifying the fill characteristics. </param>
            <param name="cornerRadius"> The radius in pixels of the corners. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
            <summary> Draws a rounded rectangle onto this canvas specifying the border pen and fill. </summary>
            <param name="rect"> The position and size of the rectangle. </param>
            <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> controlling the border characteristics. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill"/> specifying the fill characteristics. </param>
            <param name="cornerRadius"> The radius in pixels of the corners. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRegion(System.Drawing.Region,Atalasoft.Imaging.Drawing.Fill)">
            <summary> Draws a filled region. </summary>
            <param name="region"> The region to fill. </param>
            <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill"/> specifying the fill characteristics. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
            <summary> Draw a single line text string onto this canvas specifying the upper left corner position. </summary>
            <param name="text"> The text string to draw. </param>
            <param name="position"> The position of the upper left corner of the text rectangle to draw. </param>
            <param name="font"> The text font. </param>
            <param name="foreColor"> The text fill. </param>
            <returns> The actual size of the text drawn. </returns>
            <overloads>
            <example>
<code lang="CS" title="Centered (C#)"><![CDATA[
// Load the image to work with.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Create a Canvas for this image.
Canvas canv = new Canvas(image);

// Setup the text font options.
Font fnt = new Font("Verdana", 36, FontStyle.Bold);

// Find out the rendered size of the text.
Size textSize = Canvas.CalculateTextSize("%%company%% DotImage", fnt);

// Draw the text centered on the image.
Point pt = new Point((image.Width - textSize.Width) / 2, (image.Height - textSize.Height) / 2);
canv.DrawText("%%company%% DotImage", pt, fnt, new SolidFill(Color.Red), new SolidFill(Color.Transparent));
]]></code>

<code lang="VB" title="CenteredVB (Visual Basic)"><![CDATA[
' Load the image to work with.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
' Create a Canvas for this image.
Dim canv As Canvas =  New Canvas(image) 
 
' Setup the text font options.
Dim fnt As Font =  New Font("Verdana", 36, FontStyle.Bold) 
 
' Find out the rendered size of the text.
Dim textSize As Size =  Canvas.CalculateTextSize("%%company%% DotImage", fnt) 
 
' Draw the text centered on the image.
Dim pt As Point =  New Point((image.Width - textSize.Width) / 2,(image.Height - textSize.Height) / 2) 
canv.DrawText("%%company%% DotImage", pt, fnt, New SolidFill(Color.Red), New SolidFill(Color.Transparent))
]]></code>
</example>
            </overloads>
            <remarks> By default, text is drawn relative to the system DPI.  To draw text relative to another DPI, such as the
            image DPI, see the <see cref="P:Atalasoft.Imaging.Drawing.TextFormat.ScaleToDpi"/> property of <see cref="T:Atalasoft.Imaging.Drawing.TextFormat"/>. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill)">
            <summary> Draw a single line text string onto this canvas specifying the upper left corner position and a solid
            background color. </summary>
            <param name="text"> The text string to draw. </param>
            <param name="position"> The position of the upper left corner of the text rectangle to draw. </param>
            <param name="font"> The text font. </param>
            <param name="foreColor"> The text fill. </param>
            <param name="backColor"> The background color. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary> Draw a single line text string onto this canvas specifying the upper left corner position and text
            formatting. </summary>
            <returns> The actual size of the text drawn. </returns>
            <param name="text"> The text string to draw. </param>
            <param name="position"> The position of the upper left corner of the text rectangle to draw. </param>
            <param name="font"> The text font. </param>
            <param name="foreColor"> The text fill. </param>
            <param name="format"> The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary> Draw a single line text string onto this canvas specifying the upper left corner position and a solid
            background color. </summary>
            <param name="text"> The text string to draw. </param>
            <param name="position"> The position of the upper left corner of the text rectangle to draw. </param>
            <param name="font"> The text font. </param>
            <param name="foreColor"> The text fill. </param>
            <param name="backColor"> The background color. </param>
            <param name="format"> The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
            <summary> Draw multiline text onto this canvas specifying the rectangular bound area of the string. </summary>
            <remarks> <para>The rectangular width must be specified.  Specify a value for the rectangular height to clip the
            text, or 0 to prevent clipping the text.</para> </remarks>
            <returns> The actual size of the text drawn. </returns>
            <param name="text"> The text string to draw. </param>
            <param name="boundRectangle"> The bounding rectangle of the text to draw.  Specify 0 height to prevent clipping the
            text. </param>
            <param name="font"> The text font. </param>
            <param name="foreColor"> The text fill. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
            <remarks> <para>The rectangular width must be specified.  Specify a value for the rectangular height to clip the
            text, or 0 to prevent clipping the text.</para> </remarks>
            <summary> Draw multiline text onto this canvas specifying the rectangular bound area of the string and text
            formatting. </summary>
            <returns> The actual size of the text drawn. </returns>
            <param name="text"> The text string to draw. </param>
            <param name="boundRectangle"> The bounding rectangle of the text to draw.  Specify 0 height to prevent clipping the
            text </param>
            <param name="font"> The text font. </param>
            <param name="foreColor"> The text fill. </param>
            <param name="format"> The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary> Draw a single line text string onto this canvas specifying the upper left corner position and a solid
            background color. </summary>
            <param name="text"> The text string to draw. </param>
            <param name="boundRectangle"> The bounding rectangle of the text to draw.  Specify 0 height to prevent clipping the
            text. </param>
            <param name="font"> The text font. </param>
            <param name="foreColor"> The text fill. </param>
            <param name="backColor"> The background color. </param>
            <param name="format"> The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.IntPtr,System.String,System.Drawing.Rectangle,System.Boolean,Atalasoft.Imaging.Drawing.TextAlignment,System.Double,System.Double)">
            <returns> Returns the size of the text without actually drawing it. </returns>
            <summary> Calculates the size of the text without actually drawing it. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Size,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
            <returns> Returns the size of bound text without actually drawing it. </returns>
            <summary> Calculates the size of bound text without actually drawing it. </summary>
            <param name="text"> The text string to evaluate. </param>
            <param name="boundSize"> The size of the bound </param>
            <param name="font"> The text font. </param>
            <param name="format"> The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
            <returns> Returns the size of single line text without actually drawing it. </returns>
            <summary> Calculates the pixel size required to draw text using a specific font and text format. </summary>
            <param name="text"> The text string to evaluate. </param>
            <param name="font"> The text font. </param>
            <param name="format"> The text formatting to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Font)">
            <summary> Calculates the pixel size required to draw text using a specific font. </summary>
            <returns> The size in pixel. </returns>
            <param name="text"> The text to draw. </param>
            <param name="font"> The font used for the text. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.PrepareDCPen(System.IntPtr,Atalasoft.Imaging.Drawing.AtalaPen,System.Drawing.Color,System.IntPtr@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Changes the pen object in a DC.
            </summary>
            <param name="hdc">DC to change.</param>
            <param name="pen">Pen object.</param>
            <param name="mask">The mask.</param>
            <param name="oldPen">The old pen.</param>
            <param name="oldRop">The old rop.</param>
            <param name="oldBkMode">The old bk mode.</param>
            <param name="oldBkColor">Old color of the bk.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.PrepareDCBrush(System.IntPtr,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Color,System.IntPtr@,System.Int32@,System.Int32@)">
            <summary>
            Changes the brush object in a DC.
            </summary>
            <param name="hdc">DC to change.</param>
            <param name="brush">Brush object.</param>
            <param name="mask">The mask.</param>
            <param name="oldBrush">The old brush.</param>
            <param name="oldBkMode">The old bk mode.</param>
            <param name="oldBkColor">Old color of the bk.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.RestoreDC(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Restores the DC to is original state.
            </summary>
            <param name="hdc">DC to restore.</param>
            <param name="oldBrush">The old brush.</param>
            <param name="oldPen">The old pen.</param>
            <param name="oldFont">The old font.</param>
            <param name="oldBkMode">The old bk mode.</param>
            <param name="oldBkColor">Old color of the bk.</param>
            <param name="oldRop">The old rop.</param>
            <param name="oldMap">The old map.</param>
            <param name="oldTextColor">Old color of the text.</param>
            <param name="oldInterSpace">The old inter space.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.PrepareDCText(System.IntPtr,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,Atalasoft.Imaging.Drawing.TextFormat,System.IntPtr@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,Atalasoft.Imaging.Drawing.FontQuality)">
            <summary>
            Sets and restores a DC for the text methods.
            </summary>
            <param name="hdc">Device to modify.</param>
            <param name="font">Font object to use.</param>
            <param name="textColor">Color of the text.</param>
            <param name="backColor">Color of the back.</param>
            <param name="format">The format.</param>
            <param name="oldFont">The old font.</param>
            <param name="oldBkMode">The old bk mode.</param>
            <param name="oldBkColor">Old color of the bk.</param>
            <param name="oldTextColor">Old color of the text.</param>
            <param name="oldInterSpace">The old inter space.</param>
            <param name="quality">The quality.</param>
            <exception cref="T:Atalasoft.Imaging.GdiException">
            CreateFontIndirect Failed
            or
            SelectObject Failed
            </exception>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.InvertedOnGraphics">
            <summary> Gets or sets a value indicating if entities being drawn on a graphics object will be inverted. </summary>
            <value> A value indicating if entities being drawn on a graphics object will be inverted. </value>
            <remarks> Setting this property to true will cause the pixels beneath the entity to be negated with the XOR
            algorithm.  This is useful when drawing rubber-bands that can quickly be erased be drawing over the same location
            twice.  The selection rectangle in the WinForm Viewport control by default draws on an inverted canvas. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.SmoothingLevel">
            <summary> Gets or sets the amount of antialiasing applied to the entity being drawn onto this canvas. </summary>
            <remarks> <para>Smoothing only works on continuous tone images (grayscale, RGB, or RGBA generally) and will be
            ignored with colormapped images.  By default, all canvas objects start with a smoothing level of 0.  The greater the
            smoothing level the more washed out the entity being drawn will appear.  There is no upper limit to the smoothing
            level but it must be greater than or equal to zero.</para></remarks>
            <value> The amount of antialiasing applied to the entity being drawn onto this canvas. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.FontQuality">
            <summary> Gets or sets the quality for font rendering. </summary>
            <value> The rendering quality of the font. </value>
            <remarks> <STRONG>ClearType</STRONG> is only available on Windows XP and above. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.FontQuality">
            <summary> Font quality style when using the DrawText method. </summary>
            <remarks> The following situations do not support ClearType antialiasing:
            <UL>
            <LI>Text is rendered on a printer.</LI>
            <LI>Display set for 256 colors or less.</LI>
            <LI>Text is rendered to a terminal server client.</LI>
            <LI>The font is not a TrueType font or an OpenType font with TrueType outlines. For example, the following do not
            support ClearType antialiasing: Type 1 fonts, Postscript OpenType fonts without TrueType outlines, bitmap fonts,
            vector fonts, and device fonts.</LI>
            <LI>The font has tuned embedded bitmaps, for any font sizes that contain the embedded bitmaps. For example, this
            occurs commonly in East Asian fonts.</LI></UL> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Default">
            <summary> Appearance of the font does not matter.  System settings will determine its quality. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Draft">
            <summary> Appearance of the font is less important than when <STRONG>Proof</STRONG> is used. For raster fonts,
            scaling is enabled, which means that more font sizes are available, but the quality may be lower. Bold, italic,
            underline, and strikeout fonts are synthesized if necessary. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Proof">
            <summary> Character quality of the font is more important than exact matching of the logical-font attributes. For
            raster fonts, scaling is disabled and the font closest in size is chosen. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.NonAntialiased">
            <summary> Font is never antialiased. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Antialiased">
            <summary> Font is always antialiased if the font supports it and the size of the font is not too small or too large.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.ClearType">
            <summary> If set, text is rendered (when possible) using ClearType antialiasing method.  Windows XP or above is
            requred. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.EndCap">
            <summary> Drawing style for the end of lines. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Flat">
            <summary> End caps are flat. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Round">
            <summary> End caps are round. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Square">
            <summary> End caps are square. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.CornerJoin">
            <summary> Corner style used where lines join. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Miter">
            <summary> Joins are mitred. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Bevel">
            <summary> Joins are beveled. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Round">
            <summary> Joins are round. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.LineStyle">
            <summary> The type of line to draw. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Solid">
            <summary> The pen is solid. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dash">
            <summary> The pen is dashed. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dot">
            <summary> The pen is dotted. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDot">
            <summary> The pen has alternating dashes and dots. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDotDot">
            <summary> The pen has alternating dashes and double dots. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Custom">
            <summary> Allows for a custom dash/dot combination. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Alignment">
            <summary> Specifies the line position. </summary>
            <remarks> The alignment will is ignored and always centered with %DrawLine%, %DrawLines%, and %DrawPolygon%.
            </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Center">
            <summary> Center the line on the region. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Inset">
            <summary> Draw the line inside the region. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Outset">
            <summary> Draw the line outside the region. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Hatch">
            <summary>
            The style of Hatch to use when FillStyle is Hatched.
            </summary>
            <summary> The style of Hatch to use with a %HatchedFill%. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Cross">
            <summary> Horizontal and vertical cross-hatch </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalCross">
            <summary> 45-degree crosshatch </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalDown">
            <summary> A 45-degree downward, left-to-right hatch </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalUp">
            <summary> A 45-degree upward, left-to-right hatch </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Horizontal">
            <summary> Horizontal hatch </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Vertical">
            <summary> Vertical hatch </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.TextAlignment">
            <summary> The horizontal alignment of the text. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Left">
            <summary> Left aligned text. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Center">
            <summary> Centered text. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Right">
            <summary> Right aligned text. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Justify">
            <summary> Justified text. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Fill">
            <summary> <para>The base class which all Fill objects inherit.  A Fill contains the color of the entity being
            drawn.</para> </summary>
            <remarks> The DotImage Fill object is equivalent to the GDI+ <STRONG>Brush</STRONG>. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Fill.color">
            <summary> Gets or sets the color of the fill. </summary>
            <remarks> Specify the alpha value to draw with transparency onto a continuous tone image. </remarks>
            <value> <para>The color of the fill.</para> </value>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Fill.paletteIndex">
            <summary> Gets or sets the palette index used for the color. </summary>
            <value> The palette index used for the color. </value>
            <remarks> This is only valid when drawing onto an 8-bit image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Fill.GetBrushHandle">
            <summary> Returns a GDI handle to the brush (for internal use only). </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Fill.Clone">
            <summary> Returns a copy of this Fill. </summary>
            <returns> A copy of this Fill. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Fill.Color">
            <summary> Gets or sets the color of the fill. </summary>
            <remarks> Specify the alpha value to draw with transparency onto a continuous tone image. </remarks>
            <value> <para>The color of the fill.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Fill.PaletteIndex">
            <summary> Gets or sets the palette index used for the color. </summary>
            <value> The palette index used for the color. </value>
            <remarks> This is only valid when drawing onto an 8-bit image. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.HatchedFill">
            <summary> <para>A Fill containing hatched lines.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.HatchedFill.hatchStyle">
            <value> The hatch style that will be drawn. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.#ctor(Atalasoft.Imaging.Drawing.Hatch)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.HatchedFill"/> with a black hatch and specified hatch style. </summary>
            <param name="style"> The type of hatch. </param>&gt;
            <overloads> Creates a HatchedFill object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.#ctor(Atalasoft.Imaging.Drawing.Hatch,System.Drawing.Color)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.HatchedFill"/> with a specified hatch style and color. </summary>
            <param name="style"> The type of hatch. </param>
            <param name="color"> The hatch color. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.GetBrushHandle">
            <summary> Returns a GDI brush handle. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.Clone">
            <summary> Returns a copy of this HatchedFill. </summary>
            <returns> A copy of this HatchedFill. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.HatchedFill.HatchStyle">
            <value> The hatch style that will be drawn. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.AtalaPen">
            <summary> <para>The AtalaPen is used to define a line or border used when drawing primitives onto a <see cref="T:Atalasoft.Imaging.Drawing.Canvas"/>.</para>
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.AtalaPen.customDashPattern">
            <summary> Gets or sets an array of int's indicating the dash pattern when the LineStyle is set to Custom. </summary>
            <value> An array of int's indicating the dash pattern when the LineStyle is set to Custom. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> class with
            the object defaults:,<BR/>Width = 1</para></summary>
            <overloads> Creates an AtalaPen object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color)">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> class with the specified color.  Using a constructor
            that specifies the color implies a fill type of solid</para> </summary>
            <param name="color"> The color of the pen. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill)">
            <summary> Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> class with a specified fill.
            </summary>
            <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32)">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> class with a specified color and width.</para>
            </summary>
            <param name="color"> The color of the fill. </param>
            <param name="width"> The width of the pen in pixels. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32)">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> class with a specified <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill"/> and
            width.</para> </summary>
            <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
            <param name="width"> The width of the pen in pixels. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> class with a specified color, width, and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle"/>.</para> </summary>
            <param name="color"> The color of the fill. </param>
            <param name="width"> The width of the pen in pixels. </param>
            <param name="lineStyle"> The style of the line. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> class with a specified <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill"/>, width, and
            <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle"/>.</para> </summary>
            <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
            <param name="width"> The width of the pen in pixels. </param>
            <param name="lineStyle"> The style of the line. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> class with a specified color, width, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle"/>, 
            <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap"/>, and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin"/>.</para> </summary>
            <param name="color"> The color of the pen. </param>
            <param name="width"> The width of the pen in pixels. </param>
            <param name="lineStyle"> The style of the line. </param>
            <param name="endCap"> The pen EndCap used when drawing. </param>
            <param name="cornerJoin"> The style of corners used for this pen. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/> class with a specified <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill"/>, width, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle"/>, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap"/>, and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin"/>.</para> </summary>
            <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
            <param name="width"> The width of the pen in pixels. </param>
            <param name="lineStyle"> The style of the line. </param>
            <param name="endCap"> The pen EndCap used when drawing. </param>
            <param name="cornerJoin"> The style of corners used for this pen. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin,Atalasoft.Imaging.Drawing.Alignment)">
            <summary> Creates a new instance of AtalaPen specifying color, width, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle"/>, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap"/>, 
            <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin"/> and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Alignment"/>. </summary>
            <param name="color"> The color of the pen. </param>
            <param name="width"> The width of the pen in pixels. </param>
            <param name="lineStyle"> The style of the line. </param>
            <param name="endCap"> The pen EndCap used when drawing. </param>
            <param name="cornerJoin"> The style of corners used for this pen. </param>
            <param name="alignment"> The pen alignment. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin,Atalasoft.Imaging.Drawing.Alignment)">
            <summary> Creates a new instance of AtalaPen specifying the <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill"/>, width, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle"/>,
            <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap"/>, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin"/> and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Alignment"/>. </summary>
            <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
            <param name="width"> The width of the pen in pixels. </param>
            <param name="lineStyle"> The style of the line. </param>
            <param name="endCap"> The pen EndCap used when drawing. </param>
            <param name="cornerJoin"> The style of corners used for this pen. </param>
            <param name="alignment"> The pen alignment. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.Clone">
            <summary> Create a copy of this <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen"/>. </summary>
            <returns> Pen object </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Color">
            <summary> Gets or sets the color of the pen. </summary>
            <value> The color of the pen. </value>
            <remarks> This property references the <STRONG>Fill.Color</STRONG> property </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Width">
            <summary> Gets or sets the width of the pen in pixels. </summary>
            <value> The width of the pen in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap">
            <summary> Gets or sets the pen EndCap used when drawing. </summary>
            <value> The pen EndCap used when drawing. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin">
            <summary> Gets or sets the style of corners used for this pen. </summary>
            <value> The style of corners used for this pen. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle">
            <summary> Gets or sets the type of line drawn with this pen. </summary>
            <value> The type of line drawn with this pen. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill">
            <summary> Gets or sets the Fill used when drawing with this pen. </summary>
            <value> The Brush object used when drawing with this pen. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Alignment">
            <summary> Gets or sets a value indicating the line positioning relative to the coordinates. </summary>
            <value> A value indicating the line positioning relative to the coordinates </value>
            <remarks> The property is ignored when drawing a line, lines, or polygon. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CustomDashPattern">
            <summary> Gets or sets an array of int's indicating the dash pattern when the LineStyle is set to Custom. </summary>
            <value> An array of int's indicating the dash pattern when the LineStyle is set to Custom. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.penStyle">
            <summary>
            Returns the PenStyle value used in ExtCreatePen.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.AtalaPenConverter">
            <summary>
            AtalaPenConverter i s utility for serialization of objects to AtalaPen
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPenConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPenConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPenConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPenConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
            <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.SolidFill">
            <summary> A Fill containing a solid color. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.#ctor">
            <overloads> Creates a SolidFill object. </overloads>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.SolidFill"/> with the color black. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.#ctor(System.Drawing.Color)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.SolidFill"/> with a specified color. </summary>
            <param name="color"> The Fill color. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.GetBrushHandle">
            <summary> Returns a GDI brush handle. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.Clone">
            <summary> Returns a copy of this SolidFill. </summary>
            <returns> A copy of this SoldFill. </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.TextFormat">
            <summary> <para>Contains extended properties for use with drawing text onto a Canvas.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextFormat.alignment">
            <summary> Gets or sets the horizontal alignment of the text to draw. </summary>
            <value> The horizontal alignment of the text to draw. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextFormat.angle">
            <summary> Gets or sets the angle in degrees of the text to draw. </summary>
            <value> The angle in degrees of the text to draw. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextFormat.interCharacterSpace">
            <summary> Gets or sets the number of additional pixels to add between characters.  </summary>
            <remarks> This value may be negative to reduce the intercharacter spacing. </remarks>
            <value> The number of additional pixels to add between characters.  </value>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextFormat.characterWidth">
            <summary> Gets or sets the width of the characters </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextFormat.scaleToDpi">
            <summary> Causes text to be drawn relative to the specified DPI. </summary>
            <remarks> <para>When drawing text on a canvas, the text will be drawn relative to the system's DPI by default.  To
            draw text relative to the DPI of the canvas's target surface, set this property to the target surface's DPI.</para>
            <para>The target surface DPI can be found in the <see cref="P:Atalasoft.Imaging.AtalaImage.Resolution"/> property for 
            <see cref="T:Atalasoft.Imaging.AtalaImage"/> sources, and can be created from the DpiX and DpiY properties of 
            <see cref="T:System.Drawing.Graphics"/> sources.</para> </remarks>
            <value> The DPI value to scale drawn text to. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor">
            <overloads> Creates a TextFormat object. </overloads>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.TextFormat"/> with default settings. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double,System.Int32,Atalasoft.Imaging.Dpi)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.TextFormat"/> class.
            </summary>
            <param name="alignment">The alignment.</param>
            <param name="angle">The angle.</param>
            <param name="interCharacterSpace">The inter character space.</param>
            <param name="scaleToDpi">The scale to dpi.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double,System.Int32)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.TextFormat"/> specifying the horizontal alignment, angle, and inter-character
            spacing. </summary>
            <param name="alignment"> The horizontal alignment of the drawn text. </param>
            <param name="angle"> The angle in degrees of the drawn text. </param>
            <param name="interCharacterSpace"> Number of additional pixels to add between characters. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.TextFormat"/> specifying the horizontal alignment and angle. </summary>
            <param name="alignment"> The horizontal alignment of the drawn text. </param>
            <param name="angle"> The angle in degrees of the drawn text. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.TextFormat"/> specifying the horizontal alignment. </summary>
            <param name="alignment"> The horizontal alignment of the drawn text. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Alignment">
            <summary> Gets or sets the horizontal alignment of the text to draw. </summary>
            <value> The horizontal alignment of the text to draw. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.CharacterWidth">
            <summary> Gets or sets the width of the characters </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Angle">
            <summary> Gets or sets the angle in degrees of the text to draw. </summary>
            <value> The angle in degrees of the text to draw. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.InterCharacterSpace">
            <summary> Gets or sets the number of additional pixels to add between characters.  </summary>
            <remarks> This value may be negative to reduce the intercharacter spacing. </remarks>
            <value> The number of additional pixels to add between characters.  </value>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.ScaleToDpi">
            <summary> Causes text to be drawn relative to the specified DPI. </summary>
            <remarks> <para>When drawing text on a canvas, the text will be drawn relative to the system's DPI by default.  To
            draw text relative to the DPI of the canvas's target surface, set this property to the target surface's DPI.</para>
            <para>The target surface DPI can be found in the <see cref="P:Atalasoft.Imaging.AtalaImage.Resolution"/> property for 
            <see cref="T:Atalasoft.Imaging.AtalaImage"/> sources, and can be created from the DpiX and DpiY properties of 
            Graphics sources.</para> </remarks>
            <value> The DPI value to scale drawn text to. </value>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormat">
            <summary> Specifies the format of the color data for each pixel in the image. </summary>
            <remarks> <para>The pixel format defines the number of bits of memory associated with one pixel of data. The format
            also defines the order of the color components within a single pixel of data.</para>
            <para>Many of the pixel formats are identical to the GDI+ <STRONG>System.Drawing.PixelFormat</STRONG> types.
            DotImage is compatible with some of the GDI+ formats as well as including a few others not compatible with
            GDI+.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel1bppIndexed">
            <summary>
            One bit per pixel.  A two color palette defines the colors associated with bit values of 0 and 1.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel4bppIndexed">
            <summary>Four bits per pixel.  A 16 color palette defines the colors associated with each pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppIndexed">
            <summary> Eight bits per pixel. A palette of up to 256 colors may be used. Can contain alpha palette values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel24bppBgr">
            <summary> Twenty-four bits per pixel with pixel channels containing Blue, Green, and Red values in that order.  This
            is also called an RGB image despite the order of the channels. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgra">
            <summary> Thirty-two bits per pixel with pixel channels containing Blue, Green, Red, and Alpha values in that order.
            This is also called an RGBA image despite the order of the channels. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgr">
            <summary> Thirty-two bits per pixel with pixel channels containing Blue, Green, and Red values in that order.  This
            is also called an RGB image despite the order of the channels.  The last channel is unused. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppGrayscale">
            <summary> Eight bits per pixel. Each pixel is a shade of gray, from 0 (black) to 255 (white). </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel16bppGrayscaleAlpha">
            <summary> Sixteen bits per pixel. A standard grayscale palette is used where pal(0)=RGB(0,0,0) up to
            pal(255)=RGB(255,255,255). The second channel contains an alpha (transparency) value for each pixel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppCmyk">
            <summary> Thirty-Two bits per pixel with pixels containing the colors Cyan, Magenta, Yellow, and Black.  This is a
            subtractive colorspace with 0, 0, 0, 0 corresponding to pure white and 255, 255, 255, 255 corresponding to pure
            black. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel16bppGrayscale">
            <summary> Sixteen bits per component. This format allows for greater detailed grayscale images.  Each pixel can have
            a value from 0 (black) to 65535 (white). </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel48bppBgr">
            <summary> Fourty-Eight bits per pixel with pixel channels containing Blue, Green and Red. This is a two byte per
            component image with values ranging from 0 to 65535 for each color component. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel64bppBgra">
            <summary> Sixty-Four bits per pixel with pixel channels containing Blue, Green, Red and Alpha values in that order.
            This is a two byte per component image with values ranging from 0 to 65535 for each color component. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ResolutionUnit">
            <summary> Defines the units associated with Resolution, or Dpi. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.Undefined">
            <summary> Units are not defined. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerInch">
            <summary> Units are expressed in inches. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerCentimeters">
            <summary> Units are expressed in centimeters. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.PaletteType">
            <summary> Contains the standard palette types that a palette can be set to. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.Grayscale">
            <summary> The standard grayscale palette with gray colors. Entry 0 corresponds to Black and entry 255 corresponds
            with white, with gray shades between. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.Web">
            <summary> A palette where each primitive is a multiple of 51. (0, 51, 102, 153, 204, 255). With six possible values
            per primitive and 3 primitives (red, green and blue) the maximum colors are 216. (6^3=216) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.SixteenColor">
            <summary> Standard windows 16 color palette. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.BlackAndWhite">
            <summary> Two color black and white palette </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.WebExtended">
            <summary>Includes all colors of the 215 color web palette with the addition of 40 grayscale colors.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.FlipDirection">
            <summary> Specifies the flip direction. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.FlipDirection.Vertical">
            <summary> Flip Vertically. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.FlipDirection.Horizontal">
            <summary> Flip Horizontally. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.LicenseEdition">
            <summary> This enumeration indicates the type of license found by DotImage. </summary>
            <remarks> Use the static <see cref="P:Atalasoft.Imaging.AtalaImage.Edition"/> property to get the license edition. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Photo">
            <summary> DotImage Photo </summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.PhotoPro">
            <summary> DotImage Photo Pro </summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Document">
            <summary> DotImage Document Imaging </summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Standard">
            <summary> DotImage Photo (deprecated) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Professional">
            <summary> DotImage Photo Professional (deprecated) </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageEventArgs">
            <summary> Provides data for the <see cref="P:Atalasoft.Imaging.ChangedImageEventArgs.NewImage"/> and Workspace.ImageChanged events.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageEventArgs.image">
            <summary> Gets or sets the AtalaImage. </summary>
            <value> The AtalaImage. </value>
            <value> The AtalaImage for this event. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageEventArgs.#ctor">
            <overloads> Creates an ImageEventArgs object. </overloads>
            <summary> Creates a new instance of ImageEventArgs. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageEventArgs.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new instance of ImageEventArgs specifying the AtalaImage for this event. </summary>
            <param name="image"> The AtalaImage for this event. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageEventArgs.Image">
            <summary> Gets or sets the AtalaImage. </summary>
            <value> The AtalaImage. </value>
            <value> The AtalaImage for this event. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCancelEventArgs">
            <summary> Provides data for the event which allow an operation using an image to be cancelled. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCancelEventArgs.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new instance of ImageCancelEventArgs. </summary>
            <param name="image"> The image being processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCancelEventArgs.Cancel">
            <summary> <para>Gets or sets a value that when true will cancel the current operation.</para> </summary>
            <value> A value that when true will cancel the current operation. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ProgressEventArgs">
            <summary> Provides data for the Progress event. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ProgressEventArgs.methodName">
            <summary> The name of the method calling the progress event. </summary>
            <value> The method name raising the progress event. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ProgressEventArgs.cancel">
            <summary> When set to <STRONG>true</STRONG>, allows the current image processing function to be cancelled.</summary>
            <value> A value indicating whether to cancel the operation. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ProgressEventArgs.current">
            <summary> Gets the current value of the progress operation. </summary>
            <remarks> When processing an image, this value is usually the current row of the image in pixels.  When downloading
            a file via HTTP, it's the number of bytes downloaded. </remarks>
            <value> The current progress value. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ProgressEventArgs.total">
            <summary> Gets the total number of units for this operation. </summary>
            <value> The total number of units for this operation. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs.#ctor">
            <overloads> Creates a ProgressEventArgs object. </overloads>
            <summary> Creates a new instance of ProgressEventArgs. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of ProgressEventArgs specifying the current and total progress values. </summary>
            <param name="current"> The current progress value. </param>
            <param name="total"> The total progress value at 100% completion. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs.#ctor(System.Int32,System.Int32,System.String)">
            <summary> Creates a new instance of ProgressEventArgs specifying the current and total values, and the name of the
            method. </summary>
            <param name="current"> The current progress value. </param>
            <param name="total"> The total progress value at 100% completion. </param>
            <param name="methodName"> The name of the method raising the progress event. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Current">
            <summary> Gets the current value of the progress operation. </summary>
            <remarks> When processing an image, this value is usually the current row of the image in pixels.  When downloading
            a file via HTTP, it's the number of bytes downloaded. </remarks>
            <value> The current value of the progress operation. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Total">
            <summary> Gets the total number of units for this operation. </summary>
            <value> The total number of units for this operation. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Cancel">
            <summary> When set to <STRONG>true</STRONG>, allows the current image processing function to be cancelled.</summary>
            <value> A value indicating whether to cancel the operation. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.MethodName">
            <summary> The name of the method calling the progress event. </summary>
            <value> The method name raising the progress event. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollectionEventArgs">
            <summary> Provides data for the Workspace NewImage and ChangedImage events.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageCollectionEventArgs.images">
            <summary> Gets or sets the ImageCollection. </summary>
            <value> The ImageCollection for this event. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionEventArgs.#ctor">
            <overloads> Creates an ImageCollectionEventArgs object. </overloads>
            <summary> Creates a new instance of ImageCollectionEventArgs. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionEventArgs.#ctor(Atalasoft.Imaging.ImageCollection)">
            <summary> Creates a new instance of ImageCollectionEventArgs specifying the ImageCollection. </summary>
            <param name="images"> The ImageCollection for this event. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollectionEventArgs.Images">
            <summary> Gets or sets the ImageCollection. </summary>
            <value> The ImageCollection for this event. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageStreamEventArgs">
            <summary> Provides data for the ImageStreamCompleted event. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageStreamEventArgs.stream">
            <summary> <para>Gets the Steam object of interest.</para> </summary>
            <value> The Steam object of interest. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageStreamEventArgs.bytes">
            <summary> Gets the number of bytes written to or read from the image stream. </summary>
            <value> The number of bytes written to or read from the image stream. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageStreamEventArgs.#ctor">
            <overloads> Creates an ImageStreamEventArgs object. </overloads>
            <summary> Creates a new ImageStreamEventArgs object. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageStreamEventArgs.#ctor(System.IO.Stream,System.Int32)">
            <summary> Creates a new instance of ImageStreamEventArgs specifying the stream and number of bytes. </summary>
            <param name="stream"> The stream for this event. </param>
            <param name="bytes"> The number of bytes for this event. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Stream">
            <summary> <para>Gets the Steam object of interest.</para> </summary>
            <value> The Steam object of interest. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Bytes">
            <summary> Gets the number of bytes written to or read from the image stream. </summary>
            <value> The number of bytes written to or read from the image stream. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ExceptionEventArgs">
            <summary> Provides data for the ProcessError event. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ExceptionEventArgs.exception">
            <summary> Gets the Exception that was thrown. </summary>
            <value> The Exception that was thrown. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ExceptionEventArgs.#ctor">
            <overloads> Creates a new instance of ExceptionEventArgs. </overloads>
            <summary> Creates a new instance of ExceptionEventArgs. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ExceptionEventArgs.#ctor(System.Exception)">
            <summary> Creates a new instance of ExceptionEventArgs specifying the Exception that was thrown. </summary>
            <param name="exception"> The Exception that was thrown. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ExceptionEventArgs.Exception">
            <summary> Gets the Exception that was thrown. </summary>
            <value> The Exception that was thrown. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageEventHandler">
            <summary> Event Handler for events requiring the image information. </summary>
            <param name="sender"> The object raising the event. </param>
            <param name="e"> An ImageEventArgs object for this event. </param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCancelEventHandler">
            <summary> Handles canceling operations. </summary>
            <param name="sender"> The object raising the event. </param>
            <param name="e"> An ImageCancelEventArgs object for this event. </param>
        </member>
        <member name="T:Atalasoft.Imaging.ProgressEventHandler">
            <summary> Handles the progress event for operations. </summary>
            <seealso cref="T:Atalasoft.Imaging.ProgressEventHandler"/>
            <remarks> The progress callback can be handled to show progress while an image is being loaded, saved, or processed.
            Current and Total usually signifies the image row in pixels.  When downloading a file, Current and Total represents
            the number of bytes.  It can also be used to cancel the current action.  When handling a progress event, the
            percentage can be calculated by dividing Current by Total.  Some actions will cause multiple progresses (0 - 100%)
            to be called. </remarks>
            <param name="sender"> The object raising the event. </param>
            <param name="e"> The ProgressEventArgs for this event. </param>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatChangeEventArgs">
            <summary> Provides data for the PixelFormatChange event. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormatChangeEventArgs.currentPixelFormat">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.PixelFormat"/> of the current image. </summary>
            <value> The current PixelFormat of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormatChangeEventArgs.newPixelFormat">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.PixelFormat"/> to change the image to. </summary>
            <value> The new PixelFormat of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormatChangeEventArgs.cancel">
            <summary> <para>When setting this property to true, the current operation will be cancelled.</para> </summary>
            <value> A value indicating whether this change should be canceled. </value>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs.#ctor">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.PixelFormatChangeEventArgs"/> class.</para> </summary>
            <overloads> Creates a PixelFormatChangeEventArgs object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs.#ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat)">
            <summary> <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.PixelFormatChangeEventArgs"/> class specifying the current and new
            <see cref="T:Atalasoft.Imaging.PixelFormat"/>.</para> </summary>
            <param name="currentPixelFormat"> The current <STRONG>PixelFormat</STRONG>. </param>
            <param name="newPixelFormat"> The new <STRONG>PixelFormat</STRONG>. </param>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.CurrentPixelFormat">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.PixelFormat"/> of the current image. </summary>
            <value> The current PixelFormat of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.NewPixelFormat">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.PixelFormat"/> to change the image to. </summary>
            <value> The new PixelFormat of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.Cancel">
            <summary> <para>When setting this property to true, the current operation will be cancelled.</para> </summary>
            <value> A value indicating whether this change should be canceled. </value>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatChangeEventHandler">
            <summary> Handles operations that require the PixelFormat of an image to change. </summary>
            <seealso cref="T:Atalasoft.Imaging.PixelFormatChangeEventArgs"/>
            <param name="sender"> The object raising the event. </param>
            <param name="e"> The PixelFormatChangeEventArgs for this event. </param>
        </member>
        <member name="T:Atalasoft.Imaging.ExceptionEventHandler">
            <seealso> ExceptionEventArgs Class </seealso>
            <summary> This EventHandler is used to pass along an exception during an image processing operation. </summary>
            <param name="sender"> The object in which the exception occurred. </param>
            <param name="e"> An ExceptionEventArgs object containing information about the exception. </param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageFileIOEventHandler">
            <summary> Event Handler requiring the a Stream object. </summary>
            <param name="sender"> The object raising the event. </param>
            <param name="e"> an ImageStreamEventArgs object for this event. </param>
        </member>
        <member name="T:Atalasoft.Imaging.ChangedImageEventArgs">
            <summary> This class is used to indicate when an AtalaImage has changed. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ChangedImageEventArgs._originalImage">
            <summary> Gets the new AtalaImage that will replace the old image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ChangedImageEventArgs._newImage">
            <summary> Gets the new AtalaImage that will replace the old image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ChangedImageEventArgs.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary> Constructs a new ChangedImageEventArgs object </summary>
            <param name="originalImage"> The original image </param>
            <param name="newImage"> The image that is replacing the original image. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ChangedImageEventArgs.OriginalImage">
            <summary> Gets the AtalaImage that represents an image to be replaced. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ChangedImageEventArgs.NewImage">
            <summary> Gets the new AtalaImage that will replace the old image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ChangedImageEventHandler">
            <summary> This EventHandler is used to update AtalaImage objects in various classes. </summary>
            <seealso> ChangedImageEventArgs Class </seealso>
            <param name="sender"> The object in which the exception occurred. </param>
            <param name="e"> The ChangedImageEventArgs containing information about the images. </param>
        </member>
        <member name="T:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs">
            <summary> This class is passed in the <see cref="E:Atalasoft.Imaging.ImageSource.Releasing"/> event to provide the <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> that has been released. </summary>
            <remarks> If the <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> was acquired multiple times, it may still require additional calls to
            the <see cref="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)"/> method before it is fully released. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs._node">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> that has been released. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> that has been released. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs.#ctor(Atalasoft.Imaging.ImageSourceNode)">
            <summary> Creates a new instance of <STRONG>ReleasingImageSourceNodeEventArgs</STRONG> with the <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> that has been released. </summary>
            <param name="node"> The <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> that has been released. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs.Node">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> that has been released. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> that has been released. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ReleasingImageSourceNodeEventHandler">
            <summary>
            Reports when an ImageSourceNode has been released.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Atalasoft.Imaging.PixelMemoryException">
            <summary>
            This exception is thrown when an error occurs that is related to PixelMemory
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor">
            <summary> Creates a new instance of <STRONG>PixelMemoryException</STRONG>. </summary>
            <overloads> Creates a new instance of <STRONG>PixelMemoryException</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>PixelMemoryException </STRONG>specifying the error message. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of <STRONG>PixelMemoryException </STRONG>specifying the error message and inner
            exception. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.PixelMemoryException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.InternalErrorException">
            <summary> This exception is for generic errors within the DotImage codebase. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor">
            <summary> Creates a new instance of InternalErrorException. </summary>
            <overloads> Creates a new instance of InternalErrorException. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor(System.String)">
            <summary> Creates a new instance of <STRONG>InternalErrorException</STRONG> specifying the error message. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of <STRONG>InternalErrorException</STRONG> specifying the error message and inner
            exception. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.InternalErrorException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessException">
            <summary> This exception is thrown when an error occurs during processing of an image </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessException.image">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.AtalaImage"/> object which is causing the error. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> object which is causing the error. </value>
            <value> The AtalaImage causing this exception. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor">
            <overloads> Creates an ImageProcessException. </overloads>
            <summary> Creates a new instance of ImageProcessException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.String)">
            <summary> Creates a new instance of ImageProcessException specifying the exception message. </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.String,Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new instance of ImageProcessException specifying the exception message and AtalaImage.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="image"> The AtalaImage causing this exception. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of ImageProcessException specifying the exception message and inner exception.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Provide serialization information </summary>
            <param name="info"> The information for this object. </param>
            <param name="context"> The context in which this object is being streamed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessException.Image">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.AtalaImage"/> object which is causing the error. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> object which is causing the error. </value>
            <value> The AtalaImage causing this exception. </value>
        </member>
        <member name="T:Atalasoft.Imaging.IncompatiblePixelFormatException">
            <summary> This exception is thrown when the image to be processed does not contain a %PixelFormat% compatible with
            the function of interest. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor">
            <overloads> Creates an IncompatiblePixelFormatException object. </overloads>
            <summary> Creates a new instance of IncompatiblePixelFormatException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor(System.String)">
            <summary> Creates a new instance of IncompatiblePixelFormatException specifying the exception message. </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of IncompatiblePixelFormatException specifying the exception message and inner
            exception. </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception for this error. </param>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.InternetInvalidPasswordException">
            <summary> This exception is thrown when an invalid password was detected while attempting to connect to an HTTP or
            FTP site to download an image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor">
            <overloads> Creates an InternetInvalidPasswordException object. </overloads>
            <summary> Creates a new instance of InternetInvalidPasswordException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor(System.String)">
            <summary> Creates a new instance of InternetInvalidPasswordException specifying the exception message. </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of InternetInvalidPasswordException specifying the exception message and inner
            exception. </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception for the error. </param>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.InternetInvalidPasswordException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.InternetConnectException">
            <summary> This exception is thrown when there is an error opening an internet connection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor">
            <overloads> Creates an InternetConnectException object. </overloads>
            <summary> Creates a new instance of InternetConnectException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor(System.String)">
            <summary> Creates a new instance of InternetConnectException specifying the exception message. </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of InternetConnectException specifying the exception message and inner exception.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.InternetConnectException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.GdiException">
            <summary> This exception is thrown when a GDI function fails. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException.#ctor">
            <overloads> Creates an instance of GdiException. </overloads>
            <summary> Creates a new instance of GdiException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException.#ctor(System.String)">
            <summary> Creates a new instance of GdiException specifying the exception message. </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of GdiException specifying the exception message and inner exception. </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.GdiException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.OperationCancelledException">
            <summary> This class is used to cancel running operations. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor">
            <overloads> Creates an OperationCancelledException object. </overloads>
            <summary> Creates a new instance of OperationCancelledException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor(System.String)">
            <summary> Creates a new instance of OperationCancelledException specifying the exception message. </summary>
            <param name="message"> A text description of the exception. </param>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of OperationCancelledException specifying an exception message and the inner
            exception. </summary>
            <param name="message"> A text description of the exception. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.OperationCancelledException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.FileMapIOException">
            <summary> This exception is thrown when an error occurs when allocating an image with file memory mapping.
            </summary>
            <remarks>
              Represents an exception occured as a result of an
              invalid IO operation on any of the File mapping classes
              It wraps the error message and the underlying Win32 error
              code that caused the error.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor">
            <overloads> Creates a new instance of FileMapIOException. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.Int32)">
            <summary> Creates a new instance of FileMapIOException specifying the Windows API error code. </summary>
            <param name="error"> The Windows API error code. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.String)">
            <summary> Creates a new instance of FileMapIOException specifying the Exception message. </summary>
            <param name="message"> A description of the exception. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.String,System.Exception)">
            <summary> Creates an instance of FileMapIOException specifying the Exception message and inner Exception. </summary>
            <param name="message"> A description of the exception. </param>
            <param name="innerException"> The inner exception. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileMapIOException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
              </PermissionSet>
            <exception cref="T:System.ArgumentNullException">info;Argument 'info' cannot be null.</exception>
        </member>
        <member name="P:Atalasoft.Imaging.FileMapIOException.Win32ErrorCode">
            <summary> Gets the Windows API error code for this Exception. </summary>
            <value> The Windows API error code. </value>
        </member>
        <member name="P:Atalasoft.Imaging.FileMapIOException.Message">
            <summary> Gets a description about the Exception. </summary>
            <value> A description of the exception. </value>
        </member>
        <member name="T:Atalasoft.Imaging.FileReloader">
            <summary> FileReloader is an implementation of the <see cref="T:Atalasoft.Imaging.IImageReloader"/> interface.  It encapsulates
            information about an image stored in a file system and can reload that image at any point. </summary>
            <remarks> This class is used by the <see cref="T:Atalasoft.Imaging.FileSystemImageSource"/> object, but any ImageSource that wants to
            implement a file system cache could use this object. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.IImageReloader">
            <summary> IImageReloader provides a mechanism to bring unloaded images back into memory.  This interface is used by
            <see cref="T:Atalasoft.Imaging.ImageSource"/>. </summary>
            <remarks> Typically, an IImageReloader is created at the same time that an image is first loaded into physical
            memory.  That way the IImageReloader can encapsulate all the information needed to bring that image back into memory
            at a later time. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.IImageReloader.Reload">
            <summary> Reload an image into memory. </summary>
            <returns> An <see cref="T:Atalasoft.Imaging.AtalaImage"/> representing a previously loaded image. </returns>
        </member>
        <member name="F:Atalasoft.Imaging.FileReloader._path">
            <summary> Gets the path to the file referenced by this reloader. </summary>
            <value> A string representing the path referenced by this reloader. </value>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.#ctor(Atalasoft.Imaging.AtalaImage,System.String,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary> Constructs a new FileReloader object. </summary>
            <returns> A new AtalaImage or null if the image can't be loaded. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.#ctor(Atalasoft.Imaging.AtalaImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileReloader"/> class.
            </summary>
            <param name="image">The image.</param>
            <param name="path">The path to the temporary file for reloading.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileReloader"/> class.
            </summary>
            <param name="image">The image.</param>
            <param name="encoder">The encoder to use for this image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileReloader"/> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileReloader"/> class.
            </summary>
            <param name="path">The path representing the mage.</param>
            <param name="frameIndex">Index of the frame.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.Reload">
            <summary> Reload the image into memory. </summary>
            <returns> A new AtalaImage or null if the image can't be loaded. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.Dispose">
            <summary> Dispose releases resources associated with this class. </summary>
            <overloads> Dispose releases resources associated with this class. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Atalasoft.Imaging.FileReloader.Path">
            <summary> Gets the path to the file referenced by this reloader. </summary>
            <value> A string representing the path referenced by this reloader. </value>
        </member>
        <member name="T:Atalasoft.Imaging.FileSystemImageSourceEventArgs">
            <summary> This object is used for events fired by a <see cref="T:Atalasoft.Imaging.FileSystemImageSource"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.FileSystemImageSourceEventArgs._path">
            <summary> The path to the image file. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.FileSystemImageSourceEventArgs._frameIndex">
            <summary> The index of this frame in the image file. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.FileSystemImageSourceEventArgs._frameCount">
            <summary> The total number of frames in this image file. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.FileSystemImageSourceEventArgs._image">
            <summary> The image that has been acquired. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSourceEventArgs.#ctor(System.String,System.Int32,System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary> Constructs a new FileSystemImageSourceEventArgs object. </summary>
            <param name="path"> The path to the image file. </param>
            <param name="frameIndex"> The frame index of the image. </param>
            <param name="frameCount"> The total number of frames in this files. </param>
            <param name="image"> The image that was loaded. </param>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.Path">
            <summary> The path to the image file. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.FrameIndex">
            <summary> The index of this frame in the image file. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.FrameCount">
            <summary> The total number of frames in this image file. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.Image">
            <summary> The image that has been acquired. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.FileSystemImageSource">
            <summary> This is an implementation of an <see cref="T:Atalasoft.Imaging.ImageSource"/> using a file system as a provider of images.</summary>
            <remarks> This class can be used to open a large multi-page TIFF document.  Create an instance of the
            <STRONG>FileSystemImageSource</STRONG> setting the doAllFrames parameter to true. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.RandomAccessImageSource">
            <summary> This is an abstract class which is used to define ImageSource objects that can be accessed in any order.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSource">
            <summary> An abstract class that is used to define a flexible mechanism for managing large quantities of images
            without having to keep them all in memory at once. </summary>
            <remarks> <STRONG>ImageSource</STRONG> objects are configurable for memory usage or for aggressive unloading of
            images and can be built with a cache to allow transient data sources such as live video to be treated as if they
            were persistent. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSource.memoryInUse">
            <summary> Returns an estimate of the number of bytes of memory currently in use by images in this
            <STRONG>ImageSource</STRONG>. </summary>
            <value> An integer representing an estimate of the number of bytes of memory currently in use by images in this
            <STRONG>ImageSource</STRONG>. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSource.memoryLimit">
            <summary> This sets the limit for memory usage for this <STRONG>ImageSource</STRONG>.  If memory usage goes beyond
            this, images will be dropped from memory until memory usage is below the limit. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSource.immediateUnload">
            <summary> Determines if an image should be unloaded from memory immediately. </summary>
            <value> This is set to true by default.  Even if this is set to true, it does not mean that the memory for an image
            will be immediately released, nor does it mean that garbage collection will happen. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageSource"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.HasMoreImages">
            <summary> Determines if there are more images to load. </summary>
            <returns> True if there are more images to load, false otherwise. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Acquire(Atalasoft.Imaging.AtalaImage)">
            <summary> This method has been deprecated.  Use <see cref="M:Atalasoft.Imaging.ImageSource.ReAcquire(Atalasoft.Imaging.AtalaImage)"/> instead.
             </summary>
            <returns> True if the image has successfully acquired. </returns>
            <param name="image"> The image to acquire. </param>
            <overloads> Acquire an AtalaImage for use. </overloads>
            <remarks> <para>These versions of Acquire are used to put an additional request to hold onto an <STRONG>AtalaImage</STRONG>. </para>
            <para>Acquire an <STRONG>AtalaImage</STRONG> that has been previously acquired.</para></remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Acquire(System.Int32)">
            <summary> This method has been deprecated.  Use <see cref="M:Atalasoft.Imaging.ImageSource.ReAcquire(Atalasoft.Imaging.AtalaImage)"/> instead.</summary>
            <remarks>Acquire a previous image by index.</remarks>
            <returns> The acquired image. </returns>
            <param name="index"> The index of the image to acquire. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReAcquire(Atalasoft.Imaging.AtalaImage)">
            <summary> Acquire an <STRONG>AtalaImage</STRONG> that has been previously acquired. </summary>
            <returns> True if the image has successfully acquired. </returns>
            <param name="image"> The image to re-acquire. </param>
            <overloads> Acquire an AtalaImage for use which has been previously acquired. </overloads>
            <remarks> These versions of Acquire are used to put an additional request to hold onto an
            <STRONG>AtalaImage</STRONG>. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReAcquire(System.Int32)">
            <summary> Acquire a previous image by index. </summary>
            <returns> The acquired image or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if the image was not
            previously acquired. </returns>
            <param name="index"> The index of the image to re-acquire. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.AcquireNext">
            <summary> Acquire the next available image from the ImageSource. </summary>
            <returns> A new AtalaImage or null if the image can't be loaded or there is no image to load. </returns>
            <remarks> <para>This method may throw an exception on certain load failures, but that will depend on the concrete
            implementation of <STRONG>ImageSource</STRONG>.</para>
            <para>A call to <see cref="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)"/> should be made for every Acquire.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)">
            <summary> Release a previously acquired image. </summary>
            <returns> True if the image was fully released, false otherwise. </returns>
            <remarks> <para>If asked to release an object that has not been previously acquired, <STRONG>Release</STRONG> will
            return true.</para>
            <para>This method will call the <see cref="M:Atalasoft.Imaging.ImageSource.OnReleasing(Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs)"/> method to notify derived classes about this
            action.</para> </remarks>
            <param name="image"> The image to release. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.OnReleasing(Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs)">
            <summary> Called when <see cref="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)"/> was performed on an <see cref="T:Atalasoft.Imaging.ImageSourceNode"/>.</summary>
            <remarks> This method will raise the <see cref="E:Atalasoft.Imaging.ImageSource.Releasing"/> event. </remarks>
            <param name="e"> A <see cref="T:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs"/> containing the node that was released. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.OnChangedImage(Atalasoft.Imaging.ChangedImageEventArgs)">
            <summary>
            Raises the <see cref="E:ChangedImage"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Imaging.ChangedImageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.NotifyChangedImage(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary> This method is used to inform an ImageSource that one of its current acquired images has changed.
            </summary>
            <param name="originalImage"> The original image acquired through one of Acquire methods. </param>
            <param name="newImage"> An entirely new image that will replace the original image. </param>
            <overloads> This method is used to inform an ImageSource that one of its current acquired images has changed.</overloads>
            <remarks> <para>If an ImageSource is used by several clients, it is useful to be able to have one client change an
            image and be able to notify any other client that a change has been made so that it can track the changes.</para>
            <para>For example, if there are two open views on the same image, changes in one can be reflected in the other by
            calling NotifyChangedImage and by subscribing to the ChangedImage event.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.NotifyChangedImage(Atalasoft.Imaging.AtalaImage)">
            <summary> This method is used to inform an ImageSource that one of its current acquired images has changed.</summary>
            <param name="originalImage"> The original image acquired through one of Acquire methods. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReleaseChangedImage(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary> Release an image that has changed, notifying other clients that the image has changed. </summary>
            <param name="originalImage"> The original image acquired through one of Acquire methods. </param>
            <param name="newImage"> An entirely new image that will replace the original image. </param>
            <overloads> Release an image that has changed, notifying other clients that the image has changed. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReleaseChangedImage(Atalasoft.Imaging.AtalaImage)">
            <summary> Release an image that has changed, notifying other clients that the image has changed. </summary>
            <param name="originalImage"> The original image acquired through one of Acquire methods. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.LowLevelAcquireNextImage">
            <summary>
            Lows level implementation to acquire next image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.LowLevelHasMoreImages">
            <summary>
            Lows level implementation to determine if the ImageSource has more images.
            </summary>
            <returns><c>true</c> if there are more image, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.LowLevelReset">
            <summary>
            Lows level implementation of reset.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.LowLevelSkipNextImage">
            <summary>
            Lows level implementation to skip next image.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.LowLevelDispose">
            <summary>
            Lows level implementation to dispose the ImageSource.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.LowLevelFlushOnReset">
            <summary>
            Lows level implementation to determine if there should be a flush on reset.
            </summary>
            <returns><c>true</c> if the ImageSource needs a flush on reset, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.LowLevelTotalImagesKnown">
            <summary>
            Lows level implemtation to return if the total number of images are known.
            </summary>
            <returns><c>true</c> if the total number of images is known, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.LowLevelTotalImages">
            <summary>
            Lows level implementation that returns the total number of images.
            </summary>
            <returns>the total number of images</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)">
            <summary>
            Lows level implementation to replace an image.
            </summary>
            <param name="node">The node.</param>
            <param name="newImage">The new image.</param>
            <exception cref="T:System.ArgumentException">Unable to find original image in ImageSource for replacement.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Find(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Finds the specified image.
            </summary>
            <param name="image">The image.</param>
            <returns>An image source node containing the image, null if it is not present.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ContainsImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Determines whether this ImageSource contains the specified image.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.CullNode(Atalasoft.Imaging.ImageSourceNode)">
            <summary>
            Culls the node from the ImageSource
            </summary>
            <param name="node">The node.</param>
            <exception cref="T:System.ArgumentNullException">node</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.CullReleasedImages(System.Boolean)">
            <summary>
            Culls all released images.
            </summary>
            <param name="obeyMemoryLimit">if set to <c>true</c> [obey memory limit].</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.AllImagesAreReleased">
            <summary>
            Determines if all the images have been released.
            </summary>
            <returns><c>true</c> if all the images have been released, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Reset">
            <summary> Resets the <STRONG>ImageSource</STRONG> to start over again. </summary>
            <remarks> <para>Some subclasses of <STRONG>ImageSource </STRONG>will require that all previously acquired images
            must be released before a Reset.</para>
            <para>It will not always be the case that the first image acquired will be the same after a reset.  This is highly
            dependent on the nature of the concrete implementation of ImageSource.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Flush">
            <summary> Flush all released images out of memory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Dispose">
            <summary> Free up resources used by this ImageSource </summary>
            <overloads> Free up resources used by this ImageSource </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.ImageSource"/> class.
            </summary>
        </member>
        <member name="E:Atalasoft.Imaging.ImageSource.Releasing">
            <summary> Raised when the <see cref="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)"/> method is called on an <see cref="T:Atalasoft.Imaging.ImageSourceNode"/>.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.ImageSource.ChangedImage">
            <summary> This event is fired whenever an image has been replaced. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.Current">
            <summary> Returns the index of the current image. </summary>
            <remarks> This property represents the index of the next image to be acquired, <U><STRONG>not</STRONG></U> the index
            of the most recently acquired image.  If an <STRONG>ImageSource</STRONG> has just been constructed or <see cref="M:Atalasoft.Imaging.ImageSource.Reset"/> has been invoked, Current will be 0. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.ImmediateUnload">
            <summary> Determines if an image should be unloaded from memory immediately. </summary>
            <value> This is set to true by default.  Even if this is set to true, it does not mean that the memory for an image
            will be immediately released, nor does it mean that garbage collection will happen. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.MemoryLimit">
            <summary> This sets the limit for memory usage for this <STRONG>ImageSource</STRONG>.  If memory usage goes beyond
            this, images will be dropped from memory until memory usage is below the limit. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.TotalImagesKnown">
            <summary> Gets a value indicating whether or not the total number of images in this image source can be known.</summary>
            <value> True if the total number of images can be known, false otherwise. </value>
            <remarks> Always check this property before accessing the <see cref="P:Atalasoft.Imaging.ImageSource.TotalImages"/> property. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.TotalImages">
            <summary> Returns the total number of available images in this <STRONG>ImageSource</STRONG>. </summary>
            <remarks> Always check that <see cref="P:Atalasoft.Imaging.ImageSource.TotalImagesKnown"/> is true before accessing this property.</remarks>
            <exception> Thrown if this method is invoked when TotalImagesKnown is false. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.MemoryInUse">
            <summary> Returns an estimate of the number of bytes of memory currently in use by images in this
            <STRONG>ImageSource</STRONG>. </summary>
            <value> An integer representing an estimate of the number of bytes of memory currently in use by images in this
            <STRONG>ImageSource</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.ActiveImages">
            <summary>
            Gets the active images.
            </summary>
            <value>
            The active images.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.CulledImages">
            <summary>
            Gets the culled images.
            </summary>
            <value>
            The culled images.
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.RandomAccessImageSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.RandomAccessImageSource"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.RandomAccessImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.RandomAccessImageSource"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.RandomAccessImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.RandomAccessImageSource.LowLevelTotalImagesKnown">
            <summary>
            Returns if the total images is known.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.RandomAccessImageSource.OnNodeIndexSet(Atalasoft.Imaging.ImageSourceNode)">
            <summary> This method is called from the <STRONG>RandomAccessImageSource</STRONG> indexer after it has set the <see cref="T:Atalasoft.Imaging.ImageSourceNode"/>.<see cref="P:Atalasoft.Imaging.ImageSourceNode.Index"/> value. </summary>
            <remarks> Override this method to customize the index value for the <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> used by the base
            <see cref="T:Atalasoft.Imaging.ImageSource"/> class when reloading. </remarks>
            <param name="node"> The node returned by <see cref="M:Atalasoft.Imaging.RandomAccessImageSource.LowLevelAcquire(System.Int32)"/> after its Index has
            been changed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.RandomAccessImageSource.LowLevelAcquire(System.Int32)">
            <summary>
            Performs an acquire of an indexed image.
            </summary>
            <param name="index">The index of the image to acquire.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.RandomAccessImageSource.Count">
            <summary> Returns the total number of images in the image source. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.RandomAccessImageSource.Item(System.Int32)">
            <summary> Acquires the image at location i within the image source and returns it. </summary>
            <remarks> Note that this operation performs an Acquire on the image.  It is still the responsibility of the caller
            to perform a Release on the image when finished with it. </remarks>
            <param name="i"> The index of the image to be acquired. </param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.IImageStreamSource">
            <summary> Implement this interface in any ImageSource implementations if you can provide a stream with the image
            instead of the image itself.  This is useful if the caller needs information about the image (e.g. height and width)
            or wants to make a thumbnail or a tile from it and doesn't need all of the image data to do it. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IImageStreamSource.GetImageStream(System.Int32)">
            <summary> Returns an object that contains information about the stream that contains the requested image. When you
            call this, the ImageStream member of the returned object will be open and the caller is responsible for closing it.
            </summary>
            <returns> An object that contains the stream and information for finding the requested image within it. </returns>
            <example>
<code lang="CS" title="Requesting a Stream from an ImageSource (C#)"><![CDATA[
public Size GetSize(RandomAccessImageSource src, int index)
{
    if (src is IImageStreamSource)
    {
       ImageSourceStreamInfo info = ((IImageStreamSource)src).GetImageStream(index);
       // caller is responsible for disposing info.ImageStream
       using (Stream s = info.ImageStream)
       {
          // reads size from meta-data, doesn't decode image
          return RegisteredDecoders.GetImageInfo(s, info.Frame).Size;            
       }
    } else {
        return src[index].Size; // reads the whole image into memory
    }
}
]]></code>
</example>
            <param name="index"> The index of the image within the ImageSource. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.String,System.Boolean)">
            <summary> Provides access to all image files from a directory or file </summary>
            <remarks> <para>This will provide access only to image files for which there is an existing registered codec.</para>
            <para>Because there is a codec available for a file does not mean that it can be loaded.</para> </remarks>
            <exception> Thrown if the path is null (Nothing in VB). </exception>
            <param name="path"> A path to a directory or file containing image files. </param>
            <param name="doAllFrames"> If true, this image source will provide access to every available frame in every file.
            </param>
            <overloads> Constructs a new <STRONG>FileSystemImageSource</STRONG> object. </overloads>
            <returns> A new FileSystemImageSource object. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.String,System.String,System.Boolean)">
            <summary> Provides access to all image files from a directory that match a pattern or from a single file. </summary>
            <remarks> <para>This will provide access only to image files for which there is an existing registered codec.</para>
            <para>Because there is a codec available for a file does not mean that it can be loaded.</para>
            <para>If path is a single file, the pattern will be ignored.</para> </remarks>
            <exception> Thrown if the path or pattern is null (Nothing in VB). </exception>
            <param name="path"> A path to a directory containing image files or to a single file. </param>
            <param name="pattern"> A regular expression used to match files in the directory. </param>
            <param name="doAllFrames"> If true, this image source will provide access to every available frame in every file.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.String[],System.Boolean)">
            <summary> Provides access to a list of image files. </summary>
            <remarks> <para>This will provide access only to image files for which there is an existing registered codec.</para>
            <para>Because there is a codec available for a file does not mean that it can be loaded.</para> </remarks>
            <exception> Thrown if the fileNames argument is null (Nothing in VB). </exception>
            <param name="fileNames"> A list of file names to be loaded as images. </param>
            <param name="doAllFrames"> If true, this image source will provide access to every available frame in every file.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>FileSystemImageSource</STRONG> from serialization information.</summary>
            <param name="info"> A SerializationInfo containing information for this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with object information. </summary>
            <param name="info"> A SerializationInfo object that will be filled. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.ToPath(Atalasoft.Imaging.AtalaImage)">
            <summary> Retrieves the path associated with a previously acquired image. </summary>
            <returns> A string representing the path to the file from which the image was derived.  If the image had not been
            previously acquired by the FileSystemImage source, ToPath will return null. </returns>
            <param name="image"> An image that had been previously acquired by the FileSystemImageSource </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.AllowFile(System.String,System.Int32,System.Int32)">
            <summary> Called to determine whether a file is allowed. </summary>
            <remarks> By default, all files are allowed.  Set the <see cref="P:Atalasoft.Imaging.FileSystemImageSource.FileFilter"/> property or
            override this method to control which files to allow. </remarks>
            <param name="path"> The filename of the file. </param>
            <param name="frameIndex"> The index of the frame. </param>
            <param name="frameCount"> The number of frames to allow. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelHasMoreImages">
            <summary>
            Lows level implementation to determine if the ImageSource has more images.
            </summary>
            <returns>
              <c>true</c> if there are more image, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelAcquireNextImage">
            <summary>
            Lows level implementation to acquire next image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelReset">
            <summary>
            Lows level implementation of reset.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelSkipNextImage">
            <summary>
            Lows level implementation to skip next image.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelFlushOnReset">
            <summary>
            Lows level implementation to determine if there should be a flush on reset.
            </summary>
            <returns>
              <c>true</c> if the ImageSource needs a flush on reset, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelTotalImages">
            <summary>
            Lows level implementation that returns the total number of images.
            </summary>
            <returns>
            the total number of images
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelDispose">
            <summary>
            Lows level implementation to dispose the ImageSource.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelAcquire(System.Int32)">
            <summary>
            Performs an acquire of an indexed image.
            </summary>
            <param name="index">The index of the image to acquire.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetImageStream(System.Int32,Atalasoft.Imaging.FileIndex@)">
            <overloads> Gets the stream and the frame within that stream that corresponds to the passed in index. The caller is
            responsible for closing the returned stream. </overloads>
            <summary> Gets the stream and the frame within that stream that corresponds to the passed in index. The caller is
            responsible for closing the returned stream. </summary>
            <param name="index"> The index of the requested image. </param>
            <param name="fileIndex">Receives the path and frame index of the file</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetImageStream(System.Int32)">
            <summary>
            Returns an object that contains information about the stream that contains the requested image. When you
            call this, the ImageStream member of the returned object will be open and the caller is responsible for closing it.
            </summary>
            <param name="index">The index of the image within the ImageSource.</param>
            <returns>
            An object that contains the stream and information for finding the requested image within it.
            </returns>
            <example>
<code lang="CS" title="Requesting a Stream from an ImageSource (C#)"><![CDATA[
public Size GetSize(RandomAccessImageSource src, int index)
{
    if (src is IImageStreamSource)
    {
       ImageSourceStreamInfo info = ((IImageStreamSource)src).GetImageStream(index);
       // caller is responsible for disposing info.ImageStream
       using (Stream s = info.ImageStream)
       {
          // reads size from meta-data, doesn't decode image
          return RegisteredDecoders.GetImageInfo(s, info.Frame).Size;            
       }
    } else {
        return src[index].Size; // reads the whole image into memory
    }
}
]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetPath(System.Int32)">
            <summary> Returns the path of the image in a <STRONG>FileSystemImageSource</STRONG>. </summary>
            <exception> Thrown if the index is invalid for the FileSystemImageSource. </exception>
            <returns> The path of the image file. </returns>
            <param name="index"> The index of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetFrameNumber(System.Int32)">
            <summary> Return the frame index of an image in the <STRONG>FileSystemImageSource</STRONG>. </summary>
            <returns> The frame index of the image. </returns>
            <exception> Thrown if the index is invalid for the FileSystemImageSource. </exception>
            <param name="index"> The index of the image in the ImageSource. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetFrameCount(System.Int32)">
            <summary> Returns the number of frames in for an image in a <STRONG>FileSystemImageSource</STRONG>. </summary>
            <returns> The number of frames in the image. </returns>
            <exception> Thrown if the index is invalid for the FileSystemImageSource. </exception>
            <param name="index"> The index of the file to return a frame count. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)">
            <summary>
            Low level implementation to replace an image.
            </summary>
            <param name="node">The node.</param>
            <param name="newImage">The new image.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="E:Atalasoft.Imaging.FileSystemImageSource.ImageAcquired">
            <summary> Invoked when an image is acquired into memory. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSource.FileFilter">
            <summary> Gets or sets a delegate that is invoked for each file, allowing the files to be filtered with custom
            rules. </summary>
            <value> A delegate that is invoked for each file. </value>
        </member>
        <member name="T:Atalasoft.Imaging.FileSystemImageSource.FileFilterDelegate">
            <summary> The FileFilterDelegate is used within the FileSystemImageSource to provide a means of filtering out files
            or pages within files </summary>
            <returns> Returns true if the file is to be included, false otherwise. </returns>
            <param name="pathName"> The full path to the file to be loaded </param>
            <param name="frameIndex"> The current frame being considered </param>
            <param name="frameCount"> The total number of frames within this file </param>
        </member>
        <member name="T:Atalasoft.Imaging.FileSystemImageSource.FileEventHandler">
            <summary> This event is used for tracking when a file or a frame within a file has been loaded. </summary>
            <param name="sender"> The sender of this event. </param>
            <param name="e"> Information about the files and frame being loaded. </param>
        </member>
        <member name="T:Atalasoft.Imaging.GDIWrapper">
            <summary>
            Summary description for GDIWrapper.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.GDIWrapper.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            SelectObject
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.GDIWrapper.DeleteObject(System.IntPtr)">
            <summary>
            DeleteObject
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.GDIWrapper.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            CreateCompatibleBitmap
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.TernaryRasterOperations">
            <summary>
            Enumeration for the raster operations used in BitBlt.
            In C++ these are actually #define. But to use these
            constants with C#, a new enumeration type is defined.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.HttpPost">
            <summary> <para>This class allows you to post data to a server without user interaction.</para>
            <para>The data is posted as if it were being sent from an HTML Form, allowing any form handling component to be used
            on the server.</para> </summary>
            <example>
<code lang="CS" title="Posting an image (C#)"><![CDATA[
// Load the image we want to upload.
Bitmap bmp = new Bitmap(@"C:\myimage.jpg");

// We are going to save the image as JPEG on the server.
HttpPost post = new HttpPost(System.Drawing.Imaging.ImageFormat.Jpeg);
post.FormData.Add("image1", bmp, "myimage.jpg");

// Now lets add the additional information set by the client.
post.FormData.Add("comment", this.textComment.Text);
post.FormData.Add("author", this.textAuthor.Text);

// Upload the image and check the return value to see if it worked.
string retVal = post.PostData("http://www.mysite.com/handleupload.aspx");
if (retVal != "Success")
    MessageBox.Show(this, retVal, "Upload Error");

// Free the image.
bmp.Dispose();
]]></code>

<code lang="VB" title="Posting an image (Visual Basic)"><![CDATA[
' Load the image we want to upload.
Dim bmp As Bitmap = New Bitmap("C:\myimage.jpg")

' We are going to save the image as JPEG on the server.
Dim post As HttpPost = New HttpPost(System.Drawing.Imaging.ImageFormat.Jpeg)
post.FormData.Add("image1", bmp, "myimage.jpg")

' Now lets add the additional information set by the client.
post.FormData.Add("comment", Me.textComment.Text)
post.FormData.Add("author", Me.textAuthor.Text)
 
' Upload the image and check the return value to see if it worked.
Dim retVal As String =  post.PostData("http://www.mysite.com/handleupload.aspx") 
If retVal <> "Success" Then
    MessageBox.Show(this, retVal, "Upload Error")
End If
 
' Free the image.
bmp.Dispose()
]]></code>

<para>This example will show you how to acquire an image from a web page and post it to the server.</para>
<code lang="JScript" title="Posting from a browser (JScript)"><![CDATA[
<!-- The main Acquisition object. -->
<object id="Twain" height="1" width="1" classid="Atalasoft.Imaging.dll#Atalasoft.Imaging.Acquisition" VIEWASTEXT>
</object>

<!-- Create an instance of the HttpPost object -->
<object id="PostIt" height="1" width="1" classid="Atalasoft.Imaging.dll#Atalasoft.Imaging.HttpPost" VIEWASTEXT>
</object>

...

<script type="text/javascript">
var count = 0;
function AcquireImage()
{
    // Acquire the image.
    var img = document.Twain.AcquireModal(false);
    if (img == null)
    {
        alert('Image was not acquired.');
        return;
    }
            
    // Send the image to the server.
    count++;
    var filename = 'image' + count + '.png';
    document.PostIt.FormData.AddFromBrowser('postImage', img, filename);
            
    var response = "";
    //response = document.PostIt.PostDataFromBrowser('http://www.atalasoft.com/Components/Twain/Demo/savepost.aspx');
    response = document.PostIt.PostData('http://localhost/TwainDemo/savepost.aspx');
    
    // Free the form data.
    document.PostIt.FormData.Clear();
    
    // Update the image.
    if (response.length > 0)
    {
        var el = document.getElementById('preview');
        el.src = response;
    } else {
        alert("PostDataFromBrowser failed");
    }
}
</script>
]]></code>
</example>
            <seealso cref="T:Atalasoft.Imaging.FormDataCollection"/>
        </member>
        <member name="F:Atalasoft.Imaging.HttpPost._formData">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.FormDataCollection"/> object that will be posted to the server. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.FormDataCollection"/> object that will be posted to the server. </value>
        </member>
        <member name="F:Atalasoft.Imaging.HttpPost._combineImages">
            <summary> Sets or gets whether or not multiple images will be combined into one post. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.#ctor">
            <summary> Creates a new instance of HttpPost. </summary>
            <overloads> Creates an instance of HttpPost. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.#ctor(Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary> Creates a new instance of HttpPost specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> to use. </summary>
            <param name="encoder"> The ImageEncoder to use when posting images to the server. </param>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.#ctor(Atalasoft.Imaging.Codec.ImageEncoder,System.Boolean)">
            <summary> Creates a new instance of HttpPost specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> to use and whether or not to
            combine multiple images into one post. </summary>
            <param name="encoder"> The ImageEncoder to use when posting images to the server. </param>
            <param name="combineImages"> Whether or not to combine multiple images into one post. </param>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.GetData(System.String)">
            <summary> This method can be used to retrieve information from a server. </summary>
            <returns> A string containing the data returned by the server. </returns>
            <remarks> Use this method when you only want to retrieve information.  You can send parameters to the server by
            adding query string values to the url. </remarks>
            <param name="url"> A web address to request data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.PostData(System.String)">
            <summary> This method will send the internal <see cref="T:Atalasoft.Imaging.FormDataCollection"/> entries to a server for processing.</summary>
            <returns> A string containing returned data from the server. </returns>
            <param name="url"> The web address to send the data to. </param>
        </member>
        <member name="P:Atalasoft.Imaging.HttpPost.CombineImages">
            <summary> Sets or gets whether or not multiple images will be combined into one post. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.HttpPost.FormData">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.FormDataCollection"/> object that will be posted to the server. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.FormDataCollection"/> object that will be posted to the server. </value>
        </member>
        <member name="P:Atalasoft.Imaging.HttpPost.SessionCookies">
            <summary>
            Gets or sets the session cookies.
            </summary>
            <value>
            The session cookies.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.HttpPost.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>
            The timeout.
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.FormDataCollection">
            <summary> The FormDataCollection is used with the <see cref="T:Atalasoft.Imaging.HttpPost"/> class to send form information to a web
            server. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.#ctor">
            <summary> Creates a new instance of FormDataCollection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,System.String)">
            <summary> Adds form data to the collection. </summary>
            <remarks> Use this to add data other than images that might be needed for any server-side scripting. </remarks>
            <param name="fieldName"> The field name of the form object. </param>
            <param name="fieldValue"> The value of the field object. </param>
            <overloads> Adds a new item to the collection. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,Atalasoft.Imaging.AtalaImage)">
            <summary> Adds an image to the collection. </summary>
            <param name="fieldName"> The form field name used to identify the image. </param>
            <param name="image"> The AtalaImage to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,Atalasoft.Imaging.AtalaImage,System.String)">
            <summary> Adds an image to the collection specifying the filename. </summary>
            <param name="fieldName"> The form field name used to identify this image. </param>
            <param name="image"> The AtalaImage to add. </param>
            <param name="fileName"> The original filename of this image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,System.IO.Stream,System.String,System.String)">
            <summary> Adds an image to the collection specifying the filename. </summary>
            <param name="fieldName"> The form field name used to identify this image. </param>
            <param name="data"> The data stream </param>
            <param name="fileName"> The original filename of this image. </param>
            <param name="contextType"> Also known as mime type, for example "image\jpeg". </param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.AddFromBrowser(System.String,System.Object,System.String)">
            <summary> <para>Adds an image or form field to the collection.</para>
            <para>You must use this method when posting from a web browser.</para> </summary>
            <remarks> When adding an image, set the <EM>fieldValue</EM> to the filename of the image.  When adding a form field
            entry, set the <EM>image</EM> to null. </remarks>
            <param name="fieldName"> The field name of the form object. </param>
            <param name="image"> The image you want to upload. </param>
            <param name="fieldValue"> The value of the field object or the filename of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Remove(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Removes the specified image.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.CopyTo(Atalasoft.Imaging.AtalaImage[],System.Int32)">
            <summary>
            Copies to the array
            </summary>
            <param name="images">The images.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Contains(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Determines whether [contains] [the specified image].
            </summary>
            <param name="image">The image.</param>
            <returns><c>true</c> if the image is in the collection, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.IndexOf(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Returns the index of the image
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Insert(System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary>
            Inserts the image at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="image">The image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.FormDataCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollection">
            <summary> This collection holds multiple <see cref="T:Atalasoft.Imaging.AtalaImage"/> objects useful for various features like working
            with multi-paged images, animations, and layering. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageCollection"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.#ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Initializes a new instance of the %ImageCollection% object specifying a filename containing image data to
            load. </summary>
            <param name="fileName"> The filename of the image (or images) to load into the %ImageCollection%. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.#ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Initializes a new instance of the %ImageCollection% object specifying a <see cref="T:System.IO.Stream"/> containing
            image data to load. </summary>
            <param name="stream"> A Stream of image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.#ctor(Atalasoft.Imaging.AtalaImage[])">
            <summary> Initializes a new instance of the %ImageCollection% object specifying one or multiple %AtalaImage% objects
            to add to the collection. </summary>
            <param name="images"> A parameter array of one or many %AtalaImage% objects. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.ReadImages(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Read all images from a multipage image file into this image collection. </summary>
            <remarks> If the source image doens't support multiple images, only a single image will be loaded into the
            collection. </remarks>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.MoveNext">
            <summary> Set the Current image to the next image in the collection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.MovePrevious">
            <summary> Set the Current image to the previous image in the collection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Add(Atalasoft.Imaging.AtalaImage)">
            <summary> Adds an <see cref="T:Atalasoft.Imaging.AtalaImage"/> to the collection. </summary>
            <param name="image"> The image to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save each <see cref="T:Atalasoft.Imaging.ImageCollection"/> in a multipaged or multiframed format.</summary>
            <returns> Filesize of saved image. </returns>
            <param name="fileName"> The name of the file to save. </param>
            <param name="imageType"> The image format to save. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Save each <see cref="T:Atalasoft.Imaging.ImageCollection"/> in a multipaged or multiframed format.</summary>
            <param name="fileName"> The name of the file to save. </param>
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Save the images in this ImageCollection to a stream specifying the %ImageEncoder% to use for encoding the
            image data. </summary>
            <remarks> The ImageEncoder must have the <see cref="T:Atalasoft.Imaging.Codec.IAppendable"/> interface in order to save multiple images in one
            file. </remarks>
            <param name="stream"> A stream containing the file which the image will be encoded to. This stream must have
            FileAccess.ReadWrite set or else only the first image will be saved. </param>
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
            <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Saves the image into a byte array. </summary>
            <returns> A byte array containing the image data. </returns>
            <param name="encoder"> The ImageEncoder to use. </param>
            <param name="progress"> A progress event handler used during the save process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.IndexOf(Atalasoft.Imaging.AtalaImage)">
            <summary> Returns the index of a specified image in the collection. </summary>
            <returns> The index of a specified image in the collection. </returns>
            <remarks> Returns -1 if the image doesn't exist in the collection. </remarks>
            <param name="image"> The AtalaImage to test. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Insert(System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary>
            Insert an <see cref="T:Atalasoft.Imaging.AtalaImage"/> at the specified index.
            </summary>
            <param name="image">The <see cref="T:Atalasoft.Imaging.AtalaImage"/> to insert into the collection.</param>
            <param name="index">The index to insert the image after.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Replace(Atalasoft.Imaging.AtalaImage)">
            <summary> Replaces the <see cref="P:Atalasoft.Imaging.ImageCollection.Current"/> image in the collection with a new image. </summary>
            <remarks> The image that is being removed, will not be automatically disposed by the <STRONG>Workspace</STRONG>.  To
            immediately free memory, the image that's being removed must be disposed.  See the Workspace.Image
            property in the Workspace class to replace an image, and add it to the UndoCollection,
            and dispose of it automatically. </remarks>
            <seealso> Image Property </seealso>
            <param name="image"> <para>The new image.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Remove(Atalasoft.Imaging.AtalaImage)">
            <summary> Removes a specified <STRONG>AtalaImage</STRONG> from this <STRONG>ImageCollection</STRONG>. </summary>
            <remarks> The image that is being removed, will not be automatically disposed by the <STRONG>Workspace</STRONG>.  To
            immediatly free memory, the image that's being removed must be disposed. </remarks>
            <param name="image"> The image in the collection to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Contains(Atalasoft.Imaging.AtalaImage)">
            <summary> Returns a value Indicating if a specified image exists within this collection. </summary>
            <returns> A value Indicating if a specified image exists within this collection. </returns>
            <param name="image"> The AtalaImage to test. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.CopyTo(Atalasoft.Imaging.AtalaImage[],System.Int32)">
            <summary> Copy this ImageCollection into an existing AtalaImage array. </summary>
            <param name="images"> The existing AtalaImage array. </param>
            <param name="index"> The index in the array begin copying. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Dispose">
            <summary> Remove unmanaged resources in each AtalaImage in the collection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.OnClearComplete">
            <summary>
            Performs additional custom processes after clearing the contents of the <see cref="T:System.Collections.CollectionBase" /> instance.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the <see cref="T:System.Collections.CollectionBase" /> instance.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value" /> can be found.</param>
            <param name="value">The value of the element to remove from <paramref name="index" />.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollection.Current">
            <summary> Gets or sets the current image in this collection. </summary>
            <value> This is the image that is processed by any commands and displayed in the WorkspaceViewer. </value>
            <remarks> The Current image in the collection is the image that is considered active if there is an associated
            Workspace that has a reference to this collection.  Any image processing commands will be applied to the
            Current image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollection.Item(System.Int32)">
            /// <summary> Allows the image collection to be accessed through an indexer and enumerated with foreach. </summary>
            <param name="index"> The index of the image. </param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollectionImageSource">
            <summary> ImageCollectionImageSource is an adapter class to make an ImageCollection compatible with the ImageSource
            class. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.#ctor(Atalasoft.Imaging.ImageCollection)">
            <summary> Constructs a new ImageCollectionImageSource with the given ImageCollection. </summary>
            <param name="collection"> The collection to be used in the ImageSource. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelAcquire(System.Int32)">
            <summary>
            Lows the level acquire.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelAcquireNextImage">
            <summary>
            Lows the level acquire next image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelHasMoreImages">
            <summary>
            Lows the level has more images.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelReset">
            <summary>
            Lows the level reset.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelSkipNextImage">
            <summary>
            Lows the level skip next image.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelDispose">
            <summary>
            Lows the level dispose.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelFlushOnReset">
            <summary>
            Lows the level flush on reset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelTotalImagesKnown">
            <summary>
            Returns if the total images is known.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelTotalImages">
            <summary>
            Lows the level total images.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)">
            <summary>
            Lows the level replace image.
            </summary>
            <param name="node">The node.</param>
            <param name="newImage">The new image.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageMemory">
            <summary> <para>This class handles memory associated with an image. It controls how the memory is allocated and
            freed. Use this class to enable memory file mapping.</para>
            <para>This class is no longer used in DotImage.  Please use PixelMemory instead.</para> </summary>
            <remarks>File Mapped memory can greatly increase performance when working with extremely large images or when
            system resources are limited.</remarks>
            <seealso> Introduction to Memory Management </seealso>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageMemory"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.Int32)">
            <summary> Initializes a new instance of <STRONG>ImageMemory</STRONG> indicating the number of bytes to allocate. </summary>
            <param name="bytes"> number of bytes to allocate </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.Int32,System.Boolean)">
            <summary> Initializes a new instance of <STRONG>ImageMemory</STRONG> indicating the number of bytes to allocate and if this object should handle the freeing of that memory. </summary>
            <param name="bytes"> number of bytes to allocate </param>
            <param name="zeroMemory"> indicates if the memory should be freed when disposing </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.IntPtr)">
            <summary> Initializes a new instance of <STRONG>ImageMemory</STRONG> setting the pre allocated memory pointer. </summary>
            <param name="imagePointer"> The memory pointer </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.IntPtr,System.Boolean)">
            <summary> Initializes a new instance of <STRONG>ImageMemory</STRONG> setting the pre allocated memory pointer and if this object should handle the freeing of that memory. </summary>
            <param name="imagePointer"> The memory pointer </param>
            <param name="preventDispose"> indicates if the memory should be freed when disposing </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#cctor">
            <overloads> Creates an <STRONG>ImageMemory</STRONG> object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.ImageMemory"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.Dispose">
            <overloads> Free the memory associated with this object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.EnableMemoryFileMapping">
            <value> Returns false. </value>
            <summary> File mapping is no longer supported.  This property will throw on set. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapThreshold">
            <summary> File mapping is no longer supported.  This property will throw on set. </summary>
            <remarks> The default threshold is 30,000 bytes, but the optimal threshold is highly dependant on the client system and it's available memory. </remarks>
            <value> Get returns 0. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapTempPath">
            <summary> File mapping is no longer supported.  This property will throw on set. </summary>
            <value> Get returns the empty string. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.FileMapped">
            <summary> File mapping is no longer supported. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.PreventDispose">
            <summary>Gets or sets a value indicating if the memory should be freed when disposing.</summary>
            <remarks><para>This class is no longer used in DotImage.  Please use PixelMemory instead.</para>
            <para> This should only be set to true if the same memory is being handled somewhere else. </para></remarks>
            <value> A value indicating if the memory should be freed when disposing. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.Handle">
            <summary>Gets the pointer to the memory handled by this object.</summary>
            <remarks>This class is no longer used in DotImage.  Please use PixelMemory instead.</remarks>
            <value> The pointer to the memory handled by this object. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand">
            <summary>
            Summary description for ApplyPaletteCommand.
            </summary>
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, it will raise the ChangePixelFormat
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
            <summary> Maps an image into a specified palette, creating an 8-bit colormapped image. </summary>
            <remarks> This command uses various dithering algorithms to create a colormapped image that can very closely
            represent a full color image.  A <see cref="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.Palette"/> containing up to 256 colors can be applied. </remarks>
            <seealso> Palette </seealso>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageCommand">
            <summary> Represents the base class for all image processing routines that modify image data. </summary>
            <remarks> <para>An <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> can be used to apply any type of effect onto an existing image.  The Apply method
            can be used to process the command.  Classes that inherit <STRONG>ImageCommand</STRONG> can be used in the 
            ApplyCommand method in the Workspace.</para>
            <para>See Extending ImageCommands for more information on creating custom commands.</para> </remarks>
            <seealso> Extending ImageCommands </seealso>
            <summary> Represents the base class for all image processing routines that modify image data. </summary>
            <remarks> <para>An <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> can be used to apply any type of effect onto an existing image.  The Apply method
            can be used to process the command. Classes that inherit <STRONG>ImageCommand</STRONG> can be used in the <see cref="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand)"/> method in the Workspace.</para>
            </remarks>
            <seealso> Extending ImageCommands </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ImageCommand.progress">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ProgressEventHandler"/> delegate which can be used to view or cancel the
            progress of the current process. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ProgressEventHandler.html">ProgressEventHandler</a>
            delegate which can be used to view or cancel the progress of the current process. </value>
            <remarks> A null value will ignore progress. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ImageCommand._applyToAnyPixelFormat">
            <summary> Reports whether or not this command will be applied to any supplied PixelFormat image </summary>
            <value> When set to true, the command will perform automatic PixelFormat conversion of the source image to a
            PixelFormat suitable for the command.  By default this property is set to false. </value>
            <remarks> <para>Note that not all commands will support this property.  If a command returns true in the property
            CanApplyToAnyPixelFormat, then ApplyToAnyPixelFormat can be either true or false.</para>
            <para>If a command reports false in the property CanApplyToAnyPixelFormat, then ApplyToAnyPixelFormat can only be
            false and will throw a NotSupportedException if set to true.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ImageCommand._globalAutoThread">
            <summary> Determines if all ImageCommands that support multithreaded processing will be multithreaded. </summary>
            <value> Returns true if ImageCommands that support multithreaded processing will be multithreaded.  Default value is
            false. </value>
            <remarks> Many ImageCommands can be run in a multithreaded manner that will improve the performance of the command
            without affecting the output.  Speed improvements are especially apparent on multicore processors. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ImageCommandGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Aggregates ImageCommand data into the supplied SerializationInfo object. </summary>
            <remarks> This method is only needs by child classes of image command which implement ISerializable.  This method
            should be called to serialize all the base class information. </remarks>
            <param name="info"> A serialization info object which will hold image command data </param>
            <param name="context"> The streaming context for the serialization. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Applies the command to the source <see cref="T:Atalasoft.Imaging.AtalaImage"/>.
            </summary>
            <param name="sourceImage">The source <see cref="T:Atalasoft.Imaging.AtalaImage"/> which will be processed.  For command types that do not require a source image, set this to null.</param>
            <returns> A new <see cref="T:Atalasoft.Imaging.AtalaImage"/> containing the processed image.  For commandTypes that do not return an
            image, set this to <STRONG>null</STRONG>. </returns>
            <exception> Thrown if the source image is null (Nothing in Visual Basic). </exception>
            <exception> Thrown if the source image contains no data. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns a value indicating if the specified pixel format is supported. </summary>
            <remarks> All derived commands must override this property. </remarks>
            <seealso> SupportedPixelFormats Property </seealso>
            <param name="format"> The pixel format to query. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary> Chooses a pixel format that is preferred for this command. </summary>
            <returns> A new pixel format to use for this command. </returns>
            <remarks> <para>The default implementation returns the sourceFormat value.</para>
            <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para> </remarks>
            <param name="sourceImage"> The original source image. </param>
            <param name="sourceFormat"> The original image's pixel format. </param>
            <param name="formats"> An array of pixel formats supported by this command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.SelectBestAlternatePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary> Choose the best pixel format to use for this command when the supplied source image's pixel format is
            unacceptable. </summary>
            <returns> A new pixel format for the command.  This new pixel format must be one of the pixel formats in the
            supported pixel formats. </returns>
            <remarks> The default implementation returns the 0th element of the formats array. </remarks>
            <param name="sourceImage"> The source image to be processed. </param>
            <param name="sourceFormat"> The source image's pixel format. </param>
            <param name="formats"> The pixel formats supported by this command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.GetChangedPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
            <summary> This method is called to change the pixel format of the source image. </summary>
            <returns> A new image in the new pixel format, with image data translated from the source image. </returns>
            <remarks> The default implementation uses the built-in AtalaImage.GetChangedPixelFormat method, which in turn uses
            the PixelFormatChanger installed in AtalaImage.  By overriding this method, you can bypass the built-in pixel format
            translation and supply your own and isolate it to an individual command. </remarks>
            <param name="sourceImage"> The original source image. </param>
            <param name="newFormat"> The new pixel format. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ConstructImageResults">
            <summary> Constructs the results object for this command. </summary>
            <returns> A new object of type ImageResults representing the results for this command. </returns>
            <remarks> <para>The default implementation returns an object of type ImageResults.  If your command requires an
            object with more information, subclass ImageResults and add in the information you need.  Your command will override
            ConstructImageResults and return your new object.</para>
            <para>The object allocated here is passed to PerformActualCommand as a reference parameter, meaning the entire
            object can be changed at that point too.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary> Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command. </summary>
            <returns> A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image. </returns>
            <remarks> <para>The default implementation returns a new image in the same pixel format as the source image.</para>
            <para>The returned image must be the same size as the image passed in.</para>
            <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
            <para>If an error occurs, this method should throw an exception.</para> </remarks>
            <param name="image"> The source image being processed.  This may be different from the source image passed into
            Apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary> Verify the integrity of properties in the command before processing an image. </summary>
            <remarks> <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
            <para>Errors should be indicated by throwing an appropriate exception.</para> </remarks>
            <param name="image"> The image to be processed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary> PerformActualCommand does the actual work of the image processing command. </summary>
            <returns> In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null. </returns>
            <param name="source"> The source image for processing.  This may be different from the original image. </param>
            <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
            <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
            <param name="results"> The results object that will be used for this command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.VerifyImage(Atalasoft.Imaging.AtalaImage)">
            <summary> Verify the integrity of an AtalaImage. </summary>
            <remarks> Throws an ArgumentNullException if the image is null and an ArgumentException if the image's PixelMemory
            is null or disposed. </remarks>
            <param name="image"> An AtalaImage. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary> The method is called by the default implementation of Apply.  It determines if it is necessary to create a
            copy of the source image in a different pixel format and if so, determines the best new pixel format and allocates
            that image. </summary>
            <returns> A new image in a pixel format supported by the command or <EM>null</EM> to indicate that the original
            image is acceptable. </returns>
            <remarks> <para>The default implementation of ConstructChangedSourceImage requests that the command report its
            preferred pixel format (typically, this is the source image's pixel format, but some commands support many pixel
            formats, but work best in gray, for example), and if that is supported, returns a new image in the preferred format
            if it is different from the source image.</para>
            <para>If the pixel format is not supported and ApplyToAnyPixelFormat is set to true, the command is queried for its
            best alternate pixel format and a new image is returned in that pixel format.  If ApplyToAnyPixelFormat is set to
            false, ConstructChangedSourceImage will throw an IncompatiblePixelFormatException.</para>
            <para>If an error occurs, ConstructChangedImage should throw an exception.  Any new image constructed by
            ConstructChangedImage must be a pixel format supported by this command.</para> </remarks>
            <param name="image"> The original source image passed to Apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary> Apply the command to the given image. </summary>
            <returns> A new object of type <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageResults"/>. </returns>
            <remarks> The ImageResults object will always contain a valid Image property which represents the output of the
            command.  This property may be the same as the input image. </remarks>
            <param name="image"> The image which will by processed by the command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.GetContinuousFormatImage(Atalasoft.Imaging.AtalaImage)">
            <summary> A utility method for determining the best matching continuous tone pixel format and converting the given
            image to that format. </summary>
            <returns> If the image is already a continuous image format, this method will return null.  Otherwise it will return
            a new image. </returns>
            <param name="image"> A non-continuous (ie, color-mapped) image </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyVerifyProperties(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage)">
            <remarks> This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand,
            which need to operate on existing ImageCommands by proxy. </remarks>
            <param name="command"> An ImageCommand that will be called. </param>
            <param name="image"> The source image for the command </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyConstructChangedSourceImage(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage)">
            <summary> Calls the ConstructChangedSourceImage method on the supplied ImageCommand. </summary>
            <remarks> This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand,
            which need to operate on existing ImageCommands by proxy. </remarks>
            <param name="command"> An ImageCommand that will be called. </param>
            <param name="image"> An AtalaImage to be passed to ConstructChangedSourceImage. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxySelectPreferredPixelFormat(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <remarks> This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand,
            which need to operate on existing ImageCommands by proxy. </remarks>
            <param name="command"> An ImageCommand that will be called. </param>
            <param name="sourceImage"> An AtalaImage to be passed to SelectPreferredPixelFormat. </param>
            <param name="sourceFormat"> The source image pixel format </param>
            <param name="formats"> A set of supported pixel formats for the command </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxySelectBestAlternatePixelFormat(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <returns> This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand,
            which need to operate on existing ImageCommands by proxy. </returns>
            <param name="command"> An ImageCommand that will be called. </param>
            <param name="sourceImage"> An AtalaImage to be passed to SelectBestAlternatePixelFormat. </param>
            <param name="sourceFormat"> The source image pixel format </param>
            <param name="formats"> A set of supported pixel formats for the command </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyGetChangedPixelFormat(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
            <remarks> This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand,
            which need to operate on existing ImageCommands by proxy. </remarks>
            <param name="command"> An ImageCommand that will be called. </param>
            <param name="sourceImage"> An AtalaImage to be passed to GetChangedPixelFormat. </param>
            <param name="newFormat"> The new target pixel format </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyConstructImageResults(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <remarks> This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand,
            which need to operate on existing ImageCommands by proxy. </remarks>
            <param name="command"> An ImageCommand that will be called. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyConstructFinalImage(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage)">
            <remarks> This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand,
            which need to operate on existing ImageCommands by proxy. </remarks>
            <param name="command"> An ImageCommand that will be called. </param>
            <param name="image"> An AtalaImage to be passed to ConstructFinalImage. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.AllocatePixelFormatArray(System.Int32)">
            <summary> Allocate an array of PixelFormat enums. </summary>
            <remarks> This method was added to work around a bug in Managed C++ that made it impossible to correctly allocate an
            array of enums.  In general, most client code will never need to call this method. </remarks>
            <param name="len"> The number of elements to allocate. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.GlobalAutoThread">
            <summary> Determines if all ImageCommands that support multithreaded processing will be multithreaded. </summary>
            <value> Returns true if ImageCommands that support multithreaded processing will be multithreaded.  Default value is
            false. </value>
            <remarks> Many ImageCommands can be run in a multithreaded manner that will improve the performance of the command
            without affecting the output.  Speed improvements are especially apparent on multicore processors. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.Progress">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ProgressEventHandler"/> delegate which can be used to view or cancel the
            progress of the current process. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ProgressEventHandler.html">ProgressEventHandler</a>
            delegate which can be used to view or cancel the progress of the current process. </value>
            <remarks> A null value will ignore progress. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.InPlaceProcessing">
            <summary> Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image. </summary>
            <value> A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks> By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.CanApplyToAnyPixelFormat">
            <summary> Returns true if the command can be applied to any PixelFormat. </summary>
            <remarks> <para>Many commands have the ability to take advantage of automatic PixelFormat conversion so that they
            can operate on all the PixelFormats instead of a select few.  This capability comes at the cost of time and
            memory.</para>
            <para>If CanApplyToAnyPixelFormat is true, then it is possible to set the property ApplyToAnyPixelFormat to true, to
            cause automatic conversion.  If CanApplyToAnyPixelFormat is false, then it is incorrect to set ApplyToAnyPixelFormat
            to true.</para> </remarks>
            <value> A boolean representing if this command can be applied to any PixelFormat. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToAnyPixelFormat">
            <summary> Reports whether or not this command will be applied to any supplied PixelFormat image </summary>
            <value> When set to true, the command will perform automatic PixelFormat conversion of the source image to a
            PixelFormat suitable for the command.  By default this property is set to false. </value>
            <remarks> <para>Note that not all commands will support this property.  If a command returns true in the property
            CanApplyToAnyPixelFormat, then ApplyToAnyPixelFormat can be either true or false.</para>
            <para>If a command reports false in the property CanApplyToAnyPixelFormat, then ApplyToAnyPixelFormat can only be
            false and will throw a NotSupportedException if set to true.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.SupportedPixelFormats">
            <seealso> IsPixelFormatSupported Method </seealso>
            <summary> Gets an array of supported pixel formats. </summary>
            <value> An array of supported pixel formats. </value>
            <remarks> All derived classes must override this property. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.palette">
            <summary> <para>Gets or sets the <STRONG>Palette</STRONG> to map the image to.</para> </summary>
            <value> The <STRONG>Palette</STRONG> to map the image to. </value>
            <remarks> The palette must be set before invoking ApplyToImage. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.ditherMode">
            <summary> <para>Gets or sets the dithering mode to use when mapping the image to a palette.</para> </summary>
            <value> The dithering mode to use when mapping the image to a palette. </value>
            <remarks> Default value is <EM>DitheringMode.None</EM>. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.ditherErrorMax">
            <value> The amount of dithering. </value>
            <summary> Gets or sets the amount of dithering to apply. </summary>
            <remarks> <para>Valid values are between 0 and 127 with 0 being little to no dithering and 127 the full amount of
            possible dithering.  Defaults to 127. </para>
            <para>For converting a color or grayscale image to 1-bit black and white without dithering, see the <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand"/>, <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand"/>, and <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand"/>.</para> </remarks>
            <exception> Thrown if the value is less than 0 or greater than 127. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of %ApplyPaletteCommand%. </summary>
            <overloads> Creates an ApplyPaletteCommand object used to modify an AtalaImage Palette. </overloads>
            <summary> Creates a new instance of ApplyPaletteCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
            <summary> Initializes a new instance of <STRONG>ApplyPaletteCommand</STRONG> specifying the palette, dithering mode,
            and dither error. </summary>
            <param name="palette"> <para>The palette to map the image to.</para> </param>
            <param name="ditherMode"> The dithering mode to use when mapping the image to a palette. </param>
            <param name="ditherErrorMax"> The amount of dithering.  (0 - 127) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode)">
            <summary> Initializes a new instance of <STRONG>ApplyPaletteCommand</STRONG> specifying the <STRONG>Palette</STRONG>
            and dithering mode. </summary>
            <param name="palette"> <para>The <STRONG>Palette</STRONG> to map the image to.</para> </param>
            <param name="ditherMode"> The dithering mode to use when mapping the image to a palette. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(Atalasoft.Imaging.Palette)">
            <summary> Initializes a new instance of <STRONG>ApplyPaletteCommand</STRONG> specifying the
            <STRONG>Palette</STRONG>. </summary>
            <param name="palette"> <para>The <STRONG>Palette</STRONG> to map the image to.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand"/> class.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentNullException">Palette;The palette must be set before calling Apply.</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.Palette">
            <summary>
            Gets or sets the value of palette
            </summary>
            <value>The palette to apply.</value>
            <summary> <para>Gets or sets the <STRONG>Palette</STRONG> to map the image to.</para> </summary>
            <value> The <STRONG>Palette</STRONG> to map the image to. </value>
            <remarks> The palette must be set before invoking ApplyToImage. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherMode">
            <summary>
            Gets or sets the value of ditherMode
            </summary>
            <value>The type of dithering to apply.</value>
            <summary> <para>Gets or sets the dithering mode to use when mapping the image to a palette.</para> </summary>
            <value> The dithering mode to use when mapping the image to a palette. </value>
            <remarks> Default value is <EM>DitheringMode.None</EM>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherErrorMax">
            <value> The amount of dithering. </value>
            <summary> Gets or sets the amount of dithering to apply. </summary>
            <remarks> <para>Valid values are between 0 and 127 with 0 being little to no dithering and 127 the full amount of
            possible dithering.  Defaults to 127. </para>
            <para>For converting a color or grayscale image to 1-bit black and white without dithering, see the <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand"/>, <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand"/>, and <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand"/>.</para> </remarks>
            <exception> Thrown if the value is less than 0 or greater than 127. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AutoCropCommand">
            <summary> Automatically crops an image by removing borders around the edge of an image with a solid color.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.tolerance">
            <summary> Gets or sets the percentage tolerance used to locate the edges, from 0 to 100. </summary>
            <remarks> Default value is 0. </remarks>
            <value> <para>The tolerance used to locate the edges.  </para> </value>
            <exception> Thrown when the value is less than 0 or greater than 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.overrideIndex">
            <summary> Gets or sets a palette index value containing the color to represent image 'whitespace'. </summary>
            <value> <para>A palette index value containing the color to represent image 'whitespace'.</para> </value>
            <remarks> Default value is -1.  A value greater than -1 will override the <EM>OverrideColor</EM> property.
            </remarks>
            <exception> Thrown when the value is less than -1 or greater than 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.overrideColor">
            <value> <FONT size="2"><para>A specific color to represent the image 'whitespace'.</para></FONT> </value>
            <summary> Gets or sets a specific color to represent the image 'whitespace'. </summary>
            <remarks> Default value is <EM>Color.Empty</EM>. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.useMedianFilter">
            <summary> Gets or sets a value indicating if the noise is removed prior to getting the crop dimensions. </summary>
            <value> A value indicating if the noise is removed prior to getting the crop dimensions. </value>
            <remarks> Default value is <EM>false</EM>. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Creates an <STRONG>AutoCropCommand</STRONG> object used to remove extra spacing around an image.</overloads>
            <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> with 0 tolerance. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor">
            <summary>
            Creates a new instance of AutoCropCommand.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double)">
            <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> specifying a tolerance. </summary>
            <param name="tolerance"> <para>The tolerance used to locate the edges.  (0 - 100)</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Drawing.Color)">
            <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> specifying a tolerance and override color.</summary>
            <param name="tolerance"> <para>The tolerance used to locate the edges.  (0 - 100)</para> </param>
            <param name="overrideColor"> <para>A specific color to represent the image 'whitespace'.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Int32)">
            <summary> Initializes a new instance of AutoCropCommand specifying a tolerance and override index. </summary>
            <param name="tolerance"> <para>The tolerance used to locate the edges.  (0 - 100)</para> </param>
            <param name="overrideIndex"> <para>A palette index value containing the color to represent image
            'whitespace'.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Drawing.Color,System.Boolean)">
            <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> specifying a tolerance, override color, and
            if uses median filter. </summary>
            <param name="tolerance"> <para>The tolerance used to locate the edges.  (0 - 100)</para> </param>
            <param name="overrideColor"> <para>A specific color to represent the image 'whitespace'.</para> </param>
            <param name="useMedianFilter"> If true, removed noise from the image prior to getting crop dimensions. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Int32,System.Boolean)">
            <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> specifying a tolerance, override index, and
            if uses median filter. </summary>
            <param name="tolerance"> <para>The tolerance used to locate the edges.  (0 - 100)</para> </param>
            <param name="overrideIndex"> <para>A specific color to represent the image 'whitespace'.</para> </param>
            <param name="useMedianFilter"> If true, removed noise from the image prior to getting crop dimensions. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.GetBorder(Atalasoft.Imaging.AtalaImage)">
            <summary> Returns a Rectangle of the border to remove. </summary>
            <param name="sourceImage"> The AtalaImage that will be evaluated. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AutoCropCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.Tolerance">
            <summary> Gets or sets the percentage tolerance used to locate the edges, from 0 to 100. </summary>
            <remarks> Default value is 0. </remarks>
            <value> <para>The tolerance used to locate the edges.  </para> </value>
            <exception> Thrown when the value is less than 0 or greater than 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideColor">
            <value> <para>A specific color to represent the image 'whitespace'.</para> </value>
            <summary> Gets or sets a specific color to represent the image 'whitespace'. </summary>
            <remarks> Default value is <EM>Color.Empty</EM>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideIndex">
            <summary> Gets or sets a palette index value containing the color to represent image 'whitespace'. </summary>
            <value> <para>A palette index value containing the color to represent image 'whitespace'.</para> </value>
            <remarks> Default value is -1.  A value greater than -1 will override the <EM>OverrideColor</EM> property.
            </remarks>
            <exception> Thrown when the value is less than -1 or greater than 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.UseMedianFilter">
            <summary> Gets or sets a value indicating if the noise is removed prior to getting the crop dimensions. </summary>
            <value> A value indicating if the noise is removed prior to getting the crop dimensions. </value>
            <remarks> Default value is <EM>false</EM>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand">
            <summary> Changes the image to a new <see cref="T:Atalasoft.Imaging.PixelFormat"/>. </summary>
            <remarks> <para>This is equivalent to the <see cref="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat)"/> in the <see cref="T:Atalasoft.Imaging.AtalaImage"/> class, but in a Command form.  Using this command will not raise the <see cref="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat"/> event.</para> </remarks>
            <seealso> GetChangedPixelFormat Method </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.newPixelFormat">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.PixelFormat"/> of the new image. </summary>
            <value> The PixelFormat of the new image. </value>
            <remarks> If the source and destination pixel formats are equal, ApplyToImage will return <EM>null</EM>. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.destProfile">
            <summary> Gets or sets the color profile to use when converting the image to a new colorspace. </summary>
            <value> The color profile to use when converting the image to a new colorspace. </value>
            <remarks> This profile will be used as the destination device.  By default the screen profile will be used.  If
            specifying a CMYK image, a CMYK profile should be set. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand"/>. </summary>
            <overloads> Creates a ChangePixelFormatCommand object used to change the current pixel format of an image to a
            different format. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">ChangePixelFormatCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand"/> specifying the new pixel format and color
            profile. </summary>
            <param name="newPixelFormat"> The PixelFormat of the new image. </param>
            <param name="destProfile"> This is the destination colorprofile to use when changing colorspaces. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor(Atalasoft.Imaging.PixelFormat)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand"/> specifying the new pixel format. </summary>
            <param name="newPixelFormat"> The PixelFormat of the new image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand"/> class.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException">Source and destination pixel formats cannot be equal</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.NewPixelFormat">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.PixelFormat"/> of the new image. </summary>
            <value> The PixelFormat of the new image. </value>
            <remarks> If the source and destination pixel formats are equal, ApplyToImage will return <EM>null</EM>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.DestProfile">
            <summary> Gets or sets the color profile to use when converting the image to a new colorspace. </summary>
            <value> The color profile to use when converting the image to a new colorspace. </value>
            <remarks> This profile will be used as the destination device.  By default the screen profile will be used.  If
            specifying a CMYK image, a CMYK profile should be set. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand">
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, it will throw the <see cref="T:System.ArgumentException"/></remarks>
            <summary> This method may be used to adjust a channel by adding or subtracting a literal value or percentage. A
            negative value will reduce the amount of that channel and a positive value will increase it. A value of 0 will have
            no effect. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand">
            <summary> Derives from <STRONG>ImageCommand</STRONG> and adds region of interest capability to ImageCommands.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.regionOfInterest">
            <summary> <para>Gets or sets a %RegionOfInterest% which will only process the indicated region of the image.</para>
            </summary>
            <value> A %RegionOfInterest% which will only process the indicated region of the image. </value>
            <value> A <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest"/> specifying the area of the image to process. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest">
            <summary> <para>Gets or sets a <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest"/> which will only process the indicated region of the image.</para>
            </summary>
            <value> A <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest"/> which will only process the indicated region of the image. </value>
            <value> A <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest"/> specifying the area of the image to process. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.IThreadableCommand">
            <summary> This interface is applied to an <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> to support parallelization. </summary>
            <remarks> ImageCommand objects with this interface applied perform faster with multiple core processors and systems
            with multiple processors. </remarks>
            <seealso> ImageCommand Class </seealso>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.IThreadableCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary> Performs the command on a specified section of the image. </summary>
            <remarks> This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand. </remarks>
            <param name="source"> The source image. </param>
            <param name="sourceBounds"> The source rectangular boundary. </param>
            <param name="dest"> The destination image. </param>
            <param name="destBounds"> The destination image boundary. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.IThreadableCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary> Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread. </summary>
            <returns> An array of Rectangles which represent the bands that will actually be used. </returns>
            <remarks> <para>Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </para> </remarks>
            <param name="bounds"> The area of the image which will be processed. </param>
            <param name="bands"> <para>An array of Rectangles which represent the desired bands. </para> </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.IThreadableCommand.AutoThread">
            <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.channel1">
            <value> Amount to adjust the first channel. </value>
            <remarks> Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false. </remarks>
            <summary> Gets or sets the amount to adjust the first channel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.channel2">
            <summary> Gets or sets the amount to adjust the second channel. </summary>
            <value> Amount to adjust the second channel. </value>
            <remarks> Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.channel3">
            <summary> Gets or sets the amount to adjust the third channel. </summary>
            <value> Amount to adjust the third channel. </value>
            <remarks> Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.channel4">
            <summary> Gets or sets the amount to adjust the fourth channel. </summary>
            <value> Amount to adjust the fourth channel. </value>
            <remarks> Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.adjustByPercentage">
            <summary> Gets or sets the value which determines if the channel values are considered a percentage rather than a
            literal value. </summary>
            <value> The value which determines if the channel values are considered a percentage rather than a literal value.
            </value>
            <remarks> <para>When this is set to true the value contained within each of the Channel properties is considered to
            be based on a percentage. When it is false it is considered to be a literal byte value change.</para>
            <para> </para>
            <para>Defaults to false.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary> Performs the command on a specified section of the image. </summary>
            <param name="source"> The source image. </param>
            <param name="sourceBounds"> The source rectangular boundary. </param>
            <param name="dest"> The destination image. </param>
            <param name="destBounds"> The destination image boundary. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand._autoThread">
            <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
            <remarks> Defaults to false. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary> Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread for processing. </summary>
            <returns> An array of Rectangles which represent the bands that will actually be used.,<BR/> </returns>
            <param name="bounds"> The area of the image which processing will be restricted to. </param>
            <param name="bands"> An array of Rectangles which represent the desired bands. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Clone">
            <summary>Creates a new object that is a copy of the current instance.</summary>
            <remarks> <para><B>Clone</B> can be implemented either as a deep copy or a shallow copy. In a deep copy, all objects
            are duplicated; whereas, in a shallow copy, only the top-level objects are duplicated and the lower levels contain
            references.</para>
            <para>The resulting clone must be of the same type as or a compatible type to the original instance.</para>
            </remarks>
            <returns> A new object that is a copy of this instance. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AdjustChannelCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand"/> class, used to modify each channel
            value of an image. </overloads>
            <summary> Creates a new instance of <STRONG>AdjustChannelCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
            </summary>
            <remarks> <para>Any objects included in the SerializationInfo are automatically tracked and serialized by the
            formatter.</para>
            <para>Code that calls GetObjectData requires the SecurityPermission for providing serialization services. Associated
            enumeration: SecurityPermissionFlag.SerializationFormatter.</para> </remarks>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination (see StreamingContext) for this serialization. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
            <param name="adjustByPercentage"> Determines if the channel values are considered a percentage rather than a literal
            value. </param>
            <param name="channel1"> Amount to adjust the first channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel1 Property. </param>
            <param name="channel2"> Amount to adjust the second channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel2 Property. </param>
            <param name="channel3"> Amount to adjust the third channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel3 Property. </param>
            <param name="channel4"> Amount to adjust the fourth channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel4 Property. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
            <param name="adjustByPercentage"> Determines if the channel values are considered a percentage rather than a literal
            value. </param>
            <param name="channel1"> Amount to adjust the first channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel1 Property. </param>
            <param name="channel2"> Amount to adjust the second channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel2 Property. </param>
            <param name="channel3"> Amount to adjust the third channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel3 Property. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double,System.Double)">
            <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
            <param name="adjustByPercentage"> Determines if the channel values are considered a percentage rather than a literal
            value. </param>
            <param name="channel1"> Amount to adjust the first channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel1 Property. </param>
            <param name="channel2"> Amount to adjust the second channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel2 Property. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double)">
            <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
            <param name="adjustByPercentage"> Determines if the channel values are considered a percentage rather than a literal
            value. </param>
            <param name="channel1"> Amount to adjust the first channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal. This can be changed later via the Channel1 Property. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor">
            <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Channel1;When using literal values, the channel must be a value from -255 to 255.
            or
            Channel2;When using literal values, the channel must be a value from -255 to 255.
            or
            Channel3;When using literal values, the channel must be a value from -255 to 255.
            or
            Channel4;When using literal values, the channel must be a value from -255 to 255.
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:System.ArgumentException">This pixel format is not supported.;image</exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.InPlaceProcessing">
            <summary> Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image. </summary>
            <value> <para>Is always true.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AutoThread">
            <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
            <remarks> Defaults to false. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel1">
            <value> Amount to adjust the first channel. </value>
            <remarks> Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false. </remarks>
            <summary> Gets or sets the amount to adjust the first channel. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel2">
            <summary> Gets or sets the amount to adjust the second channel. </summary>
            <value> Amount to adjust the second channel. </value>
            <remarks> Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel3">
            <summary> Gets or sets the amount to adjust the third channel. </summary>
            <value> Amount to adjust the third channel. </value>
            <remarks> Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel4">
            <summary> Gets or sets the amount to adjust the fourth channel. </summary>
            <value> Amount to adjust the fourth channel. </value>
            <remarks> Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AdjustByPercentage">
            <summary> Gets or sets the value which determines if the channel values are considered a percentage rather than a
            literal value. </summary>
            <value> The value which determines if the channel values are considered a percentage rather than a literal value.
            </value>
            <remarks> <para>When this is set to true the value contained within each of the Channel properties is considered to
            be based on a percentage. When it is false it is considered to be a literal byte value change.</para>
            <para> </para>
            <para>Defaults to false.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> <para>An Array Containing:</para>
            <para>PixelFormat.Pixel8bppGrayscale,<BR/>PixelFormat.Pixel24bppBgr,<BR/>PixelFormat.Pixel32bppBgr,
            <BR/>PixelFormat.Pixel16bppGrayscaleAlpha,<BR/>PixelFormat.Pixel32bppBgra,<BR/>PixelFormat.Pixel32bppCmyk</para></value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand">
            <summary> <para>This method may be used to adjust the hue, saturation and luminance by adding or subtracting a
            literal value or percentage. A negative value will reduce the amount of that channel and a positive value will
            increase it. A value of 0 will have no effect. </para> </summary>
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, it will throw the <see cref="T:System.ArgumentException"/></remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.hue">
            <summary> Gets or sets the value of hue. </summary>
            <value> Amount to adjust the Hue. </value>
            <exception> Thrown if value is not between -240 and 240, inclusive. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.saturation">
            <summary> Gets or sets the value of saturation. </summary>
            <value> Amount to adjust the Saturation. </value>
            <exception> Thrown if value is not between -240 and 240, inclusive. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.luminance">
            <summary> Gets or sets the value of luminance. </summary>
            <value> Amount to adjust the Luminance. </value>
            <exception> Thrown if value is not between -240 and 240, inclusive. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.adjustByPercentage">
            <summary> Gets or sets a value to indicate if the hue, saturation and luminance values will be considered
            percentages instead of literal values. </summary>
            <value> A value to indicate if the hue, saturation and luminance values will be considered percentages instead of
            literal values. </value>
            <remarks> Defaults to false. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary> Performs the command on a specified section of the image. </summary>
            <param name="source"> The source image. </param>
            <param name="sourceBounds"> The source rectangular boundary. </param>
            <param name="dest"> The destination image. </param>
            <param name="destBounds"> The destination image boundary. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand._autoThread">
            <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
            <remarks> Defaults to false. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary> <para>Sets the image area which will be processed and also defines the bands or chunks of the image of
            which each will be sent to a separate thread for processing.</para> </summary>
            <returns> An array of Rectangles which represent the bands that will actually be used. </returns>
            <param name="bounds"> The area of the image which processing will be restricted to. </param>
            <param name="bands"> An array of Rectangles which represent the desired bands. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Clone">
            <summary> <para>Creates a new object that is a copy of the current instance. </para> </summary>
            <returns> <para> A new object that is a copy of this instance. </para> </returns>
            <remarks> <para><B>Clone</B> can be implemented either as a deep copy or a shallow copy. In a deep copy, all objects
            are duplicated; whereas, in a shallow copy, only the top-level objects are duplicated and the lower levels contain
            references.</para>
            <para>The resulting clone must be of the same type as or a compatible type to the original instance.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AdjustHslCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of <STRONG>AdjustHslCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
            </summary>
            <remarks> <para>Any objects that are included in the <B>SerializationInfo</B> are automatically tracked and
            serialized by the formatter.</para>
            <para>Code that calls <B>GetObjectData</B> requires the SecurityPermission
            for providing serialization services. Associated enumeration: SecurityPermissionFlag.SerializationFormatter.</para>
            </remarks>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"><para>The destination (see StreamingContext)
            for this serialization. </para></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor(System.Boolean,System.Double,System.Double,System.Double)">
            <summary> Creates a new instance of <STRONG>AdjustHslCommand</STRONG> specifying the Hue, Saturation and Luminance
            values. </summary>
            <param name="adjustByPercentage"> Set to true if you want the hue, saturation and luminance values to be considered
            percentages. </param>
            <param name="hue"> Amount to adjust the Hue.  Valid values are -100 to 100 when using percentage and -240 to 240
            when using literal. </param>
            <param name="saturation"> Amount to adjust the Saturation. Valid values are -100 to 100 when using percentage and
            -240 to 240 when using literal. </param>
            <param name="luminance"> Amount to adjust the Luminance. Valid values are -100 to 100 when using percentage and -240
            to 240 when using literal. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AdjustHslCommand.</STRONG> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.RgbToHsl(System.Byte,System.Byte,System.Byte,System.Byte@,System.Byte@,System.Byte@)">
            <summary> Converts Red, Green and Blue values to hue, Saturation and Luminance. </summary>
            <param name="red"> Red </param>
            <param name="green"> Green </param>
            <param name="blue"> Blue </param>
            <param name="hue"> hue </param>
            <param name="saturation"> Saturation </param>
            <param name="luminance"> Luminance </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.HslToRgb(System.Byte,System.Byte,System.Byte,System.Byte@,System.Byte@,System.Byte@)">
            <summary> Converts hue, Saturation and Luminance values to Red, Green and Blue. </summary>
            <param name="hue"> hue </param>
            <param name="saturation"> Saturation </param>
            <param name="luminance"> Luminance </param>
            <param name="red"> Red </param>
            <param name="green"> Green </param>
            <param name="blue"> Blue </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.InPlaceProcessing">
            <value> Is always true. </value>
            <summary> Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AutoThread">
            <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
            <remarks> Defaults to false. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Hue">
            <summary> Gets or sets the value of hue. </summary>
            <value> Amount to adjust the Hue. </value>
            <exception> Thrown if value is not between -240 and 240, inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Saturation">
            <summary> Gets or sets the value of saturation. </summary>
            <value> Amount to adjust the Saturation. </value>
            <exception> Thrown if value is not between -240 and 240, inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Luminance">
            <summary> Gets or sets the value of luminance. </summary>
            <value> Amount to adjust the Luminance. </value>
            <exception> Thrown if value is not between -240 and 240, inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AdjustByPercentage">
            <summary> Gets or sets a value to indicate if the hue, saturation and luminance values will be considered
            percentages instead of literal values. </summary>
            <value> A value to indicate if the hue, saturation and luminance values will be considered percentages instead of
            literal values. </value>
            <remarks> Defaults to false. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> <para>An Array Containing:</para>
            <para>PixelFormat.Pixel24bppBgr,<BR/>PixelFormat.Pixel32bppBgr,<BR/>PixelFormat.Pixel32bppBgra,<BR/>PixelFormat.Pixel32bppCmyk</para></value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand">
            <summary> Apply a Look-Up-Table to an image.  A Look-Up-Table is an array of 256 byte values which are used to
            substitute for the image pixel data.  This allows you to modify each pixel component value. </summary>
            <remarks> This command will not work on 1-bit or 4-bit images. </remarks>
            <example>
<code lang="CS" title="ApplyLut (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage("in.jpg");

// Create a negative LUT.
byte[] lut = new byte[256];
for (int i = 0; i < 256; i++)
    lut[i] = (byte)(255 - i);

// Apply this LUT to the Blue and Red channels.
ApplyLutCommand cmd = new ApplyLutCommand(lut, null, lut);
ImageResults results = cmd.Apply(image);
results.Image.Save("out.jpg", new JpegEncoder(), null);
]]></code>

<code lang="VB" title="ApplyLutVB (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage = New AtalaImage("in.jpg")

' Create a negative LUT.
Dim lut(255) As Byte
For i As Integer = 0 To 255
    lut(i) = 255 - i
Next

' Apply this LUT to the Blue and Red channels.
Dim cmd As ApplyLutCommand = New ApplyLutCommand(lut, Nothing, lut)
Dim results As ImageResults = cmd.Apply(image)
results.Image.Save("out.jpg", New Atalasoft.Imaging.Codec.JpegEncoder(), Nothing)
]]></code>
</example>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase">
            <summary> This is a base-class for creating look up table commands.  This class is abstract and cannot be
            instantiated on its own. </summary>
            <summary> This is a base-class for creating look up table commands.  This class is abstract and cannot be
            instantiated on its own. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
            </summary>
            <remarks> <para>Any objects that are included in the <B>SerializationInfo</B> are automatically tracked and
            serialized by the formatter.</para>
            <para>Code that calls <B>GetObjectData</B> requires the SecurityPermission for providing serialization services.
            Associated enumeration: SecurityPermissionFlag.SerializationFormatter.</para></remarks>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> The SerializationInfo to populate with data. </param>
            <param name="context"> The destination (see StreamingContext) for this serialization. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase"/> specifying channel1, channel2, channel3, and channel4.
            </summary>
            <param name="channel1">An array of 256 bytes, representing the 1st color channel. This can be null.</param>
            <param name="channel2">An array of 256 bytes, representing the 2nd color channel. This can be null.</param>
            <param name="channel3">An array of 256 bytes, representing the 3rd color channel. This can be null.</param>
            <param name="channel4">An array of 256 bytes, representing the 4th color channel. This can be null.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase"/> specifying channel1, channel2 and channel3.
            </summary>
            <param name="channel1">An array of 256 bytes, representing the 1st color channel. This can be null.</param>
            <param name="channel2">An array of 256 bytes, representing the 2nd color channel. This can be null.</param>
            <param name="channel3">An array of 256 bytes, representing the 3rd color channel. This can be null.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase"/> specifying channel1 and channel2.
            </summary>
            <param name="channel1">An array of 256 bytes, representing the 1st color channel. This can be null.</param>
            <param name="channel2">An array of 256 bytes, representing the 2nd color channel. This can be null.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Byte[])">
            <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase"/> specifying channel1.
            </summary>
            <param name="channel1">An array of 256 bytes, representing the 1st color channel. This can be null.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase"/> class.
            </summary>
            <param name="channel1">The channel1.</param>
            <param name="channel2">The channel2.</param>
            <param name="channel3">The channel3.</param>
            <param name="channel4">The channel4.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase"/> class.
            </summary>
            <param name="channel1">The channel1.</param>
            <param name="channel2">The channel2.</param>
            <param name="channel3">The channel3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase"/> class.
            </summary>
            <param name="channel1">The channel1.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.ImplementMe">
            <summary>
            Future use.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.LLGetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>
            Returns the loop-up-table for a single channel.
            </summary>
            <param name="channel">The channel you want to retrieve the loop-up-table from.</param>
            <returns>A 256 element byte array containing the loop-up-table.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.LLSetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Byte[])">
            <summary>
            Sets the loop-up-table for a single channel.
            </summary>
            <param name="channel">The channel to set the loop-up-table for.</param>
            <param name="lut">The loop-up-table byte array.</param>
            <remarks>The array must have 256 elements.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.LLSetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32[])">
            <summary>
            Low-level implementation of set channel look up table.
            </summary>
            <param name="channel">The channel.</param>
            <param name="lut">The lut.</param>
            <exception cref="T:System.ArgumentException">
            The lut array must have 65536 elements.;lut
            or
            You must select a single channel.;channel
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.LLClearChannelLut">
            <summary>
            Low-level implementation to clear the channel lookup table.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            channel1;channel1 null in 8bbpGrayscale
            or
            channel1;channel1 null inside 16bppGrayscale
            </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.InPlaceProcessing">
            <summary> Indicates whether or not the command will operate on the source image alone. </summary>
            <value> Always returns true. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> <para>An Array Containing:</para><para>PixelFormat.Pixel24bppBgr,<BR/>
            PixelFormat.Pixel8bppGrayscale,<BR/>PixelFormat.Pixel8bppIndexed,<BR/>PixelFormat.Pixel32bppBgr,<BR/>
            PixelFormat<BR/>PixelFormat.Pixel32bppCmyk,<BR/>PixelFormat.Pixel16bppGrayscale,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,<BR/>
            PixelFormat.Pixel48bppBgr,<BR/>PixelFormat.Pixel64bppBgra</para></value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Create an <STRONG>ApplyLutCommand</STRONG> used to modify the Look-up-table of an image. </overloads>
            <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
            </summary>
            <remarks> <para>Any objects that are included in the <B>SerializationInfo</B> are automatically tracked and
            serialized by the formatter.</para>
            <para>Code that calls <B>GetObjectData</B> requires the SecurityPermission
            for providing serialization services. Associated enumeration: SecurityPermissionFlag.SerializationFormatter</para>
            </remarks>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"><para> The SerializationInfo to populate with data. </para></param>
            <param name="context"><para>The destination (see StreamingContext)
            for this serialization. </para></param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1, channel2, channel3, and
            channel4. </summary>
            <param name="channel1"> An array of 256 bytes, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
            <param name="channel2"> An array of 256 bytes, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
            <param name="channel3"> An array of 256 bytes, representing the third color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
            <param name="channel4"> An array of 256 bytes, representing the fourth color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1, channel2 and channel3.
            </summary>
            <param name="channel1"> An array of 256 bytes, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
            <param name="channel2"> An array of 256 bytes, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
            <param name="channel3"> An array of 256 bytes, representing the third color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[],System.Byte[])">
            <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1 and channel2. </summary>
            <param name="channel1"> An array of 256 bytes, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
            <param name="channel2"> An array of 256 bytes, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[])">
            <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1.  </summary>
            <param name="channel1"> An array of 256 bytes, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1, channel2, channel3, and
            channel4 for two byte per pixel images. </summary>
            <param name="channel1"> <para>An array of 65536 Int32s, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para> </param>
            <param name="channel2"> <para>An array of 65536 Int32s, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para> </param>
            <param name="channel3"> <para>An array of 65536 Int32s, representing the third color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para> </param>
            <param name="channel4"> <para>An array of 65536 Int32s, representing the fourth color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Int32[],System.Int32[],System.Int32[])">
            <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1, channel2 and channel3 for
            two byte per pixel images. </summary>
            <param name="channel1"> <para>An array of 65536 Int32s, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para> </param>
            <param name="channel2"> <para>An array of 65536 Int32s, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para> </param>
            <param name="channel3"> <para>An array of 65536 Int32s, representing the third color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Int32[])">
            <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1 for two byte per pixel
            images. </summary>
            <param name="channel1"> <para>An array of 65536 Int32s, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ApplyLutCommand.</STRONG> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary> Performs the command on a specified section of the image. </summary>
            <param name="source"> The source image. </param>
            <param name="sourceBounds"> The source rectangular boundary. </param>
            <param name="dest"> The destination image. </param>
            <param name="destBounds"> The destination image boundary. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand._autoThread">
            <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
            <remarks> Defaults to false. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary> <para>Sets the image area which will be processed and also defines the bands or chunks of the image of
            which each will be sent to a separate thread for processing.</para> </summary>
            <returns> An array of Rectangles which represent the bands that will actually be used. </returns>
            <param name="bounds"> The area of the image which processing will be restricted to. </param>
            <param name="bands"> An array of Rectangles which represent the desired bands. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.Clone">
            <summary> <para>Creates a new object that is a copy of the current instance. </para> </summary>
            <returns> A new object that is a copy of this instance. </returns>
            <remarks> <para><B>Clone</B> can be implemented either as a deep copy or a shallow copy. In a deep copy, all objects
            are duplicated; whereas, in a shallow copy, only the top-level objects are duplicated and the lower levels contain
            references.</para>
            <para>The resulting clone must be of the same type as or a compatible type to the original instance.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.GetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary> Returns the look-up-table for a single channel. </summary>
            <exception> Thrown if an attempt is made to select more than 1 channel. </exception>
            <returns> The look-up-table for the specified channel. </returns>
            <param name="channel"> The channel you want to retrieve the look-up-table from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Byte[])">
            <summary> Sets a lookup table for a single channel. </summary>
            <param name="channel"> The channel you want to set. </param>
            <param name="lut"> The look-up-table byte array. </param>
            <summary> Sets the look-up-table for a single channel. </summary>
            <remarks> The byte array must have 256 elements. </remarks>
            <exception> Thrown if the LUT does not have 256 elements. </exception>
            <exception> Thrown if an attempt is made to select more than 1 channel. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary> InternalActualCommand does the actual work of the image processing command. </summary>
            <returns> Null (Nothing in VB) </returns>
            <param name="source"> The source image for processing.  This may be different from the original image. </param>
            <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
            <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
            <param name="results"> The results object that will be used for this command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32[])">
            <summary> Sets a lookup table for a single channel. </summary>
            <remarks> This method is for transforming two byte per pixel images. It must be given a table of 65536 Int32s.
            </remarks>
            <param name="channel"> The channel you want to set. </param>
            <param name="lut"> The look-up-table array. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.ImplementMe">
            <summary>
            Future use.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.AutoThread">
            <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
            <remarks> Defaults to false. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand">
            <summary> <para>This command will remove the alpha information from an image by blending the transparent areas with
            a solid color.</para> </summary>
            <remarks> This command requires an image containing alpha information. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.color">
            <summary> Gets or sets the color to use for the transparent areas of the image. </summary>
            <value> The color to use for the transparent areas of the image. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>FlattenAlphaCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand"/> that can be used to remove alpha information from an image.
            </overloads>
            <summary> Creates a new instance of <STRONG>FlattenAlphaCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
            </summary>
            <remarks> <para>Any objects that are included in the <B>SerializationInfo</B> are automatically tracked and
            serialized by the formatter.</para>
            <para>Code that calls <B>GetObjectData</B> requires the SecurityPermission
            for providing serialization services. Associated enumeration: </para></remarks>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"><para>The SerializationInfo to populate with data. </para></param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor(System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>FlattenAlphaCommand</STRONG> specifying the color used to replace the
            alpha. </summary>
            <param name="color"> The background color to blend with. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor">
            <summary> Creates a new instance of <STRONG>FlattenAlphaCommand.</STRONG> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="dest">The dest.</param>
            <param name="imageArea">The image area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.Color">
            <summary> Gets or sets the color to use for the transparent areas of the image. </summary>
            <value> The color to use for the transparent areas of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> <para>An Array Containing:</para>
            <para>PixelFormat.Pixel8bppIndexed,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,<BR/>PixelFormat.Pixel32bppBgra</para></value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand">
            <summary> <para>Use this command to invert the image.</para> </summary>
            <remarks> <para>Uses a highly optimized invert routine on RGB images when AllChannels are included.  You may specify
            any or all channels to invert.</para>
            <para>Inverting an image creates a photo negative by subtracting 255 from each channel value.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.channelsToProcess">
            <summary> Gets or sets a bit flag specifying which channels to process. </summary>
            <value> A bit flag specifying which channels to process. </value>
            <remarks> Default value is ChannelFlags.AllChannels </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>InvertCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of the <STRONG>InvertCommand</STRONG> class. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo where the data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.ImplementMe">
            <summary>
            Future use.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.#ctor">
            <summary> Creates a new instance of <STRONG>InvertCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException">Invert does not function with 1, 4 or 8 bits per pixel and a region of interest.</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Internals the actual command.
            </summary>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <param name="imageArea">The image area.</param>
            <param name="results">The results.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentException">internal error - invalid pixel format slipped by InvertCommand</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>InvertCommand</STRONG>. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.InPlaceProcessing">
            <summary>
            Indicates whether or not the command will operate on the source image alone.
            </summary>
            <value>
            Always returns true.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag specifying which channels to process. </summary>
            <value> A bit flag specifying which channels to process. </value>
            <remarks> Default value is ChannelFlags.AllChannels </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand">
            <summary> This command allows you to replace the channels of an existing image by substituting the channel values
            with those of an 8-bit grayscale image. </summary>
            <remarks> This method requires a continuous tone image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.channel1Image">
            <summary> Gets or sets a grayscale image to represent the first channel. Set this to null if you want to skip this
            channel. </summary>
            <value> A grayscale image to represent the first channel. Set this to null if you want to skip this channel.
            </value>
            <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.channel2Image">
            <summary> Gets or sets an 8-bit image to represent the second channel. Set this to null if you want to skip this
            channel. </summary>
            <value> An 8-bit image to represent the second channel. Set this to null if you want to skip this channel. </value>
            <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.channel3Image">
            <summary> Gets or sets an 8-bit image to represent the third channel. Set this to null if you want to skip this
            channel. </summary>
            <value> An 8-bit image to represent the third channel. Set this to null if you want to skip this channel. </value>
            <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.channel4Image">
            <summary> Gets or sets an 8-bit image to represent the fourth channel. Set this to null if you want to skip this
            channel. </summary>
            <value> An 8-bit image to represent the fourth channel. Set this to null if you want to skip this channel. </value>
            <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ReplaceChannelCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of the <STRONG>ReplaceChannelCommand</STRONG> object specifying a param array of
            channels. </overloads>
            <summary> Creates a new instance of <STRONG>ReplaceChannelCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo where the data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>ReplaceChannelCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor(Atalasoft.Imaging.AtalaImage[])">
            <summary> Creates a new instance of <STRONG>ReplaceChannelCommand</STRONG> specifying the channel images. </summary>
            <exception> Thrown if the channelImages argument is null (Nothing in VB). </exception>
            <exception> Thrown if channelImage is an empty array. </exception>
            <param name="channelImage"> A parameter array of grayscale <STRONG>AtalaImage's </STRONG>representing each channel
            in the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ReplaceChannelCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">
            ReplaceChannel command requires at least one image;Channel1Image
            or
            All images must have the image width and height.
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel1Image">
            <summary> Gets or sets a grayscale image to represent the first channel. Set this to null if you want to skip this
            channel. </summary>
            <value> A grayscale image to represent the first channel. Set this to null if you want to skip this channel.
            </value>
            <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel2Image">
            <summary> Gets or sets an 8-bit image to represent the second channel. Set this to null if you want to skip this
            channel. </summary>
            <value> An 8-bit image to represent the second channel. Set this to null if you want to skip this channel. </value>
            <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel3Image">
            <summary> Gets or sets an 8-bit image to represent the third channel. Set this to null if you want to skip this
            channel. </summary>
            <value> An 8-bit image to represent the third channel. Set this to null if you want to skip this channel. </value>
            <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel4Image">
            <summary> Gets or sets an 8-bit image to represent the fourth channel. Set this to null if you want to skip this
            channel. </summary>
            <value> An 8-bit image to represent the fourth channel. Set this to null if you want to skip this channel. </value>
            <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand">
            <summary> <para>This command will create an alpha channel for an image based on a color value.  If the image already
            contains alpha information, the color will be blended into it.</para> </summary>
            <remarks> <para>This method will convert 1-bit, 4-bit and 8-bit grayscale images to 8-bit indexed.  24-bit images
            will be converted to 32-bit.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.color">
            <summary> Gets or sets the color used to create the alpha channel. </summary>
            <value> Color used to create the alpha channel. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.tolerance">
            <summary> Gets or sets the tolerance percentage for finding matching colors. </summary>
            <value> Tolerance percentage for finding matching colors. </value>
            <remarks> Valid values are from 0 to 1. </remarks>
            <exception> Thrown if value is not between 0 and 100, inclusive. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.mergeType">
            <summary> Gets or sets the type of merge performed. </summary>
            <value> The type of merge performed. </value>
            <seealso> AlphaMergeType </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.matchAlpha">
            <summary> Gets or sets the alpha value to use when a match of the color is found. </summary>
            <value> The alpha value to use when a match of the color is found. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is  amp;lt; 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.nonMatchAlpha">
            <summary> Gets or sets the alpha value to use when a match of the color is not found. </summary>
            <value> The alpha value to use when a match of the color is not found. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is amp;lt; 0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of the <STRONG>SetAlphaColorCommand</STRONG> object. </overloads>
            <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo where the data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>SetAlphaColorCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Int32,System.Int32)">
            <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> specifying
            color, tolerance, merge type, matching alpha, and non-matching alpha. </summary>
            <exception> Thrown if the tolerance is less than 0 or greater than 100, of if the matchAlpha or nonMatchAlpha values
            are less than 0. </exception>
            <param name="color"> Color used to create the alpha channel. </param>
            <param name="tolerance"> Tolerance percentage for finding matching colors. (0 - 100) </param>
            <param name="mergeType"> The type of merge performed. </param>
            <param name="matchAlpha"> The alpha value to use when a match of the color is found.  (0 - 255) </param>
            <param name="nonMatchAlpha"> The alpha value to use when a match of the color is not found.  (0 - 255) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> specifying
            color, tolerance, and merge type. </summary>
            <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
            <param name="color"> Color used to create the alpha channel. </param>
            <param name="tolerance"> Tolerance percentage for finding matching colors. (0 - 100) </param>
            <param name="mergeType"> The type of merge performed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color,System.Double)">
            <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> specifying
            color and tolerance. </summary>
            <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
            <param name="color"> Color used to create the alpha channel. </param>
            <param name="tolerance"> Tolerance percentage for finding matching colors. (0 - 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> specifying
            color. </summary>
            <param name="color"> Color used to create the alpha channel. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor">
            <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <exception cref="T:System.NullReferenceException">unable to construct destination image</exception>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="dstImage">The DST image.</param>
            <param name="imageArea">The image area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Color">
            <summary> Gets or sets the color used to create the alpha channel. </summary>
            <value> Color used to create the alpha channel. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Tolerance">
            <summary> Gets or sets the tolerance percentage for finding matching colors. </summary>
            <value> Tolerance percentage for finding matching colors. </value>
            <remarks> Valid values are from 0 to 1. </remarks>
            <exception> Thrown if value is not between 0 and 100, inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MergeType">
            <summary> Gets or sets the type of merge performed. </summary>
            <value> The type of merge performed. </value>
            <seealso> AlphaMergeType </seealso>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MatchAlpha">
            <summary> Gets or sets the alpha value to use when a match of the color is found. </summary>
            <value> The alpha value to use when a match of the color is found. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is  amp;lt; 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.NonMatchAlpha">
            <summary> Gets or sets the alpha value to use when a match of the color is not found. </summary>
            <value> The alpha value to use when a match of the color is not found. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is amp;lt; 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand">
            <summary> <para>Creates an alpha channel for an image using an 8-bit grayscale mask image to control
            transparency.</para> </summary>
            <remarks> This command will result in a 16-bit grayscale-alpha or 32-bit RGBA image. </remarks>
            <example>
<code lang="CS" title="SetAlphaFromMask (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Load the 8-bit grayscale mask.
AtalaImage mask = new AtalaImage(@"D:\Test Images\JPG\8-bit alpha mask.jpg");

// Apply the mask to the image and create the new 32-bit image.
SetAlphaFromMaskCommand cmd = new SetAlphaFromMaskCommand(mask, true, AlphaMergeType.UseMostTransparent);
AtalaImage result = cmd.Apply(image).Image;

// Free the image and mask.
image.Dispose();
mask.Dispose();
]]></code>

<code lang="VB" title="SetAlphaFromMask (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage = New AtalaImage("D:\Test Images\1.jpg") 
 
' Load the 8-bit grayscale mask.
Dim mask As AtalaImage = New AtalaImage("D:\Test Images\JPG\8-bit alpha mask.jpg") 
 
' Apply the mask to the image and create the new 32-bit image.
Dim cmd As SetAlphaFromMaskCommand = New SetAlphaFromMaskCommand(mask, True, AlphaMergeType.UseMostTransparent) 
Dim result As AtalaImage = cmd.Apply(image).Image 
 
' Free the image and mask.
image.Dispose()
mask.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.maskImage">
            <summary> Gets or sets an 8-bit image used to generate the alpha channel. </summary>
            <value> An 8-bit image used to generate the alpha channel. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.resizeMask">
            <summary> Gets or sets a valid to indicate if the mask should be resized to fit the image. </summary>
            <value> Set to true if the mask should be resized to fit the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.mergeType">
            <summary> Gets or sets the type of merge performed. </summary>
            <value> The type of merge performed. </value>
            <seealso> AlphaMergeType </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.position">
            <summary> Gets or sets the left, top position of the mask image. </summary>
            <value> The left, top position of the mask image. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SetAlphaFromMaskCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of the <STRONG>SetAlphaFromMaskCommand</STRONG> object, used to create an image
            with alpha by setting the alpha values to the corresponding pixel value in a mask image. </overloads>
            <summary> Creates a new instance of <STRONG>SetAlphaFromMaskCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo where the data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Drawing.Point)">
            <summary> Creates a new instance of <STRONG>SetAlphaFromMask</STRONG> specifying
            maskImage, resizeMask, mergeType and position. </summary>
            <param name="maskImage"> An 8-bit image used to generate the alpha channel. </param>
            <param name="resizeMask"> Set to true if the mask should be resized to fit the image. </param>
            <param name="mergeType"> The type of merge performed. </param>
            <param name="position"> The x,y position to place the mask image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary> Creates a new instance of <STRONG>SetAlphaFromMask</STRONG> specifying maskImage, resizeMask and mergeType. </summary>
            <param name="maskImage"> An 8-bit image used to generate the alpha channel. </param>
            <param name="resizeMask"> Set to true if the mask should be resized to fit the image. </param>
            <param name="mergeType"> The type of merge performed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor">
            <summary> Creates a new instance of <STRONG>SetAlphaFromMaskCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verifies the properties.
            </summary>
            <param name="sourceImage">The source image.</param>
            <exception cref="T:System.ArgumentNullException">MaskImage</exception>
            <exception cref="T:System.ArgumentException">MaskImage contains no image data or is disposed.;MaskImage</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.Position">
            <summary> Gets or sets the left, top position of the mask image. </summary>
            <value> The left, top position of the mask image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MaskImage">
            <summary> Gets or sets an 8-bit image used to generate the alpha channel. </summary>
            <value> An 8-bit image used to generate the alpha channel. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ResizeMask">
            <summary> Gets or sets a valid to indicate if the mask should be resized to fit the image. </summary>
            <value> Set to true if the mask should be resized to fit the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MergeType">
            <summary> Gets or sets the type of merge performed. </summary>
            <value> The type of merge performed. </value>
            <seealso> AlphaMergeType </seealso>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra
            </value>														
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand">
            <summary> <para>This command will create an alpha channel based on a numeric value.</para> </summary>
            <remarks> <para>This method will convert 1-bit, 4-bit and 8-bit grayscale images to 8-bit indexed.  24-bit images will be converted to 32-bit.</para>
            <para>This method requires a 8-bit Indexed, 16-bit or 32-bit image.  All other images will throw an exception.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.alphaValue">
            <summary> Gets or sets a value of 0 to 255 indicating the opacity to use on the alpha channel. </summary>
            <value> A value of 0 to 255 indicating the opacity to use on the alpha channel. </value>
            <exception> Thrown ifvalue is not between 0 and 255, inclusive. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.mergeType">
            <summary> Gets or sets the type of merge performed. </summary>
            <value> The type of merge performed. </value>
            <seealso> AlphaMergeType </seealso>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SetAlphaValueCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand"/>. </overloads>
            <summary> Creates a new instance of <STRONG>SetAlphaValueCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo where the data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>SetAlphaValueCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor(System.Byte,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary> Creates a new instance of <STRONG>SetAlphaValueCommand</STRONG> specifying the alpha value and merge type.
            </summary>
            <exception> Thrown if the alphaValue is less than 0 or greater than 255. </exception>
            <param name="alphaValue"> A value of 0 to 255 indicating the opacity to use on the alpha channel. </param>
            <param name="mergeType"> The type of merge performed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor">
            <summary> Creates a new instance of <STRONG>SetAlphaValueCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <exception cref="T:System.NullReferenceException">Unable to construct a destination image.</exception>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Apply the command to the given image.
            </summary>
            <param name="image">The image which will by processed by the command.</param>
            <returns>
            A new object of type <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageResults"/>.
            </returns>
            <remarks>
            The ImageResults object will always contain a valid Image property which represents the output of the
            command.  This property may be the same as the input image.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary> InternalActualCommand does the actual work of the image processing command. </summary>
            <param name="source"> The source image for processing.  This may be different from the original image. </param>
            <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
            <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AlphaValue">
            <summary> Gets or sets a value of 0 to 255 indicating the opacity to use on the alpha channel. </summary>
            <value> A value of 0 to 255 indicating the opacity to use on the alpha channel. </value>
            <exception> Thrown ifvalue is not between 0 and 255, inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.MergeType">
            <summary> Gets or sets the type of merge performed. </summary>
            <value> The type of merge performed. </value>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.AlphaMergeType"/>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand">
            <summary>
            This command will shift individual image channels.
            </summary>
            <remarks><para>This method requires a continuous tone image.  If the source image is not continuous, it will throw the 
            <see cref="T:System.ArgumentException"/></para><para>This command requires an image with at least 2 channels.  If the image does not contain at least 2
            channels, the PixelFormat will be changed to a compatible format.</para> </remarks>
            <summary> This command will shift individual image channels. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.offsetX">
            <summary> Gets or sets the number of pixels to horizontally offset the channels. </summary>
            <value> Number of pixels to horizontally offset the channels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.offsetY">
            <summary> Gets or sets the number of pixels to vertically offset the channels. </summary>
            <value> Number of pixels to vertically offset the channels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.channelsToProcess">
            <summary> Gets or sets the ChannelFlags specifying which channels to process. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a>
            specifying which channels to process. </value>
            <remarks> The default value is <B>AllChannels</B>. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.backgroundValue">
            <summary> Gets or set a channel value to use for uncovered channel areas of the image.  </summary>
            <value> A value to use for uncovered channel areas of the image. </value>
            <remarks> This value should be between 0 and 255 inclusive. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ShiftChannelsCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand"/> class, used to offset individual
            channels in an image. </overloads>
            <summary> Creates a new instance of <STRONG>ShiftChannelsCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo where the data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary> Creates a new instance of <STRONG>ShiftChannelsCommand</STRONG> specifying offsetX, offsetY and
            channelsToProcess. </summary>
            <param name="offsetX"> Number of pixels to horizontally offset the channels. </param>
            <param name="offsetY"> Number of pixels to vertically offset the channels. </param>
            <param name="channelsToProcess"> The channels you want to shift. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32)">
            <summary> Creates a new instance of <STRONG>ShiftChannelsCommand</STRONG> specifying offsetX, offsetY,
            channelsToProcess and backgroundValue. </summary>
            <exception> Thrown if the backgroundValue is less than 0 or greater than 255. </exception>
            <param name="offsetX"> Number of pixels to horizontally offset the channels. </param>
            <param name="offsetY"> Number of pixels to vertically offset the channels. </param>
            <param name="channelsToProcess"> The channels you want to shift. </param>
            <param name="backgroundValue"> A value used for uncovered areas of the image.  (0 - 255) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ShiftChannelsCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            OffsetX;The offset cannot be greater than the image or region.
            or
            OffsetY;The offset cannot be greater than the image or region.
            </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ChannelsToProcess">
            <summary> Gets or sets the ChannelFlags specifying which channels to process. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a>
            specifying which channels to process. </value>
            <remarks> The default value is <B>AllChannels</B>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetX">
            <summary> Gets or sets the number of pixels to horizontally offset the channels. </summary>
            <value> Number of pixels to horizontally offset the channels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetY">
            <summary> Gets or sets the number of pixels to vertically offset the channels. </summary>
            <value> Number of pixels to vertically offset the channels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.BackgroundValue">
            <summary> Gets or set a channel value to use for uncovered channel areas of the image.  </summary>
            <value> A value to use for uncovered channel areas of the image. </value>
            <remarks> This value should be between 0 and 255 inclusive. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand">
            <summary> Swaps one channel with another channel within the same image. </summary>
            <remarks> <para>This method requires a continuous tone image.  If the source image is not continuous, it will throw the <see cref="T:System.ArgumentException"/></para>
            <para>This command requires an image with at least 2 channels. If the image does not contain at least 2 channels, the PixelFormat will be changed to a compatible format.</para></remarks>
            <example>
<code lang="CS" title="SwapChannelsCommand (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Swap the Red and Green channels.
// Remember, the image data is stored in BGR (Blue, Green, Red) format.
SwapChannelsCommand cmd = new SwapChannelsCommand(1, 3, 2);
AtalaImage tmp = cmd.Apply(image).Image;
]]></code>

<code lang="VB" title="SwapChannelsCommandVB (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
' Swap the Red and Green channels.
' Remember, the image data is stored in BGR (Blue, Green, Red) format.
Dim cmd As SwapChannelsCommand =  New SwapChannelsCommand(1,3,2) 
Dim tmp As AtalaImage =  cmd.Apply(image).Image
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.channel1">
            <summary> Gets or sets the first channel in the image. Valid values are 1-4. </summary>
            <value> The first channel in the image. Valid values are 1-4. </value>
            <exception> Thrown if value is not between 1 and 4, inclusive. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.channel2">
            <summary> Gets or sets the second channel in the image. Valid values are 1-4. </summary>
            <value> The second channel in the image. Valid values are 1-4. </value>
            <exception> Thrown if the value is not between 1 and 4, inclusive. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.channel3">
            <summary> Gets or sets the third channel in the image. Valid values are 1-4. </summary>
            <value> The third channel in the image. Valid values are 1-4. </value>
            <exception> Thrown if the value is not between 1 and 4, inclusive. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.channel4">
            <summary> Gets or sets the fourth channel in the image. Valid values are 1-4. </summary>
            <value> The fourth channel in the image. Valid values are 1-4. </value>
            <exception> Thrown if the value is not between 1 and 4, inclusive. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SwapChannelsCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of the SwapChannelsCommand object.,<BR/>Creates a new instance of
            <STRONG>SwapChannel</STRONG> specifying channel1, channel2 and channel3. ,<BR/>Creates a new instance of
            <STRONG>SwapChannel</STRONG> specifying channel1, channel2, channel3, and channel4.,<BR/>Creates a new instance of
            <STRONG>SwapChannel</STRONG> specifying a param array of channels. </summary>
            <summary> Creates a new instance of SwapChannelsCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo where the data will be stored. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor(System.Int32[])">
            <summary> Creates a new instance of SwapChannelsCommand specifying the channels to swap. </summary>
            <exception> Thrown if the array contains less than 2 entries or if the channel value is less than 1 or greater than
            4. </exception>
            <param name="channel"> A parameter array of the channel orders.  Values must be between 1 and 4. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor">
            <summary> Creates a new instance of <STRONG>SwapChannelsCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">
            The channel values are invalid for this image.
            or
            The channel values are invalid for this image.
            or
            The channel values are invalid for this image.
            or
            The channel values are invalid for this image.
            or
            Region of interest cannot be used with 48-bit images.
            or
            The channel values are invalid for this image.
            or
            Region of interest cannot be used with 64-bit images.
            or
            The source image must be at least 16-bit.
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel1">
            <summary> Gets or sets the first channel in the image. Valid values are 1-4. </summary>
            <value> The first channel in the image. Valid values are 1-4. </value>
            <exception> Thrown if value is not between 1 and 4, inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel2">
            <summary> Gets or sets the second channel in the image. Valid values are 1-4. </summary>
            <value> The second channel in the image. Valid values are 1-4. </value>
            <exception> Thrown if the value is not between 1 and 4, inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel3">
            <summary> Gets or sets the third channel in the image. Valid values are 1-4. </summary>
            <value> The third channel in the image. Valid values are 1-4. </value>
            <exception> Thrown if the value is not between 1 and 4, inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel4">
            <summary> Gets or sets the fourth channel in the image. Valid values are 1-4. </summary>
            <value> The fourth channel in the image. Valid values are 1-4. </value>
            <exception> Thrown if the value is not between 1 and 4, inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel64bppBgra
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ColormatchedMask">
            <summary> This class is used to get a mask image matching a specified color or contiguous pixels at a specified
            point. </summary>
            <remarks> This class can be used for a "magic wand" tool. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.image">
            <summary> Gets or sets the AtalaImage to apply the colormatching to. </summary>
            <value> The AtalaImage to return apply the colormatching to. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.progress">
            <summary> Gets or sets the progress callback. </summary>
            <value> The progress callback. </value>
            <remarks> Defaults value is <EM>null</EM>. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.#ctor(Atalasoft.Imaging.AtalaImage)">
            <param name="image"> The AtalaImage to return apply the colormatching to. </param>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ColormatchedMask"/>. </summary>
            <overloads> Creates a ColormatchedMask object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Initializes a new instance of %ColormatchedMask% specifying the AtalaImage to evaluate and a progress
            callback. </summary>
            <param name="image"> The AtalaImage to return apply the colormatching to. </param>
            <param name="progress"> The progress callback. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetSurfaceColorMatchedMask(System.Drawing.Point,System.Double)">
            <summary> All contiguous pixels matching the pixel at the center point are returned as on in resulting mask.
            </summary>
            <exception> Thrown if tolerance is less than 0 or greater than 100. </exception>
            <exception> Thrown if the center point if outside the image boundary. </exception>
            <param name="center"> The point to begin the colormatch. </param>
            <param name="tolerance"> The tolerance (0 - 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetEdgeColorMatchedMask(System.Drawing.Point,System.Drawing.Color,System.Double)">
            <summary> Mask area is bounded by pixels matching the edgeColor parameter. </summary>
            <exception> Thrown if tolerance is less than 0 or greater than 100. </exception>
            <exception> Thrown if the center point if outside the image boundary. </exception>
            <param name="center"> The point to begin the colormatch. </param>
            <param name="edgeColor"> The color of the edge to find. </param>
            <param name="tolerance"> The tolerance (0 - 100) </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Image">
            <summary> Gets or sets the AtalaImage to apply the colormatching to. </summary>
            <value> The AtalaImage to return apply the colormatching to. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Progress">
            <summary> Gets or sets the progress callback. </summary>
            <value> The progress callback. </value>
            <remarks> Defaults value is <EM>null</EM>. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.CropCommand">
            <summary> Creates a new image from a rectangular section in the source image. </summary>
            <remarks> This command is equivalent to overlaying the original image onto a new image at the size and position of
            the crop rectangle. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.CropCommand.cropRect">
            <summary> <para>Gets or sets the rectangular portion of the source image to copy into a new image.</para> </summary>
            <value> The rectangular portion of the source image to copy into a new image. </value>
            <exception> Thrown if the width or height of the crop rectangle is less than or equal to 0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.CropCommand"/> specifying the crop rectangle. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.#ctor(System.Drawing.Rectangle)">
            <summary> Creates a new instance of CropCommand specifying the crop rectangle. </summary>
            <param name="cropRect"> The rectangular portion of the source image to copy into a new image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.CropCommand"/> class.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.CropCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            CropRect;The left position cannot be greater than or equal to the image width.
            or
            CropRect;The top position cannot be greater than or equal to the image height.
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.PerformActualCommand4Bit(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command4 bit.
            </summary>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <param name="imageArea">The image area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.CropCommand.CropRect">
            <summary> <para>Gets or sets the rectangular portion of the source image to copy into a new image.</para> </summary>
            <value> The rectangular portion of the source image to copy into a new image. </value>
            <exception> Thrown if the width or height of the crop rectangle is less than or equal to 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.CropCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand">
            <remarks> <para>The <STRONG>AdaptiveThresholdCommand</STRONG> can be used to cleanup a color or grayscale image when
            converting to black and white.  It results in an image that generally renders text and objects intact, while
            removing effects from color shades.</para>
            <para>Like global thresholding, adaptive thresholding is used to separate desirable foreground image
            objects from the background. This is based on the difference in pixel intensities of each region, while global
            thresholding uses a fixed threshold for all pixels and therefore works only if the intensity histogram of the input
            image contains obviously separated peaks corresponding to the desired subjects and backgrounds. Hence it cannot deal
            with images containing, for example, a strong illumination gradient. Local adaptive thresholding selects an
            individual threshold for each pixel. This allows for thresholding of an image whose global intensity histogram
            doesn't contain distinctive peaks.</para> </remarks>
            <summary> An <STRONG>ImageCommand</STRONG> used to convert a grayscale or color image into black and white using a
            weighted thresholding technique. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand._differenceThreshold">
            <summary> Gets or sets a value used for improving the thresholding results. </summary>
            <remarks> In local adaptive thresholding, an individual threshold for each pixel is based on the range of intensity
            values in its local neighborhood.  In this class, a local mean value is used as the threshold. The situation can be
            improved if the threshold employed is not the mean, but "mean - DifferenceThreshold".  The default value is 7.
            </remarks>
            <value> A value used for improving the thresholding results. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand._windowSize">
            <summary> Gets or sets the size of local window acting on each pixel to find local statistics. </summary>
            <remarks> Default value is 15. </remarks>
            <value> The size of local window acting on each pixel to find local statistics. </value>
            <exception> Thrown if value is 2. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AdaptiveThresholdCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand"/>. </overloads>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <exception cref="T:Atalasoft.Imaging.ImageProcessException">adaptive thresholding failed</exception>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>AdaptiveThresholdCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AdaptiveThresholdCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor(System.Int32)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand"/> specifying the window size.
            </summary>
            <exception> Thrown if the windowSize is less than 2. </exception>
            <param name="windowSize"> <para>The size of the examination window surround the current pixel</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor(System.Int32,System.Int32)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand"/> specifying the window size and
            difference threshold. </summary>
            <exception> Thrown if the windowSize is less than 2. </exception>
            <param name="windowSize"> <para>The size of the examination window surround the current pixel</para> </param>
            <param name="differenceThreshold"> The value used for improving the thresholding results. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            The method is called by the default implementation of Apply.  It determines if it is necessary to create a
            copy of the source image in a different pixel format and if so, determines the best new pixel format and allocates
            that image.
            </summary>
            <param name="image">The original source image passed to Apply.</param>
            <returns>
            A new image in a pixel format supported by the command or <EM>null</EM> to indicate that the original
            image is acceptable.
            </returns>
            <remarks>
              <para>The default implementation of ConstructChangedSourceImage requests that the command report its
            preferred pixel format (typically, this is the source image's pixel format, but some commands support many pixel
            formats, but work best in gray, for example), and if that is supported, returns a new image in the preferred format
            if it is different from the source image.</para>
              <para>If the pixel format is not supported and ApplyToAnyPixelFormat is set to true, the command is queried for its
            best alternate pixel format and a new image is returned in that pixel format.  If ApplyToAnyPixelFormat is set to
            false, ConstructChangedSourceImage will throw an IncompatiblePixelFormatException.</para>
              <para>If an error occurs, ConstructChangedImage should throw an exception.  Any new image constructed by
            ConstructChangedImage must be a pixel format supported by this command.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="destImage">The dest image.</param>
            <param name="imageArea">The image area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.DifferenceThreshold">
            <summary> Gets or sets a value used for improving the thresholding results. </summary>
            <remarks> In local adaptive thresholding, an individual threshold for each pixel is based on the range of intensity
            values in its local neighborhood.  In this class, a local mean value is used as the threshold. The situation can be
            improved if the threshold employed is not the mean, but "mean - DifferenceThreshold".  The default value is 7.
            </remarks>
            <value> A value used for improving the thresholding results. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.WindowSize">
            <summary> Gets or sets the size of local window acting on each pixel to find local statistics. </summary>
            <remarks> Default value is 15. </remarks>
            <value> The size of local window acting on each pixel to find local statistics. </value>
            <exception> Thrown if value is amp;lt; 2. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand">
            <summary> The <STRONG>AutoDeskewCommand </STRONG>automatically deskews a binary image using %%company%%'s patent
            pending auto-deskew algorithm. </summary>
            <remarks> <para>This command works best with images containing horizontal text.  </para>
            <para>There are a few ways to improve performance.  Decrease the <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.LimitAngle"/> and <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Precision"/> or pass in a smaller rectangular area containing the horizontally aligned text
            area. The <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Coverage"/> property can be decreased to increase performance, however it
            will result in loss accuracy.  For guaranteed accuracy, set the Coverage property to 100.</para>
            <para>The <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.SkewAngle"/> property is set to the last detected skew angle.  See 
            <see cref="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetDeskewAngle(Atalasoft.Imaging.AtalaImage)"/> to determine the skew angle without actually rotating the image.</para>
            <para>As of 6.0 AutoDeskewCommnd now additionally supports the following image formats:
            ,<BR/><see cref="F:Atalasoft.Imaging.PixelFormat.Pixel8bppGrayscale"/>, <see cref="F:Atalasoft.Imaging.PixelFormat.Pixel24bppBgr"/>, <see cref="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgr"/> and <see cref="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgra"/>.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.area">
            <summary> Gets or sets rectangular area that will be used for determining the skew angle. </summary>
            <value> The rectangular area that will be used for determining the skew angle. </value>
            <remarks> This value by default is Rectangle.Empty and will use the entire image for calculating the angle.
            </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.precision">
            <summary> Gets or sets the precision of the de-skew angle calculation. </summary>
            <value> The precision of the de-skew angle calculation. </value>
            <remarks> This value is the inverse of the smallest angle increment that it will find.  For example, a value of 1 =
            1 degree precision, 2 = 1/2 degree precision, 4 = 1/4 degree precision, etc.  The smaller the value the more time it
            takes to calculate the de-skew angle.  The default value is 2 (or 1/2 a degree). </remarks>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.limitAngle">
            <value> The maximum skew angle in degrees. </value>
            <summary> Gets or sets the maximum skew angle in degrees. </summary>
            <remarks> Decreasing this value improves performance, while increasing improves the chance that a drastically skewed
            image will be straightened.  The default value is 20 degrees. </remarks>
            <exception> Thrown when value is not between -360 and 360 or is equal to 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.cropMode">
            <summary> Gets or sets a value indicating the method of cropping the resulting de-skewed image. </summary>
            <value> A value indicating the method of cropping the resulting de-skewed image.  The default value is FullCrop.
            </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.backgroundColor">
            <value> The background color to use when de-skewing the image. </value>
            <summary> Gets or sets the background color to use when de-skewing the image. </summary>
            <remarks> The background color is only relevant when the CropMode is set to None or OriginalSize.  The default value
            is White. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.coverage">
            <summary> Represents the percentage of the image that will be randomly sampled when determining the skew angle.
            </summary>
            <value> A value representing the percent of coverage from 0 to 100. </value>
            <remarks> <para>Given the random nature of the coverage, low values result in must faster performance than 100%
            coverage with generally the same results.  A default value of 8 was derived after tests with many images.  This
            results in accurate skew angle detection with fast speed.  This property is exposed for edge cases where 8 is not
            sufficient.  When accuracy is of utmost importance at the expense of speed, set this value to 100.</para> </remarks>
            <exception> Thrown if the value is less than 0 or greater than 100. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AutoDeskewCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Create an AutoDeskewCommand that will attempt to calculate the amount of skewing in an image, then
            rotate the image to correct the skew. </overloads>
            <summary> Initializes a new instance of the AutoDeskewCommand. Initializes a
            new instance of the AutoDeskewCommand with default settings </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AutoDeskewCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Int32,System.Int32)">
            <summary> Initializes a new instance of the <STRONG>AutoDeskewCommand</STRONG> specifying the precision and limit
            angle. </summary>
            <exception> Thrown if the percision is less than 1 or if limitAngle is less than -360, greater than 360 or equal to
            0. </exception>
            <param name="precision"> The precision of the deskew angle calculation.  This value is the inverse of the degree
            precision. </param>
            <param name="limitAngle"> The maximum deskew angle in degrees. (-360 to 360 excluding 0) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Drawing.Rectangle)">
            <summary> Initializes a new instance of the <STRONG>AutoDeskewCommand</STRONG> with default settings and a
            rectangular area to process. </summary>
            <param name="area"> A rectangular area that will be used for determining the deskew angle. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary> Initializes a new instance of the <STRONG>AutoDeskewCommand</STRONG> specifying the precision, limit
            angle, and rectangular area to process. </summary>
            <exception> Thrown if the percision is less than 1 or if limitAngle is less than -360, greater than 360 or equal to
            0. </exception>
            <param name="precision"> The precision of the deskew angle calculation.  This value is the inverse of the degree
            precision. </param>
            <param name="limitAngle"> The maximum deskew angle in degrees.  (-360 to 360 excluding 0) </param>
            <param name="area"> The rectangular area that will be used for determing the deskew angle. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary> Initializes a new instance of the <STRONG>AutoDeskewCommand</STRONG> specifying the precision, limit
            angle, crop mode, background color, and rectangular area to process. </summary>
            <exception> Thrown if the percision is less than 1 or if limitAngle is less than -360, greater than 360 or equal to
            0. </exception>
            <param name="precision"> The precision of the deskew angle calculation.  This value is the inverse of the degree
            precision. </param>
            <param name="limitAngle"> The maximum deskew angle in degrees. (-360 to 360 excluding 0) </param>
            <param name="cropMode"> The method of cropping the resulting deskewed image. </param>
            <param name="backgroundColor"> The background color to use when deskewing the image. </param>
            <param name="area"> The rectangular area that will be used for determining the deskew angle. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._extractBoundary">
            <summary> Gets or sets a value which will pre-process the image by removing solid filled areas of the image.
            </summary>
            <remarks> Setting this value to false will improve performance at the expense of accuracy.  If the image is known
            not to have solid filled areas, then it's safe to set this property to false, for an approximate 50% performance
            gain.  The default value is true. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand._skewAngle">
            <summary> Gets a value indicating the last detected skew angle. </summary>
            <remarks> Query this read-only property to determine the last detected skew angle. </remarks>
            <value> A value indicating the last detected skew angle. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
            <inheritdoc cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <inheritdoc cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <inheritdoc cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand">
            <returns>null</returns>
            </inheritdoc>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ConstructImageResults">
            <inheritdoc cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand">
            <returns>AutoDeskResults with an angle of 0.0</returns>
            </inheritdoc>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <inheritdoc cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand">
            <returns>New AtalaImage that has autodeskew command applied</returns>
            </inheritdoc>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetDeskewAngle(Atalasoft.Imaging.AtalaImage)">
            <summary> <STRONG>GetDeskewAngle </STRONG>returns the skew angle of the image without changing the image at all.
            </summary>
            <returns> The skew angle (in degrees) of the image. </returns>
            <exception> Thrown if the source image is not 1 bit per pixel. </exception>
            <remarks> See the <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.SkewAngle"/> property for determining the skew angle after processing
            the image. </remarks>
            <returns>The deskew angle in degrees.</returns>
            <param name="sourceImage"> The image to calculate the skew angle from. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Precision">
            <summary> Gets or sets the precision of the de-skew angle calculation. </summary>
            <value> The precision of the de-skew angle calculation. </value>
            <remarks> This value is the inverse of the smallest angle increment that it will find.  For example, a value of 1 =
            1 degree precision, 2 = 1/2 degree precision, 4 = 1/4 degree precision, etc.  The smaller the value the more time it
            takes to calculate the de-skew angle.  The default value is 2 (or 1/2 a degree). </remarks>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.LimitAngle">
            <value> The maximum skew angle in degrees. </value>
            <summary> Gets or sets the maximum skew angle in degrees. </summary>
            <remarks> Decreasing this value improves performance, while increasing improves the chance that a drastically skewed
            image will be straightened.  The default value is 20 degrees. </remarks>
            <exception> Thrown when value is not between -360 and 360 or is equal to 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.CropMode">
            <summary> Gets or sets a value indicating the method of cropping the resulting de-skewed image. </summary>
            <value> A value indicating the method of cropping the resulting de-skewed image.  The default value is FullCrop.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.BackgroundColor">
            <value> The background color to use when de-skewing the image. </value>
            <summary> Gets or sets the background color to use when de-skewing the image. </summary>
            <remarks> The background color is only relevant when the CropMode is set to None or OriginalSize.  The default value
            is White. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Area">
            <summary> Gets or sets rectangular area that will be used for determining the skew angle. </summary>
            <value> The rectangular area that will be used for determining the skew angle. </value>
            <remarks> This value by default is Rectangle.Empty and will use the entire image for calculating the angle.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ExtractBoundary">
            <summary> Gets or sets a value which will pre-process the image by removing solid filled areas of the image.
            </summary>
            <remarks> Setting this value to false will improve performance at the expense of accuracy.  If the image is known
            not to have solid filled areas, then it's safe to set this property to false, for an approximate 50% performance
            gain.  The default value is true. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.SkewAngle">
            <summary> Gets a value indicating the last detected skew angle. </summary>
            <remarks> Query this read-only property to determine the last detected skew angle. </remarks>
            <value> A value indicating the last detected skew angle. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Coverage">
            <summary> Represents the percentage of the image that will be randomly sampled when determining the skew angle.
            </summary>
            <value> A value representing the percent of coverage from 0 to 100. </value>
            <remarks> <para>Given the random nature of the coverage, low values result in must faster performance than 100%
            coverage with generally the same results.  A default value of 8 was derived after tests with many images.  This
            results in accurate skew angle detection with fast speed.  This property is exposed for edge cases where 8 is not
            sufficient.  When accuracy is of utmost importance at the expense of speed, set this value to 100.</para> </remarks>
            <exception> Thrown if the value is less than 0 or greater than 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            <para>PixelFormat.Pixel1bppIndexed,,<BR />PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra</para>
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults">
            <summary> This class represents the results of applying the AutoDeskewCommand on an image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageResults">
            <summary>
            This class is used to contain information generated during the processing of an ImageCommand.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ImageResults._image">
            <summary> The image that was the result of processing </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ImageResults._isImageSourceImage">
            <summary> An indicator as to whether or not image is the same AtalaImage as the
            original image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor">
            <overloads> Constructs a new ImageResults object </overloads>
            <summary> Construct a new ImageResults object with default values. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor(System.Boolean)">
            <summary> Construct a new ImageResults object with the supplied values. </summary>
            <param name="isImageSourceImage"> An indicator as to whether or not image is the same AtalaImage as the
            original image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean)">
            <summary> Construct a new ImageResults object with the supplied values. </summary>
            <param name="image"> The image that was the result of processing </param>
            <param name="isImageSourceImage"> An indicator as to whether or not image is the same AtalaImage as the original
            image. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image">
            <summary> The image that was the result of processing </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage">
            <summary> An indicator as to whether or not image is the same AtalaImage as the
            original image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults._skewAngle">
            <summary> Gets the detected angle of rotation in the image. </summary>
            <value> The detected angle of rotation in the image </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.#ctor(System.Double)">
            <summary> Constructs a new <STRONG>AutoDeskewImageResults</STRONG> object. </summary>
            <param name="skewAngle"> The detected skew angle. </param>
            <overloads> Constructs a new AutoDeskewImageResults object. </overloads>
            <remarks> This class is created by calling the AutoDeskewCommand.Apply() method.  You don't need to construct one
            normally. </remarks>
            <summary> Constructs a new AutoDeskewImageResults object. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.#ctor">
            <summary> Constructs a new <STRONG>AutoDeskewImageResults</STRONG> object. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.SkewAngle">
            <summary> Gets the detected angle of rotation in the image. </summary>
            <value> The detected angle of rotation in the image </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand">
            <summary> An <STRONG>ImageCommand</STRONG> that removes solid borders from document images. </summary>
            <remarks> <para>This command can be used to remove black solid borders from the edges of images.  A <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Tolerance"/> of 0 will only work with perfect solid borders.  Use a tolerance between 0
            and 100 to account for minor noise in the border.  Set Edges is true, the image will be despeckled prior to calculating the border, only
            if the image is binary. Note that the image that's returned from <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)">Apple</see> will not be despeckled, only
            the image used in the calculation.  </para>
            <para>To calculate the border of the image, without cropping, use the <see cref="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetBorder(Atalasoft.Imaging.AtalaImage)"/>
            method. GetBorder ignores the <EM>Edges</EM> property and returns the border from all
            sides.</para></remarks>
            <example>
<code lang="CS" title="C# (C#)"><![CDATA[
BorderRemovalCommand cmd = new BorderRemovalCommand();  
BorderRemovalResults results = (BorderRemovalCommandResults)cmd.Apply(sourceImage);  
AtalaImage newImage = results.Image; 
Rectangle borderRect = results.Border; 
if (!results.IsImageSourceImage)  
  sourceImage.Dispose(); //free memory
]]></code>

<code lang="VB"><![CDATA[
Dim cmd As New BorderRemovalCommand()
Dim results As BorderRemovalResults = CType(cmd.Apply(sourceImage), BorderRemovalCommandResults)
Dim newImage As AtalaImage = results.Image
Dim borderRect As Rectangle = results.Border
If (Not results.IsImageSourceImage) Then
 sourceImage.Dispose() 'free memory
End If
]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>BorderRemovalCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand"/>. </overloads>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor">
            <summary> Creates a new instance of <STRONG>BorderRemovalCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand"/> specifying the edges to remove.
            </summary>
            <param name="edges"> Indicates which of the 4 sides are to be removed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges,System.Double)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand"/> specifying the edges to remove, and
            tolerance. </summary>
            <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
            <param name="edges"> Indicates which of the 4 sides are to be removed. </param>
            <param name="tolerance"> Indicates the tolerance of the border detection. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges,System.Double,System.Boolean)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand"/> specifying the edges to remove,
            tolerance, and despeckling. </summary>
            <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
            <param name="edges"> Indicates which of the 4 sides are to be removed. </param>
            <param name="tolerance"> Indicates the tolerance of the border detection. (0 to 100) </param>
            <param name="despeckle"> Indicates if the calculated border will be despeckled first. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand._tolerance">
            <summary> Gets or sets a value indicating the tolerance of the border detection. </summary>
            <value> A value indicating the tolerance of the border detection. </value>
            <remarks> The default value is 0.  Valid values range from 0 to 100. </remarks>
            <exception> Thrown if value is less than 0 or greater than 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand._edges">
            <summary> Gets or sets a value indicating which of the 4 sides are to be removed. </summary>
            <value> A value indicating which of the 4 sides are to be removed. </value>
            <remarks> Values may be or'ed together to account for more than one side.  Defaults to AllSides. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand._despeckle">
            <summary> Gets or sets a value indicating if the calculated border will be despeckled first. </summary>
            <remarks> Defaults to true. </remarks>
            <value> A value indicating if the calculated border will be despeckled first. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetBorder(Atalasoft.Imaging.AtalaImage)">
            <summary> Calculates the border of the image that is used in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand"/> to remove the
            borders. </summary>
            <returns> A rectangle containing the position, and size of the image with the borders removed. </returns>
            <remarks> Use this method to calculate the borders of an image, without actually removing them. </remarks>
            <exception> Thrown if the sourceImage is null (Nothing in VB). </exception>
            <param name="sourceImage"> The image to calculate the borders from. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel4bppIndexed
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Tolerance;Tolerance must be from 0 to 100.</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.ConstructImageResults">
            <summary>
            Constructs the results object for this command.
            </summary>
            <returns>
            A new object of type ImageResults representing the results for this command.
            </returns>
            <remarks>
              <para>The default implementation returns an object of type ImageResults.  If your command requires an
            object with more information, subclass ImageResults and add in the information you need.  Your command will override
            ConstructImageResults and return your new object.</para>
              <para>The object allocated here is passed to PerformActualCommand as a reference parameter, meaning the entire
            object can be changed at that point too.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Tolerance">
            <summary> Gets or sets a value indicating the tolerance of the border detection. </summary>
            <value> A value indicating the tolerance of the border detection. </value>
            <remarks> The default value is 0.  Valid values range from 0 to 100. </remarks>
            <exception> Thrown if value is less than 0 or greater than 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Edges">
            <summary> Gets or sets a value indicating which of the 4 sides are to be removed. </summary>
            <value> A value indicating which of the 4 sides are to be removed. </value>
            <remarks> Values may be or'ed together to account for more than one side.  Defaults to AllSides. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Despeckle">
            <summary> Gets or sets a value indicating if the calculated border will be despeckled first. </summary>
            <remarks> Defaults to true. </remarks>
            <value> A value indicating if the calculated border will be despeckled first. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel4bppIndexed
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults">
            <summary> This class represents the results of applying the BorderRemovalCommand on an image.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults._border">
            <summary> Gets the detected border. </summary>
            <value> The detected border. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults.#ctor">
            <remarks> This class is created by calling the BorderRemovalCommand.Apply() method.  You don't need to construct one
            normally. </remarks>
            <summary> Constructs a new BorderRemovalResults object </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults.Border">
            <summary> Gets the detected border. </summary>
            <value> The detected border. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod">
            <summary> Specifies the technique used for dithering in a <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod.FloydSteinberg">
            <summary> Use Floyd-Steinberg error diffusion </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod.Ordered">
            <summary> Use matrix-based ordered dithering </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand">
            <summary> <para>This command is used for converting color or gray images to black and white using halftoning
            techniques to simulate gray in the final image.  This command operates best on photographic images.</para>
            <para>Dithering is done using either Ordered Dithering or Floyd-Steinberg Error Diffusion dithering.</para>
            <para>With Ordered Dithering, the dithering matrix is fully replaceable and can be made to simulate custom halftone
            screens.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand._method">
            <summary> Set or get the method to be used for dithering. </summary>
            <value> The method to be used for dithering. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand._matrix">
            <summary> Gets or sets the matrix to use for ordered dithering.  The matrix must have either 4, 16, 64, or 256
            elements in it representing 2x2, 4x4, 8x8 or 16x16 matrices, respectively. </summary>
            <value> The matrix to use for ordered dithering. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand._serpentine">
            <summary> Set or get whether or not Floyd Steinberg dithering will operate in alternating left to right/right to
            left patterns or simply left to right. </summary>
            <remarks> Default value is true.  Using serpentine set to true can eliminate certain artifacting common in Floyd
            Steinberg dithering. </remarks>
            <value> Indicates whether or not Floyd Steinberg dithering will operate in alternating left to right/right to left
            patterns or simply left to right. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand._supportedPixelFormats">
            <summary> Returns the set of PixelFormats that are supported by this image command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <exception cref="T:System.OutOfMemoryException"></exception>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            dest
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor">
            <summary> Constructs a new <STRONG>DitherCommand</STRONG> to convert multi-bit images to 1 bit per pixel images
            using ordered dithering as the method. </summary>
            <remarks> The default dithering matrix will be a 16x16 matrix with evenly distributed gray levels. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod)">
            <summary> Constructs a new <STRONG>DitherCommand</STRONG> to convert multi-bit images to 1 bit per pixel images
            using the supplied method. </summary>
            <param name="method"> The method to be used for dithering. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>DitherCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard2x2">
            <summary> Returns a standard 2x2 ordered dithering matrix. </summary>
            <value> A standard 2x2 ordered dithering matrix. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard4x4">
            <summary> Returns a standard 4x4 ordered dithering matrix. </summary>
            <value> A standard 4x4 ordered dithering matrix. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard8x8">
            <summary> Returns a standard 8x8 ordered dithering matrix. </summary>
            <value> A standard 8x8 ordered dithering matrix. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard16x16">
            <summary> Returns a standard 16x16 ordered dithering matrix. </summary>
            <value> A standard 16x16 ordered dithering matrix. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.SupportedPixelFormats">
            <summary> Returns the set of PixelFormats that are supported by this image command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Method">
            <summary> Set or get the method to be used for dithering. </summary>
            <value> The method to be used for dithering. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Serpentine">
            <summary> Set or get whether or not Floyd Steinberg dithering will operate in alternating left to right/right to
            left patterns or simply left to right. </summary>
            <remarks> Default value is true.  Using serpentine set to true can eliminate certain artifacting common in Floyd
            Steinberg dithering. </remarks>
            <value> Indicates whether or not Floyd Steinberg dithering will operate in alternating left to right/right to left
            patterns or simply left to right. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Matrix">
            <summary> Gets or sets the matrix to use for ordered dithering.  The matrix must have either 4, 16, 64, or 256
            elements in it representing 2x2, 4x4, 8x8 or 16x16 matrices, respectively. </summary>
            <value> The matrix to use for ordered dithering. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand">
            <summary> The <STRONG>DocumentDespeckleCommand </STRONG>is useful for removing small isolated features in a bitonal
            image without eroding solid features.  The most common use is as a despeckle filter for document images. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>DocumentDespeckleCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Initializes a new instance of <STRONG>DocumentDespeckleCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>DocumentDespeckleCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.#ctor">
            <summary> Creates a new instance of <STRONG>DocumentDespeckleCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.VerifySource(Atalasoft.Imaging.AtalaImage)">
            <summary> Call to verify the source image provided to <see cref="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"/>.
            </summary>
            <param name="source"> The source image for processing.  This may be different from the original image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.VerifyDest(Atalasoft.Imaging.AtalaImage)">
            <summary> Called to verify the dest provided to <see cref="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"/>.
            </summary>
            <exception> Thrown if the image is null (Nothing in VB). </exception>
            <param name="dest"> The destination image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary> Does the actual work of the image processing command. </summary>
            <returns> Null (Nothing in VB). </returns>
            <param name="source"> The source image for processing.  This may be different from the original image. </param>
            <param name="dest"> The destination image. </param>
            <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand">
            <summary> Perform a hit-or-miss transformation on a binary image. </summary>
            <remarks> <para>Hit or Miss is a basic tool for finding geometric shapes within an image.  The masks used determine
            the shapes that are detected.</para>
            <para>The foreground mask operates on foreground features and the background mask on background features.  Together
            they detect foreground-background transitions in the input image.</para>
            <para>The two masks used are normally the same size and <STRONG>must</STRONG> contain mutually-exclusive elements:
            if a mask position in A contains a 1, the corresponding position in B must contain a 0.</para>
            <para>For example, these masks will find vertical edges on the left sides of the foreground image.</para>
            <para><U> mask A:   mask B:</U>,<BR/>   0 0 0       0 0 0 ,<BR/>   0 1 1       1 0 0,<BR/>   0 0 0       0 0
            0</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of <c>DocumentHitOrMissCommand</c> from serialization information.</summary>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary> Creates a new instance of <c>DocumentHitOrMissCommand</c> specifying the foreground and
            background masks. </summary>
            <param name="foregroundMask"> A matrix of integer values to act as the foreground mask. </param>
            <param name="backgroundMask"> A matrix of integer values to act as the background mask. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the masks have no rows or if the number of columns/rows do not match. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor">
            <summary> Creates a new instance of <c>DocumentHitOrMissCommand</c>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <inheritdoc />
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <inheritdoc />
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.ForegroundMask">
            <summary> Gets or sets a matrix of integer values to act as the foreground mask. </summary>
            <value> A matrix of integer values to act as the foreground mask. </value>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if value matrix is not N x N. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.BackgroundMask">
            <value> A matrix of integer values to act as the background mask. </value>
            <summary> Gets or sets a matrix of integer values to act as the background mask. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if value matrix is not N x N. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand">
            <summary> Applies a median filter to a binary image. </summary>
            <remarks> A median filter will smooth out the image and remove dots and noise.  This makes a good despeckle filter
            for a binary image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <c>DocumentMedianCommand</c> from serialization information.</summary>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor">
            <summary>
            Creates a new instance of <c>DocumentMedianCommand</c>.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor(System.Int32)">
            <summary> Creates a new instance of <c>DocumentMedianCommand</c> specifying filterSize. </summary>
            <param name="filterSize"> The size of the filter to use for this command. (3, 5, 7, etc) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <inheritdoc />
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <inheritdoc />
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <inheritdoc />
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.FilterSize">
            <value> The size of the filter to use for this command. </value>
            <summary> Gets or sets the size of the filter to use for this command. </summary>
            <remarks> Should be an odd positive value.  The default value is 3. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod">
            <summary> Thresholding Method. </summary>
            <remarks> Used in <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger"/>. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod.Simple">
            <summary> Simple Thresholding </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod.Global">
            <summary> Global Thresholding </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod.Adaptive">
            <summary> Adaptive Thresholding </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger">
            <summary> This <see cref="T:Atalasoft.Imaging.PixelFormatChanger"/> is suited for document images and can be set to <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormatChanger"/>. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatChanger">
            <summary> This is an abstract class that defines how an image should be changed from one pixel format to another.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChanger.ChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary> Allocate a new AtalaImage based on the sourceImage, using the requested pixel format. </summary>
            <returns> A new AtalaImage of the requested PixelFormat. </returns>
            <remarks> If targetPixelFormat is the same as the PixelFormat of sourceImage, this method will throw an
            IncompatiblePixelFormat exception. </remarks>
            <param name="sourceImage"> The image to be converted to a new format. </param>
            <param name="targetPixelFormat"> The requested PixelFormat </param>
            <param name="destProfile"> An optional color profile to use for the conversion. </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChanger.LowLevelChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>
            Lows level implementatin to change pixel format.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="targetPixelFormat">The target pixel format.</param>
            <param name="destProfile">The dest profile.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.#ctor(Atalasoft.Imaging.PixelFormatChanger)">
            <summary> Creates a new instance of <STRONG>DocumentPixelFormatChanger</STRONG>. </summary>
            <exception> Thrown if the basePixelChanger is null (Nothing in VB). </exception>
            <exception> Thrown if the basePixelChanger is a DocumentPixelFormatChanger. </exception>
            <param name="basePixelChanger"> The base <see cref="T:Atalasoft.Imaging.PixelFormatChanger"/> that will be used when the target pixel
            format is not PixelFormat.Pixel1bppIndexed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.LowLevelChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>
            Lows the level change pixel format.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="targetPixelFormat">The target pixel format.</param>
            <param name="destProfile">The dest profile.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">command;Internal error making getting threshold command.</exception>
            <exception cref="T:System.FormatException">Internal error: threshold command did not return a 1bpp image.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.GetThresholdCommand">
            <summary> Returns the threshold command used based on the value of <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.ThresholdMethod"/>. </summary>
            <returns> The threshold command to use. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.SimpleThresholdCommand">
            <summary> Gets the <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.SimpleThresholdCommand"/> that used by the
            <STRONG>DocumentPixelFormatChanger</STRONG>. </summary>
            <value> The <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.SimpleThresholdCommand"/> that used by the <STRONG>DocumentPixelFormatChanger</STRONG>.
            </value>
            <remarks> This command is used when <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.ThresholdMethod"/> is set to
            <STRONG>Simple</STRONG>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.AdaptiveThresholdCommand">
            <summary> Gets the <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.AdaptiveThresholdCommand"/> used by the <STRONG>DocumentPixelFormatChanger</STRONG>.
            </summary>
            <value> The <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.AdaptiveThresholdCommand"/> used by the <STRONG>DocumentPixelFormatChanger</STRONG>. </value>
            <remarks> This command is used when <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.ThresholdMethod"/> is set to
            <STRONG>Adaptive</STRONG>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.GlobalThresholdCommand">
            <summary> Gets the <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.GlobalThresholdCommand"/> used by the <STRONG>DocumentPixelFormatChanger</STRONG>.
            </summary>
            <value> The <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.GlobalThresholdCommand"/> used by the <STRONG>DocumentPixelFormatChanger</STRONG>. </value>
            <remarks> This command is used when <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.ThresholdMethod"/> is set to
            <STRONG>Global</STRONG>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.ThresholdMethod">
            <summary> Gets or sets the threshold method to use when converting to 1-bit images. </summary>
            <value> The threshold method to use when converting to 1-bit images. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.BasePixelChanger">
            <summary> Gets the base <see cref="T:Atalasoft.Imaging.PixelFormatChanger"/> passed into the <STRONG>DocumentPixelChanger</STRONG>
            constructor. </summary>
            <value> The base <see cref="T:Atalasoft.Imaging.PixelFormatChanger"/> passed into the <STRONG>DocumentPixelChanger</STRONG> constructor.
            </value>
            <remarks> This <see cref="T:Atalasoft.Imaging.PixelFormatChanger"/> will be used when the target pixel format is not 1-bit. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand">
            <summary>
            Apply morphological thinning to a 1-bit image.
            </summary>
            <remarks> <para>This will reduce the geometric size of an image, leaving only a skeletonized frame behind.</para>
            <para>This function requires two sets of masks.  The foreground masks represents foreground matching masks and the
            background masks should be the compliments of the foreground masks. (swap ones and zeros).</para>
            <para>A typical set of foreground masks is:</para>
            <para>   0 0 0   1 0 0   1 1 0   1 1 1   1 1 1   1 1 1   0 1 1   0 0 1,<BR/>   1 1 1   1 1 0   1 1 0   1 1 0   1 1 1
            0 1 1   0 1 1   0 1 1,<BR/>   1 1 1   1 1 1   1 1 0   1 0 0   0 0 0   0 0 1   0 1 1   1 1 1</para>
            <para>The background masks are compliments of these (1 and 0 reversed).</para>
            <para>Note that the content of each mask is the preceding mask, rotated 45 deg.</para>
            <para>The process works by applying each of these masks in pairs (A[x], B[x]) for all pairs, until MaxIterations has
            been reached or until there is no change in the image. This can be a long process.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <c>DocumentThinningCommand</c> from serialization information. </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command.   </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor">
            <summary>
            Creates a new instance of <c>DocumentThinningCommand</c>.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[],Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <summary> Creates a new instance of <c>DocumentThinningCommand</c> specifying foregroundMask and
            backgroundMask. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if either mask is an empty array 
            of if the number of columns does not equal the number of rows. </exception>
            <param name="foregroundMask"> A matrix array of integer values to act as the foreground mask. </param>
            <param name="backgroundMask"> A matrix array of integer values to act as the background mask. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetForegroundMask">
            <summary> Returns the foreground mask. </summary>
            <returns> A <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix"/> object containing the mask values. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetForegroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <returns> Sets the foreground mask to use. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if value is an empty array or value matrix is not of from N x N. </exception>
            <param name="mask"> A <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix"/> object containing the mask values. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetBackgroundMask">
            <summary> Returns the background mask. </summary>
            <returns> A <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix"/> object containing the mask values. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetBackgroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <returns> Sets the background mask to use. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if value is an empty array or value matrix is not of form N x N. </exception>
            <param name="mask"> A <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix"/> object containing the mask values. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <inheritdoc />
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <inheritdoc />
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.MaxIterations">
            <summary> Gets or sets the maximum number of iterations to use when processing the image. </summary>
            <value> The maximum number of iterations to use when processing the image. </value>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the value is less than 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand">
            <summary> Converts a multi-bit image (color or grayscale) to a single bit black and white image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand._differenceThreshold">
            <summary> Gets or sets a value used to improving the thresholding results. </summary>
            <remarks> In local adaptive thresholding, an individual threshold for each pixel is based on the range of intensity
            values in its local neighborhood.  In this class, a local mean value is used as the threshold. The situation can be
            improved if the threshold employed is not the mean, but "mean - DifferenceThreshold".  The default value is 7.
            </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand._windowSize">
            <summary> Gets or sets the size of local window acting on each pixel to find local statistics. </summary>
            <value> The size of local window acting on each pixel to find local statistics.  Must be greater than 1. </value>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand._blackGrouping">
            <summary> A percentile indication of how tightly grouped black pixels need to be. </summary>
            <value> A value from 0 to 1.  Default is 0.25.  0.4 is roughly equivalent to the AdaptiveThresholding command
            </value>
            <exception> Thrown if the value is less than 0 or greater than 1. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>DynamicThresholdCommand</STRONG> from serialization information.</summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Constructs a new DynamicThresholdCommand object </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor">
            <summary> Constructs a new <STRONG>DynamicThresholdCommand</STRONG> object </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor(System.Int32)">
            <summary> Constructs a new <STRONG>DynamicThresholdCommand</STRONG> object </summary>
            <exception> Thrown if the windowSize is less than 1. </exception>
            <param name="windowSize"> <para>The size of the examination window surround the current pixel.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor(System.Int32,System.Int32,System.Double)">
            <exception> Thrown if the windowSize is less than 1 or if blackGrouping is less than 0 or greater than 1.
            </exception>
            <summary> Creates a new instance of <STRONG>DynamicThresholdCommand</STRONG> specifying the window size, difference
            threshold and black grouping. </summary>
            <param name="windowSize"> <para>The size of the examination window surround the current pixel</para> </param>
            <param name="differenceThreshold"> Value used to improving the thresholding results. </param>
            <param name="blackGrouping"> A percentile indication of how tightly grouped black pixels need to be.  Default value
            is 0.25. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            The method is called by the default implementation of Apply.  It determines if it is necessary to create a
            copy of the source image in a different pixel format and if so, determines the best new pixel format and allocates
            that image.
            </summary>
            <param name="image">The original source image passed to Apply.</param>
            <returns>
            A new image in a pixel format supported by the command or <EM>null</EM> to indicate that the original
            image is acceptable.
            </returns>
            <remarks>
              <para>The default implementation of ConstructChangedSourceImage requests that the command report its
            preferred pixel format (typically, this is the source image's pixel format, but some commands support many pixel
            formats, but work best in gray, for example), and if that is supported, returns a new image in the preferred format
            if it is different from the source image.</para>
              <para>If the pixel format is not supported and ApplyToAnyPixelFormat is set to true, the command is queried for its
            best alternate pixel format and a new image is returned in that pixel format.  If ApplyToAnyPixelFormat is set to
            false, ConstructChangedSourceImage will throw an IncompatiblePixelFormatException.</para>
              <para>If an error occurs, ConstructChangedImage should throw an exception.  Any new image constructed by
            ConstructChangedImage must be a pixel format supported by this command.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="destImage">The dest image.</param>
            <param name="imageArea">The image area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <exception cref="T:Atalasoft.Imaging.ImageProcessException">dynamic thresholding failed</exception>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>DynamicThresholdCommand</STRONG>. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.DifferenceThreshold">
            <summary> Gets or sets a value used to improving the thresholding results. </summary>
            <remarks> In local adaptive thresholding, an individual threshold for each pixel is based on the range of intensity
            values in its local neighborhood.  In this class, a local mean value is used as the threshold. The situation can be
            improved if the threshold employed is not the mean, but "mean - DifferenceThreshold".  The default value is 7.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.WindowSize">
            <summary> Gets or sets the size of local window acting on each pixel to find local statistics. </summary>
            <value> The size of local window acting on each pixel to find local statistics.  Must be greater than 1. </value>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.BlackGrouping">
            <summary> A percentile indication of how tightly grouped black pixels need to be. </summary>
            <value> A value from 0 to 1.  Default is 0.25.  0.4 is roughly equivalent to the AdaptiveThresholding command
            </value>
            <exception> Thrown if the value is less than 0 or greater than 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode">
            <summary> The crop mode to use in the AutoDeskewCommand. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.None">
            <summary> <para>Do not crop the deskewed image.  The resulting image will be larger then the source image.</para>
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.FullCrop">
            <summary> Crop all of the excess rotated area.  The resulting image will be smaller then the source image.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.OriginalSize">
            <summary> Crop the deskewed image to the original size. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode">
            <summary> The type of morphological filter to use in the MorphoDocumentCommand. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Dilation">
            <summary> <para>Used to smooth small dark regions tending to enhance black features in the image.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Erosion">
            <summary> <para>Used to smooth small light regions tending to reduce black features in the image.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Open">
            <summary> The dilation of the erosion of the image used to reduce small black regions within the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Close">
            <summary> The erosion of the dilation of the image used to reduce small white regions within the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.BoundaryExtraction">
            <summary> Perform a boundary detection/extraction on a binary image.  This will generate an outline of the
            foreground features of the input image </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod">
            <summary> Specifies the resampling method to apply using the ResampleDocumentCommand. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.BiLinear">
            <summary> <para>Uses bi-linear resampling.  Yields good results when enlarging images, and fairly fast.</para>
            <para>Not"e:  This was previously incorrectly named NearestNeighbor.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.ScaleToGray">
            <summary> Converts the 1-bit binary image to grayscale as it resizes which retains the visual detail of the image.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.AreaAverage">
            <summary> Performs an area average of the binary image with a specified "cut-off" factor that will favor black or
            white pixels.  Valid for reductions only. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.EnlargeFast">
            <summary> Performs a quick pixel mapping when enlarging speed is more important than quality. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges">
            <summary> Specifies the edges to remove when using BorderRemovalCommand. </summary>
            <remarks> Values can be or'ed together. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Left">
            <summary> The left edge of the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Right">
            <summary> The right edge of the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Top">
            <summary> The top edge of the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Bottom">
            <summary> The bottom edge of the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Vertical">
            <summary> The left and right edges of the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Horizontal">
            <summary> The top and bottom edges of the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.AllSides">
            <summary> The left, right, top, and bottom edges of the image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand">
            <remarks> Global thresholding is the simplest of all thresholding techniques.  It will partition the image histogram
            by using a single global threshold. Segmentation is then accomplished by scanning the image pixel by pixel and
            labelling each pixel as object or background. The success of this method depends entirely on how well the histogram
            can be partitioned. </remarks>
            <summary> An <STRONG>ImageCommand</STRONG> used to convert a grayscale or color image into black and white using a
            global thresholding technique. </summary>
            <example>
<code lang="CS" title="CS (C#)"><![CDATA[
AtalaImage image = new AtalaImage(....);
GlobalThresholdCommand gtm = new GlobalThresholdCommand(); 
AtalaImage segmentedImage = gtm.Appy(image).Image;
image.Dispose();
]]></code>

<code lang="VB"><![CDATA[
Dim image As AtalaImage = New AtalaImage(....)
Dim gtm As GlobalThresholdCommand New GlobalThresholdCommand()
Dim segmentedImage As AtalaImage = gtm.Appy(image).Image
image.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand._errorLevel">
            <summary>
            pre-defined parameter of tolerance level for continuing iteration
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand._initThreshold">
            <summary> Gets or sets the initial threshold value. </summary>
            <value> The initial threshold value. </value>
            <remarks> When there is reason to believe that the background and object occupy comparable areas in the image, a
            good initial value for InitThreshold is the average gray level of the image. </remarks>
            <exception> Thrown if value is  not between 0 and 255 inclusive. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>GlobalThresholdCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand"/>. </overloads>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor">
            <summary> Creates a new instance of <STRONG>GlobalThresholdCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor(System.Int32)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand"/> specifying the initial threshold value.
            </summary>
            <exception> Thrown if the initThreshold is less than 0 or greater than 255. </exception>
            <param name="initThreshold"> The initial threshold value. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.InitThreshold">
            <summary> Gets or sets the initial threshold value. </summary>
            <value> The initial threshold value. </value>
            <remarks> When there is reason to believe that the background and object occupy comparable areas in the image, a
            good initial value for InitThreshold is the average gray level of the image. </remarks>
            <exception> Thrown if value is  not between 0 and 255 inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand">
            <summary> This class will perform a mathematical morphological operation to a binary image. </summary>
            <remarks> <para>Morphology is the study of form and structure. In image processing, it encompasses a set of
            techniques that merge traditional image processing with set theory from mathematics.</para></remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <c>MorphoDocumentCommand</c> from serialization information.</summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor">
            <summary> Creates a new instance of <c>MorphoDocumentCommand</c>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode)">
            <summary> Create a new instance of <c>MorphoDocumentCommand</c> specifying mode. </summary>
            <param name="mode"> The type of morphological filter to perform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary> Create a new instance of <c>MorphoDocumentCommand</c> specifying mode and mask. </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the number of rows and columns in mask is not equal, or is even. </exception>
            <param name="mode"> The type of morphological filter to perform. </param>
            <param name="mask"> A matrix of integers controlling the behavior and depth of the filter. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <inheritdoc />
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <inheritdoc />
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mode">
            <summary> Gets or set the type of morphological filter to perform. </summary>
            <value> The type of morphological filter to perform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mask">
            <summary> Gets or sets a matrix of integers controlling the behavior and depth of the filter. </summary>
            <value> A matrix of integers controlling the behavior and depth of the filter. </value>
            <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if number of rows and cols is not equal, or is even. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.NamespaceDoc">
            <summary> 
            Contains classes that are designed to be used with 1-bit document (binary) images.   
            These classes are enabled in the professional edition. 
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand">
            <summary>
            Overlay an image using an alpha mask.
            </summary>
            <summary> Overlay an image using an alpha mask. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.topImage">
            <value> The top 1-bit image to overlay. </value>
            <summary> Gets or sets the top 1-bit image to overlay. </summary>
            <exception> Thrown if image is not 1 bit black and white. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.position">
            <summary> Gets or sets the position of the top image on the bottom image. </summary>
            <value> The position of the top image on the bottom image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.mask">
            <summary> Gets or sets the 1-bit image indicating the transparent and opaque regions of the overlay. </summary>
            <value> The 1-bit image indicating the transparent and opaque regions of the overlay. </value>
            <exception> Thrown if the image is not 1 bit black and white. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>OverlayMaskedDocumentCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of OverlayMaskedDocumentCommand. Creates a new instance of
            OverlayMaskedDocumentCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object that will be filled with command information. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary> Creates a new instance of <STRONG>OverlayMaskedDocumentCommand</STRONG> specifying topImage, mask and
            position. </summary>
            <exception> Thrown if the topImage or mask is not a 1-bit image. </exception>
            <param name="topImage"> The top binary image to overlay. </param>
            <param name="mask"> A binary image indicating the transparent and opaque regions of the overlay. </param>
            <param name="position"> The position of the top image on the bottom image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new instance of <STRONG>OverlayMaskedDocumentCommand</STRONG> specifying topImage and mask.
            </summary>
            <exception> Thrown if the topImage or mask is not a 1-bit image. </exception>
            <param name="topImage"> The top binary image to overlay. </param>
            <param name="mask"> A binary image indicating the transparent and opaque regions of the overlay. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor">
            <summary> Creates a new instance of <STRONG>OverlayMaskedDocumentCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">alphaMask must be the same size as the top image.</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="bottomImage">The bottom image.</param>
            <param name="dest">The dest.</param>
            <param name="imageArea">The image area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.InPlaceProcessing">
            <summary> Gets a value indicating if the image is processed in place instead of generating a new image. </summary>
            <value> A value indicating if the image is processed in place instead of generating a new image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.TopImage">
            <value> The top 1-bit image to overlay. </value>
            <summary> Gets or sets the top 1-bit image to overlay. </summary>
            <exception> Thrown if image is not 1 bit black and white. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Position">
            <summary> Gets or sets the position of the top image on the bottom image. </summary>
            <value> The position of the top image on the bottom image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Mask">
            <summary> Gets or sets the 1-bit image indicating the transparent and opaque regions of the overlay. </summary>
            <value> The 1-bit image indicating the transparent and opaque regions of the overlay. </value>
            <exception> Thrown if the image is not 1 bit black and white. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand">
            <summary> Resamples a binary image. </summary>
            <remarks> This command can be used to efficiently perform a "scale to gray" resample on a document image as well as
            "favor to black" using the AreaAverage method and specifying the cut-off value. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.sourceRect">
            <summary> Gets or sets the rectangular region of the source image which will be resized. </summary>
            <value> The rectangular region of the source image which will be resized. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.destSize">
            <summary> Gets or sets the final size of the image. </summary>
            <value> The final size of the image. </value>
            <exception> Thrown if the height or width is >1. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.documentMethod">
            <summary> Gets or sets the 1-bit specialized resampling method to apply. </summary>
            <value> The 1-bit specialized resampling method to apply. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.scaleToGrayMethod">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod"/> to apply when the DocumentMethod is ScaleToGray. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod"/> to apply when the DocumentMethod is ScaleToGray. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.cutOff">
            <summary> Gets or sets the grayscale value which is the cutoff value for a black pixel when using AreaAverage.
            </summary>
            <value> The grayscale value which is the cutoff value for a black pixel when using AreaAverage. </value>
            <exception> Thrown if value is amp;lt; 0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information for the command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>ResampleDocumentCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod,System.Int32)">
            <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG> specifying sourceRect, destSize,
            documentMethod and cutOff. </summary>
            <exception> Thrown if destSize width or height is less than 1, or if cutOff is less than 0. </exception>
            <param name="sourceRect"> The rectangular region of the source image which will be resized. </param>
            <param name="destSize"> The final size of the image. </param>
            <param name="documentMethod"> The 1-bit specialized resampling method to apply. </param>
            <param name="cutOff"> The grayscale value which is the cutoff value for a black pixel when using AreaAverage.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod)">
            <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG> specifying sourceRect, destSize and
            documentMethod. </summary>
            <exception> Thrown if destSize width or height is less than 1. </exception>
            <param name="sourceRect"> The rectangular region of the source image which will be resized. </param>
            <param name="destSize"> The final size of the image. </param>
            <param name="documentMethod"> The 1-bit specialized resampling method to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG> specifying sourceRect, destSize and
            scaleToGrayMethod. </summary>
            <exception> Thrown if destSize width or height is less than 1. </exception>
            <param name="sourceRect"> The rectangular region of the source image which will be resized. </param>
            <param name="destSize"> The final size of the image. </param>
            <param name="scaleToGrayMethod"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod"/> to apply when the ResampleDocumentMethod is ScaleToGray.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">
            You must provide a destination size.;destSize
            or
            Cannot perform AreaAverage resize method when increasing the size of the image,\nuse BiLinear or the scale to gray default instead.
            or
            Cannot perform EnlargeFast resize method when decreasing the size of the image,\nuse BiLinear, AreaAverage, or ScaleToGray instead.
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.SourceRect">
            <summary> Gets or sets the rectangular region of the source image which will be resized. </summary>
            <value> The rectangular region of the source image which will be resized. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DestSize">
            <summary> Gets or sets the final size of the image. </summary>
            <value> The final size of the image. </value>
            <exception> Thrown if the height or width is amp;lt; 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DocumentMethod">
            <summary> Gets or sets the 1-bit specialized resampling method to apply. </summary>
            <value> The 1-bit specialized resampling method to apply. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ScaleToGrayMethod">
            <summary> Gets or sets the %ResampleMethod% to apply when the DocumentMethod is ScaleToGray. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod"/> to apply when the DocumentMethod is ScaleToGray. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.CutOff">
            <summary> Gets or sets the grayscale value which is the cutoff value for a black pixel when using AreaAverage.
            </summary>
            <value> The grayscale value which is the cutoff value for a black pixel when using AreaAverage. </value>
            <exception> Thrown if value is &lt; 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel1bppIndexed </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand">
            <summary> This command converts a continuous RGB or grayscale image to a 1-bit black and white image, given a
            threshold value. </summary>
            <remarks> <STRONG>SimpleThresholdCommand</STRONG> can result in considerably better performance over the <see cref="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat)"/> method in <see cref="T:Atalasoft.Imaging.AtalaImage"/> or ApplyPaletteCommand
            when converting color or grayscale images to black and white.  however the quality of the conversion can vary, and
            offers no dithering. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>SimpleThresholdCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.#ctor">
            <summary> Creates a new instance of <STRONG>SimpleThresholdCommand</STRONG>. </summary>
            <overloads> Creates a new instance of <STRONG>SimpleThresholdCommand</STRONG>. </overloads>
            <summary> Creates a new instance of <STRONG>SimpleThresholdCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.#ctor(System.Int32)">
            <summary> Creates a new instance of <STRONG>SimpleThresholdCommand</STRONG> indicating the threshold value.
            </summary>
            <exception> Thrown if inputThreshold is not between 0 and 255 inclusive. </exception>
            <param name="inputThreshold"> The threshold value. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.InputThreshold">
            <summary> Gets or sets the threshold value. </summary>
            <remarks> This is the value from 0 - 255 of which any pixel that with a brightness greater then the value will be
            converted to white, and any pixel with a brightness less than this value will be converted to black.  Default value
            is 127. </remarks>
            <value> The threshold value. </value>
            <exception> Thrown if value is not between 0 and 255 inclusive. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand">
            <summary> <para>Adjusts the tint of an image by specifying a value.</para> </summary>
            <remarks> This method requires an RGB or RGBA image. It will throw the <see cref="T:System.ArgumentException"/> if it is not RGB or RGBA</remarks>
            <seealso> MosaicCommand Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.tint">
            <summary> Gets or sets a value from -180 to +180.  Positive values enhance green, negative values enhance red.
            </summary>
            <value> A value from -180 to +180.  Positive values enhance green, negative values enhance red. </value>
            <exception> Thrown if value is not between -180 and 180. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AdjustTintCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for the information. </param>
            <summary> Creates a new instance of AdjustTintCommand specifying tint.
            Creates a new instance of AdjustTintCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object data will be filled into. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.Clone">
            <summary> Creates a copy of the command. </summary>
            <returns> A copy of the <STRONG>AdjustTintCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor(System.Int32)">
            <summary> Creates a new instance of AdjustTintCommand specifying the tint value. </summary>
            <param name="tint"> A value from -180 to +180.  Positive values enhance green, negative values enhance red. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AdjustTintCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> <para>PixelFormat.Pixel24bppBgr, ,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra</para>
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by Apply may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.Tint">
            <summary> Gets or sets a value from -180 to +180.  Positive values enhance green, negative values enhance red.
            </summary>
            <value> A value from -180 to +180.  Positive values enhance green, negative values enhance red. </value>
            <exception> Thrown if value is not between -180 and 180. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> <para>PixelFormat.Pixel24bppBgr, ,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra</para>
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand">
            <summary> Automatically corrects the color and contrast of an image.  A combination of <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand"/> and <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand._clip">
            <summary> Gets or sets the percentage of pixels to ignore when calculating the white and black points. </summary>
            <value> The percentage of pixels to ignore when calculating the white and black points.  Defaults to 0.1. </value>
            <exception> Thrown if value is not greater than 0.0 and 100.0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of AutoColorCommand from serialization information. </summary>
            <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of AutoColorCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object data will be filled into. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AutoColorCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor(System.Double)">
            <summary> Creates a new instance of AutoColorCommand specifying the clip amount. </summary>
            <exception> Thrown if the clip is less than 0 or greater than 100. </exception>
            <param name="clip"> The percentage of pixels to ignore when calculating the white and black points. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr, ,<BR/>PixelFormat.Pixel32bppBgr, ,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.ImplementMe">
            <summary>
            Future use.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.InPlaceProcessing">
            <summary>
            Indicates whether or not the command will operate on the source image alone.
            </summary>
            <value>
            Always returns true.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.Clip">
            <summary> Gets or sets the percentage of pixels to ignore when calculating the white and black points. </summary>
            <value> The percentage of pixels to ignore when calculating the white and black points.  Defaults to 0.1. </value>
            <exception> Thrown if value is not greater than 0.0 and 100.0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr, ,<BR/>PixelFormat.Pixel32bppBgr, ,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand">
            <remarks>Similar to auto levels, but it doesn't not introduce color casts.</remarks>
            <summary> Adjusts the overall contrast of an image automatically. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand._outputRangeLow">
            <summary> Gets or sets the low pixel value to stretch the histogram to. </summary>
            <value> The low pixel value to stretch the histogram to. </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand._outputRangeHigh">
            <summary> Gets or sets the high pixel value to stretch the histogram to. </summary>
            <value> The high pixel value to stretch the histogram to. </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand._gamma">
            <summary> Gets or sets the gamma adjustment to apply when running the filter. </summary>
            <value> The gamma adjustment to apply when running the filter. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand._clip">
            <summary> Gets or sets the percentage of pixels to ignore when calculating the white and black points. </summary>
            <value> The percentage of pixels to ignore when calculating the white and black points.  Defaults to 0.1. </value>
            <exception> Thrown if value is not between 0.0 and 100.0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of AutoContrastCommand from serialization information. </summary>
            <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of AutoConstrastCommand. </overloads>
            <summary> Creates a new instance of AutoConstrastCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo object data will be filled into. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AutoContrastCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of AutoContrastCommand specifying the output range. </summary>
            <exception> Thrown if the arguments are less than 0 or greater than 255. </exception>
            <param name="outputRangeLow"> The low pixel value to stretch the histogram to. (0 to 255) </param>
            <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. (0 to 255) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Int32,System.Int32,System.Double)">
            <summary> Creates a new instance of AutoContrastCommand specifying the output range and gamma. </summary>
            <exception> Thrown if the outputRangeLow or outputRangeHigh value is less than 0 or greater than 255. </exception>
            <param name="outputRangeLow"> The low pixel value to stretch the histogram to. (0 to 255) </param>
            <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. (0 to 255) </param>
            <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary> Creates a new instance of AutoContrastCommand specifying the output range, gamma and clip values.
            </summary>
            <exception> Thrown if the outputRangeLow or outputRangeHigh is less than 0 or greater than 255, or if the clip value
            is less than 0 or greater than 100. </exception>
            <param name="outputRangeLow"> The low pixel value to stretch the histogram to. (0 to 255) </param>
            <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. (0 to 255) </param>
            <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
            <param name="clip"> The percentage of pixels to ignore when calculating the white and black points. (0 to 100)
            </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr, ,<BR/>PixelFormat.Pixel8bppGrayscale, ,<BR/>PixelFormat.Pixel32bppBgr,
            ,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.ImplementMe">
            <summary>
            Placeholder for future use.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verifies the properties.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.InPlaceProcessing">
            <summary>
            Indicates whether or not the command will operate on the source image alone.
            </summary>
            <value>
            Always returns true.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.OutputRangeLow">
            <summary> Gets or sets the low pixel value to stretch the histogram to. </summary>
            <value> The low pixel value to stretch the histogram to. </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.OutputRangeHigh">
            <summary> Gets or sets the high pixel value to stretch the histogram to. </summary>
            <value> The high pixel value to stretch the histogram to. </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Clip">
            <summary> Gets or sets the percentage of pixels to ignore when calculating the white and black points. </summary>
            <value> The percentage of pixels to ignore when calculating the white and black points.  Defaults to 0.1. </value>
            <exception> Thrown if value is not between 0.0 and 100.0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Gamma">
            <summary> Gets or sets the gamma adjustment to apply when running the filter. </summary>
            <value> The gamma adjustment to apply when running the filter. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr, ,<BR/>PixelFormat.Pixel8bppGrayscale, ,<BR/>PixelFormat.Pixel32bppBgr,
            ,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand">
            <summary> Enhances the contrast of an image by automatically defining the light and dark pixels, then redistributing
            the histogram proportionately. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand._outputRangeLow">
            <summary> Gets or sets the low pixel value to stretch the histogram to. </summary>
            <value> The low pixel value to stretch the histogram to. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand._outputRangeHigh">
            <summary> Gets or sets the high pixel value to stretch the histogram to. </summary>
            <value> The high pixel value to stretch the histogram to. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand._gamma">
            <summary> Gets or sets the gamma adjustment to apply when running the filter. </summary>
            <value> The gamma adjustment to apply when running the filter. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand._clip">
            <summary> Gets or sets the percentage of pixels to ignore when calculating the white and black points. </summary>
            <value> The percentage of pixels to ignore when calculating the white and black points.  Defaults to 0.1. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of AutoLevelsCommand from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of <STRONG>AutoLevelsCommand</STRONG>. </overloads>
            <summary> Creates a new instance of AutoLevelsCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>AutoLevelsCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AutoLevelsCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary> Creates a new instance of AutoLevelsCommand specifying the output range. </summary>
            <param name="outputRangeLow"> The low pixel value to stretch the histogram to. </param>
            <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary> Creates a new instance of AutoLevelsCommand specifying the output range and gamma. </summary>
            <param name="outputRangeLow"> The low pixel value to stretch the histogram to. </param>
            <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. </param>
            <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double,System.Double)">
            <summary> Creates a new instance of AutoLevelsCommand specifying the output range, gamma and clip. </summary>
            <exception> Thrown if the 'clip' argument is less than 0 or greater than 100. </exception>
            <param name="outputRangeLow"> The low pixel value to stretch the histogram to. </param>
            <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. </param>
            <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
            <param name="clip"> The percentage of pixels to ignore when calculating the white and black points. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.ImplementMe">
            <summary>
            Future use.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.InPlaceProcessing">
            <summary>
            Indicates whether or not the command will operate on the source image alone.
            </summary>
            <value>
            Always returns true.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.OutputRangeLow">
            <summary> Gets or sets the low pixel value to stretch the histogram to. </summary>
            <value> The low pixel value to stretch the histogram to. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.OutputRangeHigh">
            <summary> Gets or sets the high pixel value to stretch the histogram to. </summary>
            <value> The high pixel value to stretch the histogram to. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Clip">
            <summary> Gets or sets the percentage of pixels to ignore when calculating the white and black points. </summary>
            <value> The percentage of pixels to ignore when calculating the white and black points.  Defaults to 0.1. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Gamma">
            <summary> Gets or sets the gamma adjustment to apply when running the filter. </summary>
            <value> The gamma adjustment to apply when running the filter. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel64bppBgra
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand">
            <summary> Automatically adjusts the white point in an image. </summary>
            <remarks> Auto White Balance is based on "Gray World" algorithm and balances the source image.  It is best applied
            after the translation to gamma-corrected RGB space. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand._dampening">
            <summary> Gets or sets a value indicating the amount of dampening to use. </summary>
            <value> The amount of dampening. </value>
            <remarks> Dampening is used to mitigate the algorithm since full correction is often too extreme for real world
            scenes. </remarks>
            <exception> Thrown when value amp;lt; 1. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AutoWhiteBalanceCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of AutoWhiteBalanceCommand. </overloads>
            <summary> Creates a new instance of AutoWhiteBalanceCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AutoWhiteBalanceCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor(System.Double)">
            <summary> Creates a new instance of <STRONG>AutoWhiteBalanceCommand</STRONG> specifying dampening. </summary>
            <exception> Thrown if dampening is less than 1. </exception>
            <param name="dampening"> <para>The amount of dampening to use.</para> </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.Dampening">
            <summary> Gets or sets a value indicating the amount of dampening to use. </summary>
            <value> The amount of dampening. </value>
            <remarks> Dampening is used to mitigate the algorithm since full correction is often too extreme for real world
            scenes. </remarks>
            <exception> Thrown when value &lt; 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand">
            <summary> <para>Apply a bevel effect to the edges of an image.</para> </summary>
            <remarks> This method requires a continuous tone image. </remarks>
            <example>
<code lang="CS" title="BevelEdge Example (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Apply a 10 pixel bevel with a light source from the right.
BevelEdgeCommand cmd = new BevelEdgeCommand(10, 60, 170, 200, 40, 200);
cmd.Apply(image);
]]></code>

<code lang="VB" title="BevelEdge Example (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
' Apply a 10 pixel bevel with a light source from the right.
Dim cmd As BevelEdgeCommand =  New BevelEdgeCommand(10,60,170,200,40,200) 
cmd.Apply(image)
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.bevelSize">
            <summary> Gets or sets the size of the bevel along the edge, in pixels. </summary>
            <value> Size of the bevel along the edge, in pixels. </value>
            <exception> Thrown if value is not gt; 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.leftBrightness">
            <summary> Gets or sets the brightness level of the left facet. (0-255) </summary>
            <value> Brightness level of the left facet. (0-255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.topBrightness">
            <summary> Gets or sets the brightness level of the top facet. (0-255) </summary>
            <value> Brightness level of the top facet. (0-255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.rightBrightness">
            <summary> Gets or sets the brightness level of the right facet. (0-255) </summary>
            <value> Brightness level of the right facet. (0-255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.bottomBrightness">
            <summary> Gets or sets the brightness level of the bottom facet. (0-255) </summary>
            <value> Brightness level of the bottom facet. (0-255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.smoothFactor">
            <summary> Gets or sets the smooth the bevel edge. (0-500) </summary>
            <value> Smooth the bevel edge. (0-500) </value>
            <exception> Thrown if value is not between 0 and 500. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>BevelEdgeCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of <STRONG>BevelEdgeCommand</STRONG>. Creates a new instance of
            BevelEdgeCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary> Creates a new instance of BevelEdgeCommand specifying the bevel size and brightness levels. </summary>
            <exception> Thrown if any of the arguments are invalid. </exception>
            <param name="bevelSize"> Size of the bevel along the edge, in pixels. </param>
            <param name="leftBrightness"> Brightness level of the left facet. (0-255) </param>
            <param name="topBrightness"> Brightness level of the top facet. (0-255) </param>
            <param name="rightBrightness"> Brightness level of the right facet. (0-255) </param>
            <param name="bottomBrightness"> Brightness level of the bottom facet. (0-255) </param>
            <param name="smoothFactor"> Smooth the bevel edge. (0-500) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor">
            <summary> Creates a new instance of <STRONG>BevelEdgeCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BevelSize">
            <summary> Gets or sets the size of the bevel along the edge, in pixels. </summary>
            <value> Size of the bevel along the edge, in pixels. </value>
            <exception> Thrown if value is not gt; 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.LeftBrightness">
            <summary> Gets or sets the brightness level of the left facet. (0-255) </summary>
            <value> Brightness level of the left facet. (0-255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.TopBrightness">
            <summary> Gets or sets the brightness level of the top facet. (0-255) </summary>
            <value> Brightness level of the top facet. (0-255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.RightBrightness">
            <summary> Gets or sets the brightness level of the right facet. (0-255) </summary>
            <value> Brightness level of the right facet. (0-255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BottomBrightness">
            <summary> Gets or sets the brightness level of the bottom facet. (0-255) </summary>
            <value> Brightness level of the bottom facet. (0-255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.SmoothFactor">
            <summary> Gets or sets the smooth the bevel edge. (0-500) </summary>
            <value> Smooth the bevel edge. (0-500) </value>
            <exception> Thrown if value is not between 0 and 500. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand">
            <summary> Modifies the brightness and/or contrast of an image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.newBrightness">
            <summary> Gets or sets the percent to increase or decrease brightness. </summary>
            <value>  The percent to increase or decrease brightness. </value>
            <remarks> Valid values are from -100 to 100. </remarks>
            <exception> Thrown if value is not between -100 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.newContrast">
            <summary> Gets or sets the percent to increase or decrease contrast. </summary>
            <value> The percent to increase or decrease contrast. </value>
            <remarks> Valid values are from -100 to 100. </remarks>
            <exception> Thrown if value is not between -100 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.curveShape">
            <summary> <para>Gets or sets a value indicating the curve shape.</para> </summary>
            <value> A value indicating the curve shape. </value>
            <remarks> <para> </para>
            <para> </para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>BrightnessContrastCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand"/>. Creates a new instance of
            BrightnessContrastCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.Clone">
            <summary> Creates a copy of the command. </summary>
            <returns> A copy of the <STRONG>BrightnessContrastCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand"/> specifying the brightness, contrast, and curve
            shape. </summary>
            <exception> Thrown if the newBrightness or newContrast values are less than -100 or greater than 100. </exception>
            <param name="newBrightness">  The percent to increase or decrease brightness. (-100 to 100) </param>
            <param name="newContrast"> The percent to increase or decrease contrast. (-100 to 100) </param>
            <param name="curveShape"> The curve shape. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor(System.Double,System.Double)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand"/> specifying the brightness and contrast.
            </summary>
            <exception> Thrown if either argument is less than -100 or greater than 100. </exception>
            <param name="newBrightness"> The percent to increase or decrease brightness. (-100 to 100) </param>
            <param name="newContrast"> The percent to increate or decrease the contrast. (-100 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor">
            <summary> Creates a new instance of <STRONG>BrightnessContrastCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewBrightness">
            <summary> Gets or sets the percent to increase or decrease brightness. </summary>
            <value>  The percent to increase or decrease brightness. </value>
            <remarks> Valid values are from -100 to 100. </remarks>
            <exception> Thrown if value is not between -100 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewContrast">
            <summary> Gets or sets the percent to increase or decrease contrast. </summary>
            <value> The percent to increase or decrease contrast. </value>
            <remarks> Valid values are from -100 to 100. </remarks>
            <exception> Thrown if value is not between -100 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.CurveShape">
            <summary> <para>Gets or sets a value indicating the curve shape.</para> </summary>
            <value> A value indicating the curve shape. </value>
            <remarks> <para> </para>
            <para> </para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand">
            <summary> Perform histogram equalization on an image while preventing colors from shifting. </summary>
            <remarks> <para>This function will re-distribute the pixel values across the given range so that there will be
            (approximately) equal numbers of pixels with each pixel value (0 to 255).  Input pixels with values above or below
            the threshold values are not modified in the output.</para>
            <para>Can be used to extend the dynamic range of an image.</para> </remarks>
            <seealso> HistogramEqualizeCommand </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.lowThreshold">
            <summary> Gets or sets a low threshold value below which pixels are uneffected. </summary>
            <remarks> Valid values are from 0 to 255. </remarks>
            <value> A low threshold value below which pixels are uneffected. </value>
            <exception> Thrown if value is not between 0 and 255 </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.highThreshold">
            <summary> Gets or sets a high threshold value above which pixels are uneffected. </summary>
            <remarks> Valid values are from 0 to 255. </remarks>
            <value> A high threshold value above which pixels are uneffected. </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>BrightnessHistogramEqualizeCommand</STRONG> from serialization
            information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of BrightnessHistogramEqualizeCommand specifying the threshold values. Creates
            a new instance of BrightnessHistogramEqualizeCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of BrightnessHistogramEqualizeCommand specifying the threshold levels. </summary>
            <exception> Thrown if the arguments are less than 0 or greater than 255. </exception>
            <param name="lowThreshold"> Pixels are uneffected below this value. (0 - 255) </param>
            <param name="highThreshold"> Pixels are uneffected above this value. (0 - 255) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor">
            <summary> Creates a new instance of <STRONG>BrightnessHistogramEqualizeCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.LowThreshold">
            <summary> Gets or sets a low threshold value below which pixels are uneffected. </summary>
            <remarks> Valid values are from 0 to 255. </remarks>
            <value> A low threshold value below which pixels are uneffected. </value>
            <exception> Thrown if value is not between 0 and 255 </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.HighThreshold">
            <summary> Gets or sets a high threshold value above which pixels are uneffected. </summary>
            <remarks> Valid values are from 0 to 255. </remarks>
            <value> A high threshold value above which pixels are uneffected. </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand">
            <summary> Performs a histogram stretch on an image while preventing colors from shifting. </summary>
            <remarks> <para>Re-distribute the pixel values across the given range by first setting values above and below the
            thresholds to zero and 255 respectively and then scaling the remaining values to span the entire zero to 255 range.</para>
            <para>This can be used to increase the contrast and extend the dynamic range of an image.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.lowLimit">
            <summary> Gets or sets the percent of pixels to set to 0. </summary>
            <value> Percent of pixels to set to 0. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.highLimit">
            <summary> Gets or sets the percent of pixels to set to 255. </summary>
            <value> Percent of pixels to set to 255. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.midPoint">
            <summary> Gets or sets the pixel value to set to middle intensity.  This value must be from 1 to 254. </summary>
            <value> The middle intensity value. </value>
            <exception> Thrown if the value is less than 1 or greater than 254. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.hslColorSpace">
            <value> A value indicating if the Histogram Stretch is performed in the HSL colorspace. </value>
            <summary> Gets or sets a value indicating if the Histogram Stretch is performed in the HSL colorspace. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>BrightnessHistogramStretchCommand</STRONG> from serialization
            information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of <STRONG>BrightnessHistogramStretchCommand.</STRONG> Creates a new instance
            of BrightnessHistogramStretchCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of this <STRONG>BrightnessHistogramStretchCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor(System.Double,System.Double,System.Boolean)">
            <summary> Creates a new instance of <STRONG>BrightnessHistogramStretchCommand</STRONG> specifying the limit values
            and if the HSL colorspace should be used. </summary>
            <exception> Thrown if the lowLimit or highLimit arguments are less than 0 or greater than 100. </exception>
            <param name="lowLimit"> Percent of pixels to set to 0. (0 to 100) </param>
            <param name="highLimit"> Percent of pixels to set to 255. (0 to 100) </param>
            <param name="hslColorSpace"> Indicates if the Histogram Stretch is performed in the HSL colorspace. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor(System.Double,System.Double)">
            <summary> Creates a new instance of <STRONG>BrightnessHistogramStretchCommand</STRONG> specifying the limit values.
            </summary>
            <exception> Thrown if the arguments are less than 0 or greater than 100. </exception>
            <param name="lowLimit"> Percent of pixels to set to 0. (0 to 100) </param>
            <param name="highLimit"> Percent of pixels to set to 255. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor">
            <summary> Creates a new instance of <STRONG>BrightnessHistogramStretchCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand._useMidPoint">
            <summary> Gets or sets a value indicating whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.MidPoint"/> property will be used to divide output
            range. </summary>
            <value> Indicates whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.MidPoint"/> property is used. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.LowLimit">
            <summary> Gets or sets the percent of pixels to set to 0. </summary>
            <value> Percent of pixels to set to 0. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HighLimit">
            <summary> Gets or sets the percent of pixels to set to 255. </summary>
            <value> Percent of pixels to set to 255. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.MidPoint">
            <summary> Gets or sets the pixel value to set to middle intensity.  This value must be from 1 to 254. </summary>
            <value> The middle intensity value. </value>
            <exception> Thrown if the value is less than 1 or greater than 254. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.UseMidPoint">
            <summary> Gets or sets a value indicating whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.MidPoint"/> property will be used to divide output
            range. </summary>
            <value> Indicates whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.MidPoint"/> property is used. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HslColorSpace">
            <value> A value indicating if the Histogram Stretch is performed in the HSL colorspace. </value>
            <summary> Gets or sets a value indicating if the Histogram Stretch is performed in the HSL colorspace. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand">
            <summary> <para>Generates an image which looks like a cracked ceramic glaze.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a compatible format. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.mode">
            <summary> Gets or sets the crackle mode. </summary>
            <value> <para>The crackle mode.</para> </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.definition">
            <summary> Gets or sets a value which controls sharpness of cracks. </summary>
            <value> A value which controls sharpness of cracks. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>CrackleCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Initalize a new instance of the <STRONG>CrackleCommand</STRONG> class. Creates a new instance of
            CrackleCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode,System.Int32)">
            <summary> Creates a new instance of CrackleCommand specifying the crackle mode and definition. </summary>
            <exception> Thrown if the definition is less than 0 or greater than 100. </exception>
            <param name="mode"> The crackle mode. </param>
            <param name="definition"> A value which controls sharpness of cracks. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor">
            <summary> Creates a new instance of <STRONG>CrackleCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Mode">
            <summary> Gets or sets the crackle mode. </summary>
            <value> <para>The crackle mode.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Definition">
            <summary> Gets or sets a value which controls sharpness of cracks. </summary>
            <value> A value which controls sharpness of cracks. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand">
            <summary> <para>Applies a color curve to an image, similar to the Photoshop Curves method.</para>
            <para>The curves are defined by an array of one or more objects.</para> </summary>
            <example>
<code lang="CS" title="CurvesCommandCS (C#)"><![CDATA[
// Load an image.
AtalaImage myImage = new AtalaImage("C:\\mytestimage.jpg");

// Apply a simple curve.
PointF[] points = new PointF[2];
points[0] = new PointF(0.3, 0.6);
points[1] = new PointF(0.6, 0.8);

CurvesCommand cmd = new CurvesCommand(points, ChannelFlags.AllChannels);
cmd.Apply(myImage);
]]></code>

<code lang="VB" title="CurvesCommandVB (Visual Basic)"><![CDATA[
' Load an image.
Dim myImage As AtalaImage =  New AtalaImage("C:\\mytestimage.jpg") 
 
' Apply a simple curve.
Dim points() As PointF =  New PointF(1) {} 
points(0) = New PointF(0.3, 0.6)
points(1) = New PointF(0.6, 0.8)
 
Dim cmd As CurvesCommand =  New CurvesCommand(points,ChannelFlags.AllChannels) 
cmd.Apply(myImage)
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand._points">
            <summary> Gets or sets the points that define the curve. </summary>
            <value> The points that define the curve. </value>
            <remarks> <para>At least one point must be provided, with a maximum of 256 points.</para>
            <para>Each point value must have a range from 0.0 to 1.0.  There can be no duplicate <EM>PointF.X</EM> values can be
            in the array.</para> </remarks>
            <exception> Occurs if null is passed as the points parameter or if an empty array is passed in. </exception>
            <exception> Occurs if the array has more than 256 elements or a duplicate X value was found. </exception>
            <exception> Occurs if the points array contains invalid values. </exception>
            <example> CurvesCommand Class </example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand._channels">
            <summary> Gets or sets the channel flags that specify which color channels to process. </summary>
            <value> The channels to process. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>CurvesCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a CurvesCommand object that can be used to apply a color curve to an image. </overloads>
            <example> CurvesCommand Class </example>
            <summary> Creates a new instance of CurvesCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of this <STRONG>CurvesCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor">
            <summary> Creates a new instance of <STRONG>CurvesCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor(System.Drawing.PointF[],Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary> Creates a new instance of CurvesCommand specifying the points of the curve and channels to process.
            </summary>
            <exception> Occurs if null is passed as the points parameter or if an empty array is passed in. </exception>
            <exception> Occurs if the array has more than 256 elements or a duplicate X value was found. </exception>
            <exception> Occurs if the points array contains invalid values. </exception>
            <example> CurvesCommand Class </example>
            <param name="points"> An array of PointF objects specifying the curve. </param>
            <param name="channels"> A channel mask containing the channels to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.ImplementMe">
            <summary>
            Future use.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">
            Points array must contain at least one entry whose X value is not 0 and is not 1;Points
            or
            Points array must contain at least one entry whose X value is not 0 and is not 1;Points
            or
            The points array contains invalid data.;points
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.InPlaceProcessing">
            <summary> Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image. </summary>
            <value> True </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Points">
            <summary> Gets or sets the points that define the curve. </summary>
            <value> The points that define the curve. </value>
            <remarks> <para>At least one point must be provided, with a maximum of 256 points.</para>
            <para>Each point value must have a range from 0.0 to 1.0.  There can be no duplicate <EM>PointF.X</EM> values can be
            in the array.</para> </remarks>
            <exception> Occurs if null is passed as the points parameter or if an empty array is passed in. </exception>
            <exception> Occurs if the array has more than 256 elements or a duplicate X value was found. </exception>
            <exception> Occurs if the points array contains invalid values. </exception>
            <example> CurvesCommand Class </example>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Channels">
            <summary> Gets or sets the channel flags that specify which color channels to process. </summary>
            <value> The channels to process. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod">
            <summary> Specifies the method used by the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Duplicate">
            <summary> Duplicates the interlaced lines. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Interpolate">
            <summary> Uses interpolation when the image is de-interlaced. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Merge">
            <summary> Merges the interlaced lines together. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention">
            <summary> Specifies the retention used in <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand"/> when <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod"/> or
            <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod"/> methods are used. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention.EvenLines">
            <summary> Even lines are retained. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention.OddLines">
            <summary> Odd lines are retained. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod">
            <summary> Specifies the merge method used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand"/> when the Merge method is used.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.BiLinear">
            <summary> BiLinear filter is applied. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.BiCubic">
            <summary> BiCubic filter is applied. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.Lanczos">
            <summary> Lanczos filter is applied. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.Hanning">
            <summary> Hanning filter is applied. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand">
            <summary> <para>This command will de-interlace an image.</para> </summary>
            <remarks> <para>Interlacing is when two frames, usually in video, are mixed together in one frame with odd lines
            being from one frame and even lines being from the other frame.  De-Interlacing can fix this with one of three
            options:</para>
            <OL>
            <LI>Duplicating every other line</LI>
            <LI>Interpolating every other line</LI>
            <LI>Merging the odd and even lines </LI></OL> </remarks>
            <seealso> MosaicCommand Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.method">
            <summary> Gets or sets the method used to de-interlace the image. </summary>
            <value> The method used to de-interlace the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.retention">
            <summary> Gets or sets the odd or even line to retain. </summary>
            <value> The odd or even line to retain. </value>
            <remarks> Only used for the Duplicate and Interpolate methods. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.mergeMethod">
            <summary> Gets or sets the merge method to use when merging the odd and even interpolated images. </summary>
            <value> The merge method to use when merging the odd and even interpolated images. </value>
            <remarks> Only used for the Merge method. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>DeInterlaceCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> <para>Initializes a new instance of <STRONG> DeInterlaceCommand</STRONG>   .</para>
            <para>Initializes a new instance of <STRONG>  DeInterlaceCommand</STRONG>    with default settings.</para>  </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor">
            <summary> Creates a new instance of <STRONG>DeInterlaceCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod)">
            <summary> <para>Initializes a new instance of <STRONG>DeInterlaceCommand</STRONG> specifying the
            method.</para> </summary>
            <param name="method"> The de-interlace method. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention)">
            <summary> <para>Initializes a new instance of <STRONG>DeInterlaceCommand</STRONG> specifying the
            de-interlace method and which lines to retain.</para> </summary>
            <param name="method"> The de-interlace method. </param>
            <param name="retention"> <para>Specifies which lines to retain.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod)">
            <summary> <para>Initializes a new instance of <STRONG>DeInterlaceCommand</STRONG> specifying the
            de-interlace method and merging mode.</para> </summary>
            <param name="method"> The de-interlace method. </param>
            <param name="mergeMethod"> The merge method used when merging the odd and even interpolated images. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">source image must have an even number of rows;image</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Method">
            <summary> Gets or sets the method used to de-interlace the image. </summary>
            <value> The method used to de-interlace the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Retention">
            <summary> Gets or sets the odd or even line to retain. </summary>
            <value> The odd or even line to retain. </value>
            <remarks> Only used for the Duplicate and Interpolate methods. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.MergeMethod">
            <summary> Gets or sets the merge method to use when merging the odd and even interpolated images. </summary>
            <value> The merge method to use when merging the odd and even interpolated images. </value>
            <remarks> Only used for the Merge method. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand">
            <summary> Apply a drop shadow behind the image. </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a compatible format. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.offset">
            <value> The number of pixels to offset the the shadow. </value>
            <summary> Gets or set the number of pixels to offset the the shadow. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.shadowColor">
            <summary> Gets or sets the color to use for the shadow. </summary>
            <value> The color to use for the shadow. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.blurLevel">
            <summary> Gets or sets the amount of blur to add to the shadow. </summary>
            <value> The amount of blur to add to the shadow. </value>
            <remarks> This is the standard deviation of the gaussian kernal. </remarks>
            <exception> Thrown if value is not greater than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.increaseCanvas">
            <summary> Gets or sets a value to indicate if you want the canvas to be increased to include the shadow. </summary>
            <value> A value to indicate if you want the canvas to be increased to include the shadow. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>DropShadowCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Initialize a new instance of the <STRONG>DropShadowCommand </STRONG>class. Creates a new instance of
            DropShadowCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point,System.Drawing.Color,System.Double,System.Boolean)">
            <summary> Initialize a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset, shadowColor, blurLevel
            and increaseCanvas. </summary>
            <exception> Thrown if 'blurLevel' is not greater than 0. </exception>
            <param name="offset"> The number of pixels to offset the the shadow. </param>
            <param name="shadowColor"> The color to use for the shadow. </param>
            <param name="blurLevel"> The amount of blur to add to the shadow. </param>
            <param name="increaseCanvas"> A value to indicate if you want the canvas to be increased to include the shadow.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point,System.Drawing.Color,System.Double)">
            <summary> Initialize a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset, shadowColor and
            blurLevel. </summary>
            <exception> Thrown if blurLevel is not greater than 0. </exception>
            <param name="offset"> The number of pixels to offset the the shadow. </param>
            <param name="shadowColor"> The color to use for the shadow. </param>
            <param name="blurLevel"> The amount of blur to add to the shadow. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point,System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset and shadowColor. </summary>
            <param name="offset"> The number of pixels to offset the the shadow. </param>
            <param name="shadowColor"> The color to use for the shadow. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point)">
            <summary> Initialize a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset. </summary>
            <param name="offset"> The number of pixels to offset the the shadow. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Int32)">
            <summary> Initializes a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset. </summary>
            <param name="offset"> The number of pixels to offset the the shadow. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor">
            <summary> Creates a new instance of <STRONG>DropShadowCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.Offset">
            <value> The number of pixels to offset the shadow. </value>
            <summary> Gets or set the number of pixels to offset the the shadow. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ShadowColor">
            <summary> Gets or sets the color to use for the shadow. </summary>
            <value> The color to use for the shadow. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.BlurLevel">
            <summary> Gets or sets the amount of blur to add to the shadow. </summary>
            <value> The amount of blur to add to the shadow. </value>
            <remarks> This is the standard deviation of the gaussian kernal. </remarks>
            <exception> Thrown if value is not greater than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.IncreaseCanvas">
            <summary> Gets or sets a value to indicate if you want the canvas to be increased to include the shadow. </summary>
            <value> A value to indicate if you want the canvas to be increased to include the shadow. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand">
            <summary> The DuotoneCommand processes an image from its current color space into a two color space. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand._tint">
            <summary> The color that will be used for the "light" tones of the duotoned image. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor">
            <summary> Creates a new instance of <STRONG>DuotoneCommand</STRONG>. </summary>
            <overloads> Constructs a new DuotoneCommand object. </overloads>
            <summary> Construct a new DuotoneCommand with default properties. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor(System.Drawing.Color)">
            <summary> Construct a new DuotoneCommand using the supplied color as the tint. </summary>
            <param name="tint"> The tint that will be used for the duotone color space. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>DuotoneCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>DuotoneCommand</STRONG>. </returns>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.Tint">
            <summary> The color that will be used for the "light" tones of the duotoned image. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.InPlaceProcessing">
            <summary> Indicates whether or not this command will act on the given or image or allocate a new one. </summary>
            <value> Returns true for the DuotoneCommand </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode">
            <summary> Indicates the type of effect to apply in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Desaturated">
            <summary> Applies a desaturated effect to the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.HighContrastForeground">
            <summary> Creates a high contrast effect on the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.FullColor">
            <summary> Applies a full color gauzy effect. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Max">
            <summary> Applies a maximum filter effect to the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Min">
            <summary> Applies a minimum filter effect to the image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType">
            <summary> Indicates the type of blurring to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.ArithmeticMean">
            <summary> Applies an arithmetic mean filter to the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Minimum">
            <summary> Applies a minimum filter to the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Maximum">
            <summary> Applies a maximum filter to the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.GeometricMean">
            <summary> Applies a geometric mean filter to the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.YPMean">
            <summary> Applies a YP mean filter to the image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode">
            <summary> Indicates how to process the image in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.NoiseFirst">
            <summary> Applies the noise before the filter. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.FilterFirst">
            <summary> Applies the filter before adding the noise. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode">
            <summary> Indicates the type of blurring to use on the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Blurred">
            <summary> Applies a blurring effect to the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Filtered">
            <summary> Applies a filtered effect to the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Posterized">
            <summary> Applies a posterized effect to the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Despeckled">
            <summary> Applies a despeckle effect to the image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode">
            <summary> Specifies the crackle mode to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.PaintChips">
            <summary> Creates an effect of dried paint chipping off. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.TinPunch">
            <summary> Makes the image appear to be punched out onto a tin surface. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.Erosion">
            <summary> Creates the effect of erosion on the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.PaintChips2">
            <summary> A more intense version of the PaintChips effect. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.Erosion2">
            <summary> A more intense version of the Erosion effect. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType">
            <summary> Indicates the curve type used in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand"/>. </summary>
            <seealso> BrightnessContrastCommand </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.ThreePoint">
            <summary> The three point curve emphasizes mid-tones more than the five or seven point curves. This is closest to
            the brightness / contrast that Adobe Photoshop uses. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.FivePoint">
            <summary> The default curve type for traditional Brightness/Contrast adjustment. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.SevenPoint">
            <summary> The seven point curve forces pixels in the extreme dark and light ranges to black or white faster than the
            five point curve. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode">
            <summary> Defines the manner of blur for the MotionBlurCommand </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode.Linear">
            <summary>
            The image is blurred in a line (traditional motion blur).
            </summary>
            <summary> Applies linear blur path. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode.Radial">
            <summary>
            The image is blurred in a circle around the center point.
            </summary>
            <summary> Applies radial blur. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode.Zoom">
            <summary>
            The image is blurred as if zooming in.
            </summary>
            <summary> Applies a linear blur. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand">
            <remarks> This method requires an 8-bit grayscale. If the source image is of a different format, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a compatible format. </remarks>
            <summary> Creates an effect which looks like fingerprint smuges on the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.depth">
            <summary> Gets or sets a positive number indicating the depth of the effect. </summary>
            <value> A positive number indicating the depth of the effect. </value>
            <remarks> 50 is a good number to start with. </remarks>
            <exception> Thrown if value is not greater than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.filterSize">
            <summary> Gets or sets the filter size of the effect. </summary>
            <value> The filter size of the effect. </value>
            <remarks> Values of 3, 5 and 7 are good choices. </remarks>
            <exception> Thrown if value is less than 3. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.dilation">
            <summary> Gets or sets a value indicating if dilation mode should be used. </summary>
            <value> A value indicating if dilation mode should be used. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>FingerprintCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor(System.Double,System.Int32,System.Boolean)">
            <summary> Creates a new instance of <STRONG>FingerprintCommand</STRONG> specifying depth, filterSize and dilation.
            </summary>
            <exception> Thrown if the depth is less than or equal to 0, or if filterSize is less than 3. </exception>
            <param name="depth"> A positive number indicating the depth of the effect. </param>
            <param name="filterSize"> Gets or sets the filter size of the effect.  Should be an odd number greater than or equal
            to 3. </param>
            <param name="dilation"> Indicates if dilation should be used. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor(System.Double)">
            <summary> Creates a new instance of <STRONG>FingerprintCommand</STRONG> specifying depth. </summary>
            <exception> Thrown if the depth is less than or equal to 0. </exception>
            <param name="depth"> A positive number indicating the depth of the effect. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor">
            <summary> Creates a new instance of <STRONG>FingerprintCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Depth">
            <summary> Gets or sets a positive number indicating the depth of the effect. </summary>
            <value> A positive number indicating the depth of the effect. </value>
            <remarks> 50 is a good number to start with. </remarks>
            <exception> Thrown if value is not greater than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.FilterSize">
            <summary> Gets or sets the filter size of the effect. </summary>
            <value> The filter size of the effect, must be an odd number greater than or equal to 3.</value>
            <remarks> Values of 3, 5 and 7 are good choices. </remarks>
            <exception> Thrown if value is less than 3. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Dilation">
            <summary> Gets or sets a value indicating if dilation mode should be used. </summary>
            <value> A value indicating if dilation mode should be used. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand">
            <summary> Performs a flood fill on an image.  You can use it to fill an area of an image surrounded by FillColor by
            setting Mode to Edge, or you can fill the pixel color at Position with FillColor. </summary>
            <remarks> <para>This command requires one of the following image formats:</para>
            <UL>
            <LI>PixelFormat24bppBgr</LI>
            <LI>PixelFormat32bppBgr</LI>
            <LI>PixelFormat32bppBgra</LI></UL>
            <para>If any other image format is passed, you will receive a <STRONG>System.ArgumentException</STRONG>.</para>
            </remarks>
            <example>
<code lang="CS" title="FloodFill Example (C#)"><![CDATA[
Rectangle rc;

if (this.viewer.Selection.Visible)
    rc = this.viewer.Selection.Bounds;
else
    rc = new Rectangle(Point.Empty, this.viewer.Image.Size);

Point pos = new Point(rc.Width / 2 + rc.Left, rc.Height / 2 + rc.Top);
FloodFillCommand cmd = new FloodFillCommand(pos, Color.Red, 5, ColorMatchMode.Surface);
cmd.RegionOfInterest = new RegionOfInterest(rc);

this.viewer.ApplyCommand(cmd);
]]></code>

<code lang="VB" title="FloodFill Example (Visual Basic)"><![CDATA[
Dim rc As Rectangle
 
If Me.viewer.Selection.Visible Then
    rc = Me.viewer.Selection.Bounds
Else
    rc = New Rectangle(PoInteger.Empty, Me.viewer.Image.Size)
End If

Dim pos As Point =  New Point(rc.Width / 2 + rc.Left, rc.Height / 2 + rc.Top) 
Dim cmd As FloodFillCommand =  New FloodFillCommand(pos, Color.Red, 5, ColorMatchMode.Surface) 
cmd.RegionOfInterest = New RegionOfInterest(rc)
 
Me.viewer.ApplyCommand(cmd)
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.position">
            <summary> Gets or sets the X, Y pixel position where the fill should start. </summary>
            <value> The X, Y pixel position where the fill should start. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.tolerance">
            <summary> Gets or sets the percentage of color variation. </summary>
            <value> The percentage of color variation. </value>
            <remarks> Valid values are 0 to 100.  A value of 0 requires an exact color match, where a value of 100 will match
            any color. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.fillColor">
            <summary> Gets or sets the <STRONG>Color</STRONG> used for the fill. </summary>
            <value> The color used for the fill. </value>
            <remarks> <para>If <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Mode"/> is Edge, this color also represents the the edge color and
            will fill the area until it finds the edge color.</para>
            <para>If Mode is Surface, this color will be used to fill the pixel color located at <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Position"/> until it reaches a different color.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.mode">
            <summary> Gets or sets the <STRONG>ColorMatchMode</STRONG> used for the fill. </summary>
            <value> The ColorMatchMode used for the fill. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>FloodFillCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of FloodFillCommand specifying position, fillColor, tolerance and mode. </summary>
            <summary> Creates a new instance of FloodFillCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor(System.Drawing.Point,System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.ColorMatchMode)">
            <summary> Creates a new instance of FloodFillCommand specifying the position, fill color, tolerance and color match
            mode. </summary>
            <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
            <param name="position"> The X, Y pixel position where the fill should start. </param>
            <param name="fillColor"> The color used for the fill. </param>
            <param name="tolerance"> The percentage of color variation. (0 to 100) </param>
            <param name="mode"> The ColorMatchMode used for the fill. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor">
            <summary> Creates a new instance of <STRONG>FloodFillCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Position;The starting position must be inside the image or region.</exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Position">
            <summary> Gets or sets the X, Y pixel position where the fill should start. </summary>
            <value> The X, Y pixel position where the fill should start. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Tolerance">
            <summary> Gets or sets the percentage of color variation. </summary>
            <value> The percentage of color variation. </value>
            <remarks> Valid values are 0 to 100.  A value of 0 requires an exact color match, where a value of 100 will match
            any color. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.FillColor">
            <summary> Gets or sets the <STRONG>Color</STRONG> used for the fill. </summary>
            <value> The color used for the fill. </value>
            <remarks> <para>If <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Mode"/> is Edge, this color also represents the the edge color and
            will fill the area until it finds the edge color.</para>
            <para>If Mode is Surface, this color will be used to fill the pixel color located at <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Position"/> until it reaches a different color.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Mode">
            <summary> Gets or sets the <STRONG>ColorMatchMode</STRONG> used for the fill. </summary>
            <value> The ColorMatchMode used for the fill. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand">
            <summary> Increases or decreases the gamma value of an image. </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will throw the <see cref="T:System.ArgumentException"/></remarks>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.gammaLevel">
            <summary> Gets or sets the gamma correction level. </summary>
            <value> The gamma correction level. </value>
            <remarks> <para>This value must be greater than or equal to 0.  The effect of this value is as follows:</para>
            <UL>
            <LI>lt; 1 - decreases brightness</LI>
            <LI>gt; 1 - increases brightness</LI>
            <LI>= 1 - no change.</LI></UL> </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>GammaCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of the GammaCommand object. </summary>
            <summary> Creates a new instance of GammaCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>GammaCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor(System.Double)">
            <summary> Creates a new instance of GammaCommand specifying the gamma level. </summary>
            <exception> Thrown if gammaLevel is less than 0. </exception>
            <param name="gammaLevel"> The gamma correction level.  A value &lt; 1 decreases brightness and a value >1
            increases brightness. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor">
            <summary> Creates a new instance of <STRONG>GammaCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.GammaLevel">
            <summary> Gets or sets the gamma correction level. </summary>
            <value> The gamma correction level. </value>
            <remarks> <para>This value must be greater than or equal to 0.  The effect of this value is as follows:</para>
            <UL>
            <LI> &lt;1 - decreases brightness</LI>
            <LI> >1 - increases brightness</LI>
            <LI> =1 - no change.</LI></UL> </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand">
            <summary> Generate a soft focus, gauzed image. </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a compatible format. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.blurAmount">
            <summary> Gets or sets the amount of blur to apply. </summary>
            <value> <para>The amount of blur to apply.</para> </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.sharpAmount">
            <summary> Gets or sets the amount of original pixels in the image. </summary>
            <value> The amount of original pixels in the image. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.clarity">
            <summary> Gets or sets the amount to clarify the result. </summary>
            <value> The amount to clarify the result. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.mode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode"/> to use. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode"/> to use.</para> </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>GauzyCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of GauzyCommand specifying blurAmount, sharpAmount, clarity, mode and
            regionOfInterest. </summary>
            <summary> Creates a new instance of GauzyCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor(System.Double,System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode)">
            <summary> Creates a new instance of GauzyCommand specifying the blur and sharpen amounts. </summary>
            <exception> Thrown if blurAmount, sharpAmount or clarity values are less than 0 or greater than 100. </exception>
            <param name="blurAmount"> <para>The amount of blur to apply. (0 to 100)</para> </param>
            <param name="sharpAmount"> The amount of original pixels in the image.  (0 to 100) </param>
            <param name="clarity"> The amount to clarify the result.  (0 to 100) </param>
            <param name="mode"> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode"/> to use.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor">
            <summary> Creates a new instance of <STRONG>GauzyCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.BlurAmount">
            <summary> Gets or sets the amount of blur to apply. </summary>
            <value> <para>The amount of blur to apply.</para> </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SharpAmount">
            <summary> Gets or sets the amount of original pixels in the image. </summary>
            <value> The amount of original pixels in the image. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Clarity">
            <summary> Gets or sets the amount to clarify the result. </summary>
            <value> The amount to clarify the result. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Mode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode"/> to use. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode"/> to use.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand">
            <summary> Generates a black and white image dithered to "halftone" dots.  </summary>
            <remarks> This method requires a 24-bit image. </remarks>
            <seealso> MosaicCommand Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.maxDotSize">
            <summary> Gets or sets the maximum size of the dots. </summary>
            <value> The maximum size of the dots. </value>
            <exception> Thrown if value is not greater than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.smoothDots">
            <summary> Gets or sets a value indicating if the dots will be smooth or sharp. </summary>
            <value> A value indicating if the dots will be smooth or sharp. </value>
            <remarks> If <STRONG>false</STRONG>, dots are solid black, with sharp edges. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>HalftoneCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of the HalftoneCommand object. </summary>
            <summary> Creates a new instance of HalftoneCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor(System.Int32,System.Boolean)">
            <summary> Creates a new instance of HalftoneCommand specifying the dot size and smoothing values. </summary>
            <exception> Thrown if maxDotSize is less than 1. </exception>
            <param name="maxDotSize"> The maximum size of the dots. </param>
            <param name="smoothDots"> A value indicating if the dots will be smooth or sharp. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor">
            <summary> Creates a new instance of <STRONG>HalftoneCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">MaxDotSize;MaxDotSize cannot be larger than the image or region.</exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.MaxDotSize">
            <summary> Gets or sets the maximum size of the dots. </summary>
            <value> The maximum size of the dots. </value>
            <exception> Thrown if value is not greater than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.SmoothDots">
            <summary> Gets or sets a value indicating if the dots will be smooth or sharp. </summary>
            <value> A value indicating if the dots will be smooth or sharp. </value>
            <remarks> If <STRONG>false</STRONG>, dots are solid black, with sharp edges. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand">
            <remarks> <para>This function will re-distribute the pixel values across the given range so that there will be
            (approximately) equal numbers of pixels with each pixel value (0 to 255).  Input pixels with values above or below
            the threshold values are not modified in the output.</para>
            <para>Can be used to extend the dynamic range of an image.</para>
            <para>When applied to multi-channel (RGB, RGBA) images, each channel is modified independently of the others;
            because of this, colors may shift.  See <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand"/> for a similar command that
            doesn't cause this color shift.</para>
            <para>This command processes the image <EM>In-Place</EM>.</para> </remarks>
            <seealso> BrightnessHistogramEqualizeCommand </seealso>
            <summary> Performs histogram equalization on an image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.lowThreshold">
            <summary> Gets or sets a low threshold value below which pixels are uneffected. </summary>
            <value> A low threshold value below which pixels are uneffected. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.highThreshold">
            <summary> Gets or sets a high threshold value above which pixels are uneffected. </summary>
            <value> A high threshold value where pixels are uneffected. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>HistogramEqualizeCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of HistogramEqualizeCommand specifying the threshold values. </summary>
            <summary> Creates a new instance of HistogramEqualizeCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of HistogramEqualizeCommand specifying the threshold levels. </summary>
            <exception> Thrown if either argument is less than 0 or greater than 255. </exception>
            <param name="lowThreshold"> Pixels are uneffected below this value. (0 - 255) </param>
            <param name="highThreshold"> Pixels are uneffected above this value. (0 - 255) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor">
            <summary> Creates a new instance of <STRONG>HistogramEqualizeCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.LowThreshold">
            <summary> Gets or sets a low threshold value below which pixels are uneffected. </summary>
            <value> A low threshold value below which pixels are uneffected. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.HighThreshold">
            <summary> Gets or sets a high threshold value above which pixels are uneffected. </summary>
            <value> A high threshold value where pixels are uneffected. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand">
            <remarks> <para>Re-distribute the pixel values across the given range by first setting values above and below the
            thresholds to zero and 255 respectively and then scaling the remaining values to span the entire zero to 255 range.</para>
            <para>This can be used to increase the contrast and extend the dynamic range of an image.</para>
            <para>When applied to multi-channel (RGB, RGBA) images, each channel is modified independently of the others;
            because of this, colors may shift.  See <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand"/> for a similar command that
            doesn't cause this color shift.</para> </remarks>
            <summary> Performs a histogram stretch on an image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag of changes to process. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.lowLimit">
            <summary> Gets or sets the percent of pixels to set to 0. </summary>
            <value> Percent of pixels to set to 0. </value>
            <remarks> Valid values are from 0 to 100.  The sum of HighLimit and LowLimit must not exceed 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.highLimit">
            <value> Percent of pixels to set to 255. </value>
            <summary> Gets or sets the percent of pixels to set to 255. </summary>
            <remarks> Valid values are from 0 to 100.  The sum of HighLimit and LowLimit must not exceed 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.midPoint">
            <summary> Gets or sets the pixel value to set to middle intensity.  This value must be from 1 to 254. </summary>
            <value> The middle intensity value. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>HistogramStretchCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor(System.Double,System.Double)">
            <summary> Creates a new instance of HistogramStretchCommand specifying the low and high limits. </summary>
            <exception> Thrown if either argument is less than 0 or greater than 100. </exception>
            <param name="lowLimit"> Percent of pixels to set to 0.  (0 to 100) </param>
            <param name="highLimit"> Percent of pixels to set to 255.  (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor">
            <summary> Creates a new instance of <STRONG>HistogramStretchCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand._useMidPoint">
            <value> Indicates whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.MidPoint"/> property is used. </value>
            <summary> Gets or sets a value indicating whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.MidPoint"/> property will be used to divide output
            range. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:Atalasoft.Imaging.ImageProcessException">HighLimit and LowLimit must add up to a value less than 100</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag of changes to process. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.LowLimit">
            <summary> Gets or sets the percent of pixels to set to 0. </summary>
            <value> Percent of pixels to set to 0. </value>
            <remarks> Valid values are from 0 to 100.  The sum of HighLimit and LowLimit must not exceed 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.HighLimit">
            <value> Percent of pixels to set to 255. </value>
            <summary> Gets or sets the percent of pixels to set to 255. </summary>
            <remarks> Valid values are from 0 to 100.  The sum of HighLimit and LowLimit must not exceed 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.MidPoint">
            <summary> Gets or sets the pixel value to set to middle intensity.  This value must be from 1 to 254. </summary>
            <value> The middle intensity value. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.UseMidPoint">
            <value> Indicates whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.MidPoint"/> property is used. </value>
            <summary> Gets or sets a value indicating whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.MidPoint"/> property will be used to divide output
            range. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand">
            <summary> Corrects the tonal range and color balance by adjusting the shadow, midtone, and highlights of an image.
            </summary>
            <remarks> The shadow, midtone, and highlights are often manually determined from an "eyedropper" tool. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand._outputRangeLow">
            <summary> Gets or sets the dark color value to stretch the histogram to. </summary>
            <value> The dark color value to stretch the histogram to. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand._outputRangeHigh">
            <summary> Gets or sets the light color value to stretch the histogram to. </summary>
            <value> The light color value to stretch the histogram to. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand._midtoneColor">
            <summary> Gets or sets the gray point in the image used as a gamma adjustment. </summary>
            <value> The gray point in the image used as a gamma adjustment. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand._gamma">
            <summary> Gets or sets the gamma adjustment to apply when running the filter. </summary>
            <value> The gamma adjustment to apply when running the filter. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LevelsCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of LevelsCommand. </overloads>
            <summary> Creates a new instance of LevelsCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>LevelsCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor">
            <summary> Creates a new instance of <STRONG>LevelsCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary> Creates a new instance of LevelsCommand specifying the shadow and highlight colors, and the output range.
            </summary>
            <param name="shadowColor"> The black point in the image used as an input clipping point. </param>
            <param name="highlightColor"> The white point in the image used as an input clipping point. </param>
            <param name="outputRangeLow"> The dark color value to stretch the histogram to. </param>
            <param name="outputRangeHigh"> The light color value to stretch the histogram to. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.Effects.GammaColor)">
            <summary> Creates a new instance of LevelsCommand specifying shadow color, highlight color, output range and gamma.
            </summary>
            <param name="shadowColor"> The black point in the image used as an input clipping point. </param>
            <param name="highlightColor"> The white point in the image used as an input clipping point. </param>
            <param name="outputRangeLow"> The dark color value to stretch the histogram to. </param>
            <param name="outputRangeHigh"> The light color value to stretch the histogram to. </param>
            <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary> Creates a new instance of LevelsCommand specifying shadow, midtone and highlight colors, and the output
            range. </summary>
            <param name="shadowColor"> The black point in the image used as an input clipping point. </param>
            <param name="midtoneColor"> The gray point in the image used as a gamma adjustment. </param>
            <param name="highlightColor"> The white point in the image used as an input clipping point. </param>
            <param name="outputRangeLow"> The dark color value to stretch the histogram to. </param>
            <param name="outputRangeHigh"> The light color value to stretch the histogram to. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.ImplementMe">
            <summary>
            Future use.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary> This method performs the level manipulation on the image. </summary>
            <returns> Null (Nothing in VB). </returns>
            <param name="source"> The source image for processing.  This may be different from the original image. </param>
            <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
            <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
            <param name="results"> The results object that will be used for this command. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.InPlaceProcessing">
            <summary>
            Indicates whether or not the command will operate on the source image alone.
            </summary>
            <value>
            Always returns true.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.OutputRangeLow">
            <summary> Gets or sets the dark color value to stretch the histogram to. </summary>
            <value> The dark color value to stretch the histogram to. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.OutputRangeHigh">
            <summary> Gets or sets the light color value to stretch the histogram to. </summary>
            <value> The light color value to stretch the histogram to. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.ShadowColor">
            <summary> Gets or sets the black point in the image used as an input clipping point. </summary>
            <value> The black point in the image used as an input clipping point. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.MidtoneColor">
            <summary> Gets or sets the gray point in the image used as a gamma adjustment. </summary>
            <value> The gray point in the image used as a gamma adjustment. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.HighlightColor">
            <summary> Gets or sets the white point in the image used as an input clipping point. </summary>
            <value> The white point in the image used as an input clipping point. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.Gamma">
            <summary> Gets or sets the gamma adjustment to apply when running the filter. </summary>
            <value> The gamma adjustment to apply when running the filter. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor">
            <summary> This structure is used with WatercolorTintCommand to specify the gamma levels used during the command
            process. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor(System.Double)">
            <summary> Creates a new instance of GammaColor specifying a single value for all channels. </summary>
            <param name="gamma"> The gamma value. </param>
            <overloads> Create a GammaColor object for use with <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand"/>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor(System.Double,System.Double,System.Double)">
            <summary> Creates a new instance of GammaColor specifying the gamma value for blue, green and red channels.
            </summary>
            <param name="blue"> The blue gamma value. </param>
            <param name="green"> The green gamma value. </param>
            <param name="red"> The red gamma value. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary> Creates a new instance of GammaColor specifying the gamma value for blue, green, red and alpha channels.
            </summary>
            <param name="blue"> The blue gamma value. </param>
            <param name="green"> The green gamma value. </param>
            <param name="red"> The red gamma value. </param>
            <param name="alpha"> The alpha gamma value. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.B">
            <summary> The blue channel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.G">
            <summary> The green channel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.R">
            <summary> The red channel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.A">
            <summary> The alpha channel. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.Default">
            <summary> Gets the default GammaColor object. </summary>
            <value> A GammaColor object with blue, green, red and alpha set to 1. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand">
            <summary> <para>Generate a mosaic (large pixel) image.</para> </summary>
            <remarks> This method requires a 24 or 32 bit image. If the source image is not continuous, it will throw the <see cref="T:System.ArgumentException"/></remarks>
            <example>
<code lang="CS" title="Mosaic (C#)"><![CDATA[
// Load the image to work with.
AtalaImage image = new AtalaImage(@"D:\Test Images\1save.jpg");

// Apply a mosaic effect to the middle of the image.
Rectangle rc = new Rectangle(20, 20, image.Width - 40, image.Height - 40);
MosaicCommand mos = new MosaicCommand(10);
mos.RegionOfInterest = new RegionOfInterest(rc);
mos.Apply(image);
]]></code>

<code lang="VB" title="MosaicVB (Visual Basic)"><![CDATA[
' Load the image to work with.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1save.jpg") 
 
' Apply a mosaic effect to the middle of the image.
Dim rc As Rectangle =  New Rectangle(20,20,image.Width - 40,image.Height - 40) 
Dim mos As MosaicCommand =  New MosaicCommand(10) 
mos.RegionOfInterest = New RegionOfInterest(rc)
mos.Apply(image)
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.squareSize">
            <summary> Gets or sets the size of the mosaic tiles. </summary>
            <value> <para>The size of the mosaic tiles.</para> </value>
            <exception> Thrown if value is less than 2. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>MosaicCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of MosaicCommand specifying squareSize. </summary>
            <summary> Creates a new instance of MosaicCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor(System.Int32)">
            <summary> Creates a new instance of MosaicCommand specifying the square size. </summary>
            <exception> Thrown if squareSize is less than 2. </exception>
            <param name="squareSize"> <para>The size of the mosaic tiles.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor">
            <summary> Creates a new instance of <STRONG>MosaicCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">Image must be 24bit or higher.;image</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">SquareSize;The square size cannot be larger than the image or region.</exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.SquareSize">
            <summary> Gets or sets the size of the mosaic tiles. </summary>
            <value> <para>The size of the mosaic tiles.</para> </value>
            <exception> Thrown if value is less than 2. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand">
            <summary> Create an effect to simulate motion blur on an image </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.mode">
            <summary> Gets or sets the manner of the blur. </summary>
            <remarks> Default value is MotionBlurMode.Linear. </remarks>
            <value> The blur mode to use. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.angle">
            <summary> Gets or sets the angle of the blur in degrees. </summary>
            <remarks> Default is 0. </remarks>
            <value> The angle of the blur in degrees. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.distance">
            <summary> Gets or sets the distance of the blur in pixels. </summary>
            <remarks> Default value is 10. </remarks>
            <value> The distance of the blur in pixels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.steps">
            <summary> Gets or sets the number of steps in the blur. </summary>
            <remarks> This value must be at least 1.  Default value is 2. </remarks>
            <value> The number of steps in the blur. </value>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Double,System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode,System.Double)">
            <summary> Constructs a new MotionBlurCommand with the provided distance, number of steps, mode and angle. </summary>
            <exception> Thrown if the steps argument is less than 1. </exception>
            <param name="distance"> The distance of the blur. </param>
            <param name="steps"> The number of steps used in the blur. </param>
            <param name="mode"> The manner of the blur. </param>
            <param name="angle"> The angle of the blur in degrees. </param>
            <overloads> Constructs a new MotionBlurCommand with the provided information. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Double,System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode)">
            <summary> Constructs a new MotionBlurCommand with the provided distance, number of steps and mode. </summary>
            <exception> Thrown if the steps argument is less than 1. </exception>
            <param name="distance"> The distance of the blur. </param>
            <param name="steps"> The number of steps used in the blur. </param>
            <param name="mode"> The manner of the blur. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Double,System.Int32)">
            <summary> Constructs a new MotionBlurCommand with the provided distance and number of steps. </summary>
            <exception> Thrown if the steps argument is less than 1. </exception>
            <param name="distance"> The distance of the blur. </param>
            <param name="steps"> The number of steps used in the blur. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor">
            <summary> Creates a new instance of <STRONG>MotionBlurCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>MotionBlurCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>MotionBlurCommand</STRONG>. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Distance">
            <summary> Gets or sets the distance of the blur in pixels. </summary>
            <remarks> Default value is 10. </remarks>
            <value> The distance of the blur in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Steps">
            <summary> Gets or sets the number of steps in the blur. </summary>
            <remarks> This value must be at least 1.  Default value is 2. </remarks>
            <value> The number of steps in the blur. </value>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Mode">
            <summary> Gets or sets the manner of the blur. </summary>
            <remarks> Default value is MotionBlurMode.Linear. </remarks>
            <value> The blur mode to use. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Angle">
            <summary> Gets or sets the angle of the blur in degrees. </summary>
            <remarks> Default is 0. </remarks>
            <value> The angle of the blur in degrees. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel8bppIndexed
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand">
            <summary> This effect makes an image appear as if it's an oil painting. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.brushWidth">
            <summary> Gets or set the width of the virtual brush. </summary>
            <value> The width of the virtual brush. </value>
            <remarks> Low number work best ( 3, 4, 5, ... ). </remarks>
            <exception> Thrown if value is not greater than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.maxDensity">
            <summary> Gets or sets the internal quantization level. </summary>
            <value> The internal quantization level.  (0 to 255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.blendColorEdges">
            <summary> Gets or sets a value indicating whether the edges use color blending. </summary>
            <value> A value indicating whether the edges use color blending. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.enhanceContrast">
            <summary> Gets or sets a value indicating whether the image contrast is enhanced. </summary>
            <value> A value indicating whether the image contrast is enhanced. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>OilPaintCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of OilPaintCommand. </overloads>
            <summary> Creates a new instance of OilPaintCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor">
            <summary> Creates a new instance of <STRONG>OilPaintCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of <STRONG>OilPaintCommand</STRONG> specifying brush width and max density.
            </summary>
            <exception> Thrown if the brushWidth is less than or equal to 0, or if maxDensity is less than 0 or greater than
            255. </exception>
            <param name="brushWidth"> The width of the virtual brush.  Must be greater than zero. </param>
            <param name="maxDensity"> The internal quantization level.  (0 to 255) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary> Creates a new instance of <STRONG>OilPaintCommand</STRONG> specifying the brush width, max density, color
            edges and contrast enhancement. </summary>
            <exception> Thrown if the brushWidth is less than or equal to 0, or if maxDensity is less than 0 or greater than
            255. </exception>
            <param name="brushWidth"> The width of the virtual brush. Must be greater than zero. </param>
            <param name="maxDensity"> The internal quantization level. (0 to 255) </param>
            <param name="blendColorEdges"> A value indicating whether the edges use color blending. </param>
            <param name="enhanceContrast"> A value indicating whether the image contrast is enhanced. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.BrushWidth">
            <summary> Gets or set the width of the virtual brush. </summary>
            <value> The width of the virtual brush. </value>
            <remarks> Low number work best ( 3, 4, 5, ... ). </remarks>
            <exception> Thrown if value is not greater than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.MaxDensity">
            <summary> Gets or sets the internal quantization level. </summary>
            <value> The internal quantization level.  (0 to 255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.BlendColorEdges">
            <summary> Gets or sets a value indicating whether the edges use color blending. </summary>
            <value> A value indicating whether the edges use color blending. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.EnhanceContrast">
            <summary> Gets or sets a value indicating whether the image contrast is enhanced. </summary>
            <value> A value indicating whether the image contrast is enhanced. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand">
            <summary> Generate an image made up of primary and secondary colors of the source image.  </summary>
            <remarks> This method requires a 24-bit image. If the source image is not continuous, it will throw the <see cref="T:System.ArgumentException"/></remarks>
            <seealso> MosaicCommand Example </seealso>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>PosterizeCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of <STRONG>PosterizeCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.#ctor">
            <summary> Creates a new instance of <STRONG>PosterizeCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand">
            <summary> Attempts to eliminate "red-eye" from a region of an RGB image. </summary>
            <remarks> You must select an "eye" region from the image, then choose a saturation level and color range.  These
            should be done interactively, as the color and saturation of the "red-eye" effect varies greatly between images. 
            See the Rubberbanding features in WinControls for selecting the eye region. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand._saturationThreshold">
            <summary> Gets or sets the percent that red is allowed to dominates the other colors before it is reduced.
            </summary>
            <value> The percent that red is allowed to dominates the other colors before it is reduced. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand._colorRange">
            <summary> Gets or sets the red band width. </summary>
            <value> The red band width. </value>
            <remarks> Higher values cause pixels with more cyan and yellow to be reduced. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>RedEyeRemovalCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of RedEyeRemovalCommand. </overloads>
            <summary> Creates a new instance of RedEyeRemovalCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>RedEyeRemovalCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor">
            <summary> Creates a new instance of <STRONG>RedEyeRemovalCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Int32)">
            <summary> Creates a new instance of <STRONG>RedEyeRemovalCommand</STRONG> specifying the saturation threshold.
            </summary>
            <exception> Thrown if the saturationThreshold is less than 0 or greater than 100. </exception>
            <param name="saturationThreshold"> The percent that red is allowed to dominates the other colors before it is
            reduced. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of RedEyeRemovalCommand specifying the saturation threshold and color range.
            </summary>
            <exception> Thrown if the saturationThreshold or colorRange is less than 0 or greater than 100. </exception>
            <param name="saturationThreshold"> The percent that red is allowed to dominates the other colors before it is
            reduced. (0 to 100) </param>
            <param name="colorRange"> The red band width. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:Atalasoft.Imaging.ImageProcessException"></exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.SaturationThreshold">
            <summary> Gets or sets the percent that red is allowed to dominates the other colors before it is reduced.
            </summary>
            <value> The percent that red is allowed to dominates the other colors before it is reduced. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.ColorRange">
            <summary> Gets or sets the red band width. </summary>
            <value> The red band width. </value>
            <remarks> Higher values cause pixels with more cyan and yellow to be reduced. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand">
            <remarks> This method requires a 24 or 32 bit image. If the source image is of a different format, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a compatible format. </remarks>
            <summary> Use this command to convert an image into an 8-bit indexed image with a specified number of colors.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.colors">
            <summary> Gets or sets the number of colors you want the resulting image to contain. </summary>
            <value> The number of colors you want the resulting image to contain. </value>
            <exception> Thrown if value is not between 2 and 256. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.ditherMode">
            <summary> Gets or sets the type of <see cref="T:Atalasoft.Imaging.ImageProcessing.DitheringMode"/> to perform. </summary>
            <value> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.DitheringMode"/> to perform. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.ditherMaxError">
            <summary> Gets or sets the maximum error value that can be carried between pixels. </summary>
            <value> The maximum error value that can be carried between pixels. </value>
            <remarks> Valid values are from 0 to 127. </remarks>
            <exception> Thrown if value is not between 0 and 127. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ReduceColorsCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of the ReduceColorsCommand object.,<BR/> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
            <summary> Creates a new instance of <STRONG>ReduceColorsCommand</STRONG>
            specifying colors, ditherMode, and ditherMaxError. </summary>
            <exception> Thrown if colors is less than 2 or greater than 256, or if ditherMaxError is less than 0 or greater than
            127. </exception>
            <param name="colors"> The number of colors you want the resulting image to contain.  (2 to 256) </param>
            <param name="ditherMode"> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.DitheringMode"/> to perform. </param>
            <param name="ditherMaxError"> The maximum error value that can be carried between pixels.  (0 to 127) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor(System.Int32)">
            <summary> Creates a new instance of <STRONG>ReduceColorsCommand</STRONG>
            specifying colors. </summary>
            <exception> Thrown if the colors value is less than 2 or greater than 256. </exception>
            <param name="colors"> The number of colors you want the resulting image to contain. (2 to 256) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ReduceColorsCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.Colors">
            <summary> Gets or sets the number of colors you want the resulting image to contain. </summary>
            <value> The number of colors you want the resulting image to contain. </value>
            <exception> Thrown if value is not between 2 and 256. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMode">
            <summary> Gets or sets the type of <see cref="T:Atalasoft.Imaging.ImageProcessing.DitheringMode"/> to perform. </summary>
            <value> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.DitheringMode"/> to perform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMaxError">
            <summary> Gets or sets the maximum error value that can be carried between pixels. </summary>
            <value> The maximum error value that can be carried between pixels. </value>
            <remarks> Valid values are from 0 to 127. </remarks>
            <exception> Thrown if value is not between 0 and 127. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand">
            <remarks> This method requires a continuous tone or an 8-bit indexed image. </remarks>
            <summary> Replaces a color in an image with another using the specified color tolerance. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.oldColor">
            <summary> Gets or sets the color you want to replace. </summary>
            <value> The color you want to replace. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.newColor">
            <summary> Gets or sets the color used to replace the old color. </summary>
            <value> The color used to replace the old color. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.tolerance">
            <summary> Gets or sets the maximum color distance to match.  Valid values are from 0 to 100.  A value of 0 will provide strict matching. </summary>
            <value> The maximum color distance to match. A value of 0 will provide strict matching. </value>
            <remarks> Valid values are from 0 to 1. </remarks>
            <exception> Thrown if value is not between 0 and 1. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ReplaceColorCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of ReplaceColorCommand specifying oldColor, newColor, and tolerance. </summary>
            <summary> Creates a new instance of ReplaceColorCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>ReplaceColorCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary> Creates a new instance of <STRONG>ReplaceColorCommand</STRONG> specifying color to replace, the new color
            and tolerance. </summary>
            <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
            <param name="oldColor"> The color you want to replace. </param>
            <param name="newColor"> The color used to replace the old color. </param>
            <param name="tolerance"> The maximum color distance to match. A value of 0 will provide strict matching. (0 to 100)
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ReplaceColorCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.OldColor">
            <summary> Gets or sets the color you want to replace. </summary>
            <value> The color you want to replace. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.NewColor">
            <summary> Gets or sets the color used to replace the old color. </summary>
            <value> The color used to replace the old color. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.Tolerance">
            <summary> Gets or sets the maximum color distance to match. A value of 0 will provide strict matching. </summary>
            <value> The maximum color distance to match. A value of 0 will provide strict matching. </value>
            <remarks> Valid values are from 0 to 1. </remarks>
            <exception> Thrown if value is not between 0 and 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel32bppBgra
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand">
            <summary> Create an artistic embossing of an image. </summary>
            <remarks> This command works best on images with an isolated shape on a blank background. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand._highlight">
            <summary> The color that will used for applying highlights. </summary>
            <remarks> Default value is Color.White. </remarks>
            <value> The highlight color. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand._shadow">
            <summary> Sets or gets the color used for shadowing. </summary>
            <remarks> Default value is Color.Black. </remarks>
            <value> The shadow color. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand._depth">
            <summary> The depth of the embossing effect. </summary>
            <remarks> Depth must be greater than zero.  The default value is 5. </remarks>
            <exception> Thrown if the value is not greater than zero. </exception>
            <value> The amount of embossing effect. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand._angle">
            <summary> The angle of the embossing in degrees. </summary>
            <value> An integer in the range of 0 to 359. </value>
            <remarks> Default value is 45. </remarks>
            <exception> Thrown if the value is less than zero or greater than 359. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand._softness">
            <summary> Sets the softness of the mask constructed to build the embossed shaped. </summary>
            <remarks> Softness must be a value from 0 to 1.  Default value is 1.0. </remarks>
            <exception> Thrown if the value is less than zero or greater than 1. </exception>
            <value> The amount of softness used for the emboss. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor">
            <summary> Creates a new instance of <STRONG>RoundedBevelCommand</STRONG>. </summary>
            <overloads> Construct a new RoundedBevelCommand from the information provided. </overloads>
            <summary> Construct a new RoundedBevelCommand with default properties. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32)">
            <summary> Construct a new RoundedBevelCommand with the depth provided. </summary>
            <exception> Thrown if the depth is not greater than 0. </exception>
            <param name="depth"> The depth of the embossing effect. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32,System.Int32)">
            <summary> Construct a new <STRONG>RoundedBevelCommand</STRONG> with the depth and angle provided. </summary>
            <exception> Thrown if the depth is less than 0, or if angle is less than 0 or greater than 359. </exception>
            <param name="depth"> The depth of the embossing effect. </param>
            <param name="angle"> The angle of the embossing in degrees. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32,System.Int32,System.Single)">
            <summary> Construct a new <STRONG>RoundedBevelCommand</STRONG> with the depth, angle and softness provided.
            </summary>
            <exception> Thrown if an argument is out of its specified range. </exception>
            <param name="depth"> The depth of the embossing effect. Must be greater than 0. </param>
            <param name="angle"> The angle of the embossing in degrees.  (0 to 359) </param>
            <param name="softness"> Sets the softness of the mask constructed to build the embossed shaped. (0.0 to 1.0)
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)">
            <summary> Construct a new <STRONG>RoundedBevelCommand</STRONG> with the depth, angle and softness provided. 
            Highlights and shadows will be created with the provided colors. </summary>
            <exception> Thrown if an argument is out of its specified range. </exception>
            <param name="depth"> The depth of the embossing effect. Must be greater than 0. </param>
            <param name="angle"> The angle of the embossing in degrees. (0 to 359) </param>
            <param name="softness"> Sets the softness of the mask constructed to build the embossed shaped. (0.0 to 1.0)
            </param>
            <param name="highlight"> The color that will used for applying highlights. </param>
            <param name="shadow"> Sets or gets the color used for shadowing. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>RoundedBevelCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Depth;The depth property must be less than half the width or height of the image, whichever is smaller.</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Depth">
            <summary> The depth of the embossing effect. </summary>
            <remarks> Depth must be greater than zero.  The default value is 5. </remarks>
            <exception> Thrown if the value is not greater than zero. </exception>
            <value> The amount of embossing effect. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Angle">
            <summary> The angle of the embossing in degrees. </summary>
            <value> An integer in the range of 0 to 359. </value>
            <remarks> Default value is 45. </remarks>
            <exception> Thrown if the value is less than zero or greater than 359. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Softness">
            <summary> Sets the softness of the mask constructed to build the embossed shaped. </summary>
            <remarks> Softness must be a value from 0 to 1.  Default value is 1.0. </remarks>
            <exception> Thrown if the value is less than zero or greater than 1. </exception>
            <value> The amount of softness used for the emboss. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Highlight">
            <summary> The color that will used for applying highlights. </summary>
            <remarks> Default value is Color.White. </remarks>
            <value> The highlight color. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Shadow">
            <summary> Sets or gets the color used for shadowing. </summary>
            <remarks> Default value is Color.Black. </remarks>
            <value> The shadow color. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand">
            <summary> Modify the saturation levels of an image. </summary>
            <remarks> This method requires a continuous tone image. </remarks>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.saturationLevel">
            <summary> Gets or sets the saturation level to apply. </summary>
            <value> The saturation level to apply. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SaturationCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of SaturationCommand specifying saturationLevel. </summary>
            <summary> Creates a new instance of SaturationCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor(System.Double)">
            <summary> Creates a new instance of <STRONG>SaturationCommand</STRONG> specifying the saturation level. </summary>
            <param name="saturationLevel"> The saturation level to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor">
            <summary> Creates a new instance of <STRONG>SaturationCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.SaturationLevel">
            <summary> Gets or sets the saturation level to apply. </summary>
            <value> The saturation level to apply. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand">
            <summary>
            Generate an image that looks like it was drawn with paint and a heavy outline pen.
            </summary>
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, 
            it will raise the <see cref="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat"/>
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.mode">
            <summary> Gets or sets the ScribbleMode for the command. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.filterFirst">
            <summary> Gets or sets whether or not a filter should be applied to the image before the strokes. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.darkness">
            <summary> Gets or sets the darkness of the lines used for scribbling. </summary>
            <value> An integer from 0 to 100. </value>
            <exception> Thrown if the value is less than 0 or greater than 100. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ScribbleCommand</STRONG>. </summary>
            <overloads> Constructs a new ScribbleCommand with the information provided. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode,System.Boolean,System.Int32)">
            <exception> Thrown if the darkness argument is less than 0 or greater than 100. </exception>
            <summary> Creates a new instance of <STRONG>ScribbleCommand</STRONG> specifying the mode, darkness and whether the
            filter should be applied before the effect. </summary>
            <param name="mode"> The mode that will be used for the scribbling. </param>
            <param name="filterFirst"> Filter the image before the scribbling effect is applied. </param>
            <param name="darkness"> The darkness of the lines. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ScribbleCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            The method is called by the default implementation of Apply.  It determines if it is necessary to create a
            copy of the source image in a different pixel format and if so, determines the best new pixel format and allocates
            that image.
            </summary>
            <param name="image">The original source image passed to Apply.</param>
            <returns>
            A new image in a pixel format supported by the command or <EM>null</EM> to indicate that the original
            image is acceptable.
            </returns>
            <remarks>
              <para>The default implementation of ConstructChangedSourceImage requests that the command report its
            preferred pixel format (typically, this is the source image's pixel format, but some commands support many pixel
            formats, but work best in gray, for example), and if that is supported, returns a new image in the preferred format
            if it is different from the source image.</para>
              <para>If the pixel format is not supported and ApplyToAnyPixelFormat is set to true, the command is queried for its
            best alternate pixel format and a new image is returned in that pixel format.  If ApplyToAnyPixelFormat is set to
            false, ConstructChangedSourceImage will throw an IncompatiblePixelFormatException.</para>
              <para>If an error occurs, ConstructChangedImage should throw an exception.  Any new image constructed by
            ConstructChangedImage must be a pixel format supported by this command.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.Mode">
            <value>Type of filter to apply to the image.</value>
            <summary> Gets or sets the ScribbleMode for the command. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.FilterFirst">
            <value>Filter before drawing lines.</value>
            <summary> Gets or sets whether or not a filter should be applied to the image before the strokes. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.Darkness">
            <summary> Gets or sets the darkness of the lines used for scribbling. </summary>
            <value> An integer from 0 to 100. </value>
            <exception> Thrown if the value is less than 0 or greater than 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel8bppIndexed
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand">
            <summary> <para>Use this command to adjust the curves to generate a classic "solarize" effect.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will throw the <see cref="T:System.ArgumentException"/></remarks>
            <seealso> MosaicCommand Example </seealso>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SolarizeCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of SolarizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> <para>A SerializationInfo containing information for this command. </para> </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.#ctor">
            <summary> Creates a new instance of <STRONG>SolarizeCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand">
            <summary> <para>This command generates a bumped image effect.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a compatible format. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.size">
            <summary> Gets or sets the size of the spots. </summary>
            <value> The size of the spots. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.filter">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType"/> used to control blurring. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType"/> used to control blurring.</para> </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.mode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode"/> to use for this command. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode"/> to use for this command.</para> </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>StippleCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand"/> specifying size, filter, and mode. </summary>
            <summary> Creates a new instance of StippleCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType,Atalasoft.Imaging.ImageProcessing.Effects.StippleMode)">
            <summary> Creates a new instance of <STRONG>StippleCommand</STRONG> specifying the size, filter and stipple mode.
            </summary>
            <exception> Thrown if the size is less than 0 or greater than 100. </exception>
            <param name="size"> The size of the spots. (0 to 100) </param>
            <param name="filter"> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType"/> used to control blurring.</para> </param>
            <param name="mode"> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode"/> to use for this command.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor">
            <summary> Creates a new instance of <STRONG>StippleCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            The method is called by the default implementation of Apply.  It determines if it is necessary to create a
            copy of the source image in a different pixel format and if so, determines the best new pixel format and allocates
            that image.
            </summary>
            <param name="image">The original source image passed to Apply.</param>
            <returns>
            A new image in a pixel format supported by the command or <EM>null</EM> to indicate that the original
            image is acceptable.
            </returns>
            <remarks>
              <para>The default implementation of ConstructChangedSourceImage requests that the command report its
            preferred pixel format (typically, this is the source image's pixel format, but some commands support many pixel
            formats, but work best in gray, for example), and if that is supported, returns a new image in the preferred format
            if it is different from the source image.</para>
              <para>If the pixel format is not supported and ApplyToAnyPixelFormat is set to true, the command is queried for its
            best alternate pixel format and a new image is returned in that pixel format.  If ApplyToAnyPixelFormat is set to
            false, ConstructChangedSourceImage will throw an IncompatiblePixelFormatException.</para>
              <para>If an error occurs, ConstructChangedImage should throw an exception.  Any new image constructed by
            ConstructChangedImage must be a pixel format supported by this command.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Size">
            <summary> Gets or sets the size of the spots. </summary>
            <value> The size of the spots. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Filter">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType"/> used to control blurring. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType"/> used to control blurring.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Mode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode"/> to use for this command. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode"/> to use for this command.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand">
            <summary> <para>Converts a grayscale image into a RGB or RGBA image and applies a color tint in the same
            process.</para> </summary>
            <remarks> This method requires an 8-bit or 16-bit grayscale w/ alpha image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.colorToTint">
            <summary> Gets or sets the color to tint the output. </summary>
            <value> The color to tint the output. </value>
            <exception> Thrown if value equals Color.IsEmpty. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>TintGrayscaleCommand</STRONG> from serialization information. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand"/> specifying colorToTint. </summary>
            <summary> Creates a new instance of TintGrayscaleCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor(System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>TintGrayscaleCommand</STRONG> specifying the tint color. </summary>
            <exception> Thrown if colorToTint equals Color.IsEmpty. </exception>
            <param name="colorToTint"> The color to tint the output. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor">
            <summary> Creates a new instance of <STRONG>TintGrayscaleCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ColorToTint">
            <summary> Gets or sets the color to tint the output. </summary>
            <value> The color to tint the output. </value>
            <exception> Thrown if value equals Color.IsEmpty. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode">
            <summary> Specifies the tint mode for <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode.Darken">
            <summary> Darkens the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode.Lighten">
            <summary> Lightens the image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand">
            <summary> This command modifies an image to appear as if it was drawn using watercolors. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.blur">
            <summary> Gets or sets the amount of blurring to add during processing. </summary>
            <value> The amount of blurring to add during processing. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.enhanceContrast">
            <summary> Gets or sets a value indicating whether the image contrast is enhanced during processing. </summary>
            <value> A value indicating whether the image contrast is enhanced during processing. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>WatercolorTintCommand</STRONG> from serialization information.
            </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of WatercolorTintCommand. </overloads>
            <summary> Creates a new instance of WatercolorTintCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills the SerializationInfo object with information for this command. </summary>
            <exception> Thrown if the info argument is null (Nothing in VB). </exception>
            <param name="info"> A SerializationInfo containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor">
            <summary> Creates a new instance of <STRONG>WatercolorTintCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode)">
            <summary> Creates a new instance of <STRONG>WatercolorTintCommand</STRONG> specifying the blur and tint mode.
            </summary>
            <exception> Thrown if blur is less than 0 or greater than 100. </exception>
            <param name="blur"> The amount of blurring to add during processing. (0 to 100) </param>
            <param name="mode"> Indicates if the image should be lightened or darkened. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode,System.Boolean)">
            <summary> Creates a new instance of <STRONG>WatercolorTintCommand</STRONG> specifying blur, tint mode and contrast
            enhancement. </summary>
            <exception> Thrown if blur is less than 0 or greater than 100. </exception>
            <param name="blur"> The amount of blurring to add during processing. (0 to 100) </param>
            <param name="mode"> Indicates if the image should be lightened or darkened. </param>
            <param name="enhanceContrast"> A value indicating whether the image contrast is enhanced during processing. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.Blur">
            <summary> Gets or sets the amount of blurring to add during processing. </summary>
            <value> The amount of blurring to add during processing. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.Tint">
            <summary> Gets or sets a value indicating if the image should be lightened or darkened. </summary>
            <value> Indicates if the image should be lightened or darkened. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.EnhanceContrast">
            <summary> Gets or sets a value indicating whether the image contrast is enhanced during processing. </summary>
            <value> A value indicating whether the image contrast is enhanced during processing. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.MergeOption">
            <summary>
            Image overlay merge options.
            </summary>
            <summary> Image overlay merge options. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.FastBlend">
            <summary>
            Fast Blend. Uses factor parameter as opacity.
            </summary>
            <summary> Fast Blend. Uses factor parameter as opacity. (0 to 1) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AccurateBlend">
            <summary>
            Slower, more accurate blend. Uses factor parameter as opacity.
            </summary>
            <summary> Slower, more accurate blend. Uses factor parameter as opacity.  (0 to 1) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalAnd">
            <summary>
            Pixels are combined with logical AND.
            </summary>
            <summary> Pixels are combined with logical AND.  Supports binary images. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalOR">
            <summary>
            Pixels are combined with logical OR.
            </summary>
            <summary> Pixels are combined with logical OR.  Supports binary images. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalXOR">
            <summary>
            Pixels are combined with logical XOR.
            </summary>
            <summary> Pixels are combined with logical XOR.  Supports binary images. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Max">
            <summary>
            Output pixels is max of top and bottom.
            </summary>
            <summary> Output pixels is max of top and bottom. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Min">
            <summary>
            Output pixel is min of top and bottom.
            </summary>
            <summary> Output pixel is min of top and bottom. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Sum">
            <summary>
            Output pixel is sum of top and bottom.
            </summary>
            <summary> Output pixel is sum of top and bottom. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Difference">
            <summary>
            Output pixel is difference of top and bottom.
            </summary>
            <summary> Output pixel is difference of top and bottom. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.GreaterThanFactor">
            <summary>
            If top pixel value > factor, output top pixel value, otherwise output factor.
            </summary>
            <summary> If top pixel value gt; factor, output top pixel value, otherwise output factor. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LessThanFactor">
            <summary>
            If top pixel value &lt; factor, output top pixel value, otherwise output factor.
            </summary>
            <summary> If top pixel value lt; factor, output top pixel value, otherwise output factor. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AbsoluteValueOfDifference">
            <summary>
            Absolute value of the differnce of top and bottom pixel.
            </summary>
            <summary> Absolute value of the differnce of top and bottom pixel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Multiply">
            <summary>
            Multiply bottom pixel value by top pixel value and divide by 255 (top * bottom) / 255.
            </summary>
            <summary> Multiply bottom pixel value by top pixel value and divide by 255 (top * bottom) / 255. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MultiplyWidthFactor">
            <summary>
            Multiply bottom pixel value by top pixel value and by a factor and divide by 255 (top * bottom * factor) / 255.
            </summary>
            <summary> Multiply bottom pixel value by top pixel value and by a factor and divide by 255 (top * bottom * factor) /
            255. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Screen">
            <summary>
            255-(((255-top)*(255-bottom)) / 255).
            </summary>
            <summary> 255-(((255-top)*(255-bottom)) / 255). </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.PlusFactor">
            <summary>
            bottom = bottom + top - factor
            </summary>
            <summary> bottom = bottom + top - factor </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MinusFactor">
            <summary>
            bottom = bottom - top - factor
            </summary>
            <summary> bottom = bottom - top - factor </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeAnd">
            <summary> <para>Performs a negative Logical AND. </para>
            <para>This can only be used with 1-bit images.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeOR">
            <summary> <para>Performs a negative Logical OR. </para>
            <para>This can only be used with 1-bit images.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeXOR">
            <summary> <para>Performs a negative Logical XOR.</para>
            <para>This can only be used with 1-bit images.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Copy">
            <summary>
            Performs a copy operation
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.ColorDodge">
            <summary> Color dodge </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.ColorBurn">
            <summary> Color burn </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.SoftDodge">
            <summary> Soft Dodge </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.SoftBurn">
            <summary> Soft Burn </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Photoshop">
            <summary> Photoshop "overlay" </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.SoftLight">
            <summary> soft light (similar but not identical to Photoshop) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.HardLight">
            <summary> Hard light </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderReflect">
            <summary> XFader reflect </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderGlow">
            <summary> XFader glow </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderFreeze">
            <summary> XFader freeze </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderHeat">
            <summary> XFader heat </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ChannelFlags">
            <summary>
            Bit flags used by some methods to specify which channels to work with.
            </summary>
            <summary> Bit flags used by some methods to specify which channels to work with. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel1">
            <summary> The first channel in the image.  For a RGB or RGBA image this is the Blue color channel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel2">
            <summary> The second channel in the image.  For a RGB or RGBA image this is the Green color channel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel3">
            <summary> The third channel in the image.  For a RGB or RGBA image this is the Red color channel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel4">
            <summary> The fourth channel in the image.  For a RGBA image this is the Alpha channel. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.AllChannels">
            <summary> Specifies all channels in the image (Channel1 | Channel2 | Channel3 | Channel4). </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AlphaMergeType">
            <summary>
            When images are combined, the alpha channels may be merged in one of many ways as listed in this enumeration.
            </summary>
            <summary> When images are combined, the alpha channels may be merged in one of many ways as listed in this
            enumeration. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Replace">
            <summary>
            Replace the bottom alpha value with the top.
            </summary>
            <summary> Replace the bottom alpha value with the top. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostOpaque">
            <summary>
            Use the higher of the bottom and top values.
            </summary>
            <summary> Use the higher of the bottom and top values. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostTransparent">
            <summary>
            Use the lower of the bottom and top values.
            </summary>
            <summary> Use the lower of the bottom and top values. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Add">
            <summary>
            Add the bottom and top values.  The maximum value is 255.
            </summary>
            <summary> Add the bottom and top values. The maximum value is 255. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Subtract">
            <summary>
            Subtract the top value from the bottom.  The minimum value is 0.
            </summary>
            <summary> Subtract the top value from the bottom. The minimum value is 0. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalAnd">
            <summary>
            Perform a bitwise logical AND on the bottom and top values.
            </summary>
            <summary> Perform a bitwise logical AND on the bottom and top values. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalOR">
            <summary>
            Perform a bitwise logical OR on the bottom and top values.
            </summary>
            <summary> Perform a bitwise logical OR on the bottom and top values. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalXOR">
            <summary>
            Perform a bitwise logical XOR on the bottom and top values.
            </summary>
            <summary> Perform a bitwise logical XOR on the bottom and top values. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseOriginal">
            <summary>
            Ignore the top value.
            </summary>
            <summary> Ignore the top value. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode">
            <summary> Specifies the interpolation to use with various image processing commands. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.None">
            <summary> No interpolation. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiLinear">
            <summary> Uses standard bi-linear interpolation. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiCubic">
            <summary> Slowest, but most accurate interpolation. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ColorMatchMode">
            <summary> Specifies the type of colormatching to use when using FloodFillCommand. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Edge">
            <summary> Indicates that the colormatching will occur up to a border of the specified color. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Surface">
            <summary> Indicates that the colormatching will occur with all contingous pixels from the starting point. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformType">
            <remarks> The specific type of JPEG transform. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.None">
            <summary> No Transform. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipHorizontal">
            <summary> Flip the image horizontally. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipVertical">
            <summary> Flip the image vertically. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transverse">
            <summary> Transpose across upper-right to lower-left axis. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transpose">
            <summary> Transpose across upper-leftto lower-right axis. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate90">
            <summary> Rotate the image 90 degrees. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate180">
            <summary> <para>Rotate the image 180 degrees.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate270">
            <summary> Rotate the image 270 degrees. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags">
            <remarks> <para>Lossless Transform options</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Grayscale">
            <summary> Discard the chrominance channels in standard (YCbCr encoded) JPEGs. This leaves just the luminance which
            gives you a grayscale JPEG. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.NoExcessMcuBlocks">
            <summary> Do not remove excess MCU blocks. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Progressive">
            <summary> Set or remove the progressive display option. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.DitheringMode">
            <summary> Specifies the dithering algorithm to use when converting an image to colormapped. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.None">
            <summary> Specifies a best fit method with no dithering. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.TwoValue">
            <summary> Specifies a simple 2-value style of dithering. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.FloydSteinberg">
            <summary> <para>Specifies Floyd-Steinberg dithering.  This method of dithering uses error diffusion and produces the
            best dithered image.</para> </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod">
            <summary> Specifies the type of resampling method to apply when using the %ResampleCommand%,
            %ResampleColormappedToRgbCommand% or the %Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand%.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Default">
            <summary> Uses a predefined resampling method depending on the image PixelFormat and final size.  Uses Nearest
            Neighbor resampling for 1-bit and 8-bit colormapped images, BiLinear when increasing the size of continuous tone
            images. and AreaAverage when reducing continuous tone images. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.NearestNeighbor">
            <summary> Use the nearest pixel value.  This is the fastest algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiLinear">
            <summary> Uses bi-linear resampling.  Yields good results when enlarging images, and fairly fast. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiCubic">
            <summary> Uses bi-cubic interpolation.  Better quality then bi-linear but slower. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.AreaAverage">
            <summary> Average the pixel values when reducing image size.  Will cause an exception to be thrown if increasing
            image size. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BoxFilter">
            <summary> BoxFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.TriangleFilter">
            <summary> TriangleFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HammingFilter">
            <summary> HammingFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.GaussianFilter">
            <summary> GaussianFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BellFilter">
            <summary> BellFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BsplineFilter">
            <summary> BsplineFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Cubic1Filter">
            <summary> CubicFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Cubic2Filter">
            <summary> Cubic2Filter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.LanczosFilter">
            <summary> <para>Generally yields the best results for photographic images at the expense of speed.  Very similar to
            Photoshop's Bi-cubic reductions.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.MitchellFilter">
            <summary> MitchellFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.SincFilter">
            <summary> SincFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HermiteFilter">
            <summary> HermiteFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HanningFilter">
            <summary> HanningFilter resize algorithm. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.CatromFilter">
            <summary> CatromFilter resize algorithm. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand">
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid"/>
            <summary> Combines low pass and high pass to filters at a low and high cutoff radius. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand">
            <summary> The base class used for all FFT (Fast Fourier Transform) filters for frequency domain image processing.
            </summary>
            <remarks> Includes the method <STRONG>ApplyToGrid</STRONG> which allows multiple FFT filters to be applied
            without converting back and forth to the frequency domain.  Can also be used normally with the <STRONG>ApplyToImage
            </STRONG>method for processing a single FFT filter. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <returns> <STRONG>null </STRONG>(<STRONG>Nothing </STRONG>in Visual Basic) </returns>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.lowCutoff">
            <summary> Gets or sets the low cutoff radius in the frequency domain. </summary>
            <value> The low cutoff radius in the frequency domain. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.highCutoff">
            <summary> Gets or sets the high cutoff radius in the frequency domain. </summary>
            <value> The high cutoff radius in the frequency domain. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>BandPassFftCommand</STRONG>. </overloads>
            <summary> Initializes a new instance of BandPassFftCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">BandPassFftCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.#ctor(System.Double,System.Double)">
            <summary> Initializes a new BandPassFftCommand specifying the cut off values. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary> Applies <STRONG>BandPassFftComand</STRONG> to a grid. </summary>
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.LowCutoff">
            <summary> Gets or sets the low cutoff radius in the frequency domain. </summary>
            <value> The low cutoff radius in the frequency domain. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.HighCutoff">
            <summary> Gets or sets the high cutoff radius in the frequency domain. </summary>
            <value> The high cutoff radius in the frequency domain. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand">
            <seealso> FftGrid Example </seealso>
            <summary> Similar to the high pass butterworth filter with an additive offset and multiplier. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.offset">
            <summary> Gets or sets the offset applied to the high pass filter. </summary>
            <value> The offset applied to the high pass filter. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.factor">
            <summary> Gets or sets the multiplier applied to the high pass filter. </summary>
            <value> The multiplier applied to the high pass filter. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>ButterworthHighBoostFftCommand</STRONG>. </overloads>
            <summary> Initializes a new instance of <STRONG>ButterworthHighBoostFftCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">ButterworthHighBoostFftCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.#ctor(System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of <STRONG>ButterworthHighBoostFftCommand</STRONG> specifying the cutoff
            radius, factor, and offset. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Offset">
            <summary> Gets or sets the offset applied to the high pass filter. </summary>
            <value> The offset applied to the high pass filter. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Factor">
            <summary> Gets or sets the multiplier applied to the high pass filter. </summary>
            <value> The multiplier applied to the high pass filter. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand">
            <summary> Similar to the ideal high pass filter, but with smoother transitions and less "ringing". </summary>
            <remarks> High pass filters clip low frequencies tending to sharpen images. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.order">
            <summary> Gets or sets the function order. </summary>
            <value> The function order. </value>
            <remarks> A good value to start with is 2.0. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>ButterworthHighPassFftCommand</STRONG>. </overloads>
            <summary> Initializes a new instance of <STRONG>ButterworthHighPassFftCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">ButterworthHighPassFftCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.#ctor(System.Double,System.Double)">
            <summary> Initializes a new instance of <STRONG>ButterworthHighPassFftCommand</STRONG> specifying the cutoff radius
            and order. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.Cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.Order">
            <summary> Gets or sets the function order. </summary>
            <value> The function order. </value>
            <remarks> A good value to start with is 2.0. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand">
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid"/>
            <remarks> Low pass filters clip high frequencies tending to blur images. </remarks>
            <summary> Similar to the ideal low pass filter, but with smoother transitions and less "ringing". </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.order">
            <remarks> A good value to start with is 2.0. </remarks>
            <summary> Gets or sets the function order. </summary>
            <value> The function order. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>ButterworthLowPassFftCommand</STRONG>. </overloads>
            <summary> Initializes a new instance of <STRONG>ButterworthLowPassFftCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">ButterworthLowPassFftCommand does not support serialzation</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.#ctor(System.Double,System.Double)">
            <summary> Initializes a new instance of <STRONG>ButterworthLowPassFftCommand</STRONG> specifying the cutoff radius
            and order. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.Cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.Order">
            <remarks> A good value to start with is 2.0. </remarks>
            <summary> Gets or sets the function order. </summary>
            <value> The function order. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid">
            <summary> The <STRONG>FftGrid</STRONG> is used as an intermediate step in FFT processing.  It transforms a
            grayscale image into the FFT domain, and is required prior to all FFT filters.  </summary>
            <remarks> When using the Grid as the intermediate step, multiple FFT filters can be applied.  Each FFT Command has
            an ApplyToGrid method that uses an <STRONG>FftGrid</STRONG> to process.  Once the image has completed
            processing, be sure to return the changed image with the <STRONG>GetProcessedImage </STRONG>method. </remarks>
            <example>
<code lang="CS" title="FftGrid Example (C#)"><![CDATA[
// Load an 8-bit grayscale image.
AtalaImage image = new AtalaImage(@"D:\Test Images\JPG\8-bit alpha mask.jpg");

// Resize the image so its width and height are a power of 2.
Size newSize = new Size(FftGrid.GetNextPowerOfTwo(image.Width), FftGrid.GetNextPowerOfTwo(image.Height));
ResampleCommand resample = new ResampleCommand(newSize);
AtalaImage temp = resample.ApplyToImage(image);
image.Dispose();

// Create an FftGrid from the image and apply a filter to it.
FftGrid grid = new FftGrid(temp);
ButterworthHighPassFftCommand cmd = new ButterworthHighPassFftCommand(1.2, 2.4);
cmd.ApplyToGrid(grid);

// Get the resulting image.
this.viewer.Image = grid.GetProcessedImage();
temp.Dispose();
]]></code>

<code lang="VB" title="FftGrid Example (Visual Basic)"><![CDATA[
' Load an 8-bit grayscale image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\JPG\8-bit alpha mask.jpg") 
 
' Resize the image so its width and height are a power of 2.
Dim NewSize As Size =  New Size(FftGrid.GetNextPowerOfTwo(image.Width),FftGrid.GetNextPowerOfTwo(image.Height)) 
Dim resample As ResampleCommand =  New ResampleCommand(NewSize) 
Dim temp As AtalaImage =  resample.ApplyToImage(image) 
image.Dispose()
 
' Create an FftGrid from the image and apply a filter to it.
Dim grid As FftGrid =  New FftGrid(temp) 
Dim cmd As ButterworthHighPassFftCommand =  New ButterworthHighPassFftCommand(1.2,2.4) 
cmd.ApplyToGrid(grid)
 
' Get the resulting image.
Me.viewer.Image = grid.GetProcessedImage()
temp.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.image">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.AtalaImage"/> associated with this <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid"/>. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> associated with this FftGrid.</value>
            <exception> Thrown if the image is not grayscale. </exception>
            <exception> Thrown if the image dimensions are not a power of 2. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.width">
            <summary> Gets the width of this <STRONG>FftGrid</STRONG>. </summary>
            <value> The width of this <STRONG> FftGrid</STRONG>   . </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.height">
            <summary> Gets the height of this <STRONG></STRONG>FftGrid. </summary>
            <value> The height of this <STRONG> FftGrid</STRONG>   . </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.#ctor(Atalasoft.Imaging.AtalaImage)">
            <param name="image"> The grayscale <STRONG>AtalaImage </STRONG>to initialize the <STRONG>FftGrid </STRONG>with.
            </param>
            <remarks> Initializes a new instance of <STRONG> FftGrid.</STRONG>    </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid"/> class.
            </summary>
            <exception cref="T:Atalasoft.Imaging.AtalasoftLicenseException">This command requires a photo pro license.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetProcessedImage">
            <summary> Returns the processed image from the frequency domain. </summary>
            <returns> The processed image. </returns>
            <exception> Thrown if the image paramater is not set. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetNextPowerOfTwo(System.Int32)">
            <summary> A helper function that retrieves the next power of two (128, 256, 512, 1024, etc).  x^2 </summary>
            <returns> The next power of two. </returns>
            <param name="value"> <para>The value to use when testing the next power of two.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Dispose">
            <summary> Cleans up unmanaged resources. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Image">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.AtalaImage"/> associated with this <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid"/>. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.AtalaImage"/> associated with this FftGrid</value>
            <exception> Thrown if the image is not grayscale. </exception>
            <exception> Thrown if the image dimensions are not a power of 2. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Width">
            <summary> Gets the width of this <STRONG>FftGrid</STRONG>. </summary>
            <value> The width of this <STRONG> FftGrid</STRONG>   . </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Height">
            <summary> Gets the height of this <STRONG>FftGrid</STRONG>. </summary>
            <value> The height of this <STRONG> FftGrid</STRONG>   . </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand">
            <seealso> FftGrid Example </seealso>
            <summary> Similar to the high pass gaussian filter with an additive offset and multiplier. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.offset">
            <summary> Gets or sets the offset applied to the high pass filter. </summary>
            <value> The offset applied to the high pass filter. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.factor">
            <summary> Gets or sets the multiplier applied to the high pass filter. </summary>
            <value> the multiplier applied to the high pass filter. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>GaussianHighBoostFftCommand</STRONG>. </overloads>
            <summary> Initializes a new instance of <STRONG>GaussianHighBoostFftCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">GaussianHighBoostFftCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.#ctor(System.Double,System.Double,System.Double)">
            <summary> Initializes a new instance of <STRONG>GaussianHighBoostFftCommand</STRONG> specifying cutoff radius,
            factor, and offset. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Offset">
            <summary> Gets or sets the offset applied to the high pass filter. </summary>
            <value> The offset applied to the high pass filter. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Factor">
            <summary> Gets or sets the multiplier applied to the high pass filter. </summary>
            <value> the multiplier applied to the high pass filter. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand">
            <seealso> FftGrid Example </seealso>
            <summary> Similar to the ideal high pass filter, but with smoother transitions and less "ringing". </summary>
            <remarks> High pass filters clip low frequencies tending to sharpen images. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>GaussianHighPassFftCommand</STRONG>. </overloads>
            <summary> itializes a new instance of <STRONG>GaussianHighPassFftCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">GaussianHighPassFftCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.#ctor(System.Double)">
            <summary> itializes a new instance of <STRONG>GaussianHighPassFftCommand</STRONG> specifying the cutoff frequency.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.Cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand">
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid"/>
            <remarks> Low pass filters clip high frequencies tending to blur images. </remarks>
            <summary> Similar to the ideal low pass filter, but with smoother transitions and less "ringing". </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>GaussianLowPassFftCommand</STRONG>. </overloads>
            <summary> Initializes a new instance of <STRONG>GaussianLowPassFftCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">GaussianLowPassFftCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.#ctor(System.Double)">
            <summary> Initializes a new instance of <STRONG>GaussianLowPassFftCommand</STRONG> specifying the cutoff radius.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.Cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand">
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid"/>
            <summary> The ideal high pass filter zeros out all frequencies inside a specified cutoff radius. </summary>
            <remarks> High pass filters clip low frequencies tending to sharpen images.  Ideal filters use a strict cutoff,
            tending to cause a ringing effect when converted back to the spatial domain.  This "ringing" is similar to how
            JPEG's generate artifacts at sharp color changes.  In practice, Ideal filters are rarely used due to this side
            effect. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>IdealHighPassFftCommand</STRONG>. </overloads>
            <summary> Initializes a new instance of <STRONG>IdealHighPassFftCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">IdealHighPassFftCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.#ctor(System.Double)">
            <summary> Initializes a new instance of <STRONG>IdealHighPassFftCommand</STRONG> specifying the cutoff radius.
            </summary>
            <param name="cutoff"> The cutoff radius </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.Cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand">
            <seealso> FftGrid Example </seealso>
            <summary> The ideal low pass filter zeros out all frequencies outside a specified cutoff radius. </summary>
            <remarks> Low pass filters clip high frequencies tending to blur images.  Ideal filters use a strict cutoff, tending
            to cause a ringing effect when converted back to the spatial domain.  This "ringing" is similar to how JPEG's
            generate artifacts at sharp color changes.  In practice, Ideal filters are rarely used due to this side effect.
            </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>IdealLowPassFftCommand</STRONG>. </overloads>
            <summary> Initializes a new instance of <STRONG>IdealLowPassFftCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">IdealLowPassFftCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.#ctor(System.Double)">
            <summary> Initializes a new instance of <STRONG>IdealLowPassFftCommand</STRONG> specifying the cutoff radius.
            </summary>
            <param name="cutoff"> The cutoff radius </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.Cutoff">
            <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
            <value> The cutoff radius in the frequency domain. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand">
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.power">
            <summary> Gets or sets the power applied to the function controlling the cutoff radius. </summary>
            <value> The power applied to the function controlling the cutoff radius. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Initializes a new instance of <STRONG>InversePowerFftCommand</STRONG>. </overloads>
            <summary> Initializes a new instance of <STRONG>InversePowerFftCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">InversePowerFftCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.#ctor(System.Double)">
            <summary> Initializes a new instance of <STRONG>InversePowerFftCommand </STRONG>specifying the power. </summary>
            <param name="power"> The power applied to the function controlling the cutoff
            radius. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <returns> <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
            <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
            <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.Power">
            <summary> Gets or sets the power applied to the function controlling the cutoff radius. </summary>
            <value> The power applied to the function controlling the cutoff radius. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand">
            <summary> <para>Uses a powerful technique for sharpening images in the presence of low noise levels via an adaptive
            filtering algorithm. </para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.threshold">
            <summary> <para>Gets or sets a value controlling the depth of the effect.</para> </summary>
            <value> <para>A value controlling the depth of the effect.</para> </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
            <remarks> <para>Any value between 0 and 255 is valid.  The lower the value, the greater the effect.</para>
            </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.amount">
            <summary> Gets or sets the amount of the sharpened signal to add to the output image.,<BR/> </summary>
            <value> The amount of the sharpened signal to add to the output image. </value>
            <remarks> <para>0 = no change,<BR/>1 = full change </para><para>You can use any number (even negative), but the
            intended use is between 0 and 1.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.filterQuality">
            <summary> Gets or sets the quality of the filter. </summary>
            <value> The quality of the filter. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AdaptiveUnsharpMaskCommand</STRONG> from serialization information.
            </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <remarks> Region of Interest is available in the Professional edition only. </remarks>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand"/>.
            Creates a new instance of AdaptiveUnsharpMaskCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor(System.Int32,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality)">
            <summary> Creates a new instance of <STRONG>AdaptiveUnsharpMaskCommand</STRONG> specifying the threshold, sharpen
            amount and filter quality. </summary>
            <exception> Thrown if threshold is less than 0 or greater than 255. </exception>
            <param name="threshold"> <para>A value controlling the depth of the effect with the lower the value, the greater the
            effect. (0 to 255)</para> </param>
            <param name="amount"> The amount of the sharpened signal to add to the output image. </param>
            <param name="filterQuality"> Quality of the filter. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AdaptiveUnsharpMaskCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Threshold">
            <summary> <para>Gets or sets a value controlling the depth of the effect.</para> </summary>
            <value> <para>A value controlling the depth of the effect.</para> </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
            <remarks> <para>Any value between 0 and 255 is valid.  The lower the value, the greater the effect.</para>
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Amount">
            <summary> Gets or sets the amount of the sharpened signal to add to the output image.,<BR/> </summary>
            <value> The amount of the sharpened signal to add to the output image. </value>
            <remarks> <para>0 = no change,<BR/>1 = full change </para><para>You can use any number (even negative), but the
            intended use is between 0 and 1.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.FilterQuality">
            <summary> Gets or sets the quality of the filter. </summary>
            <value> The quality of the filter. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand">
            <summary> Add different types of noise to an image. </summary>
            <seealso> Workspace ApplyCommand </seealso>
            <remarks> See the Workspace or WorkspaceViewer for applying this command to an image. </remarks>
            <seealso> WorkspaceViewer ApplyCommand </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> <para>Only the fourth channel can be set using this flag.  By default, with a value of 0, the fourth
            channel is ignored for RGBA images.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.noiseType">
            <summary> Gets or sets the type of noise to apply. </summary>
            <value> The type of noise to apply. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.variance">
            <summary> Gets or sets a value controlling the intensity. </summary>
            <value> A value controlling the intensity. </value>
            <remarks> There is no upper limit to this value.  A good value to start with is around 500. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.monochromatic">
            <summary> Gets or sets a value that when true applies the same noise equally to each channel. </summary>
            <value> A value that when true applies the same noise equally to each channel. </value>
            <exception> Thrown if value is null (Nothing in Visual Basic). </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.mean">
            <summary> Gets or sets a value which adds additional noise to the output for Gaussian and Uniform noise types.</summary>
            <value> A value which adds additional noise to the output for Gaussian and Uniform noise types. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>AddNoiseCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Initialize a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand"/>. Creates a new instance of AddNoiseCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean)">
            <summary> <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand"/> specifying the filter type, variance, and
            monochromatic setting.</para> </summary>
            <exception> Thrown if the variance argument is less than 0. </exception>
            <param name="noiseType"> The type of noise to apply. </param>
            <param name="variance"> Controls the intensity. </param>
            <param name="monochromatic"> If True, the same noise is applied equally to all pixel channels. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean,System.Double)">
            <summary> <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand"/> specifying the filter type, variance, monochromatic
            setting, and mean.</para> </summary>
            <exception> Thrown if the variance or mean arguments are less than 0. </exception>
            <param name="noiseType"> The type of noise to apply. </param>
            <param name="variance"> Controls the intensity. </param>
            <param name="monochromatic"> When true applies the same noise equally to each channel. </param>
            <param name="mean"> Adds additional noise to the output for Gaussian and Uniform noise types. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor">
            <summary> Creates a new instance of <STRONG>AddNoiseCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> <para>Only the fourth channel can be set using this flag.  By default, with a value of 0, the fourth
            channel is ignored for RGBA images.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.NoiseType">
            <summary> Gets or sets the type of noise to apply. </summary>
            <value> The type of noise to apply. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Variance">
            <summary> Gets or sets a value controlling the intensity. </summary>
            <value> A value controlling the intensity. </value>
            <remarks> There is no upper limit to this value.  A good value to start with is around 500. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Monochromatic">
            <summary> Gets or sets a value that when true applies the same noise equally to each channel. </summary>
            <value> A value that when true applies the same noise equally to each channel. </value>
            <exception> Thrown if value is null (Nothing in Visual Basic). </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Mean">
            <summary> Gets or sets a value which adds additional noise to the output for Gaussian and Uniform noise types.
            </summary>
            <value> A value which adds additional noise to the output for Gaussian and Uniform noise types. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand">
            <summary> <para>Applies a Blur filter onto an image.</para> </summary>
            <remarks> <para>Requires a continuous tone image.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.intensity">
            <summary> Gets or sets a value controlling the intensity of the filter. </summary>
            <remarks> Valid values are between 0 and 100. </remarks>
            <value> A value controlling the intensity of the filter. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.matrixSize">
            <summary> Gets or sets the size of the matrix. </summary>
            <value> The size of the matrix. </value>
            <remarks> The larger the matrix, the greater depth of the effect.  Should be an odd value greater than or equal to 3. </remarks>
            <exception> Thrown if value is less than 3. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> <para>A value of 0 or AllChannels will process each channel in the image.  Remove the fourth channel from
            the bit flag to ignore the alpha in an RGBA image.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>BlurCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand"/>. Creates a new instance of BlurCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor">
            <summary> Creates a new instance of <STRONG>BlurCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Double)">
            <summary> Initializes a new instance of <STRONG>BlurCommand</STRONG> specifying the intensity. </summary>
            <exception> Thrown if the intensity is less than 0 or greater than 100. </exception>
            <param name="intensity"> <para>The intensity of the filter. (0 to 100)</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Double,System.Int32)">
            <summary> Initializes a new instance of <STRONG>BlurCommand</STRONG> specifying the intensity and matrix size.
            </summary>
            <exception> Thrown if the intensity is less than 0 or greater than 100, or if matrixSize is less than 3.
            </exception>
            <param name="intensity"> <para>The intensity of the filter. (0 to 100)</para> </param>
            <param name="matrixSize"> The size of the matrix.  Should be an odd value greater than or equal to 3. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> <para>A value of 0 or AllChannels will process each channel in the image.  Remove the fourth channel from
            the bit flag to ignore the alpha in an RGBA image.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.Intensity">
            <summary> Gets or sets a value controlling the intensity of the filter. </summary>
            <remarks> Valid values are between 0 and 100. </remarks>
            <value> A value controlling the intensity of the filter. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.MatrixSize">
            <summary> Gets or sets the size of the matrix. </summary>
            <value> The size of the matrix. </value>
            <remarks> The larger the matrix, the greater depth of the effect.  Should be an odd value greater than or equal to
            3. </remarks>
            <exception> Thrown if value is less than 3. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand">
            <summary> Performs a Gaussian blur filter on the image.  This has a more dispersed effect then the traditional blur
            filter, but slower.  </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a continuous tone format, which can be 8-bit
            grayscale, RGB, or RGBA.
            <para>Our ActiveX version, ImgX, uses Intensity for this method where Intensity = (sigma - 0.5) * 100.  A good value
            to start with is around 2.0.</para> </remarks>
            <summary> Performs a Gaussian blur filter on the image.  This has a more dispersed effect then the traditional blur
            filter, but slower.  </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a continuous tone format, which can be 8-bit
            grayscale, RGB, or RGBA.
            <para>Our ActiveX version, ImgX, uses Intensity for this method where Intensity = (sigma - 0.5) * 100.  A good value
            to start with is around 2.0.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.sigma">
            <summary> Gets or sets the standard deviation of the gaussian kernal, controlling the amount of blur. </summary>
            <remarks> Good values to start with are between 0.6 and 2.4. The higher the value the greater the blur depth and
            longer the processing time. </remarks>
            <value> The standard deviation of the gaussian kernal, controlling the amount of blur. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> <para>A value of 0 or AllChannels will process each channel in the image.</para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>BlurGaussianCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <remarks> Region of Interest is available in the Photo Pro and Document Imaging editions. </remarks>
            <summary> Initializes a new instance of %BlurGaussianCommand%. Creates a new instance of BlurGaussianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor">
            <summary> Creates a new instance of <STRONG>BlurGaussianCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor(System.Double)">
            <summary> Creates a new instance of <STRONG>BlurGaussianCommand</STRONG> specifying the amount of blur. </summary>
            <exception> Thrown if sigma is less than 0. </exception>
            <param name="sigma"> The standard deviation of the gaussian kernal, controlling the amount of blur. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> <para>A value of 0 or AllChannels will process each channel in the image.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.Sigma">
            <summary> Gets or sets the standard deviation of the gaussian kernal, controlling the amount of blur. </summary>
            <remarks> Good values to start with are between 0.6 and 2.4. The higher the value the greater the blur depth and
            longer the processing time. </remarks>
            <value> The standard deviation of the gaussian kernal, controlling the amount of blur. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand">
            <summary> Find edges in an image using the Canny algorithm. </summary>
            <example>
<code lang="CS" title="CannyEdge Example (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Apply the command.
CannyEdgeDetectorCommand cmd = new CannyEdgeDetectorCommand(1.1, 30, 20);
AtalaImage result = cmd.Apply(image).Image;

image.Dispose();
]]></code>

<code lang="VB" title="CannyEdge Example (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
' Apply the command.
Dim cmd As CannyEdgeDetectorCommand =  New CannyEdgeDetectorCommand(1.1,30,20) 
Dim result As AtalaImage =  cmd.Apply(image).Image 
 
image.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.sigma">
            <summary> Gets or sets the standard deviation of the gaussian kernal. </summary>
            <value> The standard deviation of the gaussian kernal. </value>
            <remarks> Good values to start with are between 0.6 and 2.4. Higher values increase processing time. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.lowHysteresis">
            <summary> Gets or sets a value used to specify the low hysteresis value. </summary>
            <value> A value used to specify the low hysteresis value. </value>
            <remarks> This is a percentage of the computed high threshold edge strength value.  Good starting values are between
            20 and 50. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.highHysteresis">
            <remarks> This fraction (0 to 100) specifies the percentage point in a histogram of the gradient of the magnitude. 
            Magnitude values of zero are not counted in the histogram.  Good starting values are between 60 and 90. </remarks>
            <summary> Gets or sets a value used to specify the high hysteresis value. </summary>
            <value> A value used to specify the high hysteresis value. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>CannyEdgeDetectorCommand</STRONG> from serialization information.</summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand"/>. Creates a new instance of
            CannyEdgeDetectorCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor">
            <summary> Creates a new instance of <STRONG>CannyEdgeDetectorCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor(System.Double,System.Double,System.Double)">
            <summary> Creates a new instance of <STRONG>CannyEdgeDetectorCommand</STRONG> specifying the deviation and
            hysteresis. </summary>
            <exception> Thrown if the lowHysteresis or highHysteresis is less than 0 or greater than 100, or if sigma is less
            than 0. </exception>
            <param name="sigma"> Standard deviation of the gaussian kernal. </param>
            <param name="lowHysteresis"> The low hysteresis value.  (0 to 100) </param>
            <param name="highHysteresis"> The high hysteresis value.  (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary> Applies a Canny Edge Detection filter using the current settings to the specified image. </summary>
            <returns> A new <see cref="T:Atalasoft.Imaging.AtalaImage"/> containing the processed image or <B>null</B> (<B>Nothing</B> in Visual Basic) if
            cancelled. </returns>
            <param name="image"> The source %AtalaImage% which will be processed. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Sigma">
            <summary> Gets or sets the standard deviation of the gaussian kernal. </summary>
            <value> The standard deviation of the gaussian kernal. </value>
            <remarks> Good values to start with are between 0.6 and 2.4. Higher values increase processing time. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.LowHysteresis">
            <summary> Gets or sets a value used to specify the low hysteresis value. </summary>
            <value> A value used to specify the low hysteresis value. </value>
            <remarks> This is a percentage of the computed high threshold edge strength value.  Good starting values are between
            20 and 50. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.HighHysteresis">
            <remarks> This fraction (0 to 100) specifies the percentage point in a histogram of the gradient of the magnitude. 
            Magnitude values of zero are not counted in the histogram.  Good starting values are between 60 and 90. </remarks>
            <summary> Gets or sets a value used to specify the high hysteresis value. </summary>
            <value> A value used to specify the high hysteresis value. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand">
            <summary> This command can be used to replace the hue, saturation and luminance values in an image with those of a
            specified color. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.baseColor">
            <summary> Gets or sets the base color used for processing. </summary>
            <value> The base color used for processing. </value>
            <remarks> The hue, saturation and luminance of this color is used to process the image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.applyHue">
            <summary> Gets or sets a value indicating whether the hue pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/>
            hue. </summary>
            <value> A value indicating whether the hue pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/> hue. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.applySaturation">
            <summary> Gets or sets a value indicating whether the saturation pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/> saturation. </summary>
            <value> A value indicating whether the saturation pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/>
            saturation. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.applyLuminance">
            <value> A value indicating whether the luminance pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/> luminance.
            </value>
            <summary> Gets or sets a value indicating whether the luminance pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/> luminance. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ColorizeCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <overloads> Creates a new instance of ColorizeCommand. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ColorizeCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor(System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>ColorizeCommand</STRONG> specifying the base color. </summary>
            <param name="baseColor"> The color used for processing. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor(System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Creates a new instance of <STRONG>ColorizeCommand</STRONG> specifying the base color and values indicating
            whether to process the hue, saturation and luminance. </summary>
            <param name="baseColor"> The color used for processing. </param>
            <param name="applyHue"> Set to true to replace the pixel hue with the hue from <EM>baseColor</EM>. </param>
            <param name="applySaturation"> Set to true to replace the pixel saturation with the saturation from
            <EM>baseColor</EM>. </param>
            <param name="applyLuminance"> Set to true to replace the pixel luminance with the luminance from <EM>baseColor</EM>.
            </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor">
            <summary> Gets or sets the base color used for processing. </summary>
            <value> The base color used for processing. </value>
            <remarks> The hue, saturation and luminance of this color is used to process the image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplyHue">
            <summary> Gets or sets a value indicating whether the hue pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/>
            hue. </summary>
            <value> A value indicating whether the hue pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/> hue. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplySaturation">
            <summary> Gets or sets a value indicating whether the saturation pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/> saturation. </summary>
            <value> A value indicating whether the saturation pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/>
            saturation. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplyLuminance">
            <value> A value indicating whether the luminance pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/> luminance.
            </value>
            <summary> Gets or sets a value indicating whether the luminance pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor"/> luminance. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand">
            <summary> Applies a custom Convolution Filter to an image. </summary>
            <remarks> <para>This should only be used on continuous-tone images (RGBA, grayscale, RGB, etc.).</para>
            <para>If Traditional is true, this can be used to do things like a Gaussian blur, etc., depending on the matrix
            used.</para>
            <para>The number of columns and the number of rows in the matrix must both be odd.</para>
            <para>The filter is applied as follows :</para>
            <DIV class="Code">
            <para>M = matrix ( 3 x 3, in this example)</para>
            <TABLE>
            <TBODY>
            <TR>
            <TD>M = </TD>
            <TD>1 </TD>
            <TD>1 </TD>
            <TD>1 </TD>
            <TD> this is a sharpening matrix </TD></TR>
            <TR>
            <TD>1 </TD>
            <TD>-8 </TD>
            <TD>1 </TD></TR>
            <TR>
            <TD>1 </TD>
            <TD>1 </TD>
            <TD>1 </TD></TR></TBODY></TABLE>
            <para>The matrix is centered on the current pixel.  In this example, M[4] is the center of the matrix. </para>
            <para>k is the inteisity. </para>
            <para>P = pixels .  Since the matrix is centered on the current pixel, P(x,y), the pixels used in this calculation
            will be : </para>
            <TABLE>
            <TBODY>
            <TR>
            <TD>P(x-1,y-1) </TD>
            <TD>P(x, y-1) </TD>
            <TD>P(x+1, y-1) </TD></TR>
            <TR>
            <TD>P(x-1,y) </TD>
            <TD>P(x, y) </TD>
            <TD>P(x+1, y) </TD></TR>
            <TR>
            <TD>P(x-1,y+1) </TD>
            <TD>P(x, y+1) </TD>
            <TD>P(x+1, y+1) </TD></TR></TBODY></TABLE>
            <para>t = sum ( M[i] * P[i] ) [for all elements of the matrix] </para>
            <para>if "traditional" processing (see uFlags) ,<BR/>    outPixel = k * t ,<BR/>else ,<BR/>    outPixel = curPixel -
            (k * t) </para>
            <para>outPixel is then clipped to 0..255 </para></DIV>
            <para>Matrix M in this example demonstrates the sharpening filter used by this library, if bTraditional is
            FALSE.</para>
            <para>Besides the ability to use matricies of arbitrary size, this object differs from %ConvolutionMatrixCommand% in
            the way the final calculation is performed.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.matrix">
            <summary> <para>Gets or sets the matrix to apply to the image.</para> </summary>
            <value> The matrix to apply to the image. </value>
            <exception> Thrown if the matrix has an even number of rows or columns </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.intensity">
            <summary> Gets or sets a value controlling the intensity of the filter. </summary>
            <value> A value controlling the intensity of the filter. </value>
            <remarks> <para>Must be a value greater than 0.</para> </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.traditional">
            <summary> Gets or sets a value indicating if the traditional version is used. </summary>
            <remarks> The traditional filter can be used to perform gaussian blur and some others.  </remarks>
            <value> A value indicating if the traditional version is used. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ConvolutionFilterCommand</STRONG> from serialization information.</summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ConvolutionFilterCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Double)">
            <summary> Creates a new instance of <STRONG>ConvolutionFilterCommand</STRONG> specifying the matrix and intensity.
            </summary>
            <exception> Thrown if the intensity is less than 0. </exception>
            <exception> Thrown if the matrix has an even number of rows or columns </exception>
            <param name="matrix"> The matrix to apply to the image. </param>
            <param name="intensity"> The intensity of the filter. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Matrix">
            <summary> <para>Gets or sets the matrix to apply to the image.</para> </summary>
            <value>  A <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Matrix"/> of 9 or more double</value>
            <exception> Thrown if the matrix has an even number of rows or columns </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Intensity">
            <summary> Gets or sets a value controlling the intensity of the filter. </summary>
            <value> A value controlling the intensity of the filter. </value>
            <remarks> <para>Must be a value greater than 0.</para> </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Traditional">
            <summary> Gets or sets a value indicating if the traditional version is used. </summary>
            <remarks> The traditional filter can be used to perform gaussian blur and some others.  </remarks>
            <value> A value indicating if the traditional version is used. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel8bppIndexed
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand">
            <summary> Applies a custom Convolution Matrix to an image. </summary>
            <remarks> <para>This method requires a continuous tone image. If the source image is not continuous, it will raise
            the <STRONG>ChangePixelFormat</STRONG> event and convert the image to a continuous tone format, which can be 8-bit
            grayscale, RGB, or RGBA. </para>
            <para>The matrix is an array of 9 doubles, arranged as : ,<BR/>,<BR/></para>
            <para>
            <TABLE>
            <TBODY>
            <TR>
            <TD>0 </TD>
            <TD>1 </TD>
            <TD>2 </TD></TR>
            <TR>
            <TD>3 </TD>
            <TD>4 </TD>
            <TD>5 </TD></TR>
            <TR>
            <TD>6 </TD>
            <TD>7 </TD>
            <TD>8 </TD></TR></TBODY></TABLE></para>
            <para>,<BR/>where "4" is the source pixel. ,<BR/>,<BR/>It is applied for pixel(x,y) as : ,<BR/>,<BR/>Step 1 ,<BR/>  
            double tempSum = ( ,<BR/>            pMatrix[0] * pixel(x-1, y-1) + ,<BR/>            pMatrix[1] * pixel(x, y-1) +
            ,<BR/>            pMatrix[2] * pixel(x+1, y-1) + ,<BR/>            pMatrix[3] * pixel(x-1, y ) + ,<BR/>           
            pMatrix[4] * pixel(x, y ) + ,<BR/>            pMatrix[5] * pixel(x+1, y ) + ,<BR/>            pMatrix[6] *
            pixel(x-1, y+1) + ,<BR/>            pMatrix[7] * pixel(x, y+1) + ,<BR/>            pMatrix[8] * pixel(x+1, y+1));
            ,<BR/>,<BR/>Step 2 ,<BR/>    if doFeedback = true,<BR/>         tempSum = pixel(x,y) * (1.0 - k) + (k *
            tempSum);,<BR/>    else,<BR/>         tempSum = tempSum * k; ,<BR/>,<BR/>    where k is the
            intensity,<BR/>,<BR/>Step 3 ,<BR/>    tempSum = min(tempSum, 255); ,<BR/>,<BR/>Step 4 ,<BR/>    tempSum =
            max(tempSum, 0); ,<BR/>,<BR/>Step 5 ,<BR/>    outval = tempSum;</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.matrix">
            <summary> <para>Gets or sets the matrix to apply to the image.</para> </summary>
            <value> <para>The matrix to apply to the image.</para> </value>
            <exception> Thrown if value is not a 3x3 matrix. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.feedback">
            <summary> Gets or sets a value indicating if a feedback calculation is performed. </summary>
            <value> A value indicating if a feedback calculation is performed. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.intensity">
            <summary> Gets or sets a value controlling the intensity of the filter. </summary>
            <value> A value controlling the intensity of the filter. </value>
            <remarks> Must be a value greater than 0. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ConvolutionMatrixCommand</STRONG> from serialization information.
            </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ConvolutionMatrixCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Boolean,System.Double)">
            <summary> Creates a new instance of <STRONG>ConvolutionMatrixCommand</STRONG> specifying the matrix, feedback and
            intensity. </summary>
            <exception> Thrown if matrix is not a 3x3 matrix or if intensity is less than 0. </exception>
            <param name="matrix"> The matrix to apply to the image. </param>
            <param name="feedback"> Indicates if a feedback calculation is performed. </param>
            <param name="intensity"> The intensity of the filter. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Matrix">
            <summary> <para>Gets or sets the matrix to apply to the image.</para> </summary>
            <value> <para>The matrix to apply to the image.</para> </value>
            <exception> Thrown if value is not a 3x3 matrix. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Feedback">
            <summary> Gets or sets a value indicating if a feedback calculation is performed. </summary>
            <value> A value indicating if a feedback calculation is performed. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Intensity">
            <summary> Gets or sets a value controlling the intensity of the filter. </summary>
            <value> A value controlling the intensity of the filter. </value>
            <remarks> Must be a value greater than 0. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel8bppIndexed
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand">
            <summary> This filter cleans the image by removing stray pixel spikes (speckles). </summary>
            <remarks> For despeckling document images, see <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand"/>. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>DespeckleCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.Clone">
            <summary> Returns a copy of the command. </summary>
            <returns> A copy of the <STRONG>DespeckleCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.#ctor">
            <summary> Creates a new instance of <STRONG>DespeckleCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary> <STRONG>InternalActualCommand</STRONG> does the actual work of the image processing command. </summary>
            <returns> Null (Nothing in VB) </returns>
            <param name="source"> The source image for processing.  This may be different from the original image. </param>
            <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
            <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
            <param name="results"> The results object that will be used for this command. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix">
            <summary> This object composes of a matrix of doubles that is used in various filters including
            <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand"/> and <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.rows">
            <summary> Gets or sets the number of rows in the matrix. </summary>
            <remarks> Most methods require an odd and equal number of columns and rows. </remarks>
            <value> The number of rows in the matrix. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.columns">
            <summary> Gets or sets the number of columns in the matrix. </summary>
            <remarks> Most methods require an odd and equal number of columns and rows. </remarks>
            <value> The number of columns in the matrix. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>DoubleMatrix</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this object. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of <STRONG>DoubleMatrix</STRONG>. </summary>
            <param name="rows"> The number of rows in the matrix. </param>
            <param name="columns"> The number of columns in the matrix. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetArray">
            <returns> A one-dimentional array that composes of the matrix elements. </returns>
            <summary> Return a one-dimentional array that composes of the matrix elements. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetRow(System.Int32,System.Double[])">
            <summary> Set the entire row of the matrix to a parameter list of values. </summary>
            <param name="rowIndex"> The zero based row index to set. </param>
            <param name="rowList"> A parameter array of doubles that are set to the matrix row. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetRow(System.Int32)">
            <summary> Returns a one-dimensional array containing an entire row of the matrix. </summary>
            <returns> A one-dimensional array containing an entire row of the matrix. </returns>
            <param name="rowIndex"> The zero based row to retreive. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetItem(System.Int32,System.Int32)">
            <summary> Gets a value in the specified location of the matrix. </summary>
            <returns> A value in the specified location of the matrix. </returns>
            <param name="row"> The row containing the element to get. (zero based) </param>
            <param name="column"> The column containing the element to get. (zero based) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetItem(System.Int32,System.Int32,System.Double)">
            <summary> Set the value of an element in the array. </summary>
            <param name="row"> The row containing the element to set. (zero based) </param>
            <param name="column"> The column containing the element to set. (zero based) </param>
            <param name="itemValue"> The value to set. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Rows">
            <summary> Gets or sets the number of rows in the matrix. </summary>
            <remarks> Most methods require an odd and equal number of columns and rows. </remarks>
            <value> The number of rows in the matrix. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Columns">
            <summary> Gets or sets the number of columns in the matrix. </summary>
            <remarks> Most methods require an odd and equal number of columns and rows. </remarks>
            <value> The number of columns in the matrix. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand">
            <summary> This command is used to remove dust and scratch marks from an image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.filterSize">
            <summary> Gets or sets the size of the features that will be removed. </summary>
            <value> The size of the features that will be removed. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.threshold">
            <summary> Gets or sets the minimum detail intensity required to trigger removal. </summary>
            <value> The minimum detail intensity required to trigger removal.  (0 to 255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.blending">
            <summary> Gets or sets the blending of original image with the removed image detail. </summary>
            <value> The blending of original image with the removed image detail. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.channelsToProcess">
            <summary> Gets or sets the channels of the image to process. </summary>
            <value> The channels of the image to process. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of DustAndScratchRemovalCommand specifying the filter size, threshold and blending
            values.<br/>Creates a new instance of DustAndScratchRemovalCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor">
            <summary> Creates a new instance of <STRONG>DustAndStratchRemovalCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor(System.Int32,System.Int32,System.Double)">
            <summary> Creates a new instance of <STRONG>DustAndScratchRemovalCommand</STRONG> specifying the filter size,
            threshold and blending. </summary>
            <exception> Thrown if filterSize is less than 0, threshold is less than 0 or greater than 255, or if blending is
            less than 0 or greater than 100. </exception>
            <param name="filterSize"> The size of the features that will be removed. </param>
            <param name="threshold"> The minimum detail intensity required to trigger removal. (0 to 255) </param>
            <param name="blending"> The blending of original image with the removed image detail. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.ChannelsToProcess">
            <summary> Gets or sets the channels of the image to process. </summary>
            <value> The channels of the image to process. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.FilterSize">
            <summary> Gets or sets the size of the features that will be removed. </summary>
            <value> The size of the features that will be removed. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.Threshold">
            <summary> Gets or sets the minimum detail intensity required to trigger removal. </summary>
            <value> The minimum detail intensity required to trigger removal.  (0 to 255) </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.Blending">
            <summary> Gets or sets the blending of original image with the removed image detail. </summary>
            <value> The blending of original image with the removed image detail. </value>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType">
            <seealso> EdgeDetectionCommand </seealso>
            <summary> Specified the type of the edge detection. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Laplacian">
            <summary> Laplacian Edge Detection </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Prewitt">
            <summary> Prewitt Edge Detection </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Gradient">
            <summary> Gradient Edge Detection </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection">
            <summary> Specifies the direction of the edge detection </summary>
            <seealso> EdgeDetectionCommand </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Top">
            <summary> Emphasizes top edges </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Right">
            <summary> Emphasizes right edges </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Bottom">
            <summary> Emphasizes bottom edges </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Left">
            <summary> Emphasizes left edges </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand">
            <summary> This filter enhances edges in an image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.channelsToProcess">
            <summary> Gets or sets the image channels to process. </summary>
            <value> The channels to process. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.intensity">
            <value> <para>The intensity of the edge detection. </para> </value>
            <remarks> Generally values should be from 0 to 1. </remarks>
            <summary> Gets or sets the intensity of the edge detection. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.type">
            <summary> <para>Gets or sets the type of edge detection filter to apply.</para> </summary>
            <value> <para>The type of edge detection filter to apply.</para> </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.direction">
            <summary> Gets or sets the edge direction for Gradient and Prewitt filters. </summary>
            <value> <para>Specifies the edge detection for Gradient and Prewitt filters.</para> </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Initializes a new instance of <STRONG>EdgeDetectionCommand</STRONG>. Creates a new instance of
            EdgeDetectionCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor">
            <summary> Creates a new instance of <STRONG>EdgeDetectionCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType)">
            <summary> Initializes a new instance of <STRONG>EdgeDetectionCommand</STRONG> specifying the type. </summary>
            <param name="type"> Type of edge detection filter to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double)">
            <summary> Initializes a new instance of <STRONG>EdgeDetectionCommand</STRONG> specifying the type and intensity.
            </summary>
            <param name="type"> Type of edge detection filter to apply. </param>
            <param name="intensity"> Intensity of the edge detection. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection)">
            <summary> Initializes a new instance of <STRONG>EdgeDetectionCommand</STRONG> specifying the type, intensity, and
            direction. </summary>
            <param name="type"> Type of edge detection filter to apply. </param>
            <param name="intensity"> Intensity of the edge detection. </param>
            <param name="direction"> The edge detection for Gradient and Prewitt filters. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Intensity">
            <value> <para>The intensity of the edge detection. </para> </value>
            <remarks> Generally values should be from 0 to 1. </remarks>
            <summary> Gets or sets the intensity of the edge detection. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Type">
            <summary> <para>Gets or sets the type of edge detection filter to apply.</para> </summary>
            <value> <para>The type of edge detection filter to apply.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Direction">
            <summary> Gets or sets the edge direction for Gradient and Prewitt filters. </summary>
            <value> <para>Specifies the edge detection for Gradient and Prewitt filters.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.ChannelsToProcess">
            <summary> Gets or sets the image channels to process. </summary>
            <value> The channels to process. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand">
            <summary> Applies an embossing filter to the source image. </summary>
            <example>
<code lang="CS" title="Emboss Example (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");
            
// Apply the command.
EmbossCommand cmd = new EmbossCommand(135, 60, 4, true);
AtalaImage result = cmd.Apply(image).Image;

image.Dispose();
]]></code>

<code lang="VB" title="Emboss Example (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
' Apply the command.
Dim cmd As EmbossCommand =  New EmbossCommand(135,60,4,True) 
Dim result As AtalaImage =  cmd.Apply(image).Image

image.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.angle">
            <summary> <para>Gets or sets the angle of the light source in degrees.</para> </summary>
            <value> <para>The angle of the light source in degrees.</para> </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.elevation">
            <summary> <para>Gets or sets the Height of the light source in degrees.</para> </summary>
            <value> <para>The height of the light source in degrees.</para> </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.depth">
            <value> <para>A value controlling the depth of the emboss.</para> </value>
            <summary> Gets or sets a value controlling the depth of the emboss. </summary>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.selfTexture">
            <summary> Gets or sets a value indicating if the source image should be used as the texture. </summary>
            <value> A value indicating if the source image should be used as the texture. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.textureMap">
            <summary> Gets or sets an AtalaImage that is used as a texture map. </summary>
            <value> An AtalaImage that is used as a texture map. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._textureEnhancement">
            <summary> Gets or sets a value indicating whether the emboss is enhanced when applying a texture. </summary>
            <value> Indicates whether the emboss is enhanced when applying a texture. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>EmbossCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> Initializes a new instance of the <STRONG>EmbossCommand</STRONG> specifying the angle, elevation, depth,
            and texture. </summary>
            <exception> Thrown if the depth is less than 0. </exception>
            <param name="angle"> <para>Angle of the light source in degrees.</para> </param>
            <param name="elevation"> <para>Height of the light source in degrees.</para> </param>
            <param name="depth"> <para>Controls the depth of the emboss.</para> </param>
            <param name="selfTexture"> Indicates if the source image should be used as the texture. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary> Initializes a new instance of the <STRONG>EmbossCommand</STRONG> specifying the angle, elevation, depth,
            and texture. </summary>
            <exception> Thrown if the depth is less than 0. </exception>
            <param name="angle"> <para>Angle of the light source in degrees.</para> </param>
            <param name="elevation"> <para>Height of the light source in degrees.</para> </param>
            <param name="depth"> <para>Controls the depth of the emboss.</para> </param>
            <param name="textureMap"> An AtalaImage that is used as a texture map. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Initializes a new instance of the <STRONG>EmbossCommand</STRONG> specifying the angle, elevation, and
            depth. </summary>
            <exception> Thrown if the depth is less than 0. </exception>
            <param name="angle"> <para>Angle of the light source in degrees.</para> </param>
            <param name="elevation"> <para>Height of the light source in degrees.</para> </param>
            <param name="depth"> <para>Controls the depth of the emboss.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor">
            <summary> Creates a new instance of <STRONG>EmbossCommand</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary> Apply the command to the given image. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.TextureEnhancement">
            <summary> Gets or sets a value indicating whether the emboss is enhanced when applying a texture. </summary>
            <value> Indicates whether the emboss is enhanced when applying a texture. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Angle">
            <summary> <para>Gets or sets the angle of the light source in degrees.</para> </summary>
            <value> <para>The angle of the light source in degrees.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Elevation">
            <summary> <para>Gets or sets the Height of the light source in degrees.</para> </summary>
            <value> <para>The height of the light source in degrees.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Depth">
            <value> <para>A value controlling the depth of the emboss.</para> </value>
            <summary> Gets or sets a value controlling the depth of the emboss. </summary>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SelfTexture">
            <summary> Gets or sets a value indicating if the source image should be used as the texture. </summary>
            <value> A value indicating if the source image should be used as the texture. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.TextureMap">
            <summary> Gets or sets an AtalaImage that is used as a texture map. </summary>
            <value> An AtalaImage that is used as a texture map. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EmbossMethod">
            <summary> <para>The type of Emboss method to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand"/></para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossMethod.Standard">
            <summary>
            Standard embossing
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossMethod.AlternateBlending">
            <summary>
            Alternate blending
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode">
            <summary> The type of morphological filter to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Dilation">
            <summary> <para>Used to smooth small dark regions tending to enhance black features in the image.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Erosion">
            <summary> <para>Used to smooth small light regions tending to reduce black features in the image.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Open">
            <summary> The dilation of the erosion of the image used to reduce small black regions within the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Close">
            <summary> The erosion of the dilation of the image used to reduce small white regions within the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Tophat">
            <summary> Used to enhance low-contrast, high frequency details within an image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Gradient">
            <summary> Highlights sharp gray-level transitions (edges) in an image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType">
            <summary>
            Various types of MeanFilter.
            </summary>
            <summary> The type of mean filter to apply. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Arithmetic">
            <summary> Finds average values under the filter. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Geometric">
            <summary> Removes Gaussian type noise from an image better than the arithmetic mean filter. Unlike the YP mean
            filter, this is susceptible to low-valued outliers: a zero pixel under the filter will cause the filter to output
            zero. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Harmonic">
            <summary> Removes Gaussian type noise from an image better than the arithmetic mean filter. It is good at removing
            positive outliers, but it is susceptible to low-valued outliers: a zero pixel under the filter will cause the filter
            to output zero. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.YP">
            <summary> A non-linear mean filter which is better at removing Gaussian type noise and preserving edge features than
            the basic arithmetic mean filter. It is also very good at removing outliers (positive or negative, depending on the
            order of the filter) from images. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType">
            <summary> The type of noise to add to an image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Gaussian">
            <summary> A type of noise whose histogram is bell-shaped: most of the noise will occur in the middle of the pixel
            value range, and less noise will occur at the extremes. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Negative">
            <summary> Negative Exponential Noise. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Rayleigh">
            <summary> Rayleigh noise. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Uniform">
            <summary> Uniform Noise. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality">
            <summary> Indicates the quality level in the %AdaptiveUnsharpMaskCommand%. </summary>
            <seealso> AdaptiveUnsharpMaskCommand </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Low">
            <summary> Less accurate results, but very fast. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Middle">
            <summary> Good results, slower to process. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.High">
            <summary> Highest quality with the best results.  Very slow. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand">
            <summary> Removes Low Frequency signals from an image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.sigma">
            <value> A value indicating the amount of effect to apply. </value>
            <summary> Gets or sets a value indicating the amount of effect to apply. </summary>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.mix">
            <summary> Gets or sets the percentage of the filter to mix into the original image. </summary>
            <value> The percentage of the filter to mix into the original image. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>HighPassCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor(System.Double,System.Double)">
            <summary> Initializes a new instance of the <STRONG>HighPassCommand</STRONG> specifying the sigma and mix value.
            </summary>
            <exception> Thrown if sigma is less than 0, or is mix is less than 0 or greater than 100. </exception>
            <param name="sigma"> A value indicating the amount of effect to apply. </param>
            <param name="mix"> The percentage of the filter to mix into the original image. (0 to 100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor(System.Double)">
            <summary> Initializes a new instance of the <STRONG>HighPassCommand</STRONG> specifying the sigma value. </summary>
            <exception> Thrown if sigma is less than 0. </exception>
            <param name="sigma"> A value indicating the amount of effect to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor">
            <summary> Creates a new instance of <STRONG>HighPassCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException">You cannot use regions with 1-bit images.</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary> Apply the command to the given image. </summary>
            <param name="image"> The image which will by processed by the command. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Sigma">
            <value> A value indicating the amount of effect to apply. </value>
            <summary> Gets or sets a value indicating the amount of effect to apply. </summary>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Mix">
            <summary> Gets or sets the percentage of the filter to mix into the original image. </summary>
            <value> The percentage of the filter to mix into the original image. </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PiPixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix">
            <summary> This object composes of a matrix of integers that is used in various morphological and related filters.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.rows">
            <remarks> Most methods require an odd and equal number of columns and rows. </remarks>
            <summary> Gets the number of rows in the matrix. </summary>
            <value> The number of rows in the matrix. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.columns">
            <summary> Gets the number of columns in the matrix. </summary>
            <value> The number of columns in the matrix. </value>
            <remarks> Most methods require an odd and equal number of columns and rows. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>IntegerMatrix</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this object. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this object. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of <STRONG>IntegerMatrix</STRONG>. </summary>
            <param name="rows"> The number of rows for the matrix. </param>
            <param name="columns"> The number of columns for the matrix. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetArray">
            <summary> Return a one-dimentional array that composes of the matrix elements. </summary>
            <returns> A one-dimentional array that composes of the matrix elements. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetRow(System.Int32,System.Int32[])">
            <summary> Set the entire row of the matrix to a parameter list of values. </summary>
            <param name="rowIndex"> The zero based row index to set. </param>
            <param name="rowList"> A parameter array of integers that are set to the matrix row. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetRow(System.Int32)">
            <summary> Returns a one-dimensional array containing an entire row of the matrix. </summary>
            <returns> A one-dimensional array containing an entire row of the matrix. </returns>
            <param name="rowIndex"> The zero based row to retreive. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetItem(System.Int32,System.Int32)">
            <returns> A value in the specified location of the matrix. </returns>
            <summary> Gets a value in the specified location of the matrix. </summary>
            <param name="row"> The row containing the element to get. (zero based) </param>
            <param name="column"> The column containing the element to get. (zero based) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetItem(System.Int32,System.Int32,System.Int32)">
            <summary> Set the value of an element in the array. </summary>
            <param name="row"> The row containing the element to set. (zero based) </param>
            <param name="column"> The column containing the element to set. (zero based) </param>
            <param name="itemValue"> The value to set. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Rows">
            <remarks> Most methods require an odd and equal number of columns and rows. </remarks>
            <summary> Gets the number of rows in the matrix. </summary>
            <value> The number of rows in the matrix. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Columns">
            <summary> Gets the number of columns in the matrix. </summary>
            <value> The number of columns in the matrix. </value>
            <remarks> Most methods require an odd and equal number of columns and rows. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand">
            <summary> Increases the color intensity as if a flash of light from a camera hit it. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.intensity">
            <summary> <para>Gets or sets a value increasing the color intensity.</para> </summary>
            <value> A value increasing the color intensity. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>IntensifyCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor(System.Double)">
            <summary> Creates a new instance of <STRONG>IntensifyCommand</STRONG> specifying the intensity. </summary>
            <exception> Thrown if intensity is less than 0. </exception>
            <param name="intensity"> The new intensity value. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor">
            <summary> Creates a new instance of <STRONG>IntensifyCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.Intensity">
            <summary> <para>Gets or sets a value increasing the color intensity.</para> </summary>
            <value> A value increasing the color intensity. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand">
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, 
            it will raise the <see cref="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat"/>
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
            <summary> <para>Sets each color value to the maximum value under the filter.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.filterSize">
            <summary> Gets or sets the size of the filter. </summary>
            <remarks> Should be an odd value (3, 5, 7, 9, etc.). The larger the value, the greater the effect at the expense of
            speed. An even value will be incremented by 1. </remarks>
            <value> The size of the filter. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>MaximumCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor(System.Int32)">
            <summary> Creates a new instance of <STRONG>MaximumCommand</STRONG> specifying the filter size. </summary>
            <exception> Thrown if filterSize is less than 0. </exception>
            <param name="filterSize"> Size of the filter. Should be an odd value greater than or equal to 3. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor">
            <summary> Creates a new instance of <STRONG>MaximumCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.FilterSize">
            <summary> Gets or sets the size of the filter. </summary>
            <remarks> Should be an odd value (3, 5, 7, 9, etc.). The larger the value, the greater the effect at the expense of
            speed. An even value will be incremented by 1. </remarks>
            <value> The size of the filter. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand">
            <remarks></remarks>
            <summary> <para>Applies an Arithmetic, Harmonic, Geometric, or Yp mean filter to an image.</para> </summary>
            <remarks> <para>This method requires a continuous tone image.  If the source image is not continuous, it will raise the ChangePixelFormat
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</para><para>Mean filtering is a simple method of smoothing images 
            (reducing the amount of intensity variation between one pixel and the next) and often used to reduce noise. </para></remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.meanType">
            <summary> Gets or sets the type of mean filter to apply. </summary>
            <value> The type of mean filter to apply. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.filterSize">
            <summary> Gets or sets the size of the filter. </summary>
            <value> The size of the filter. </value>
            <remarks> Should be an odd value (3, 5, 7, 9, etc.). The larger the value, the greater the effect at the expense of
            speed. An even value will be incremented by 1. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.power">
            <summary> Gets or sets the a non-zero integer that controls power for the Yp mean filter. </summary>
            <remarks> Ignored if meanType is not MeanFilterType.Yp.,<BR/>power lt; 0, removes positive outliers ,<BR/>power gt;
            0, removes negative outliers </remarks>
            <value> A non-zero integer that controls power for the Yp mean filter. </value>
            <exception> Thrown if value is equal to 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>MeanCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32,System.Int32)">
            <summary> Initializes a new instance of the <STRONG>MeanCommand</STRONG> specifying the type, size, and power.
            </summary>
            <exception> Thrown if filterSize is less than 0, or if power is equal to 0. </exception>
            <param name="meanType"> The type of mean filter to apply. </param>
            <param name="filterSize"> The size of the filter.  Should be an odd value greater than or equal to 3. </param>
            <param name="power"> A non-zero integer that controls power for the Yp mean filter. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32)">
            <summary> Initializes a new instance of the <STRONG>MeanCommand</STRONG> specifying the type, filter size.
            </summary>
            <exception> Thrown if filterSize is less than 0. </exception>
            <param name="meanType"> The type of mean filter to apply. </param>
            <param name="filterSize"> The size of the filter.  Should be an odd value greater than or equal to 3. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType)">
            <summary> Initializes a new instance of the <STRONG>MeanCommand</STRONG> specifying the type. </summary>
            <param name="meanType"> The type of mean filter to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor">
            <summary> Creates a new instance of <STRONG>MeanCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.MeanType">
            <summary> Gets or sets the type of mean filter to apply. </summary>
            <value> The type of mean filter to apply. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.FilterSize">
            <summary> Gets or sets the size of the filter. </summary>
            <value> The size of the filter. </value>
            <remarks> Should be an odd value (3, 5, 7, 9, etc.). The larger the value, the greater the effect at the expense of
            speed. An even value will be incremented by 1. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.Power">
            <summary> Gets or sets the a non-zero integer that controls power for the Yp mean filter. </summary>
            <remarks> Ignored if meanType is not MeanFilterType.Yp.,<BR/>power lt; 0, removes positive outliers ,<BR/>power gt;
            0, removes negative outliers </remarks>
            <value> A non-zero integer that controls power for the Yp mean filter. </value>
            <exception> Thrown if value is equal to 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand">
            <summary> <para>Reduces noise in an image, similarly to the mean filter, however doing a better job preserving
            useful detail in the image.</para> </summary>
            <remarks> A value of 0 or AllChannels will process each channel in the image.   For document images, please see <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand">DocumentMedianCommand</see> instead. </remarks>
            <seealso> DocumentMedianCommand Class </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.filterSize">
            <summary> Gets or sets the size of the matrix. </summary>
            <value> The size of the matrix. </value>
            <remarks> The filter size should be an odd value.  The larger the value, the greater the effect at the expense of
            speed.  An even value will be incremented by 1. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>MedianCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor">
            <summary> Creates a new instance of <STRONG>MedianCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor(System.Int32)">
            <summary> Creates a new instance of <STRONG>MedianCommand</STRONG> specifying the filter size. </summary>
            <exception> Thrown if the filterSize is less than 0. </exception>
            <param name="filterSize"> The size of the matrix used for processing this command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.FilterSize">
            <summary> Gets or sets the size of the matrix. </summary>
            <value> The size of the matrix. </value>
            <remarks> The filter size should be an odd value.  The larger the value, the greater the effect at the expense of
            speed.  An even value will be incremented by 1. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand">
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, 
            it will raise the <see cref="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat"/>
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
            <summary> <para>Find the average of minimum and maximum values under the filter.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.filterSize">
            <summary> Gets or sets the size of the filter. </summary>
            <value> The size of the filter. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.channelsToProcess">
            <summary> Gets or sets the <a
            href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a> specifying which
            channels to process. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a>
            specifying which channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>MidpointCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor(System.Int32)">
            <summary> Initializes a new instance of the <STRONG>MidpointCommand</STRONG> specifying the filter size. </summary>
            <exception> Thrown if the filterSize is less than 0. </exception>
            <param name="filterSize"> The size of the filter.  Should be an odd value greater than or equal to 3. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor">
            <summary> Creates a new instance of <STRONG>MidpointCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ChannelsToProcess">
            <summary> Gets or sets the <a
            href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a> specifying which
            channels to process. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a>
            specifying which channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.FilterSize">
            <summary> Gets or sets the size of the filter. </summary>
            <value> The size of the filter. Should be an odd value (3, 5, 7, 9, etc.).  The larger the value, the greater the effect at the expense of speed.  An even value will be incremented by 1.</value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand">
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, 
            it will raise the <see cref="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat"/>
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
            <summary> <para>Find the minimum values under the filter.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.filterSize">
            <summary> Gets or sets the size of the filter. </summary>
            <value> The size of the filter. </value>
            <remarks> Should be an odd value (3, 5, 7, 9, etc.). The larger the value, the greater the effect at the expense of
            speed. An even value will be incremented by 1. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.channelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>MinimumCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor(System.Int32)">
            <summary> Initializes a new instance of the <STRONG>MinimumCommand</STRONG> specifying the filter size. </summary>
            <exception> Thrown if the filterSize is less than 0. </exception>
            <param name="filterSize"> The size of the filter.  Should be an odd value greater than or equal to 3. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor">
            <summary> Creates a new instance of <STRONG>MinimumCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ChannelsToProcess">
            <summary> Gets or sets a bit flag indicating the channels to process. </summary>
            <value> A bit flag indicating the channels to process. </value>
            <remarks> A value of 0 or AllChannels will process each channel in the image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.FilterSize">
            <summary> Gets or sets the size of the filter. </summary>
            <value> The size of the filter. </value>
            <remarks> Should be an odd value (3, 5, 7, 9, etc.). The larger the value, the greater the effect at the expense of
            speed. An even value will be incremented by 1. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand">
            <summary> Applies a morphological Erosion, Dilation, Open, Close, or TopHat to a grayscale image. </summary>
            <remarks> <para>Morphology is the study of form and structure. In image processing, it encompasses a set of
            techniques that merge traditional image processing with set theory from mathematics.</para></remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.mask">
            <summary> Gets or sets a structuring element to use with the morphological filter. </summary>
            <value> A structuring element to use with the morphological filter. </value>
            <exception> Thrown if the matrix does not have an equal number of rows and cols. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.mode">
            <value> The type of morphological filter to apply. </value>
            <summary> Gets or sets the type of morphological filter to apply. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>MorphoGrayCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor">
            <summary> Creates a new instance of <STRONG>MorphoGrayCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode)">
            <summary> Initializes a new instance of the <STRONG>MorphoGrayCommand</STRONG> specifying the filter mode.
            </summary>
            <param name="mode"> The type of morphological to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary> Initializes a new instance of the <STRONG>MorphoGrayCommand</STRONG> specifying the filter mode and a
            structuring element. </summary>
            <exception> Thrown if the matrix does not have an equal number of rows and cols. </exception>
            <param name="mode"> The type of morphological to apply. </param>
            <param name="mask"> The structuring element to use. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mode">
            <value> The type of morphological filter to apply. </value>
            <summary> Gets or sets the type of morphological filter to apply. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mask">
            <summary> Gets or sets a structuring element to use with the morphological filter. </summary>
            <value> A structuring element to use with the morphological filter. </value>
            <exception> Thrown if the matrix does not have an equal number of rows and cols. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value> PixelFormat.Pixel8bppGrayscale </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand">
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, 
            it will raise the <see cref="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat"/>
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
            <summary> <para>Applies a traditional sharpening filter to the image.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.intensity">
            <summary> Gets or sets the value of intensity </summary>
            <value> The value of intensity </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.matrixSize">
            <summary> Gets or sets the size of the filter. </summary>
            <value> The size of the filter. </value>
            <exception> Thrown if value is less than 3. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.channelsToProcess">
            <summary> Gets or sets the <a
            href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a> specifying which
            channels to process. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a>
            specifying which channels to process. </value>
            <remarks> The default value is <b>AllChannels</b>. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SharpenCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor">
            <summary> Creates a new instance of <STRONG>SharpenCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Double)">
            <summary> Creates a new instance of <STRONG>SharpenCommand</STRONG> specifying intensity. </summary>
            <exception> Thrown if the intensity is less than 0 or greater than 100. </exception>
            <param name="intensity"> Filter intensity. (0-100) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Double,System.Int32)">
            <summary> Creates a new instance of <STRONG>SharpenCommand</STRONG> specifying intensity, and matrixSize. </summary>
            <exception> Thrown if the intensity is less than 0 or greater than 100, or if matrixSize is less than 3.
            </exception>
            <param name="intensity"> Filter intensity. (0-100) </param>
            <param name="matrixSize"> The larger the matrixSize, the stronger the effect </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ChannelsToProcess">
            <summary> Gets or sets the <a
            href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a> specifying which
            channels to process. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a>
            specifying which channels to process. </value>
            <remarks> The default value is <b>AllChannels</b>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.Intensity">
            <summary> Gets or sets the value of intensity </summary>
            <value> The value of intensity </value>
            <remarks> Valid values are from 0 to 100. </remarks>
            <exception> Thrown if value is not between 0 and 100. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.MatrixSize">
            <summary> Gets or sets the size of the filter. </summary>
            <value> The size of the filter. </value>
            <exception> Thrown if value is less than 3. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand">
            <summary> Set pixel components above a high threshold value to 255 and below a low threshold value to 0. </summary>
            <remarks><para>This method requires a continuous tone image.  If the source image is not continuous, it will throw the <see cref="T:System.ArgumentException"/></para>
            <para>This is not the same as the thresholding commands in the Document namespace.  
            See <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand">GlobalThresholdCommand</see> 
            and <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand">AdaptiveThresholdCommand</see>
            for binarizing color or grayscale images into binary images. </para></remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.minValue">
            <summary> Gets or sets a value indicating that pixels below this value are set to 0. </summary>
            <value> A value indicating that pixels below this value are set to 0. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.maxValue">
            <summary> Gets or sets a value indicating that pixels above this value are set to 255. </summary>
            <value> A value indicating that pixels above this value are set to 255. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.channelsToProcess">
            <summary> Gets or sets the <b>ChannelFlags</b> specifying which channels to process. </summary>
            <value> The <b>ChannelFlags</b> specifying which channels to process. </value>
            <remarks> The default value is <b>AllChannels</b>. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ThresholdCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <exception cref="T:Atalasoft.Imaging.ImageProcessException">dynamic thresholding failed</exception>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.Clone">
            <summary> Returns a copy of this command. </summary>
            <returns> A copy of the <STRONG>ThresholdCommand</STRONG>. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ThresholdCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand"/> specifying minValue, and maxValue. </summary>
            <exception> Thrown if minValue or maxValue is less than 0 or greater than 255. </exception>
            <param name="minValue"> Pixels below this level are set to 0. Valid values (0 - 255). </param>
            <param name="maxValue"> Pixels above this level are set to 255.  (0 - 255) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary> Creates a new instance of ThresholdCommand specifying minValue, maxValue and channelsToProcess. </summary>
            <exception> Thrown if minValue or maxValue is less than 0 or greater than 255. </exception>
            <param name="minValue"> Pixels below this level are set to 0. Valid values (0 - 255). </param>
            <param name="maxValue"> Pixels above this level are set to 255.  (0 - 255) </param>
            <param name="channelsToProcess"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.ChannelFlags"/> specifying which channels to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.ChannelsToProcess">
            <summary> Gets or sets the <b>ChannelFlags</b> specifying which channels to process. </summary>
            <value> The <b>ChannelFlags</b> specifying which channels to process. </value>
            <remarks> The default value is <b>AllChannels</b>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MinValue">
            <summary> Gets or sets a value indicating that pixels below this value are set to 0. </summary>
            <value> A value indicating that pixels below this value are set to 0. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MaxValue">
            <summary> Gets or sets a value indicating that pixels above this value are set to 255. </summary>
            <value> A value indicating that pixels above this value are set to 255. </value>
            <remarks> Valid values are from 0 to 255. </remarks>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand">
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, 
            it will raise the <see cref="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat"/>
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
            <summary> The unsharp mask is a sharpening filter which derives its name from the fact that it enhances edges and
            other high frequency components in an image via a procedure which subtracts an unsharp, or gaussian blurred, version
            of an image from the original image.  The unsharp mask filter is commonly used in the photographic and printing
            industries for crispening edges. </summary>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.threshold">
            <summary> Gets or sets the value of threshold </summary>
            <value> Controls the depth of the effect; the lower the value, the greater the effect. Any value between 0 and 255
            is valid. </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.amount">
            <summary> Gets or sets the value of amount </summary>
            <value> Controls the intensity of the effect. Values should be between 0.0 (no effect) and 1.0 (full effect). Higher
            values will give unpredictable results. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.sigma">
            <summary> Gets or sets the value of sigma </summary>
            <value> The standard deviation (sigma) of the gaussian kernal, controlling the amount of blur.  Good values to start
            with are between 0.6 and 2.4.  The higher the value the greater the blur depth and longer the processing time.
            </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.channelsToProcess">
            <summary> Gets or sets the <b>ChannelFlags</b> specifying which channels to process. </summary>
            <value> The <b>ChannelFlags</b> specifying which channels to process. </value>
            <remarks> The default value is <b>AllChannels</b>. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>UnsharpMaskCommand</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor(System.Int32,System.Double,System.Double)">
            <summary> Creates a new instance of <STRONG>UnsharpMaskCommand</STRONG> specifying the threshold, amount of effect
            and deviation. </summary>
            <exception> Thrown if threshold is less than 0 or greater than 255, or if amount is less than 0. </exception>
            <param name="threshold"> Controls the depth of the effect; the lower the value, the greater the effect. Any value
            between 0 and 255 is valid. </param>
            <param name="amount"> Controls the intensity of the effect. Values should be between 0.0 (no effect) and 1.0 (full
            effect). Higher values will give unpredictable results. </param>
            <param name="sigma"> The standard deviation (sigma) of the gaussian kernal, controlling the amount of blur. Good
            values to start with are between 0.6 and 2.4. The higher the value the greater the blur depth and longer the
            processing time. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor">
            <summary> Creates a new instance of <STRONG>UnsharpMaskCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ChannelsToProcess">
            <summary> Gets or sets the <a
            href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a> specifying which
            channels to process. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a>
            specifying which channels to process. </value>
            <remarks> The default value is <b>AllChannels</b>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Threshold">
            <summary> Gets or sets the value of threshold </summary>
            <value> Controls the depth of the effect; the lower the value, the greater the effect. Any value between 0 and 255
            is valid. </value>
            <exception> Thrown if value is not between 0 and 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Amount">
            <summary> Gets or sets the value of amount </summary>
            <value> Controls the intensity of the effect. Values should be between 0.0 (no effect) and 1.0 (full effect). Higher
            values will give unpredictable results. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Sigma">
            <summary> Gets or sets the value of sigma </summary>
            <value> The standard deviation (sigma) of the gaussian kernal, controlling the amount of blur.  Good values to start
            with are between 0.6 and 2.4.  The higher the value the greater the blur depth and longer the processing time.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Histogram">
            <summary>
            Summary description for Histogram.
            </summary>
            <summary> <para>This command is used to represent the number of unique color channel values or brightness values be
            returning an array containing the number of pixels at the value signified by the array index.</para> </summary>
            <remarks> For 8-bit per component images, the array contains 256 values.  16-bit per component images returns an
            array of 65536 values. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Histogram.image">
            <summary> Gets or sets the image to evaluate. </summary>
            <value> The image to evaluate. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Histogram.progress">
            <value> The progress delegate.  </value>
            <remarks> Can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </remarks>
            <summary> Gets or sets the progress delegate.  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Histogram.area">
            <summary> Gets or sets a rectangular area of the image the histogram methods will work with. </summary>
            <value> A Rectangle specifying the area of the image to work with. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary> Initializes a new instance of the Histogram object. </summary>
            <param name="image"> The image to evaluate. </param>
            <summary> Initializes a new instance of the Histogram object. </summary>
            <overloads> Creates a Histogram object used to get brightness and channel histogram information from an AtalaImage.
            </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary> Creates a new instance of Histogram specifying the image to examine and a specific rectangular area of the
            image to work with. </summary>
            <param name="image"> The image to examine. </param>
            <param name="area"> A rectangular area of the image to work with. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Initializes a new instance of the Histogram object. </summary>
            <param name="image"> The image to evaluate. </param>
            <param name="progress"> The progress callback. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ProgressEventHandler)">
            <summary> Creates an instance of Histogram specifying the image to examine, a selection of the image to work with
            and the progress event handler. </summary>
            <param name="image"> The image to examine. </param>
            <param name="area"> A rectangular area of the image to work with. </param>
            <param name="progress"> The progress callback. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetBrightnessHistogram">
            <summary> Returns an array containing a histogram of brightness values in the image. </summary>
            <returns> An array containing a histogram of brightness values in the image. </returns>
            <exception> Thrown if the Image property is null. </exception>
            <remarks> Returns the gray channel with grayscale images. </remarks>
            <exception> Thrown if the pixel format is colormapped, or CMYK. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetChannelHistogram(System.Int32)">
            <returns> An array containing a histogram of color values from a particular channel in the image. </returns>
            <summary> Returns an array containing a histogram of color values from a particular channel in the image. </summary>
            <exception> Thrown if the pixel format of the source image is colormapped. </exception>
            <exception> Thrown if the Image property is null. </exception>
            <param name="channelIndex"> The zero based channel index to evaluate.  (0 - 3) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetDocumentHistogram">
            <summary> Returns a two element array containing the number of black and white pixels in a binary image. </summary>
            <exception> Thrown if the image pixelformat is other than Pixel1bppIndexed. </exception>
            <exception> Thrown if the image is null. </exception>
            <exception> Thrown is the current license is not DotImage Document Imaging. </exception>
            <remarks> In a typical binary image, the first pixel value is white, and second is black (known as MinIsWhite). 
            Occassionally this is swapped.  Check the palette index color value to be certain. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Image">
            <summary> Gets or sets the image to evaluate. </summary>
            <value> The image to evaluate. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Progress">
            <value> The progress delegate.  </value>
            <remarks> Can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </remarks>
            <summary> Gets or sets the progress delegate.  </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Area">
            <summary> Gets or sets a rectangular area of the image the histogram methods will work with. </summary>
            <value> A Rectangle specifying the area of the image to work with. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1">
            <summary>
            The ImageAnalyzer class is a generic class to perform analysis on an image reducing it to a single type.
            </summary>
            <typeparam name="T">The type of the analysis.</typeparam>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
            <summary>
            Determines whether the pixel format is supported.
            </summary>
            <param name="format">The format.</param>
            <returns><c>true</c> if the PixelFormat is supported, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.PerformActualAnalysis(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Performs the actual analysis.
            </summary>
            <param name="image">The image.</param>
            <returns>The value of the analysis</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.Analyze(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Analyzes the specified image.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.Progress">
            <summary>
            Gets or sets the progress event handler.
            </summary>
            <value>
            The progress event handler.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.SupportedPixelFormats">
            <summary>
            Gets the supported pixel formats.
            </summary>
            <value>
            The supported pixel formats.
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageCommandWorkerThread">
            <summary>
            Summary description for ProcessWorkerThread.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable">
            <summary> This interface when applied to an ImageCommand allowing the command to have properties that the algorithm
            will automatically determine based on image metrics. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable.AutoPropertyConfigurationEnabled">
            <summary> Gets or sets a property that when true will automatically determine property values as listed in <see cref="P:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable.PropertiesToAutoConfigure"/> based on image metrics </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable.PropertiesToAutoConfigure">
            <summary> Gets or sets a collection of property names that will be auto configured when applying the command.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute">
            <summary> When applied to a property in an ImageCommand, allows is to be an Auto Configurable. </summary>
            <remarks> See <see cref="T:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable"/> for more information.  This is intended to be for internal
            use only, and used primarily in <STRONG><EM>Atalasoft.dotImage.AdvancedDocClean</EM></STRONG>. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute._bitValue">
            <summary> Gets the value to associate this property in unmanaged code. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute.#ctor(System.Int32)">
            <summary> Creates a new instance of AutoConfigurableAttribute specifying the bit value. </summary>
            <param name="bitValue"> The value to associate with unmanaged code. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute.GenerateCommandBitField(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <summary>
            Generates a bit field from a command.
            </summary>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute.BitValue">
            <summary> Gets the value to associate this property in unmanaged code. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.LosslessJpeg">
            <summary>
            Summary description for LosslessJpeg.
            </summary>
            <summary> This class performs lossless transformations on JPEG images. </summary>
            <example>
<code lang="CS" title="LosslessJpeg Example (C#)"><![CDATA[
// Load a JPEG image.
FileStream fs = new FileStream(@"D:\Test Images\1.jpg", FileMode.Open, FileAccess.Read);

// See if the file can use the lossless transform.
if (LosslessJpeg.CanDoLosslessTransform(fs, JpegTransformType.Rotate90))
{
    FileStream fsSave = new FileStream(@"D:\Test Images\1transform.jpg", FileMode.Create, FileAccess.Write);
    fs.Seek(0, SeekOrigin.Begin);
    LosslessJpeg.Transform(fs, fsSave, JpegTransformType.Rotate90);
    fsSave.Close();
}
else
{
    // Use the normal rotate command.
    fs.Seek(0, SeekOrigin.Begin);
    AtalaImage image = new AtalaImage(fs, null);
    
    RotateCommand cmd = new RotateCommand(90);
    AtalaImage result = cmd.ApplyToImage(image);
    result.Save(@"D:\Test Images\1transform.jpg", new JpegEncoder(85), null);
    
    image.Dispose();
    result.Dispose();
}

fs.Close();
]]></code>

<code lang="VB" title="LosslessJpeg Example (Visual Basic)"><![CDATA[
' Load a JPEG image.
Dim fs As FileStream = New FileStream("D:\Test Images\1.jpg", FileMode.Open,FileAccess.Read) 
 
' See if the file can use the lossless transform.
If LosslessJpeg.CanDoLosslessTransform(fs,JpegTransformType.Rotate90) Then
    Dim fsSave As FileStream = New FileStream("D:\Test Images\1transform.jpg", FileMode.Create, FileAccess.Write) 
    fs.Seek(0, SeekOrigin.Begin)
    LosslessJpeg.Transform(fs, fsSave, JpegTransformType.Rotate90)
    fsSave.Close()
Else 
    ' Use the normal rotate command.
    fs.Seek(0, SeekOrigin.Begin)
    Dim image As AtalaImage = New AtalaImage(fs,Nothing) 
 
    Dim cmd As RotateCommand = New RotateCommand(90) 
    Dim result As AtalaImage = cmd.ApplyToImage(image) 
    result.Save("D:\Test Images\1transform.jpg",New JpegEncoder(85),Nothing)
 
    image.Dispose()
    result.Dispose()
End If
 
fs.Close()
]]></code>
</example>
            <example>
<code lang="CS" title="LosslessJpeg Example (C#)"><![CDATA[
// Load a JPEG image.
FileStream fs = new FileStream(@"D:\Test Images\1.jpg", FileMode.Open, FileAccess.Read);

// See if the file can use the lossless transform.
if (LosslessJpeg.CanDoLosslessTransform(fs, JpegTransformType.Rotate90))
{
    FileStream fsSave = new FileStream(@"D:\Test Images\1transform.jpg", FileMode.Create, FileAccess.Write);
    fs.Seek(0, SeekOrigin.Begin);
    LosslessJpeg.Transform(fs, fsSave, JpegTransformType.Rotate90);
    fsSave.Close();
}
else
{
    // Use the normal rotate command.
    fs.Seek(0, SeekOrigin.Begin);
    AtalaImage image = new AtalaImage(fs, null);
    
    RotateCommand cmd = new RotateCommand(90);
    AtalaImage result = cmd.ApplyToImage(image);
    result.Save(@"D:\Test Images\1transform.jpg", new JpegEncoder(85), null);
    
    image.Dispose();
    result.Dispose();
}

fs.Close();
]]></code>

<code lang="VB" title="LosslessJpeg Example (Visual Basic)"><![CDATA[
' Load a JPEG image.
Dim fs As FileStream = New FileStream("D:\Test Images\1.jpg", FileMode.Open,FileAccess.Read) 
 
' See if the file can use the lossless transform.
If LosslessJpeg.CanDoLosslessTransform(fs,JpegTransformType.Rotate90) Then
    Dim fsSave As FileStream = New FileStream("D:\Test Images\1transform.jpg", FileMode.Create, FileAccess.Write) 
    fs.Seek(0, SeekOrigin.Begin)
    LosslessJpeg.Transform(fs, fsSave, JpegTransformType.Rotate90)
    fsSave.Close()
Else 
    ' Use the normal rotate command.
    fs.Seek(0, SeekOrigin.Begin)
    Dim image As AtalaImage = New AtalaImage(fs,Nothing) 
 
    Dim cmd As RotateCommand = New RotateCommand(90) 
    Dim result As AtalaImage = cmd.ApplyToImage(image) 
    result.Save("D:\Test Images\1transform.jpg",New JpegEncoder(85),Nothing)
 
    image.Dispose()
    result.Dispose()
End If
 
fs.Close()
]]></code>
</example>
            <remarks> <para>JPEG images are compressed with lossy compression, meaning that each time the image is saved,
            quality is lost.  Some operations, such as rotate, crop, and convert to grayscale can be performed without
            re-encoding the data.</para>
            <para>Do determine of the image can be operated on losslessly, check the <see cref="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)"/> method.  JPEG images are divided into rectangular sections called MCU
            blocks that are typically 8x8 pixels.  If the width and height are both divisible by 8, then it usually means that
            lossless operations can be performed without losing or cropping the edges.  However some JPEG images have MCU blocks
            other than 8. </para> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary> Perform a lossless transform on a JPEG image. </summary>
            <example> LosslessJpeg Class </example>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
            <param name="source"> The source image file. </param>
            <param name="dest"> The destination image filename. </param>
            <param name="type"> The transform type to apply. </param>
            <summary> Perform a lossless transform on a JPEG image. </summary>
            <remarks> <para>This can be used to perform one of a set of simple transformations without decompressing the JPEG
            data. By not decompressing, you don't have to re-compress, thus avoiding adding additional JPG artifacts to the
            output image.</para>
            <para>This works by rearranging the compressed data (DCT coefficients), without ever fully decoding the image. 
            Therefore, its transformations are lossless: there is no image degradation at all, which is not the case if you were
            to read the image to RGB, transform, and save again as JPG.</para>
            <para>The transpose transformation has no restrictions regarding image dimensions. The other transformations operate
            rather oddly if the image dimensions are not a multiple of the iMCU size (usually 8 or 16 pixels, though sometimes
            32 or 48), because they can only transform complete blocks of DCT coefficient data in the desired way.</para>
            <para>The default behavior is to discard these "extra" blocks. This prevents ugly strips of unmodified data along
            one edge. So, strictly speaking, these transformations are not lossless for all images: they are lossless only for
            images with dimensions that are multiples of 8 or 16. You can override this discarding the extra blocks, though it
            is not recommended. </para> </remarks>
            <example> LosslessJpeg Class </example>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary> Perform a lossless transform on a JPEG image. </summary>
            <example> LosslessJpeg Class </example>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
            <param name="source"> The source image file. </param>
            <param name="dest"> The destination image filename. </param>
            <param name="type"> The transform type to apply. </param>
            <param name="flags"> The transform flags. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary> Perform a lossless transform on a JPEG image. </summary>
            <example> LosslessJpeg Class </example>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
            <param name="source"> The source image Stream. </param>
            <param name="dest"> The destination image Stream. </param>
            <param name="type"> The transform type to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary> Perform a lossless transform on a JPEG image. </summary>
            <example> LosslessJpeg Class </example>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
            <param name="source"> The source image Stream. </param>
            <param name="dest"> The destination image Stream. </param>
            <param name="type"> The transform type to apply. </param>
            <param name="flags"> The transform flags. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle)">
            <summary> Performs a lossless crop on a JPEG image. </summary>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
            <param name="source"> The source image file. </param>
            <param name="dest"> The destination image filename. </param>
            <param name="cropRectangle"> The crop rectangle. </param>
            <summary> Performs a lossless crop on a JPEG image. </summary>
            <remarks> <para>Perform a lossless crop on the image in a JPG file, without decompressing the JPG data. By not
            decompressing, you don't have to re-compress, thus avoiding adding additional JPG artifacts to the output
            image.</para>
            <para>This works by rearranging the compressed data (DCT coefficients), without ever fully decoding the image. 
            Therefore, its transformations are lossless: there is no image degradation at all, which is not the case if you were
            to read the image to RGB, transform, and save again as JPG.</para>
            <para><STRONG>Note:,<BR/></STRONG>JPG files are compressed in rectangular blocks. The dimensions of these blocks are
            always a multiple of 8 pixels: 8x8 and 16x16 are common.</para>
            <para>Because the compression blocks on the top and left edges cannot be split during a crop, the size of these
            blocks affects the crops that this function can perform. This inability to split blocks means that the top-left
            corner of the crop rect you specify will always be rounded down to the next lowest multiple of the MCU size (see
            GetMcuBlackSize).  The bottom right corner you specify is unaffected.</para> </remarks>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary> Performs a lossless crop on a JPEG image. </summary>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
            <param name="source"> The source image file. </param>
            <param name="dest"> The destination image filename. </param>
            <param name="cropRectangle"> The crop rectangle. </param>
            <param name="flags"> The transform flags. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle)">
            <summary> Performs a lossless crop on a JPEG image. </summary>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
            <param name="source"> The source image Stream. </param>
            <param name="dest"> The destination image Stream. </param>
            <param name="cropRectangle"> The crop rectangle. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary> Performs a lossless crop on a JPEG image. </summary>
            <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
            <param name="source"> The source image Stream. </param>
            <param name="dest"> The destination image Stream. </param>
            <param name="cropRectangle"> The crop rectangle. </param>
            <param name="flags"> The transform flags. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary> Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be
            performed without cropping the image. </summary>
            <param name="source"> The source image file. </param>
            <param name="transform"> The transform to test. </param>
            <summary> Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be
            performed without cropping the image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary> Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be
            performed without cropping the image. </summary>
            <param name="source"> The source image Stream. </param>
            <param name="transform"> The transform to test. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.String)">
            <summary> Get the compression block size for a JPG file. </summary>
            <remarks> This can be used in conjunction with a lossless crop to determine the range of crop rectangles that are
            possible. </remarks>
            <param name="source"> The source image file. </param>
            <summary> Get the compression block size for a JPG file. </summary>
            <remarks> This can be used in conjunction with a lossless crop to determine the range of crop rectangles that are
            possible. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.IO.Stream)">
            <summary> Get the compression block size for a JPG file. </summary>
            <remarks> This can be used in conjunction with a lossless crop to determine the range of crop rectangles that are
            possible. </remarks>
            <param name="source"> The source image Stream. </param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode">
            <summary> Specifies the type of noise. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Perlin">
            <summary> Generate an image filled with Perlin noise. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Hugo">
            <summary> Generate an image filled with Hugo Elias's implementation of Perlin noise. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Gaussian">
            <summary> Specifies the type of noise. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.NegativeExponential">
            <summary> Generate an image using negative exponential noise. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Rayleigh">
            <summary> Generate an image filled with rayleigh noise. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Uniform">
            <summary> Generate an image filled with uniform noise. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.DimensionalSlice">
            <summary> Create a single 2D plane of Perlin noise producing a single slice through a volume of noise at a given Z
            offset. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGenerator">
            <summary>
            Summary description for NoiseGenerator.
            </summary>
            <summary> Creates a new image containing noise. </summary>
            <remarks> This function has many uses.  One is to generate Perlin or Hugo noise, resize it large, and then use that
            as random clouds.  There are many different types of noise you can generate. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.imageSize">
            <summary> <para>Gets or sets the size of the resulting image containing noise.</para> </summary>
            <value> The size of the resulting image containing noise. </value>
            <exception> Thrown if the width or height is less than 1. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.scale">
            <value> <para>The size of the noise.</para> </value>
            <summary> Gets or sets the size of the noise. </summary>
            <exception> Thrown if the scale is less than 0 or greater than 100. </exception>
            <remarks> Default value is 50. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.mode">
            <value> <para>The type of noise to create.</para> </value>
            <summary> <para>Gets or sets the type of noise to create.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.baseColor">
            <summary> Gets or sets the color of the image prior to adding noise. </summary>
            <remarks> Default value is <EM>Color.Empty</EM>, which will result in a grayscale image.  Ignored by
            DimensionalSlice noise, which is always grayscale. </remarks>
            <value> The color of the image prior to adding noise. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of NoiseGenerator. </summary>
            <overloads> Creates a NoiseGenerator object used for creating images of random noise patterns. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode,System.Drawing.Color)">
            <summary> Initializes a new instance of NoiseGenerator specifying the resulting image size, scale, mode and base
            color. </summary>
            <param name="imageSize"> The size of the resulting image containing noise. </param>
            <param name="scale"> The size of the noise. </param>
            <param name="mode"> <para>The type of noise to create.</para> </param>
            <param name="baseColor"> The color of the image prior to adding noise. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode)">
            <summary> Initializes a new instance of NoiseGenerator specifying the resulting image size, scale and mode.
            </summary>
            <param name="imageSize"> The size of the resulting image containing noise. </param>
            <param name="scale"> The size of the noise. </param>
            <param name="mode"> <para>The type of noise to create.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size,System.Double)">
            <summary> Initializes a new instance of NoiseGenerator specifying the resulting image size and scale. </summary>
            <param name="imageSize"> The size of the resulting image containing noise. </param>
            <param name="scale"> The size of the noise. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size)">
            <summary> Initializes a new instance of NoiseGenerator specifying the resulting image size. </summary>
            <param name="imageSize"> The size of the resulting image containing noise. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.NoiseGenerator"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage">
            <summary>
            Generates a new AtalaImage containing the noise.
            </summary>
            <returns>A new AtalaImage containing the noise.</returns>
            <summary> Create a new image containing noise. </summary>
            <summary> Create a new image containing noise. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Double)">
            <summary>
            Generates a new AtalaImage containing the noise.
            </summary>
            <param name="zOffset">The z-axis offset used for DimensionSlice noise.</param>
            <returns>A new AtalaImage containing the noise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Int32,System.Double)">
            <summary>
            Generates a new AtalaImage containing the noise.
            </summary>
            <param name="octaves">The number of waves contributing to the noise.</param>
            <param name="persistence">Controls the smoothness. (0 to 10)</param>
            <returns>A new AtalaImage containing the noise.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.ImageSize">
            <summary>
            Gets or sets the size of the resulting image.
            </summary>
            <value>The size of the resulting image.</value>
            <summary> <para>Gets or sets the size of the resulting image containing noise.</para> </summary>
            <value> The size of the resulting image containing noise. </value>
            <exception> Thrown if the width or height is less than 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Scale">
            <summary>
            Gets or sets the size of the noise.
            </summary>
            <value>The size of the noise.</value>
            <value> <para>The size of the noise.</para> </value>
            <summary> Gets or sets the size of the noise. </summary>
            <exception> Thrown if the scale is less than 0 or greater than 100. </exception>
            <remarks> Default value is 50. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Mode">
            <summary>
            Gets or sets the type of noise to generate.
            </summary>
            <value>The type of noise to generate.</value>
            <value> <para>The type of noise to create.</para> </value>
            <summary> <para>Gets or sets the type of noise to create.</para> </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.BaseColor">
            <summary>
            Gets or sets the base color of the noise.
            </summary>
            <value>The base color of the noise.</value>
            <remarks>The DimensionalSlice noise will always be grayscale.</remarks>
            <summary> Gets or sets the color of the image prior to adding noise. </summary>
            <remarks> Default value is <EM>Color.Empty</EM>, which will result in a grayscale image.  Ignored by
            DimensionalSlice noise, which is always grayscale. </remarks>
            <value> The color of the image prior to adding noise. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayCommand">
            <summary>
            Summary description for tmpOverlay.
            </summary>
            <summary> Overlays a specified image on top of the source image. </summary>
            <remarks> <para>If the top image has an alpha channel, that alpha will be used to control the transparency of the
            overlay and will override the %TransparentColor% and %Opacity% values.  </para>
            <para>When overlaying one image with alpha, on top of another image with alpha, the alpha channels will be merged to
            take the maximum pixel value of each alpha channel.  See <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand"/> for more specific
            options.</para>
            <para>The top image will always be converted to the pixel format of the bottom image, unless the top image has an
            alpha channel, which it will then use for alpha blending.</para>
            <para>This command supports all pixel formats with the exception of 4-bit Indexed.</para>
            <para>This command processes the source image in-place, and ApplyToImage always returns null.</para> </remarks>
            <seealso> OverlayMergedCommand </seealso>
            <seealso> OverlayMaskedCommand </seealso>
            <example>
<code lang="CS" title="OverlayCommand (C#)"><![CDATA[
private AtalaImage OverlayImage(string bottomFile, string topFile, Point position)
{
    // Make sure the files exist.
    if (!File.Exists(bottomFile))
        throw new FileNotFoundException("The bottom image file could not be found.", bottomFile);

    if (!File.Exists(topFile))
        throw new FileNotFoundException("The file to overlay could not be found.", topFile);

    // Load the bottom image.
    AtalaImage tmpImage = new AtalaImage(bottomFile);
    
    // Overlay does not support 4-bit bottom images.
    AtalaImage bottomImage = null;
    if (tmpImage.PixelFormat == PixelFormat.Pixel4bppIndexed)
    {
        bottomImage = tmpImage.GetChangedPixelFormat(PixelFormat.Pixel8bppIndexed);
        tmpImage.Dispose();
    }
    else
        bottomImage = tmpImage;
    
    // Load the top image.
    tmpImage = new AtalaImage(topFile);

    // If the bottom image is 16-bit per component, the top image must be the same.
    AtalaImage topImage = null;
    if (AtalaImage.PixelFormatIsTwoBytePerComponent(bottomImage.PixelFormat) && topImage.PixelFormat != bottomImage.PixelFormat)
    {
        topImage = tmpImage.GetChangedPixelFormat(bottomImage.PixelFormat);
        tmpImage.Dispose();
    }
    else
        topImage = tmpImage;

    OverlayCommand cmd = new OverlayCommand(topImage, position);
    cmd.ApplyToImage(bottomImage);

    // We are done with the top image.
    topImage.Dispose();

    return bottomImage;
}
]]></code>

<code lang="VB" title="OverlayCommandVB (Visual Basic)"><![CDATA[
Private Function OverlayImage(ByVal bottomFile As String, ByVal topFile As String, ByVal position As Point) As AtalaImage
    ' Make sure the files exist.
    If Not File.Exists(bottomFile) Then
        Throw New FileNotFoundException("The bottom image file could not be found.", bottomFile)
    End If
 
    If Not File.Exists(topFile) Then
        Throw New FileNotFoundException("The file to overlay could not be found.", topFile)
    End If
 
    ' Load the bottom image.
    Dim tmpImage As AtalaImage =  New AtalaImage(bottomFile) 
 
    ' Overlay does not support 4-bit bottom images.
    Dim bottomImage As AtalaImage =  Nothing 
    If tmpImage.PixelFormat = PixelFormat.Pixel4bppIndexed Then
        bottomImage = tmpImage.GetChangedPixelFormat(PixelFormat.Pixel8bppIndexed)
        tmpImage.Dispose()
    Else 
        bottomImage = tmpImage
    End If
 
    ' Load the top image.
    tmpImage = New AtalaImage(topFile)
 
    ' If the bottom image is 16-bit per component, the top image must be the same.
    Dim topImage As AtalaImage =  Nothing 
    If AtalaImage.PixelFormatIsTwoBytePerComponent(bottomImage.PixelFormat) And topImage.PixelFormat <> bottomImage.PixelFormat Then
        topImage = tmpImage.GetChangedPixelFormat(bottomImage.PixelFormat)
        tmpImage.Dispose()
    Else 
        topImage = tmpImage
    End If
 
    Dim cmd As OverlayCommand =  New OverlayCommand(topImage,position) 
    cmd.ApplyToImage(bottomImage)
 
    ' We are done with the top image.
    topImage.Dispose()
 
    Return bottomImage
End Function
]]></code>
</example>
            <example>
<code lang="CS" title="OverlayCommand (C#)"><![CDATA[
private AtalaImage OverlayImage(string bottomFile, string topFile, Point position)
{
    // Make sure the files exist.
    if (!File.Exists(bottomFile))
        throw new FileNotFoundException("The bottom image file could not be found.", bottomFile);

    if (!File.Exists(topFile))
        throw new FileNotFoundException("The file to overlay could not be found.", topFile);

    // Load the bottom image.
    AtalaImage tmpImage = new AtalaImage(bottomFile);
    
    // Overlay does not support 4-bit bottom images.
    AtalaImage bottomImage = null;
    if (tmpImage.PixelFormat == PixelFormat.Pixel4bppIndexed)
    {
        bottomImage = tmpImage.GetChangedPixelFormat(PixelFormat.Pixel8bppIndexed);
        tmpImage.Dispose();
    }
    else
        bottomImage = tmpImage;
    
    // Load the top image.
    tmpImage = new AtalaImage(topFile);

    // If the bottom image is 16-bit per component, the top image must be the same.
    AtalaImage topImage = null;
    if (AtalaImage.PixelFormatIsTwoBytePerComponent(bottomImage.PixelFormat) && topImage.PixelFormat != bottomImage.PixelFormat)
    {
        topImage = tmpImage.GetChangedPixelFormat(bottomImage.PixelFormat);
        tmpImage.Dispose();
    }
    else
        topImage = tmpImage;

    OverlayCommand cmd = new OverlayCommand(topImage, position);
    cmd.ApplyToImage(bottomImage);

    // We are done with the top image.
    topImage.Dispose();

    return bottomImage;
}
]]></code>

<code lang="VB" title="OverlayCommandVB (Visual Basic)"><![CDATA[
Private Function OverlayImage(ByVal bottomFile As String, ByVal topFile As String, ByVal position As Point) As AtalaImage
    ' Make sure the files exist.
    If Not File.Exists(bottomFile) Then
        Throw New FileNotFoundException("The bottom image file could not be found.", bottomFile)
    End If
 
    If Not File.Exists(topFile) Then
        Throw New FileNotFoundException("The file to overlay could not be found.", topFile)
    End If
 
    ' Load the bottom image.
    Dim tmpImage As AtalaImage =  New AtalaImage(bottomFile) 
 
    ' Overlay does not support 4-bit bottom images.
    Dim bottomImage As AtalaImage =  Nothing 
    If tmpImage.PixelFormat = PixelFormat.Pixel4bppIndexed Then
        bottomImage = tmpImage.GetChangedPixelFormat(PixelFormat.Pixel8bppIndexed)
        tmpImage.Dispose()
    Else 
        bottomImage = tmpImage
    End If
 
    ' Load the top image.
    tmpImage = New AtalaImage(topFile)
 
    ' If the bottom image is 16-bit per component, the top image must be the same.
    Dim topImage As AtalaImage =  Nothing 
    If AtalaImage.PixelFormatIsTwoBytePerComponent(bottomImage.PixelFormat) And topImage.PixelFormat <> bottomImage.PixelFormat Then
        topImage = tmpImage.GetChangedPixelFormat(bottomImage.PixelFormat)
        tmpImage.Dispose()
    Else 
        topImage = tmpImage
    End If
 
    Dim cmd As OverlayCommand =  New OverlayCommand(topImage,position) 
    cmd.ApplyToImage(bottomImage)
 
    ' We are done with the top image.
    topImage.Dispose()
 
    Return bottomImage
End Function
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayCommand.topImage">
            <summary> Gets or sets the image that will be overlayed onto the source image. </summary>
            <value> The image that will be overlayed onto the source image. </value>
            <exception> Thrown if the image is null. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayCommand.position">
            <value> The position of the top image onto the source image. </value>
            <summary> Gets or sets the position of the top image with respect to the source image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayCommand.opacity">
            <summary> Gets or sets the opacity of the top image. </summary>
            <value> The opacity of the top image. </value>
            <remarks> <para>Valid values are 0.0 for fully transparent through 1.0 for fully opaque.</para>
            <para>If the image has an alpha channel, the alpha channel will be used for the opacity of each pixel in the top
            image.</para> </remarks>
            <exception> Thrown if the opacity is less than 0.0 or greater than 1.0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayCommand.transparentColor">
            <remarks> By default, this color is set to <EM>Color.Transparent</EM> and ignored.  If the top image has an alpha
            channel, this value is ignored. </remarks>
            <summary> Gets or sets the color that will be used as a transparent mask for the top image. </summary>
            <value> The color that will be used as a transparent mask for the top image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayCommand.transparentIndex">
            <value> The palette index that will be used as a transparent mask for the top image. </value>
            <summary> Gets or sets the palette index that will be used as a transparent mask for the top image. </summary>
            <remarks> By default, this color is set to -1 and ignored.  It is also ignored if the top image has an alpha
            channel. </remarks>
            <exception> Thrown if the value is less than -1 or greater than 255. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of %OverlayCommand%. </summary>
            <overloads> Create an OverlayCommand used to overlay one image onto another. </overloads>
            <summary> Creates a new instance of OverlayCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">OverlayCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>
            Overlay one image onto another.
            </summary>
            <param name="topImage">The image to place onto the bottom image.</param>
            <param name="position">Position on the bottom image to place the overlay.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Double)">
            <summary>
            Overlay one image onto another.
            </summary>
            <param name="topImage">The image to place onto the bottom image.</param>
            <param name="position">Position on the bottom image to place the overlay.</param>
            <param name="opacity">The amount of transparency used for the top image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Overlay one image onto another.
            </summary>
            <param name="topImage">The image to place onto the bottom image.</param>
            <param name="position">Position on the bottom image to place the overlay.</param>
            <param name="transparentColor">The color in the top image to set as transparent when overlaying.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32)">
            <summary>
            Overlay an 8-bit image onto another.
            </summary>
            <param name="topImage">The image to place onto the bottom image.</param>
            <param name="position">Position on the bottom image to place the overlay.</param>
            <param name="transparentIndex">The palette index of the color to set as transparent when overlaying.</param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verifies the properties.
            </summary>
            <param name="bottomImage">The bottom image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="bottomImage">The bottom image.</param>
            <param name="dest">The dest.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.InPlaceProcessing">
            <summary> Gets a value indicating whether the command returns a new image or modified the source image passed into
            the command. </summary>
            <value> Returns <EM>true</EM> for this command. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TopImage">
            <summary> Gets or sets the image that will be overlayed onto the source image. </summary>
            <value> The image that will be overlayed onto the source image. </value>
            <exception> Thrown if the image is null. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Position">
            <value> The position of the top image onto the source image. </value>
            <summary> Gets or sets the position of the top image with respect to the source image. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Opacity">
            <summary> Gets or sets the opacity of the top image. </summary>
            <value> The opacity of the top image. </value>
            <remarks> <para>Valid values are 0.0 for fully transparent through 1.0 for fully opaque.</para>
            <para>If the image has an alpha channel, the alpha channel will be used for the opacity of each pixel in the top
            image.</para> </remarks>
            <exception> Thrown if the opacity is less than 0.0 or greater than 1.0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentColor">
            <remarks> By default, this color is set to <EM>Color.Transparent</EM> and ignored.  If the top image has an alpha
            channel, this value is ignored. </remarks>
            <summary> Gets or sets the color that will be used as a transparent mask for the top image. </summary>
            <value> The color that will be used as a transparent mask for the top image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentIndex">
            <value> The palette index that will be used as a transparent mask for the top image. </value>
            <summary> Gets or sets the palette index that will be used as a transparent mask for the top image. </summary>
            <remarks> By default, this color is set to -1 and ignored.  It is also ignored if the top image has an alpha
            channel. </remarks>
            <exception> Thrown if the value is less than -1 or greater than 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand">
            <summary> Overlay a specified image onto the source image using an 8-bit grayscale mask image to control the
            transparency of the overlay. </summary>
            <seealso> OverlayCommand </seealso>
            <seealso> OverlayMaskedCommand </seealso>
            <example>
<code lang="CS" title="OverlayMasked (C#)"><![CDATA[
private AtalaImage OverlayImage(string bottomFile, string topFile, string maskFile)
{
    // Make sure the files exist.
    if (!File.Exists(bottomFile))
        throw new FileNotFoundException("The bottom image file could not be found.", bottomFile);

    if (!File.Exists(topFile))
        throw new FileNotFoundException("The file to overlay could not be found.", topFile);

    if (!File.Exists(maskFile))
        throw new FileNotFoundException("The mask file could not be found.", maskFile);

    // Load the bottom image.
    AtalaImage tmpImage = new AtalaImage(bottomFile);
    
    // Overlay does not support 4-bit bottom images.
    AtalaImage bottomImage = null;
    if (tmpImage.PixelFormat == PixelFormat.Pixel4bppIndexed)
    {
        bottomImage = tmpImage.GetChangedPixelFormat(PixelFormat.Pixel8bppIndexed);
        tmpImage.Dispose();
    }
    else
        bottomImage = tmpImage;
    
    // Load the top image.
    tmpImage = new AtalaImage(topFile);

    // If the bottom image is 16-bit per component, the top image must be the same.
    AtalaImage topImage = null;
    if (AtalaImage.PixelFormatIsTwoBytePerComponent(bottomImage.PixelFormat) && topImage.PixelFormat != bottomImage.PixelFormat)
    {
        topImage = tmpImage.GetChangedPixelFormat(bottomImage.PixelFormat);
        tmpImage.Dispose();
    }
    else
        topImage = tmpImage;

    // Load the mask image that will describe the alpha values.
    tmpImage = new AtalaImage(maskFile);
    
    // The mask must be 8-bit grayscale.
    AtalaImage mask = null;
    if (tmpImage.PixelFormat != PixelFormat.Pixel8bppGrayscale)
    {
        mask = tmpImage.GetChangedPixelFormat(PixelFormat.Pixel8bppGrayscale);
        tmpImage.Dispose();
    }
    else
        mask = tmpImage;
        
    // The mask must also be the same size as the top image.
    if (mask.Size != topImage.Size)
    {
        ResampleCommand resample = new ResampleCommand(topImage.Size);
        tmpImage = resample.ApplyToImage(mask);
        mask.Dispose();
        mask = tmpImage;
    }
    
    OverlayMaskedCommand cmd = new OverlayMaskedCommand(topImage, mask);
    cmd.ApplyToImage(bottomImage);

    // We are done with the top image and mask.
    topImage.Dispose();
    mask.Dispose();

    return bottomImage;
}
]]></code>

<code lang="VB" title="OverlayMaskedVB (Visual Basic)"><![CDATA[
Private Function OverlayImage(ByVal bottomFile As String, ByVal topFile As String, ByVal maskFile As String) As AtalaImage
    ' Make sure the files exist.
    If Not File.Exists(bottomFile) Then
        Throw New FileNotFoundException("The bottom image file could not be found.", bottomFile)
    End If
 
    If Not File.Exists(topFile) Then
        Throw New FileNotFoundException("The file to overlay could not be found.", topFile)
    End If
 
    If Not File.Exists(maskFile) Then
        Throw New FileNotFoundException("The mask file could not be found.", maskFile)
    End If
 
    ' Load the bottom image.
    Dim tmpImage As AtalaImage =  New AtalaImage(bottomFile) 
 
    ' Overlay does not support 4-bit bottom images.
    Dim bottomImage As AtalaImage =  Nothing 
    If tmpImage.PixelFormat = PixelFormat.Pixel4bppIndexed Then
        bottomImage = tmpImage.GetChangedPixelFormat(PixelFormat.Pixel8bppIndexed)
        tmpImage.Dispose()
    Else 
        bottomImage = tmpImage
    End If
 
    ' Load the top image.
    tmpImage = New AtalaImage(topFile)
 
    ' If the bottom image is 16-bit per component, the top image must be the same.
    Dim topImage As AtalaImage =  Nothing 
    If AtalaImage.PixelFormatIsTwoBytePerComponent(bottomImage.PixelFormat) And topImage.PixelFormat <> bottomImage.PixelFormat Then
        topImage = tmpImage.GetChangedPixelFormat(bottomImage.PixelFormat)
        tmpImage.Dispose()
    Else 
        topImage = tmpImage
    End If
 
    ' Load the mask image that will describe the alpha values.
    tmpImage = New AtalaImage(maskFile)
 
    ' The mask must be 8-bit grayscale.
    Dim mask As AtalaImage =  Nothing 
    If tmpImage.PixelFormat <> PixelFormat.Pixel8bppGrayscale Then
        mask = tmpImage.GetChangedPixelFormat(PixelFormat.Pixel8bppGrayscale)
        tmpImage.Dispose()
    Else 
        mask = tmpImage
    End If

    ' The mask must also be the same size as the top image.
    If mask.Size <> topImage.Size Then
        Dim resample As ResampleCommand =  New ResampleCommand(topImage.Size) 
        tmpImage = resample.ApplyToImage(mask)
        mask.Dispose()
        mask = tmpImage
    End If

    Dim cmd As OverlayMaskedCommand =  New OverlayMaskedCommand(topImage,mask) 
    cmd.ApplyToImage(bottomImage)
 
    ' We are done with the top image and mask.
    topImage.Dispose()
    mask.Dispose()
 
    Return bottomImage
End Function
]]></code>
</example>
            <remarks> <para>If the top image already contains an alpha channel, use OverlayCommand, which will
            alpha blend the images automatically.</para>
            <para>The bottom image must be a continuous format, such as 8-bit grayscale or 24-bit RGB.  See 
            OverlayMaskedDocumentCommand for masking 1-bit binary images.</para>
            <para>This command processes the source image in-place, and ApplyToImage always returns null.</para> </remarks>
            <seealso> OverlayMaskedDocumentCommand Class </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.topImage">
            <summary> Gets or sets the image that will be overlayed onto the source image. </summary>
            <value> The image that will be overlayed onto the source image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.position">
            <value> The position of the top image onto the source image. </value>
            <summary> Gets or sets the position of the top image onto the source image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.alphaMask">
            <summary> Gets or sets the 8-bit grayscale image representing the transparency mask of the overlay. </summary>
            <value> The 8-bit grayscale image representing the transparency of the overlay. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand"/>. </summary>
            <overloads> Create an OverlayMaskedCommand object that will use a mask image to filter the image overlay.
            </overloads>
            <summary> Creates a new instance of OverlayCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">OverlayMaskedCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary> Initializes a new instance of %OverlayMaskedCommand% specifying the top image and alpha mask and position
            of the top image. </summary>
            <param name="topImage"> The image that will be overlayed onto the source image. </param>
            <param name="alphaMask"> The 8-bit grayscale image representing the transparency of the overlay. </param>
            <param name="position"> The position of the top image onto the source image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary> Initializes a new instance of %OverlayMaskedCommand% specifying the top image and alpha mask. </summary>
            <param name="topImage"> The image that will be overlayed onto the source image. </param>
            <param name="alphaMask"> The 8-bit grayscale image representing the transparency of the overlay. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand"/> class.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentNullException">Alpha mask is null.</exception>
            <exception cref="T:System.ArgumentException">
            The alpha mask contains no image data.
            or
            The alpha mask must be the same size as the top image.
            </exception>
            <exception cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException">
            The top image must be Continuous.
            or
            The alpha mask must be a grayscale image.
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="bottomImage">The bottom image.</param>
            <param name="dest">The dest.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Internal error: illegal pixel format slipped into OverlayMaskedCommand.</exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.InPlaceProcessing">
            <summary> Gets a value indicating whether the command returns a new image or modified the source image passed into
            the command. </summary>
            <value> True if the command will modify the source image passed into the <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)"/> method. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.TopImage">
            <summary> Gets or sets the image that will be overlayed onto the source image. </summary>
            <value> The image that will be overlayed onto the source image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.Position">
            <value> The position of the top image onto the source image. </value>
            <summary> Gets or sets the position of the top image onto the source image. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.AlphaMask">
            <summary> Gets or sets the 8-bit grayscale image representing the transparency mask of the overlay. </summary>
            <value> The 8-bit grayscale image representing the transparency of the overlay. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>														};
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand">
            <summary>
            Summary description for OverlayMergedCommand.
            </summary>
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, it will throw the <see cref="T:System.ArgumentException"/></remarks>
            <summary> <para>Merge two images of the same PixelFormat together specifying various merge types.</para> </summary>
            <remarks> <para>This functionality is especially useful when combining alpha channels with options other than the
            default "maximum" used in the <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayCommand"/> when overlaying two RGBA images.</para>
            <para>This command processes the source image in-place, and ApplyToImage always returns null.</para> </remarks>
            <seealso> OverlayCommand </seealso>
            <seealso> OverlayMaskedCommand </seealso>
            <example>
<code lang="CS" title="Overlay (C#)"><![CDATA[
// Load the images to work with.
AtalaImage bottomImage = new AtalaImage(@"D:\Test Images\1.jpg");
AtalaImage topImage = new AtalaImage(@"D:\Test Images\1save.jpg");

// Overlay the top image into the bottom image with 50% opacity.
OverlayMergedCommand cmd = new OverlayMergedCommand(topImage, Point.Empty, MergeOption.FastBlend, 0.5);
cmd.ApplyToImage(bottomImage);
]]></code>

<code lang="VB" title="OverlayVB (Visual Basic)"><![CDATA[
' Load the images to work with.
Dim bottomImage As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
Dim topImage As AtalaImage =  New AtalaImage("D:\Test Images\1save.jpg") 
 
' Overlay the top image into the bottom image with 50% opacity.
Dim cmd As OverlayMergedCommand =  New OverlayMergedCommand(topImage,PoInteger.Empty, MergeOption.FastBlend, 0.5) 
cmd.ApplyToImage(bottomImage)
]]></code>
</example>
            <example>
<code lang="CS" title="Overlay (C#)"><![CDATA[
// Load the images to work with.
AtalaImage bottomImage = new AtalaImage(@"D:\Test Images\1.jpg");
AtalaImage topImage = new AtalaImage(@"D:\Test Images\1save.jpg");

// Overlay the top image into the bottom image with 50% opacity.
OverlayMergedCommand cmd = new OverlayMergedCommand(topImage, Point.Empty, MergeOption.FastBlend, 0.5);
cmd.ApplyToImage(bottomImage);
]]></code>

<code lang="VB" title="OverlayVB (Visual Basic)"><![CDATA[
' Load the images to work with.
Dim bottomImage As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
Dim topImage As AtalaImage =  New AtalaImage("D:\Test Images\1save.jpg") 
 
' Overlay the top image into the bottom image with 50% opacity.
Dim cmd As OverlayMergedCommand =  New OverlayMergedCommand(topImage,PoInteger.Empty, MergeOption.FastBlend, 0.5) 
cmd.ApplyToImage(bottomImage)
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.topImage">
            <summary> Gets or sets the image that will be overlayed onto the source image. </summary>
            <value> The image that will be overlayed onto the source image. </value>
            <exception> Thrown if the image null (Nothing in Visual Basic). </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.position">
            <summary> Gets or sets the position of the top image onto the source image. </summary>
            <value> The position of the top image onto the source image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.mergeOption">
            <value> A value indicating how the top and bottom pixels wil be merged together. </value>
            <summary> Gets or sets a value indicating how the top and bottom pixels wil be merged together. </summary>
            <remarks> For 1-bit images, this option can only be LogicalAnd, LogicalOR, LogicalXOR, NegativeAnd, NegativeOR or
            NegativeXOR.  NegativeAnd, NegativeOR, and NegativeXOR can only be used with 1-bit images. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.factor">
            <summary> Gets or sets a factor applied to some of the merge options. </summary>
            <value> A factor applied to some of the merge options. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of %OverlayMergedCommand%. </summary>
            <overloads> Create an OverlayMergedCommand that will overlay one image onto another using a merging algorithm to
            determine the output pixel. </overloads>
            <summary> Creates a new instance of OverlayMergedCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.NotImplementedException">OverlayMergedCommand does not support serialization</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption,System.Double)">
            <summary> Initializes a new instance of %OverlayMergedCommand% specifying the top image, position of the image, the
            merge option, and a factor used for some merge options. </summary>
            <param name="topImage"> The image that will be overlayed onto the source image. </param>
            <param name="position"> The position of the top image onto the source image. </param>
            <param name="mergeOption"> Specifies how the top and bottom pixels wil be merged together. </param>
            <param name="factor"> A factor applied to some of the merge options.  For example when using the Fast merge option,
            this value would be opacity (0 to 1). </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption)">
            <summary> Initializes a new instance of %OverlayMergedCommand% specifying the top image, position of the image, and
            the merge option. </summary>
            <param name="topImage"> The image that will be overlayed onto the source image. </param>
            <param name="position"> The position of the top image onto the source image. </param>
            <param name="mergeOption"> Specifies how the top and bottom pixels wil be merged together. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.MergeOption)">
            <summary> Initializes a new instance of %OverlayMergedCommand% specifying the top image, and the merge option.
            </summary>
            <param name="topImage"> The image that will be overlayed onto the source image. </param>
            <param name="mergeOption"> Specifies how the top and bottom pixels wil be merged together. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand"/> class.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verifies the properties.
            </summary>
            <param name="sourceImage">The source image.</param>
            <exception cref="T:System.ArgumentException">
            The bottomImage and topImage must have the same bit depth.
            or
            The merge option selected can only be used with 1-bit images.
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="dest">The dest.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.InPlaceProcessing">
            <value> True if the command will modify the source image passed into the <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)"/> method. </value>
            <summary> Gets a value indicating whether the command returns a new image or modified the source image passed into
            the command. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.TopImage">
            <summary>
            Gets or sets the value of topImage
            </summary>
            <value>The image to overlay onto the source image.</value>
            <summary> Gets or sets the image that will be overlayed onto the source image. </summary>
            <value> The image that will be overlayed onto the source image. </value>
            <exception> Thrown if the image null (Nothing in Visual Basic). </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Position">
            <summary>
            Gets or sets the value of position
            </summary>
            <value>The position where to topImage should be placed.</value>
            <summary> Gets or sets the position of the top image onto the source image. </summary>
            <value> The position of the top image onto the source image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.MergeOption">
            <summary>
            Gets or sets the value of mergeOption
            </summary>
            <value>The type of process used to place the top image onto the bottom.</value>
            <value> A value indicating how the top and bottom pixels wil be merged together. </value>
            <summary> Gets or sets a value indicating how the top and bottom pixels wil be merged together. </summary>
            <remarks> For 1-bit images, this option can only be LogicalAnd, LogicalOR, LogicalXOR, NegativeAnd, NegativeOR or
            NegativeXOR.  NegativeAnd, NegativeOR, and NegativeXOR can only be used with 1-bit images. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Factor">
            <summary>
            Gets or sets the value of factor
            </summary>
            <value>This value depends on which MergeOption is used.</value>
            <summary> Gets or sets a factor applied to some of the merge options. </summary>
            <value> A factor applied to some of the merge options. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.RegionOfInterest">
            <summary> This object can be passed into most <STRONG>ImageCommands</STRONG> to indicate a region of the image to
            process.  Any shaped region can be used by specifying a <see cref="T:System.Drawing.Region"/> object or a simple
            <see cref="T:System.Drawing.Rectangle"/>. </summary>
            <example>
<code lang="CS" title="Mosaic (C#)"><![CDATA[
// Load the image to work with.
AtalaImage image = new AtalaImage(@"D:\Test Images\1save.jpg");

// Apply a mosaic effect to the middle of the image.
Rectangle rc = new Rectangle(20, 20, image.Width - 40, image.Height - 40);
MosaicCommand mos = new MosaicCommand(10);
mos.RegionOfInterest = new RegionOfInterest(rc);
mos.ApplyToImage(image);
]]></code>

<code lang="VB" title="MosaicVB (Visual Basic)"><![CDATA[
' Load the image to work with.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1save.jpg") 
 
' Apply a mosaic effect to the middle of the image.
Dim rc As Rectangle =  New Rectangle(20,20,image.Width - 40,image.Height - 40) 
Dim mos As MosaicCommand =  New MosaicCommand(10) 
mos.RegionOfInterest = New RegionOfInterest(rc)
mos.ApplyToImage(image)
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.region">
            <summary> Gets or sets the <STRONG>System.Drawing.Region</STRONG> used to specify the portion of an image to
            process. </summary>
            <value> The Region used to specify the portion of an image to process. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.smoothingLevel">
            <summary> Gets or sets the smoothing level of the region. </summary>
            <value> the smoothing level of the region. </value>
            <remarks> By default this is 0.  Can be any value greater than 0, and is the standard deviation of the gaussian
            kernel. </remarks>
            <exception> Thrown is the value is less than 0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exception> Thrown if the current license is not DotImage Photo Pro or Document Imaging. </exception>
            <summary> Initializes a new instance of %RegionOfInterest%. </summary>
            <overloads> Create a RegionOfInterest used by several ImageCommands to specify the area of an image to process.
            </overloads>
            <exception> Thrown if the current license is not DotImage Photo Pro or Document Imaging. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.#ctor(System.Drawing.Region)">
            <summary> Initializes a new instance of %RegionOfInterest% specifying a .NET Region object to use as the region.
            </summary>
            <exception> Thrown if the current license is not DotImage Photo Pro or Document Imaging. </exception>
            <param name="region"> The Region used to specify the portion of an image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.#ctor(System.Drawing.Rectangle)">
            <summary> Initializes a new instance of %RegionOfInterest% specifying a simple rectangle to use as the region.
            </summary>
            <exception> Thrown if the current license is not DotImage Photo Pro or Document Imaging. </exception>
            <param name="rect"> <para>The rectangular area of the image to process.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.IsSimpleRegion">
            <summary> <para>Returns <STRONG>true </STRONG>if the Region is a simple rectangle.</para> </summary>
            <returns> <STRONG>true </STRONG>if the Region is a simple rectangle. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.Region">
            <summary> Gets or sets the <STRONG>System.Drawing.Region</STRONG> used to specify the portion of an image to
            process. </summary>
            <value> The Region used to specify the portion of an image to process. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.SmoothingLevel">
            <summary> Gets or sets the smoothing level of the region. </summary>
            <value> the smoothing level of the region. </value>
            <remarks> By default this is 0.  Can be any value greater than 0, and is the standard deviation of the gaussian
            kernel. </remarks>
            <exception> Thrown is the value is less than 0. </exception>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand">
            <summary>
            Summary description for ResampleColormappedToRgbCommand.
            </summary>
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, it will raise the ChangePixelFormat
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
            <summary> Resamples the source 8-bit colormapped image to a 24-bit RGB to a specified size. </summary>
            <remarks> This command is used when viewing a colormapped image in the controls when Antialiasing.  It will smooth
            the lines and create better displays of colormapped images by efficiently converting the image from 8-bit
            colormapped to 24-bit RGB while it's resampling. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.sourceRect">
            <summary> Gets or sets the rectangular region of the source image that will be resized. </summary>
            <value> The rectangular region of the source image that will be resized. </value>
            <remarks> The default value is <EM>Rectangle.Empty</EM>, in which case the entire image is resized. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.destSize">
            <summary> Gets or sets the final width and height of the image. </summary>
            <value> The final size of the image. </value>
            <remarks> Ignored when the <see cref="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.MaxSize"/> property is set to a value greater
            than 0. </remarks>
            <exception> Thrown when the width or height is less than or equal to 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.method">
            <summary> Gets or sets the resampling algorithm to apply. </summary>
            <value> The resampling algorithn to apply. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.maxSize">
            <summary> Gets or sets the maximum width or height value for resizing while maintaining the aspect ratio. </summary>
            <value> The width of height value for resizing while maintaining the aspect ratio. </value>
            <remarks> When this value is 0 (the default), it is ignored and <see cref="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.DestSize"/> is used instead.  Use this value to automatically calculate the
            new width and height, keeping the same aspect ratio as the original image. </remarks>
            <exception> Thrown if the value is less than 0. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying the source rectangle,
            destination size, and resampling method. </summary>
            <overloads> Create a ResampleColormappedToRgbCommand that will resize an indexed image directly to a 24-bit image.
            </overloads>
            <summary> Creates a new instance of ResampleColormappedToRgbCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>
            Performs the command on a specified section of the image.
            </summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
            <remarks>
            This is used internally by each thread to perform its portion of the work for the particular
            IThreadableCommand.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>
            Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread.
            </summary>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
            <returns>
            An array of Rectangles which represent the bands that will actually be used.
            </returns>
            <remarks>
            Each band defines an area on which the IThreadableCommand will operate in an independent thread.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying the source rectangle,
            destination size, and resampling method. </summary>
            <param name="sourceRect"> The rectangular region of the source image that will be resized. </param>
            <param name="destSize"> The final size of the image. </param>
            <param name="method"> The resampling algorithm to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying final size and resampling
            method. </summary>
            <param name="destSize"> The final size of the image. </param>
            <param name="method"> The resampling algorithm to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Drawing.Size)">
            <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying final size and using the the
            default resampling method. </summary>
            <param name="destSize"> The final size of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying final size and resampling
            method. </summary>
            <param name="maxSize"> The maximum width or height of the final image while maintaining the aspect ratio. </param>
            <param name="method"> The resampling algorithm to apply. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Int32)">
            <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying the maximum width or height
            using the defailt resampling method. </summary>
            <param name="maxSize"> The maximum width or height of the final image while maintaining the aspect ratio. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand"/> class.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">
            Cannot perform AreaAverage resize method when increasing the size of the image, use default instead
            or
            The requested MaxSize cannot be used because it would result in a zero length width or height.;MaxSize
            or
            AreaAverage requires the destination image to be the same size or smaller than the source image.
            or
            Invalid resize method;method
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="dstImage">The DST image.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.AutoThread">
            <summary>
            If set to true the IThreadableCommand will automatically parallelize image processing.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.MaxSize">
            <summary> Gets or sets the maximum width or height value for resizing while maintaining the aspect ratio. </summary>
            <value> The width of height value for resizing while maintaining the aspect ratio. </value>
            <remarks> When this value is 0 (the default), it is ignored and <see cref="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.DestSize"/> is used instead.  Use this value to automatically calculate the
            new width and height, keeping the same aspect ratio as the original image. </remarks>
            <exception> Thrown if the value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.SourceRect">
            <summary>
            Gets or sets the value of sourceRect
            </summary>
            <value>The rectangular region of the source image that will be resized.</value>
            <summary> Gets or sets the rectangular region of the source image that will be resized. </summary>
            <value> The rectangular region of the source image that will be resized. </value>
            <remarks> The default value is <EM>Rectangle.Empty</EM>, in which case the entire image is resized. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.DestSize">
            <summary>
            Gets or sets the value of destSize
            </summary>
            <value>The final size of the image.</value>
            <summary> Gets or sets the final width and height of the image. </summary>
            <value> The final size of the image. </value>
            <remarks> Ignored when the <see cref="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.MaxSize"/> property is set to a value greater
            than 0. </remarks>
            <exception> Thrown when the width or height is less than or equal to 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.Method">
            <summary>
            Gets or sets the value of method
            </summary>
            <value>The resampling algorithn to apply.</value>
            <summary> Gets or sets the resampling algorithm to apply. </summary>
            <value> The resampling algorithn to apply. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand">
            <summary>
            Summary description for ResampleCommand.
            </summary>
            <remarks>This method requires a continuous tone image.  If the source image is not continuous, it will raise the ChangePixelFormat
            event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
            <summary> Resamples the source image to the specified dimensions. </summary>
            <remarks> This object is capable of resampling continuous and 8-bit colormapped images.  For resizing 1-bit document
            images see %Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand%. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleCommand.sourceRect">
            <summary> Gets or sets the rectangular region of the source image that will be resized. </summary>
            <value> The rectangular region of the source image that will be resized. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleCommand.destSize">
            <summary> Gets or sets the final size of the image. </summary>
            <value> The final size of the image. </value>
            <exception> Thrown if either value.width or value.height is amp;lt; 1. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleCommand.method">
            <summary> Gets or sets the the resampling algorithm to apply. </summary>
            <value> The resampling algorithm to apply. </value>
            <exception> Thrown if value is amp;lt; 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleCommand.maxSize">
            <summary> Gets or sets the width of height value for resizing while maintaining the aspect ratio. </summary>
            <remarks> When this value is 0, it is ignored. </remarks>
            <value> The width of height value for resizing while maintaining the aspect ratio. </value>
            <exception> Thrown if value is amp;lt; 1. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Initializes a new instance of %ResampleCommand%. </summary>
            <overloads> Create a ResampleCommand used to resize <see cref="T:Atalasoft.Imaging.AtalaImage"/> objects. </overloads>
            <summary> Creates a new instance of ResampleCommand. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand"/> specifying sourceRect, destSize, and method.
            </summary>
            <param name="sourceRect">The rectangular region of the source image that will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand"/> specifying final size and resampling method.
            </summary>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Drawing.Size)">
            <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand"/> specifying final size and using the default resampling method.
            </summary>
            <param name="destSize">The final size of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand"/> specifying final size and resampling method.
            </summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio. </param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand"/> specifying the maximum width or height and resampling method.
            </summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand"/> class.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">
            Cannot perform AreaAverage resize method when increasing the size of the image, use default instead
            or
            The requested MaxSize cannot be used because it would result in a zero length width or height.;MaxSize
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="source">The source.</param>
            <param name="dest">The dest.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">ResampleCommand method mismatch.  Please report to support if you see this message.</exception>
            <exception cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException">
            AreaAverage can't be used with the  + image.PixelFormat.ToString() +  pixel format.
            or
            Filter resampling not supported in 16-bit per component images.
            </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.MaxSize">
            <summary> Gets or sets the width of height value for resizing while maintaining the aspect ratio. </summary>
            <remarks> When this value is 0, it is ignored. </remarks>
            <value> The width of height value for resizing while maintaining the aspect ratio. </value>
            <exception> Thrown if value is amp;lt; 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SourceRect">
            <summary>
            Gets or sets the value of sourceRect
            </summary>
            <value>The rectangular region of the source image that will be resized.</value>
            <summary> Gets or sets the rectangular region of the source image that will be resized. </summary>
            <value> The rectangular region of the source image that will be resized. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.DestSize">
            <summary>
            Gets or sets the value of destSize
            </summary>
            <value>The final size of the image.</value>
            <summary> Gets or sets the final size of the image. </summary>
            <value> The final size of the image. </value>
            <exception> Thrown if either value.width or value.height is amp;lt; 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.Method">
            <summary>
            Gets or sets the value of method
            </summary>
            <value>The resampling algorithn to apply.</value>
            <summary> Gets or sets the the resampling algorithm to apply. </summary>
            <value> The resampling algorithm to apply. </value>
            <exception> Thrown if value is amp;lt; 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand">
            <summary>
            Summary description for ResampleMaskedCommand.
            </summary>
            <summary> Resample an 8 bit image honoring one color value as a mask. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand._sourceRect">
            <summary> Sets or gets the area to be resampled. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand._destSize">
            <summary> Sets or gets the destination size of the image. </summary>
            <exception> Thrown if the width or height is less than 1. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand._maxSize">
            <summary> Sets or gets the maximum dimension of the final image. </summary>
            <remarks> MaxSize must be greater than zero. </remarks>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand._maskIndex">
            <summary> Gets or sets the index of the color of the mask. </summary>
            <remarks> MaskIndex must be a value between 0 and 255. </remarks>
            <exception> Thrown if the value is less than zero or greater than 255. </exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <overloads> Construct a new ResampleMaskedCommand with the provided information. </overloads>
            <summary> Construct a new ResampleMaskedCommand with default properties. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.ArgumentNullException">info;The parameter 'info' can't be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Drawing.Size,System.Int32)">
            <summary> Construct a new ResampleMaskedCommand with the provided destination size and mask index. </summary>
            <param name="destSize"> In color index to treat as a mask. </param>
            <param name="maskIndex"> In color index to treat as a mask. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Int32,System.Int32)">
            <summary> Construct a new ResampleMaskedCommand with the provided size and mask index. </summary>
            <param name="maxSize"> The maximum size for either dimension of the final image. </param>
            <param name="maskIndex"> In color index to treat as a mask. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,System.Int32)">
            <summary> Construct a new ResampleMaskedCommand with the provided source rectangle, destination size, and mask
            index. </summary>
            <param name="sourceRect"> The rectangle describing the pixels to resample. </param>
            <param name="destSize"> In color index to treat as a mask. </param>
            <param name="maskIndex"> In color index to treat as a mask. </param>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand._supportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">
            ResampleMaskedCommand can only be used with 8-bit indexed images.;sourceImage
            or
            The requested MaxSize cannot be used because it would result in a zero length width or height.;sourceImage
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            Performs the actual command.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="dstImage">The DST image.</param>
            <param name="area">The area.</param>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.SourceRect">
            <summary> Sets or gets the area to be resampled. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.DestSize">
            <summary> Sets or gets the destination size of the image. </summary>
            <exception> Thrown if the width or height is less than 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.MaxSize">
            <summary> Sets or gets the maximum dimension of the final image. </summary>
            <remarks> MaxSize must be greater than zero. </remarks>
            <exception> Thrown if the value is less than 1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.MaskIndex">
            <summary> Gets or sets the index of the color of the mask. </summary>
            <remarks> MaskIndex must be a value between 0 and 255. </remarks>
            <exception> Thrown if the value is less than zero or greater than 255. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ThreadedCommand">
            <summary> ThreadedCommand is a proxy command that will induce ImageCommands that support multithreading to run in on
            multiple threads. </summary>
            <remarks> <para>Only ImageCommands that implement the IThreadableCommand and ICloneable interfaces can be used with
            ThreadedCommand.  ThreadedCommand manages all thread creation and synchronization, proxy management of ImageCommand
            operations and so on.</para>
            <para>Once a ThreadedCommand has been created and given a valid ImageCommand, it can be used any place that
            ImageCommand can be used.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ThreadedCommand._command">
            <summary> Sets or gets the underlying command that will be multithreaded. </summary>
            <remarks> In addition to being an ImageCommand, the given command must implement the IThreadableCommand and
            ICloneable interfaces. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor">
            <overloads> Constructs a new ThreadedCommand. </overloads>
            <remarks> ThreadedCommand is not an image processing command itself.  It applies multithreading to other commands
            that support multithreading. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <param name="command"> The image command to perform in a multithreaded manner. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor(Atalasoft.Imaging.ImageProcessing.ImageCommand,System.Int32)">
            <param name="command"> The image command to perform in a multithreaded manner. </param>
            <param name="threadCount"> The total number of threads to use for this command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:Atalasoft.Imaging.ImageProcessException">ThreadedCommands can't be embedded in themselves.</exception>
            <exception cref="T:System.ArgumentNullException">source;cannot process a null image.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">adjustedBands;an image cannot be processed with zero bands</exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            The method is called by the default implementation of Apply.  It determines if it is necessary to create a
            copy of the source image in a different pixel format and if so, determines the best new pixel format and allocates
            that image.
            </summary>
            <param name="image">The original source image passed to Apply.</param>
            <returns>
            A new image in a pixel format supported by the command or <EM>null</EM> to indicate that the original
            image is acceptable.
            </returns>
            <remarks>
              <para>The default implementation of ConstructChangedSourceImage requests that the command report its
            preferred pixel format (typically, this is the source image's pixel format, but some commands support many pixel
            formats, but work best in gray, for example), and if that is supported, returns a new image in the preferred format
            if it is different from the source image.</para>
              <para>If the pixel format is not supported and ApplyToAnyPixelFormat is set to true, the command is queried for its
            best alternate pixel format and a new image is returned in that pixel format.  If ApplyToAnyPixelFormat is set to
            false, ConstructChangedSourceImage will throw an IncompatiblePixelFormatException.</para>
              <para>If an error occurs, ConstructChangedImage should throw an exception.  Any new image constructed by
            ConstructChangedImage must be a pixel format supported by this command.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
            <summary>
            Returns a value indicating if the specified pixel format is supported.
            </summary>
            <param name="format">The pixel format to query.</param>
            <returns></returns>
            <seealso> SupportedPixelFormats Property </seealso>
            <remarks>
            All derived commands must override this property.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.SelectBestAlternatePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Choose the best pixel format to use for this command when the supplied source image's pixel format is
            unacceptable.
            </summary>
            <param name="sourceImage">The source image to be processed.</param>
            <param name="sourceFormat">The source image's pixel format.</param>
            <param name="formats">The pixel formats supported by this command.</param>
            <returns>
            A new pixel format for the command.  This new pixel format must be one of the pixel formats in the
            supported pixel formats.
            </returns>
            <remarks>
            The default implementation returns the 0th element of the formats array.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.GetChangedPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
            <summary>
            This method is called to change the pixel format of the source image.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="newFormat">The new pixel format.</param>
            <returns>
            A new image in the new pixel format, with image data translated from the source image.
            </returns>
            <remarks>
            The default implementation uses the built-in AtalaImage.GetChangedPixelFormat method, which in turn uses
            the PixelFormatChanger installed in AtalaImage.  By overriding this method, you can bypass the built-in pixel format
            translation and supply your own and isolate it to an individual command.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ConstructImageResults">
            <summary>
            Constructs the results object for this command.
            </summary>
            <returns>
            A new object of type ImageResults representing the results for this command.
            </returns>
            <remarks>
              <para>The default implementation returns an object of type ImageResults.  If your command requires an
            object with more information, subclass ImageResults and add in the information you need.  Your command will override
            ConstructImageResults and return your new object.</para>
              <para>The object allocated here is passed to PerformActualCommand as a reference parameter, meaning the entire
            object can be changed at that point too.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.MinimumStripSizeInBytes">
            <summary>
            The minimum strip size in bytes
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.SupportedPixelFormats">
            <summary> Returns the value of SupportedPixelFormats of the underlying command. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.InPlaceProcessing">
            <summary> Returns the InPlaceProcessing value of the underlying command. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.CanApplyToAnyPixelFormat">
            <summary> Returns the value of CanApplyToAnyPixelFormat in the underlying command. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ApplyToAnyPixelFormat">
            <summary> Sets or gets the value of AppyToAnyPixelFormat in the underlying command. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.Command">
            <summary> Sets or gets the underlying command that will be multithreaded. </summary>
            <remarks> In addition to being an ImageCommand, the given command must implement the IThreadableCommand and
            ICloneable interfaces. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ThreadCount">
            <summary> The total number of threads that will be used for this command. </summary>
            <remarks> By default, this is initialized to ThreadedCommand.OptimalThreadCount. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.OptimalThreadCount">
            <summary> Returns the best number of threads to use for the current system. </summary>
            <remarks> This is typically the number of CPUs available times two.  The number of CPUs is not always the number of
            physical CPUs chips in the computer.  For example, a computer with two dual core CPUs may report 8 for its
            OptimalThreadCount.  Other variables like hyperthreading will affect the final count. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.StripSize">
            <summary> Gets or sets the size of strips that will be processed by individual threads. </summary>
            <remarks> If this value is -1, ThreadedCommand will calculate the optimal size for you. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Thumbnail">
            <summary>
            Summary description for Thumbnail.
            </summary>
            <summary> Creates a high speed and high quality thumbnail image from a source file. </summary>
            <remarks> <para>This class uses optimized image decoding and scaling to create a high quality thumbnail from a
            source image.  It will used scaled loading when the source file is a JPEG, utilize scale to gray resampling when the
            source image is 1-bit with a document imaging license, and use area average otherwise.  </para>
            <para>This class can be conveniently used to generate thumbnail preview images.</para>
            <para>note: when using DotImage Photo or Photo Pro, making a thumbnail out of a 1-bit image will take much more
            memory and be less efficient as it will convert to grayscale first, then resample the image.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Thumbnail._size">
            <summary> Gets or sets the maximum X and Y dimensions of the thumbnail to be created. </summary>
            <remarks> The actual thumbnail size will be calculated based on the Size value, maintaining the aspect ratio from
            the original image.  For example, if the source image is 640x480 and the size is 100x100 the resulting thumbnail
            size will be 100x75. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Thumbnail._throwOnZeroDimensions">
            <summary> Gets or sets a value that will thrown an exception if the resized image ends up with zero dimensions.
            </summary>
            <remarks> Default value is false.  In this case the smallest dimension is always 1 pixel. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.#ctor">
            <overloads> Constructs a new Thumbnail object. </overloads>
            <summary> Constructs a new Thumbnail object with default properties. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.#ctor(System.Drawing.Size)">
            <summary> Constructs a new Thumbnail object with the provided size. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create(Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new thumbnail image from the supplied image. </summary>
            <param name="image"> The name of the file from where the image will be taken. </param>
            <overloads> Creates a new thumbnail image from the supplied image. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create(System.String,System.Int32)">
            <summary> Creates a new thumbnail image from the supplied file and frame index. </summary>
            <param name="fileName"> The name of the file from where the image will be taken. </param>
            <param name="frameIndex"> The index of the frame to be loaded. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create(System.IO.Stream,System.Int32)">
            <summary> Creates a new thumbnail image from the supplied stream and frame index. </summary>
            <param name="stream"> A stream from which an image can be loaded. </param>
            <param name="frameIndex"> The index of the frame to be loaded. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Thumbnail.Size">
            <summary> Gets or sets the maximum X and Y dimensions of the thumbnail to be created. </summary>
            <remarks> The actual thumbnail size will be calculated based on the Size value, maintaining the aspect ratio from
            the original image.  For example, if the source image is 640x480 and the size is 100x100 the resulting thumbnail
            size will be 100x75. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Thumbnail.ThrowOnZeroDimensions">
            <summary> Gets or sets a value that will thrown an exception if the resized image ends up with zero dimensions.
            </summary>
            <remarks> Default value is false.  In this case the smallest dimension is always 1 pixel. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Thumbnail.AllowEnlarge">
            <summary>
            Gets or sets a value indicating whether [allow enlarge].
            </summary>
            <value>
              <c>true</c> if [allow enlarge]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform">
            <summary> <para>This transform applies a bump map texture to an image.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <example>
<code lang="CS" title="BumpMapTransform Example (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Load the bumpmap image. (must be an 8-bit grayscale image)
AtalaImage bump = new AtalaImage(@"D:\Test Images\bumpmap.jpg");

// Apply the command.
BumpMapTransform cmd = new BumpMapTransform(0.8, bump);
AtalaImage result = cmd.Apply(image).Image;

// Dispose of the images.
bump.Dispose();
image.Dispose();
]]></code>

<code lang="VB" title="BumpMapTransform Example (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
' Load the bumpmap image. (must be an 8-bit grayscale image)
Dim bump As AtalaImage =  New AtalaImage("D:\Test Images\bumpmap.jpg") 
 
' Apply the command.
Dim cmd As BumpMapTransform =  New BumpMapTransform(0.8,bump) 
Dim result As AtalaImage =  cmd.Apply(image).Image 
 
' Dispose of the images.
bump.Dispose()
image.Dispose()
]]></code>
</example>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.Transform">
            <summary> <para>A base class that is used for transforms.</para> </summary>
            <remarks> A transform uses an algorithm to translate pixels from one position to another.  Transforms can be chained
            together such that they can all be applied at once to the same image in one pass. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.Transform"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.Transform"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.SelectCompatibleBackgroundColor(Atalasoft.Imaging.AtalaImage,System.Drawing.Color)">
            <summary> Returns a color value compatible with the image. </summary>
            <returns> A color compatible with the image provided. </returns>
            <remarks> This method will return a grayscale color if the image is grayscale or a CMYK color if the image format is CMYK. </remarks>
            <param name="image"> The image to get a color for. </param>
            <param name="sourceColor"> The requested color. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.smoothness">
            <summary> Gets or sets the smoothness value which controls the smoothness of the effect (try between .5 and 1.5 to
            start). </summary>
            <value> The smoothness of the bump map transform. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.bumpMapImage">
            <summary> Gets or sets the bump map image used in this transform. </summary>
            <value> 8-bit image to use as the bump map. </value>
            <exception> Thrown if image is not a valid 8-bit image. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>BumpMapTransform</STRONG> from serialization information. </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to which this transform will be applied. </param>
            <param name="height"> The height of the image to which this transform will be applied. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor">
            <summary> Creates a new instance of <STRONG>BumpMapTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor(System.Double,Atalasoft.Imaging.AtalaImage)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform"/> specifying smoothness, and bumpMapImage.
            </summary>
            <exception> Thrown if the smoothness argument is less than 0, or if the bumpMapImage is not an 8-bit image.
            </exception>
            <param name="smoothness"> Controls smoothness of the effect (try between .5 and 1.5 to start). </param>
            <param name="bumpMapImage"> An 8-bit grayscale image to use as the bump map. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor(System.Double,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of the <STRONG>BumpMapTransform</STRONG> effect. </summary>
            <exception> Thrown if the smoothness is less than 0, or if bumpMapImage is not an 8-bit image. </exception>
            <param name="smoothness"> Controls smoothness of the effect (try between .5 and 1.5 to start). </param>
            <param name="bumpMapImage"> An 8-bit grayscale image to use as the bump map. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:System.ArgumentNullException">BumpMapImage;BumpMapImage cannot be null</exception>
            <exception cref="T:System.ApplicationException">Internal conversion error.</exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.Smoothness">
            <summary> Gets or sets the smoothness value which controls the smoothness of the effect (try between .5 and 1.5 to
            start). </summary>
            <value> The smoothness of the bump map transform. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.BumpMapImage">
            <summary> Gets or sets the bump map image used in this transform. </summary>
            <value> 8-bit image to use as the bump map. </value>
            <exception> Thrown if image is not a valid 8-bit image. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform">
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <summary> Rounds the image into an ellipse or sphere. </summary>
            <seealso> OffsetTransform Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.radius">
            <summary> Gets or set the width and height of the ellipse. </summary>
            <value> The width and height of the ellipse. </value>
            <exception> Thrown if the size is smaller than 1x1. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.mode">
            <summary> Gets or sets the type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode"/> used in this transform. </summary>
            <value> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode"/> used in this transform. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.backColor">
            <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
            <value> The background color to use for newly uncovered areas of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> for this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform.  </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to be used with this transform. </param>
            <param name="height"> The height of the image to be used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor">
            <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
            <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG> specifying radius, offset and mode.</summary>
            <exception> Thrown if the radius size is smaller than 1x1. </exception>
            <param name="radius"> The width and height of the ellipse. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="mode"> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode"/> used in this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG> specifying radius, offset, mode and
            transformMode. </summary>
            <exception> Thrown if the radius size is smaller than 1x1. </exception>
            <param name="radius"> The width and height of the ellipse. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="mode"> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode"/> used in this transform. </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG> specifying radius, offset, mode,
            transformMode and backColor. </summary>
            <exception> Thrown if the radius size is smaller than 1x1. </exception>
            <param name="radius"> The width and height of the ellipse. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="mode"> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode"/> used in this transform. </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform.  </param>
            <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.BackColor">
            <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
            <value> The background color to use for newly uncovered areas of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Radius">
            <summary> Gets or set the width and height of the ellipse. </summary>
            <value> The width and height of the ellipse. </value>
            <exception> Thrown if the size is smaller than 1x1. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Offset">
            <value> The offset position from the center of the image. </value>
            <summary> Gets or set the offset position from the center of the image. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Mode">
            <summary> Gets or sets the type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode"/> used in this transform. </summary>
            <value> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode"/> used in this transform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> for this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform.  </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode">
            <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform"/> and <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Horizontal">
            <summary> Only the horizontal sides will be compressed. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Vertical">
            <summary> Only the vertical sides will be compressed. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Both">
            <summary> Both horizontal and vertical sides will be compressed. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode">
            <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.DontWrapEdges">
            <summary> Don't wrap the image at the edges. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapBothEdges">
            <summary> Wrap both X and Y edges. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyX">
            <summary> Wrap only the X edges. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyY">
            <summary> Wrap only the Y edges. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode">
            <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightSine">
            <summary>
            The wave moves from left to right as a sine wave.
            </summary>
            <summary> The wave moves from left to right as a sine wave. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomSine">
            <summary> The wave moves from top to bottom as a sine wave. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightCosine">
            <summary> The wave moves from left to right as a cosine wave. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomCosine">
            <summary> The wave moves from top to bottom as a cosine wave. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode">
            <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Full">
            <summary> Waves remain at full intensity. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Linear">
            <summary> Waves diminish linearly with their distance from center. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Square">
            <summary> Waves diminish with the square of their distance. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Sine">
            <summary> Waves diminish with the sine of their distance (inverse!). </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Cosine">
            <summary> Waves diminish with the cosine of their distance. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection">
            <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Horizontal">
            <summary> Makes the image skew on the top or bottom. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Vertical">
            <summary> Makes the image skew on the left or right. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand">
            <summary> Flips an image horizontally or vertically. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.direction">
            <summary> Gets or sets the type of flip to perform. </summary>
            <value> The type of flip to perform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>FlipCommand</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor">
            <summary> Creates a new instance of <STRONG>FlipCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor(Atalasoft.Imaging.FlipDirection)">
            <summary> Creates a new instance of FlipCommand specifying the type of flip to perform. </summary>
            <param name="direction"> Specifies which direction, horizontal or vertical, to flip the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.InPlaceProcessing">
            <summary>
            Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image.
            </summary>
            <value>
            A value indicating if the source image data is processed in-pace as opposed to returning a new image.
            </value>
            <remarks>
            By default, this value is false.  When false, this ImageCommand should never overwrite the original image.
            If an unmodified copy of the original image must be maintained and this property returns true, clone the image
            before applying this ImageCommand.  Implementing classes should override this and set it to true when processing the
            source image directly.  When this value is true, the <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image"/> object returned by <see cref="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)"/> may occupy the same memory space as the source image.  The state of <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage"/> conveys whether the source image was actually modified in place.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.Direction">
            <summary> Gets or sets the type of flip to perform. </summary>
            <value> The type of flip to perform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel64bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform">
            <summary> <para>Used to create a zoomed camera lens effect.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <example>
<code lang="CS" title="Lens Example (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

LensTransform cmd = new LensTransform(image.Width / 2, Point.Empty);
AtalaImage result = cmd.Apply(image).Image;

image.Dispose();
]]></code>

<code lang="VB" title="Lens Example (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
Dim cmd As LensTransform =  New LensTransform(image.Width / 2,PoInteger.Empty) 
Dim result As AtalaImage =  cmd.Apply(image).Image 
 
image.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.radius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <remarks> Pixels past this distance will not be affected. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.transformMode">
            <summary> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used with this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LensTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to be process. </param>
            <param name="height"> The height of the image to be processed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor">
            <summary> Creates a new instance of <STRONG>LensTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor(System.Double,System.Drawing.Point)">
            <summary> <para>Creates a new instance of <STRONG>LensTransform</STRONG> specifying radius and offset.</para>
            </summary>
            <exception> Thrown if radius is less than 0. </exception>
            <param name="radius"> Maximum distance from the center for this effect. </param>
            <param name="offset"> The offset position from the center of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor(System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <STRONG>LensTransform</STRONG> specifying radius, offset and transformMode.
            </summary>
            <exception> Thrown if radius is less than 0. </exception>
            <param name="radius"> Maximum distance from the center for this effect. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Radius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <remarks> Pixels past this distance will not be affected. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Offset">
            <summary> Gets or set the offset position from the center of the image. </summary>
            <value> The offset position from the center of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.TransformMode">
            <summary> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used with this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform">
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <summary> <para>This transform produces a center-shift transform which runs from one side of the image to the other,
            in a straight line.</para> </summary>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.endPoint1">
            <summary> Gets or sets the left or top edge of the transform. </summary>
            <value> Left or top edge of the transform. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.endPoint2">
            <summary> Gets or sets the right or bottom edge of the transform. </summary>
            <value> Right or bottom edge of the transform. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.horizontalTransform">
            <summary> Gets or sets the value specifying if the transform will be horizontal or vertical. </summary>
            <value> Specifies if the transform will be horizontal or vertical. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>LineSliceTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor">
            <summary> Creates a new instance of <STRONG>LineSliceTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform"/> object. </summary>
            <exception> Thrown if endPoint1 or endPoint2 is less than 0. </exception>
            <param name="endPoint1"> Left or top edge of the transform. </param>
            <param name="endPoint2"> Right or bottom edge of the transform. </param>
            <param name="horizontalTransform"> Specifies if the transform will be horizontal or vertical. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor(System.Int32,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform"/> object. </summary>
            <exception> Thrown if endPoint1 or endPoint2 is less than 0. </exception>
            <param name="endPoint1"> Left or top edge of the transform. </param>
            <param name="endPoint2"> Right or bottom edge of the transform. </param>
            <param name="horizontalTransform"> Specifies if the transform will be horizontal or vertical. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint1">
            <summary> Gets or sets the left or top edge of the transform. </summary>
            <value> Left or top edge of the transform. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint2">
            <summary> Gets or sets the right or bottom edge of the transform. </summary>
            <value> Right or bottom edge of the transform. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.HorizontalTransform">
            <summary> Gets or sets the value specifying if the transform will be horizontal or vertical. </summary>
            <value> Specifies if the transform will be horizontal or vertical. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform">
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <summary> This transform creates a marbled, wavy, glassy, rippled effect. </summary>
            <seealso> OffsetTransform Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.smoothness">
            <summary> Gets or sets the smoothness of the transform. </summary>
            <value> Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.scale">
            <summary> <para>Gets or sets the size of the perlin noise.</para> </summary>
            <value> <para>The size of the perlin noise.</para> </value>
            <exception> Thrown if either the height or width is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.backColor">
            <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
            <value> The background color to use for newly uncovered areas of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor">
            <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Double,System.Drawing.Size)">
            <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG> specifying smoothness and scale. </summary>
            <exception> Thrown if smoothness or scale values are less than 0. </exception>
            <param name="smoothness"> Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. </param>
            <param name="scale"> <para>The size of the perlin noise.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG> specifying smoothness, scale and transformMode.
            </summary>
            <exception> Thrown if smoothness or scale values are less than 0. </exception>
            <param name="smoothness"> Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. </param>
            <param name="scale"> <para>The size of the perlin noise.</para> </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG> specifying smoothness, scale, transformMode and
            backColor. </summary>
            <exception> Thrown if smoothness or scale values are less than 0. </exception>
            <param name="smoothness"> Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. </param>
            <param name="scale"> <para>The size of the perlin noise.</para> </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </param>
            <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.BackColor">
            <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
            <value> The background color to use for newly uncovered areas of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Smoothness">
            <summary> Gets or sets the smoothness of the transform. </summary>
            <value> Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Scale">
            <summary> <para>Gets or sets the size of the perlin noise.</para> </summary>
            <value> <para>The size of the perlin noise.</para> </value>
            <exception> Thrown if either the height or width is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform">
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <summary> Moves the image on the canvas by a specified number of pixels. </summary>
            <example>
<code lang="CS" title="Offset Example (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Use the OffsetTransform to reposition the image.
OffsetTransform cmd = new OffsetTransform(new Point(image.Width / 2, image.Height / 2), OffsetTransformMode.DontWrapEdges);
AtalaImage result = cmd.Apply(image).Image;

image.Dispose();
]]></code>

<code lang="VB" title="Offset Example (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage = New AtalaImage("D:\Test Images\1.jpg") 
 
' Use the OffsetTransform to reposition the image.
Dim cmd As OffsetTransform = New OffsetTransform(New Point(image.Width / 2,image.Height / 2),OffsetTransformMode.DontWrapEdges) 
Dim result As AtalaImage = cmd.Apply(image).Image
 
image.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.offsetMode">
            <summary> Gets or sets the style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode"/> to perform. </summary>
            <value> Style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode"/> to perform. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.backColor">
            <summary> Gets or sets the background color to use on newly uncovered areas of the image. </summary>
            <value> The background color to use on newly uncovered areas of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </para> </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <remarks> Creates a new OffsetTransform object. </remarks>
            <summary> Creates a new instance of OffsetTransform. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <returns> <STRONG>Null</STRONG> </returns>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor">
            <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode)">
            <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG> specifying offset and offsetMode. </summary>
            <param name="offset"> The new left, top position for the image. </param>
            <param name="offsetMode"> Style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode"/> to perform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG> specifying offset, offsetMode and
            transformMode. </summary>
            <param name="offset"> The new left, top position for the image. </param>
            <param name="offsetMode"> Style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode"/> to perform. </param>
            <param name="transformMode"> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG> specifying offset, offsetMode, transformMode
            and backColor. </summary>
            <param name="offset"> The new left, top position for the image. </param>
            <param name="offsetMode"> Style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode"/> to perform. </param>
            <param name="transformMode"> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </para> </param>
            <param name="backColor"> The background color to use on newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.BackColor">
            <summary> Gets or sets the background color to use on newly uncovered areas of the image. </summary>
            <value> The background color to use on newly uncovered areas of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.Offset">
            <summary> Gets or set the new left, top position for the image. </summary>
            <value> The new left, top position for the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.OffsetMode">
            <summary> Gets or sets the style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode"/> to perform. </summary>
            <value> Style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode"/> to perform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for this transform. </para> </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform">
            <summary> <para>This effect is similar to the marble transform, but the image tends to break up less.</para>
            </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.smoothness">
            <summary> Gets or sets the smoothness of this effect.  </summary>
            <remarks> Try values between 0.5 and 1.5 to start. </remarks>
            <exception> Thrown if value is less than 0. </exception>
            <value> The smoothness of this effect. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.scale">
            <summary> <para>Gets or sets the size of the perlin noise.</para> </summary>
            <exception> Thrown if either the height or width is less than 0. </exception>
            <value> <para>The size of the perlin noise.</para> </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform.</para> </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>PerlinTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor">
            <summary> Creates a new instance of <STRONG>PerlinTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor(System.Double,System.Drawing.Size)">
            <summary> Creates a new instance of <STRONG>PerlinTransform</STRONG> specifying the smoothness and scale. </summary>
            <exception> Thrown if smoothness or scale values are less than 0. </exception>
            <param name="smoothness"> The smoothness of this effect. </param>
            <param name="scale"> The size of the perlin noise. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <STRONG>PerlinTransform</STRONG> specifying smoothness, scale and transform
            mode. </summary>
            <exception> Thrown if smoothness or scale values are less than 0. </exception>
            <param name="smoothness"> The smoothness of this effect. </param>
            <param name="scale"> The size of the perlin noise. </param>
            <param name="transformMode"> The InterpolationMode of this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Smoothness">
            <summary> Gets or sets the smoothness of this effect.  </summary>
            <remarks> Try values between 0.5 and 1.5 to start. </remarks>
            <exception> Thrown if value is less than 0. </exception>
            <value> The smoothness of this effect. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Scale">
            <summary> <para>Gets or sets the size of the perlin noise.</para> </summary>
            <exception> Thrown if either the height or width is less than 0. </exception>
            <value> <para>The size of the perlin noise.</para> </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform.</para> </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform">
            <summary> <para>This transform attracts pixels towards the center of the image.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso> OffsetTransform Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.maxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.amount">
            <summary> Gets or sets the number of pixels to pinch. </summary>
            <value> The number of pixels to pinch. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.backColor">
            <summary> Gets or sets the background color used for newly uncovered areas of the image. </summary>
            <value> The background color used for newly uncovered areas of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>PinchTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <summary> Creates a new instance of the PinchTransform object. </summary>
            <summary> Creates a new instance of PinchTransform. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor">
            <summary> Creates a new instance of <STRONG>PinchTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Double,System.Double,System.Drawing.Point)">
            <summary> Creates a new instance of <STRONG>PinchTransform</STRONG> specifying maxRadius, amount and offset.
            </summary>
            <exception> Thrown if maxRadius is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="amount"> The number of pixels to pinch. </param>
            <param name="offset"> The offset position from the center of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <STRONG>PinchTransform</STRONG> specifying maxRadius, amount, offset and
            transformMode. </summary>
            <exception> Thrown if maxRadius is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="amount"> The number of pixels to pinch. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>PinchTransform</STRONG> specifying maxRadius, amount, offset,
            transformMode and backColor. </summary>
            <exception> Thrown if maxRadius is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="amount"> The number of pixels to pinch. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </param>
            <param name="backColor"> The background color used for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.BackColor">
            <summary> Gets or sets the background color used for newly uncovered areas of the image. </summary>
            <value> The background color used for newly uncovered areas of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.MaxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Amount">
            <summary> Gets or sets the number of pixels to pinch. </summary>
            <value> The number of pixels to pinch. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Offset">
            <summary> Gets or set the offset position from the center of the image. </summary>
            <value> The offset position from the center of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform">
            <summary> <para>This transform resizes image rows (or columns) to fit inside the specified polygon. This polygon
            must be convex. If it is concave, the largest convex polygon that can be formed from the points will be used.</para>
            </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.mode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode"/> to use on this transform. </summary>
            <value> The compress method to use on this transform. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.backColor">
            <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
            <value> The background color to use for newly uncovered areas of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform.</para> </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>PolygonTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor">
            <summary> Creates a new instance of <STRONG>PolygonTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform"/> specifying points, and mode. </summary>
            <exception> Thrown if points is null. </exception>
            <param name="points"> Array of points for the polygon. </param>
            <param name="mode"> The compress method to use on this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform"/> specifying points, mode and transformMode.
            </summary>
            <exception> Thrown if points is null. </exception>
            <param name="points"> Array of points for the polygon. </param>
            <param name="mode"> The compress method to use on this transform. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform"/> specifying points, mode, transformMode and
            backColor. </summary>
            <exception> Thrown if points is null. </exception>
            <param name="points"> Array of points for the polygon. </param>
            <param name="mode"> The compress method to use on this transform. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
            <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.GetPoints">
            <summary> Gets the points used in the polygon. </summary>
            <returns> The points array used for the polygon </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.SetPoints(System.Drawing.Point[])">
            <summary> Sets the points used in the polygon. </summary>
            <exception> Thrown if points is null. </exception>
            <param name="points"> An array of Point to use for the polygon. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.BackColor">
            <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
            <value> The background color to use for newly uncovered areas of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.Mode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode"/> to use on this transform. </summary>
            <value> The compress method to use on this transform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform.</para> </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand">
            <summary> Perform a point to point warp of an image, creating a smear effect. </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso> OffsetTransform Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.fromPixel">
            <summary> Gets or sets the position on the image to push from. </summary>
            <value> The position on the image to push from. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.toPixel">
            <summary> Gets or sets the position on the image to move the pixels to. </summary>
            <value> The position on the image to move the pixels to. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>PushCommand</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor">
            <summary> Creates a new instance of <STRONG>PushCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary> Creates a new instance of PushCommand specifying the from and to positions. </summary>
            <param name="fromPixel"> The position on the image to push from. </param>
            <param name="toPixel"> The position on the image to move the pixels to. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.FromPixel">
            <summary> Gets or sets the position on the image to push from. </summary>
            <value> The position on the image to push from. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.ToPixel">
            <summary> Gets or sets the position on the image to move the pixels to. </summary>
            <value> The position on the image to move the pixels to. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand">
            <summary> <para>Similar to the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform"/>, this transform additionally lets you specify a source
            polygon to allow further control over the warping of the image.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a continuous tone format, which can be 8-bit
            grayscale, RGB, or RGBA. </remarks>
            <example>
<code lang="CS" title="QuadExample (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Prepare the warp positions.
Point bottomLeft = new Point(100, image.Height - 80);
Point topLeft = new Point(130, 45);
Point topRight = new Point(image.Width - 60, 140);
Point bottomRight = new Point(image.Width - 20, image.Height);

// Warp the image.
QuadrilateralWarpCommand cmd = new QuadrilateralWarpCommand(bottomLeft, 
    topLeft, topRight, bottomRight, InterpolationMode.BiLinear, Color.White);

AtalaImage result = cmd.Apply(image).Image;
image.Dispose();
]]></code>

<code lang="VB" title="QuadExample (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
' Prepare the warp positions.
Dim bottomLeft As Point =  New Point(100,image.Height - 80) 
Dim topLeft As Point =  New Point(130,45) 
Dim topRight As Point =  New Point(image.Width - 60,140) 
Dim bottomRight As Point =  New Point(image.Width - 20,image.Height) 
 
' Warp the image.
QuadrilateralWarpCommand cmd = New QuadrilateralWarpCommand(bottomLeft, 
    topLeft, topRight, bottomRight, InterpolationMode.BiLinear, Color.White)
 
Dim result As AtalaImage =  cmd.Apply(image).Image 
image.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.sourceBottomLeft">
            <summary> Gets or sets the bottom left point of the source image in pixels. </summary>
            <value> The bottom left point of the source image in pixels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.sourceTopLeft">
            <summary> Gets or sets the top left point of the source image in pixels. </summary>
            <value> The top left point of the source image in pixels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.sourceTopRight">
            <summary> Gets or sets the top right point of the source image in pixels. </summary>
            <value> The top right point of the source image in pixels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.sourceBottomRight">
            <summary> Gets or sets the bottom right point of the source image in pixels. </summary>
            <value> The bottom right point of the source image in pixels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.destBottomLeft">
            <summary> Gets or sets the bottom left point of the destination image in pixels. </summary>
            <value> The bottom left point of the destination image in pixels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.destTopLeft">
            <summary> Gets or sets the top left point of the destination image in pixels. </summary>
            <value> The top left point of the destination image in pixels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.destTopRight">
            <summary> Gets or sets the top right point of the destination image in pixels. </summary>
            <value> The top right point of the destination image in pixels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.destBottomRight">
            <summary> Gets or sets the bottom right point of the destination image in pixels. </summary>
            <value> The bottom right point of the destination image in pixels. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.interpolation">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.backgroundColor">
            <summary> Gets or sets the value of backgroundColor </summary>
            <value> The color of the background when the destination image doesn't occupy a perfect rectangle </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>QuadrilateralWarpCommand</STRONG> from serialization information
            </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand"/> specifying sourceBottomLeft,
            sourceTopLeft, sourceTopRight, sourceBottomRight, destBottomLeft, destTopLeft, destTopRight, destBottomRight, and
            interpolation. </summary>
            <param name="sourceBottomLeft"> The bottom left point of the source image in pixels. </param>
            <param name="sourceTopLeft"> The top left point of the source image in pixels. </param>
            <param name="sourceTopRight"> The top right point of the source image in pixels. </param>
            <param name="sourceBottomRight"> The bottom right point of the source image in pixels. </param>
            <param name="destBottomLeft"> The bottom left point of the destination image in pixels. </param>
            <param name="destTopLeft"> The top left point of the destination image in pixels. </param>
            <param name="destTopRight"> The top right point of the destination image in pixels. </param>
            <param name="destBottomRight"> The bottom right point of the destination image in pixels. </param>
            <param name="interpolation"> The interpolation method to use. </param>
            <param name="backgroundColor"> The background color used for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand"/> specifying destination points that will
            yield a perspective transform. </summary>
            <param name="destBottomLeft"> The bottom left point of the destination image in pixels. </param>
            <param name="destTopLeft"> The top left point of the destination image in pixels. </param>
            <param name="destTopRight"> The top right point of the destination image in pixels. </param>
            <param name="destBottomRight"> The bottom right point of the destination image in pixels. </param>
            <param name="interpolation"> The interpolation method to use. </param>
            <param name="backgroundColor"> The background color used for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor">
            <summary> Creates a new instance of <STRONG>QuadrilateralWarpCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.ArgumentException">
            The image must be at least 2 x 2 pixels in size.;sourceImage
            or
            Bicubic interpolation is not compatible with colormapped images using QuadrilateralWarpCommand
            or
            The destination points cannot all be empty.
            or
            The source points are not convex.
            or
            The destination points are not convex.
            </exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <exception cref="T:Atalasoft.Imaging.InternalErrorException">Unable to allocate destination image.</exception>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:Atalasoft.Imaging.InternalErrorException">unexpected image size - doesn't match quadrtilateral dimensions</exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomLeft">
            <summary> Gets or sets the bottom left point of the source image in pixels. </summary>
            <value> The bottom left point of the source image in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopLeft">
            <summary> Gets or sets the top left point of the source image in pixels. </summary>
            <value> The top left point of the source image in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopRight">
            <summary> Gets or sets the top right point of the source image in pixels. </summary>
            <value> The top right point of the source image in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomRight">
            <summary> Gets or sets the bottom right point of the source image in pixels. </summary>
            <value> The bottom right point of the source image in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomLeft">
            <summary> Gets or sets the bottom left point of the destination image in pixels. </summary>
            <value> The bottom left point of the destination image in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopLeft">
            <summary> Gets or sets the top left point of the destination image in pixels. </summary>
            <value> The top left point of the destination image in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopRight">
            <summary> Gets or sets the top right point of the destination image in pixels. </summary>
            <value> The top right point of the destination image in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomRight">
            <summary> Gets or sets the bottom right point of the destination image in pixels. </summary>
            <value> The bottom right point of the destination image in pixels. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.Interpolation">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.BackgroundColor">
            <summary> Gets or sets the value of backgroundColor </summary>
            <value> The color of the background when the destination image doesn't occupy a perfect rectangle </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel8bppIndexed
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform">
            <summary> <para>This transform randomly modifies the pixels of an image.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.amount">
            <summary> Gets or sets the amount of offset to apply to the pixels. </summary>
            <value> Amount to offset the pixels. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>RandomTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor">
            <summary> Creates a new instance of <STRONG>RandomTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor(System.Double)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform"/> specifying amount. </summary>
            <exception> Thrown if amount is less than 0. </exception>
            <param name="amount"> Amount to offset the pixels. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform"/> specifying amount and transformMode. </summary>
            <exception> Thrown if amount is less than 0. </exception>
            <param name="amount"> Amount to offset the pixels. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.Amount">
            <summary> Gets or sets the amount of offset to apply to the pixels. </summary>
            <value> Amount to offset the pixels. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand">
            <remarks> <para>This command can be used for adding a border to an image.</para>
            <para>This method requires a continuous tone image. If the source image is not continuous, it will raise the
            <STRONG>ChangePixelFormat</STRONG> event and convert the image to a continuous tone format, which can be 8-bit
            grayscale, RGB, or RGBA. </para> </remarks>
            <summary> Overlays the current image onto a specified position on a new image of the specified background color.
            </summary>
            <example>
<code lang="CS" title="ResizeCanvas Example (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Add a 40 pixel border around the image.
Size newSize = new Size(image.Width + 80, image.Height + 80);

// We position the image at 39, 39 because the top, left position is 0, 0.
ResizeCanvasCommand cmd = new ResizeCanvasCommand(newSize, new Point(39, 39), Color.White);
AtalaImage result = cmd.Apply(image).Image;

image.Dispose();
]]></code>

<code lang="VB" title="ResizeCanvas Example (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
' Add a 40 pixel border around the image.
Dim NewSize As Size =  New Size(image.Width + 80,image.Height + 80) 
 
' We position the image at 39, 39 because the top, left position is 0, 0.
Dim cmd As ResizeCanvasCommand =  New ResizeCanvasCommand(NewSize,New Point(39,39),Color.White) 
Dim result As AtalaImage =  cmd.Apply(image).Image
 
image.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.canvasSize">
            <summary> Gets or sets the size of the new canvas. </summary>
            <value> The size of the new canvas. </value>
            <exception> Thrown if either the height or width is less than or equal to 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.position">
            <summary> Gets or sets the position of the image on the new canvas. </summary>
            <value> The position of the image on the new canvas. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.canvasColor">
            <summary> Gets or sets the background color of the canvas. </summary>
            <value> The background color of the canvas. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.canvasPaletteIndex">
            <summary> Gets or sets the palette index of the canvas. </summary>
            <value> The palette index of the canvas. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ResizeCanvasCommand</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor">
            <summary> Creates a new instance of <STRONG>ResizeCanvasCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor(System.Drawing.Size,System.Drawing.Point,System.Drawing.Color)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand"/> specifying canvasSize, position, canvasColor,
            and canvasPaletteIndex. </summary>
            <exception> Thrown if either the canvasSize height or width is less than or equal to 0. </exception>
            <param name="canvasSize"> The size of the new canvas. </param>
            <param name="position"> The position of the image on the new canvas. </param>
            <param name="canvasColor"> The background color of the canvas </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor(System.Drawing.Size,System.Drawing.Point,System.Int32)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand"/> specifying canvasSize, position, canvasColor,
            and canvasPaletteIndex. </summary>
            <exception> Thrown if either the canvasSize height or width is less than or equal to 0. </exception>
            <param name="canvasSize"> The size of the new canvas. </param>
            <param name="position"> The position of the image on the new canvas. </param>
            <param name="canvasPaletteIndex"> The palette index of the canvas </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <exception cref="T:Atalasoft.Imaging.InternalErrorException">Failure to allocate dest image.</exception>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasSize">
            <summary> Gets or sets the size of the new canvas. </summary>
            <value> The size of the new canvas. </value>
            <exception> Thrown if either the height or width is less than or equal to 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.Position">
            <summary> Gets or sets the position of the image on the new canvas. </summary>
            <value> The position of the image on the new canvas. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasColor">
            <summary> Gets or sets the background color of the canvas. </summary>
            <value> The background color of the canvas. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasPaletteIndex">
            <summary> Gets or sets the palette index of the canvas. </summary>
            <value> The palette index of the canvas. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform">
            <summary> <para>Creates a water ripple effect on the image.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.maxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.intensity">
            <summary> Gets or sets the amount of intensity. </summary>
            <value> Amount of intensity. (1 = no effect) </value>
            <exception> Thrown if the value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.periods">
            <summary> Gets or sets the number of periods in the distance wave. </summary>
            <value> Number of periods in the distance wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.mode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode"/> to use. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode"/> to use. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>RippleTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor">
            <summary> Creates a new instance of <STRONG>RippleTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode)">
            <summary> Creates a new instance of <STRONG>RippleTransform</STRONG> specifying maxRadius, intensity, periods,
            offset and mode. </summary>
            <exception> Thrown if the maxRadius, intensity or periods are less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="intensity"> Amount of intensity. (1 = no effect) </param>
            <param name="periods"> Number of periods in the distance wave. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="mode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode"/> to use. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <STRONG>RippleTransform</STRONG> specifying maxRadius, intensity, periods,
            offset, mode and transformMode. </summary>
            <exception> Thrown if the maxRadius, intensity or periods are less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="intensity"> Amount of intensity. (1 = no effect) </param>
            <param name="periods"> Number of periods in the distance wave. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="mode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode"/> to use. </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.MaxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Intensity">
            <summary> Gets or sets the amount of intensity. </summary>
            <value> Amount of intensity. (1 = no effect) </value>
            <exception> Thrown if the value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Periods">
            <summary> Gets or sets the number of periods in the distance wave. </summary>
            <value> Number of periods in the distance wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Offset">
            <value> The offset position from the center of the image. </value>
            <summary> Gets or set the offset position from the center of the image. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Mode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode"/> to use. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode"/> to use. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand">
            <summary> <para>This will rotate an image clockwise by the specified number of degrees.</para> </summary>
            <remarks> <para>This command will work with all <see cref="T:Atalasoft.Imaging.PixelFormat"/> except <STRONG>Pixel4bppIndexed</STRONG>. 
            If a Pixel4bppIndexed image is passed to this command, it will attempt to convert the image to
            <STRONG>Pixel8bppIndexed</STRONG> image before rotating it.</para>
            <para>Rotating images in 90 degree increments uses a very fast rotate algorithm.</para> </remarks>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.angle">
            <summary> Gets or sets the angle of rotation in degrees. </summary>
            <value> The angle of rotation in degrees. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.interpolation">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this command. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for rotation. </value>
            <remarks> <para>1-bit images accept a value of None for fast rotation, and BiLinear or BiCubic for good but slower
            rotation.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.backgroundColor">
            <summary> Gets or sets the color of the background when angle is not a multiple of 90 degrees. </summary>
            <value> The color of the background when angle is not a multiple of 90 degrees. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>RotateCommand</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <remarks> Creates a new instance of the RotateCommand object. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor">
            <summary> Creates a new instance of <STRONG>RotateCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand"/> specifying the angle. </summary>
            <param name="angle"> The angle of rotation in degrees. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand"/> specifying angle, and interpolation. </summary>
            <param name="angle"> The angle of rotation in degrees. </param>
            <param name="interpolation"> The interpolation used for rotation. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,System.Drawing.Color)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand"/> specifying angle and backgroundColor. </summary>
            <param name="angle"> The angle of rotation in degrees. </param>
            <param name="backgroundColor"> The color of the background when angle is not a multiple of 90 degrees. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand"/> specifying angle, interpolation, and
            backgroundColor. </summary>
            <param name="angle"> The angle of rotation in degrees. </param>
            <param name="interpolation"> The interpolation used for rotation. </param>
            <param name="backgroundColor"> The color of the background when angle is not a multiple of 90 degrees. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <exception cref="T:System.NotImplementedException">Two byte per component images are limited to 90, 180 and 270 degree rotations.</exception>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
            <exception cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException">Can't rotate two byte per pixel images in arbitrary increments.</exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Angle">
            <summary> Gets or sets the angle of rotation in degrees. </summary>
            <value> The angle of rotation in degrees. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Interpolation">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this command. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> used for rotation. </value>
            <remarks> <para>1-bit images accept a value of None for fast rotation, and BiLinear or BiCubic for good but slower
            rotation.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.BackgroundColor">
            <summary> Gets or sets the color of the background when angle is not a multiple of 90 degrees. </summary>
            <value> The color of the background when angle is not a multiple of 90 degrees. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscale,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk,,<BR/>PixelFormat.Pixel48bppBgr,,<BR/>PixelFormat.Pixel64bppBgra
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand">
            <summary> <para>Using this command you can shift the top, bottom, left or right side of an image
            independently.</para> </summary>
            <remarks> This command does not work with <STRONG>Pixel1bppIndexed</STRONG> or <STRONG>Pixel4bppIndexed</STRONG>
            <see cref="T:Atalasoft.Imaging.PixelFormat"/>.  If an image with one of these formats is passed into this command, it will attempt to
            convert it to <STRONG>Pixel8bppGrayscale</STRONG> or <STRONG>Pixel8bppIndexed</STRONG> respectively. </remarks>
            <seealso> OffsetTransform Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.direction">
            <summary> Gets or sets a value to determine whether the skew is horizontal or vertical.   </summary>
            <value> Determines whether the skew is horizontal or vertical. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.offset">
            <summary> Gets or sets the number of pixels to skew. </summary>
            <value> The number of pixels to skew. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.backColor">
            <summary> Gets or sets a color to used in newly exposed areas. </summary>
            <value> A color to used in newly exposed areas. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.fastSkew">
            <summary> Gets or sets a value indicating if speed is more important then quality. </summary>
            <value> Provides a faster but less accurate skew. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SkewCommand</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color,System.Boolean)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand"/> specifying direction, offset, backColor, and fastSkew.
            </summary>
            <param name="direction"> Determines whether the skew is horizontal or vertical. </param>
            <param name="offset"> The number of pixels to skew. </param>
            <param name="backColor"> A color to used in newly exposed areas. </param>
            <param name="fastSkew"> Provides a faster but less accurate skew. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand"/> specifying direction, offset and backColor. </summary>
            <param name="direction"> Determines whether the skew is horizontal or vertical. </param>
            <param name="offset"> The number of pixels to skew. </param>
            <param name="backColor"> A color to used in newly exposed areas. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand"/> specifying direction and offset. </summary>
            <param name="direction"> Determines whether the skew is horizontal or vertical. </param>
            <param name="offset"> The number of pixels to skew. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor">
            <summary> Creates a new instance of <STRONG>SkewCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command.
            </summary>
            <param name="image">The source image being processed.  This may be different from the source image passed into
            Apply.</param>
            <returns>
            A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image.
            </returns>
            <remarks>
              <para>The default implementation returns a new image in the same pixel format as the source image.</para>
              <para>The returned image must be the same size as the image passed in.</para>
              <para>If it is not possible to allocate the image (for example, the pixel format is not know at this point), it is
            acceptable to return null.  Returning null implies that the command will return a non-null image in
            PerformActualCommand.</para>
              <para>If an error occurs, this method should throw an exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Direction">
            <summary> Gets or sets a value to determine whether the skew is horizontal or vertical.   </summary>
            <value> Determines whether the skew is horizontal or vertical. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Offset">
            <summary> Gets or sets the number of pixels to skew. </summary>
            <value> The number of pixels to skew. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.BackColor">
            <summary> Gets or sets a color to used in newly exposed areas. </summary>
            <value> A color to used in newly exposed areas. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.FastSkew">
            <summary> Gets or sets a value indicating if speed is more important then quality. </summary>
            <value> Provides a faster but less accurate skew. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform">
            <summary> <para>This transform will rotate the image about the center with a constant angular distance.</para>
            </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso> OffsetTransform Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.maxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <remarks> Pixels outside of this radius will not be affected. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.maxAngleOffset">
            <summary> Gets or sets the angular distance to spin pixels. (degrees) </summary>
            <value> Angular distance to spin pixels. (degrees) </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.backColor">
            <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
            <value> The background color to use for newly uncovered areas of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SpinTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor">
            <summary> Creates a new instance of <STRONG>SpinTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>SpinTransform</STRONG> specifying maxRadius, maxAngleOffset, offset and
            backColor. </summary>
            <exception> Thrown if the maxRadius or maxAngleOffset is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset"> Angular distance to spin pixels. (degrees) </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <STRONG>SpinTransform</STRONG> specifying maxRadius, maxAngleOffset, offset,
            backColor and transformMode. </summary>
            <exception> Thrown if the maxRadius or maxAngleOffset is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset"> Angular distance to spin pixels. (degrees) </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.BackColor">
            <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
            <value> The background color to use for newly uncovered areas of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <remarks> Pixels outside of this radius will not be affected. </remarks>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxAngleOffset">
            <summary> Gets or sets the angular distance to spin pixels. (degrees) </summary>
            <value> Angular distance to spin pixels. (degrees) </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.Offset">
            <summary> Gets or set the offset position from the center of the image. </summary>
            <value> The offset position from the center of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform">
            <summary> <para>A SpinWaveTransform rotates the image about the center with a variable angular distance.  The
            distance varies in a sine wave pattern.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.maxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.maxAngleOffset">
            <summary> Gets or sets the angular distance to spin pixels (degrees). </summary>
            <value> Angular distance to spin pixels (degrees). </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.periods">
            <summary> Gets or sets the number of periods in the distance wave. </summary>
            <value> Number of periods in the distance wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.backColor">
            <summary> Gets or sets the background color of newly uncovered areas of the image. </summary>
            <value> The background color of newly uncovered areas of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <remarks> Creates a new instance of the SpinWaveTransform object. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.AddToChain(System.Int32,System.Int32)">
            <summary>
            Adds this transform to the transforms chain.
            </summary>
            <param name="width"> The width of the image to be processed. </param>
            <param name="height"> The height of the image to be processed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor">
            <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point)">
            <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG> specifying maxRadius, maxAngleOffset, periods
            and offset. </summary>
            <exception> Thrown if the maxRadius, maxAngleOffset or periods is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset"> Angular distance to spin pixels (degrees). </param>
            <param name="periods"> Number of periods in the distance wave. </param>
            <param name="offset"> The offset position from the center of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG> specifying maxRadius, maxAngleOffset,
            periods, offset and transformMode. </summary>
            <exception> Thrown if the maxRadius, maxAngleOffset or periods is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset"> Angular distance to spin pixels (degrees). </param>
            <param name="periods"> Number of periods in the distance wave. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG> specifying maxRadius, maxAngleOffset,
            periods, offset, transformMode and backColor. </summary>
            <exception> Thrown if the maxRadius, maxAngleOffset or periods is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="maxAngleOffset"> Angular distance to spin pixels (degrees). </param>
            <param name="periods"> Number of periods in the distance wave. </param>
            <param name="offset"> The offset position from the center of the image. </param>
            <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </param>
            <param name="backColor"> The background color of newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.BackColor">
            <summary> Gets or sets the background color of newly uncovered areas of the image. </summary>
            <value> The background color of newly uncovered areas of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxAngleOffset">
            <summary> Gets or sets the angular distance to spin pixels (degrees). </summary>
            <value> Angular distance to spin pixels (degrees). </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Periods">
            <summary> Gets or sets the number of periods in the distance wave. </summary>
            <value> Number of periods in the distance wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Offset">
            <value> The offset position from the center of the image. </value>
            <summary> Gets or set the offset position from the center of the image. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand">
            <summary> <para>This command allows you to combine multiple transforms into a single command call.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <example>
<code lang="CS" title="Using TransformChain (C#)"><![CDATA[
// Load a 24-bit image.
AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");

// Create the TransformChainCommand and add a couple transforms to it.
TransformChainCommand cmd = new TransformChainCommand();
cmd.Add(new MarbleTransform(0.4, new Size(10, 10)));
cmd.Add(new LensTransform(100, Point.Empty));

// Apply the transform.
AtalaImage result = cmd.Apply(image).Image;
image.Dispose();
]]></code>

<code lang="VB" title="Using TransformChain (Visual Basic)"><![CDATA[
' Load a 24-bit image.
Dim image As AtalaImage =  New AtalaImage("D:\Test Images\1.jpg") 
 
' Create the TransformChainCommand and add a couple transforms to it.
Dim cmd As TransformChainCommand =  New TransformChainCommand() 
cmd.Add(New MarbleTransform(0.4, New Size(10, 10)))
cmd.Add(New LensTransform(100,PoInteger.Empty))
 
' Apply the transform.
Dim result As AtalaImage =  cmd.Apply(image).Image
image.Dispose()
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.backColor">
            <summary> Gets or sets the background color to use on newly uncovered areas of the image. </summary>
            <value> The background color to use on newly uncovered areas of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>TransformChainCommand</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <remarks> You must add a least one transform to the collection before using this command. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor">
            <summary> Creates a new instance of <STRONG>TransformChainCommand</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
            <summary> Creates a new instance of TransformChainCommand specifying the transforms. </summary>
            <param name="transforms"> The transforms to add to this command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Drawing.Color)">
            <remarks> Creates a new instance of TransformChainCommand specifying the backColor. </remarks>
            <summary> Creates a new instance of TransformChainCommand specifying the background color of the resulting image.
            </summary>
            <param name="backColor"> The background color to used for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <remarks> Creates a new instance of the TransformChainCommand specifying backColor and transformMode. </remarks>
            <summary> Creates a new instance of TransformChainCommand specifying the background color and transform mode.
            </summary>
            <param name="backColor"> The background color to used for newly uncovered areas of the image. </param>
            <param name="transformMode"> The interpolation mode to use for this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode,Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
            <remarks> Creates a new instance of the TransformChainCommand specifying backColor, transformMode and transforms.</remarks>
            <summary> Creates a new instance of TransformChainCommand specifying the background color, transform mode and a
            collection of transforms to apply. </summary>
            <param name="backColor"> The background color to used for newly uncovered areas of the image. </param>
            <param name="transformMode"> The interpolation mode to use for this transform. </param>
            <param name="transforms"> The transforms to add to this command. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Add(Atalasoft.Imaging.ImageProcessing.Transforms.Transform)">
            <summary> Adds a transform to the collection. </summary>
            <exception> Thrown if the transform is null (Nothing in VB). </exception>
            <param name="transform"> The transform to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Clear">
            <summary> Removes all of the transforms from the collection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.GetEnumerator">
            <summary> This allows the use of <STRONG>foreach</STRONG> statements on the transforms collection. </summary>
            <returns> An IEnumerator for the transform collection. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[],System.Int32)">
            <summary> Copies transforms from the internal collection to an array. </summary>
            <exception> Thrown if array is null (Nothing in VB). </exception>
            <exception> Thrown if the arrayIndex is invalid. </exception>
            <param name="array"> An array to copy the transforms into. </param>
            <param name="arrayIndex"> <para>The index to start copying transforms into.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(System.Array,System.Int32)">
            <summary> Copies transforms from the internal collection to an array. </summary>
            <exception> Thrown if array is null (Nothing in VB). </exception>
            <exception> Thrown if arrayIndex is invalid. </exception>
            <param name="array"> An array to copy the transforms into. </param>
            <param name="arrayIndex"> The index to start copying transforms into. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>
            Verify the integrity of properties in the command before processing an image.
            </summary>
            <param name="image">The image to be processed.</param>
            <remarks>
              <para>This method does not check the integrity of the source image itself.  That is already done by the
            time VerifyProperties is called.</para>
              <para>Errors should be indicated by throwing an appropriate exception.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>
            Chooses a pixel format that is preferred for this command.
            </summary>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
            <returns>
            A new pixel format to use for this command.
            </returns>
            <remarks>
              <para>The default implementation returns the sourceFormat value.</para>
              <para>In theory, a command should only ever return pixel format that it has direct support for.  Unfortunately, many
            older commands advertised that they supported pixel formats that were not native to the command.  To maintain
            compatibility with older versions of dotImage, this method allows a command to select a new pixel format for itself,
            without being bound to the ApplyToAnyPixelFormat property.</para>
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.BackColor">
            <summary> Gets or sets the background color to use on newly uncovered areas of the image. </summary>
            <value> The background color to use on newly uncovered areas of the image. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Count">
            <summary> Returns the number of transforms in the collection. </summary>
            <value> The number of transforms in the collection. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.IsSynchronized">
            <summary> Gets a value indicating whether access to the transforms collection is synchronized. </summary>
            <value> A value indicating whether access to the transforms collection is synchronized. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SyncRoot">
            <summary> Gets an object that can be used to synchronize access to the transforms collection. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SupportedPixelFormats">
            <summary> Returns an array of PixelFormats supported by this command. </summary>
            <value>
            PixelFormat.Pixel24bppBgr,,<BR/>PixelFormat.Pixel8bppGrayscale,,<BR/>PixelFormat.Pixel32bppBgr,,<BR/>PixelFormat.Pixel1bppIndexed,,<BR/>PixelFormat.Pixel4bppIndexed,,<BR/>PixelFormat.Pixel8bppIndexed,,<BR/>PixelFormat.Pixel16bppGrayscaleAlpha,,<BR/>PixelFormat.Pixel32bppBgra,,<BR/>PixelFormat.Pixel32bppCmyk
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData">
            <remarks> See <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform"/>. </remarks>
            <summary> This class is used in the UserTransformCallback to indicate the pixel locations of the transform.
            </summary>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.currentPixel">
            <summary> Gets the current pixel to transform. </summary>
            <value> The current pixel to transform. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.fromPixel">
            <summary> Gets or sets the value which the pixel which should move to the current pixel. </summary>
            <value> The value which the pixel which should move to the current pixel. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary> Initializes a new instance of UserTransformData specifying the to and from points. </summary>
            <param name="currentPixel"> The current pixel to transform. </param>
            <param name="fromPixel"> The value which the pixel which should move to the current pixel. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.#ctor">
            <summary> Creates a new instance of <STRONG>UserTransformData</STRONG>. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.CurrentPixel">
            <summary> Gets the current pixel to transform. </summary>
            <value> The current pixel to transform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.FromPixel">
            <summary> Gets or sets the value which the pixel which should move to the current pixel. </summary>
            <value> The value which the pixel which should move to the current pixel. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback">
            <summary> Callback method for the UserTransform object. </summary>
            <overloads>
            <example>
<para>This is a simple example of how you can create your own transforms.</para>
<code lang="CS" title="UserTransformCallback Example (C#)"><![CDATA[
// Create your callback delegate.
UserTransformCallback callback = new UserTransformCallback(MyTransform);

// Create a UserTransform and process your image.
UserTransform customTransform = new UserTransform(callback);
AtalaImage processedImage = customTransform.ApplyToImage(sourceImage);


private bool MyTransform(double currentX, double currentY, out double fromX, out double fromY, int userData)
{
    // This tells the transform engine that the output pixel
    // should be the source pixel at (currentX - 10.5, currentY).
    
    fromX = currentX - 10.5;
    fromY = currentY;
    
    // if you want to cancel, return false.
    return true;
}
]]></code>
</example>
            </overloads>
            <param name="callbackData"> <para>Contains the information used in the transform.</para> </param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform">
            <summary> <para>This allows you to write your own transform methods and add them to the transform chain, just like
            the built-in transforms.  To do this, you must supply a <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback"/>.</para> </summary>
            <remarks> <para>This method will be called once for each pixel in the output image.  You need
            to set the <STRONG>FromPixel </STRONG>parameter to the pixels (may be fractional) that the input X and Y values will
            be pulled from.  Again, you tell the transform processor where to pull the source pixel <EM>from</EM>.</para>
            <para>Your callback method should be able to handle any kind of input range; inputs may be
            outside the image rectangle, if you are chaining transforms.  Likewise, your function can output values that are
            outside the image rectangle.  If your function is the last in the chain, values outside the image rect will be set
            to the background color.</para>
            <para>This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </para> </remarks>
            <example>
<code lang="CS" title="UserTransform Example (C#)"><![CDATA[
private void menuUserTransform_Click(object sender, System.EventArgs e)
{
    // Load a 24-bit image.
    AtalaImage image = new AtalaImage(@"D:\Test Images\1.jpg");
    
    // Apply the our own transform.
    UserTransform cmd = new UserTransform(new UserTransformCallback(UserCallback));
    AtalaImage result = cmd.Apply(image).Image;
    
    // Display the result in a WorkspaceViewer.
    image.Dispose();
    this.viewer.Image = result;
}

private bool UserCallback(UserTransformData data)
{
    // This will take small blocks from the image and rearrange them.
    
    float fpx = 0;
    float fpy = 0;
    float[] stopPoints = new float[] { 400, 360, 320, 280, 240, 200, 160, 120, 80, 40 };
    bool xFound = false;
    bool yFound = false;
    
    for (int i = 0; i < stopPoints.Length; i++)
    {
        if (!xFound)
        {
            if (data.CurrentPixel.X > stopPoints[i])
            {
                fpx = stopPoints[i] + data.CurrentPixel.X;
                xFound = true;
            }
            else
                fpx = data.CurrentPixel.X;
        }
        
        if (!yFound)
        {
            if (data.CurrentPixel.Y > stopPoints[i])
            {
                fpy = stopPoints[i] + data.CurrentPixel.Y;
                yFound = true;
            }
            else
                fpy = data.CurrentPixel.Y;
        }
        
        if (xFound && yFound) break;
    }
    
    data.FromPixel = new PointF(fpx, fpy);
    
    return true;
}
]]></code>

<code lang="VB" title="UserTransform Example (Visual Basic)"><![CDATA[
Private  Sub menuUserTransform_Click(ByVal sender As Object, ByVal e As System.EventArgs)
    ' Load a 24-bit image.
    Dim image As AtalaImage = New AtalaImage("D:\Test Images\1.jpg") 
 
    ' Apply the our own transform.
    Dim cmd As UserTransform = New UserTransform(New UserTransformCallback(UserCallback)) 
    Dim result As AtalaImage = cmd.Apply(image).Image
 
    ' Display the result in a WorkspaceViewer.
    image.Dispose()
    Me.viewer.Image = result
End Sub
 
Private Function UserCallback(ByVal Data As UserTransformData) As Boolean
    ' This will take small blocks from the image and rearrange them.
 
    Dim fpx As Single =  0 
    Dim fpy As Single =  0 
    Dim stopPoints() As Single = New Single() {400, 360, 320, 280, 240, 200, 160, 120, 80, 40}

    Dim xFound As Boolean =  False 
    Dim yFound As Boolean =  False 
 
    Dim i As Integer
    For  i = 0 To stopPoints.Length- 1 Step i + 1
        If Not xFound Then
            If Data.CurrentPixel.X > stopPoints(i) Then
                fpx = stopPoints(i) + Data.CurrentPixel.X
                xFound = True
            Else 
                fpx = Data.CurrentPixel.X
            End If
        End If
 
        If Not yFound Then
            If Data.CurrentPixel.Y > stopPoints(i) Then
                fpy = stopPoints(i) + Data.CurrentPixel.Y
                yFound = True
            Else 
                fpy = Data.CurrentPixel.Y
            End If
        End If
 
        If xFound And yFound Then
             Exit For
        End If
    Next
 
    Data.FromPixel = New PointF(fpx, fpy)
 
    Return True
End Function
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.callback">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback"/> delegate which will be called for each pixel
            processed in the output image. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback"/> delegate which will be called for each pixel processed in the output
            image. </value>
            <exception> Thrown if value is null. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.backColor">
            <summary> Gets or sets the background color used when a transform uncovers part of the image. </summary>
            <value> The background color used when a transform uncovers part of the image. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor">
            <summary> Creates a new instance of <STRONG>UserTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback)">
            <summary> Creates a new instance of the <STRONG>UserTransform</STRONG> class specifying the use transform callback.
            </summary>
            <exception> Thrown if the callback is null (Nothing in VB). </exception>
            <param name="callback"> Delegate which will be called for each pixel processed in the output image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of the <STRONG>UserTransform</STRONG> class specifying the use transform callback
            and interpolation mode. </summary>
            <exception> Thrown if the callback is null (Nothing in VB). </exception>
            <param name="callback"> Delegate which will be called for each pixel processed in the output image. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary> Creates a new instance of the <STRONG>UserTransform</STRONG> class specifying the use transform callback,
            interpolation mode, and background color. </summary>
            <exception> Thrown if the callback is null (Nothing in VB). </exception>
            <param name="callback"> Delegate which will be called for each pixel processed in the output image. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
            <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.Callback">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback"/> delegate which will be called for each pixel
            processed in the output image. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback"/> delegate which will be called for each pixel processed in the output
            image. </value>
            <exception> Thrown if value is null. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.BackColor">
            <summary> Gets or sets the background color used when a transform uncovers part of the image. </summary>
            <value> The background color used when a transform uncovers part of the image. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform">
            <summary> <para>This transform moves across the image with a sine wave pattern.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso> OffsetTransform Example </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.maxOffsetPercent">
            <summary> Gets or sets the maximum offset percent for the wave. </summary>
            <value> Maximum offset percent for the wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.periods">
            <summary> Gets or sets the number of periods in the wave. </summary>
            <value> Number of periods in the wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.mode">
            <summary> Gets or sets the style of wave transform to create. </summary>
            <value> The style of wave transform to create. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>WaveTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
            <remarks> Creates a new instance of the WaveTransform object. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor">
            <summary> Creates a new instance of <STRONG>WaveTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform"/> specifying maxOffsetPercent, periods and mode.
            </summary>
            <exception> Thrown if the maxOffsetPercent or periods value is less than 0. </exception>
            <param name="maxOffsetPercent"> Maximum offset percent for the wave. </param>
            <param name="periods"> Number of periods in the wave. </param>
            <param name="mode"> The style of wave transform to create. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform"/> specifying maxOffsetPercent, periods, mode and
            transformMode. </summary>
            <exception> Thrown if the maxOffsetPercent or periods value is less than 0. </exception>
            <param name="maxOffsetPercent"> Maximum offset percent for the wave. </param>
            <param name="periods"> Number of periods in the wave. </param>
            <param name="mode"> The style of wave transform to create. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.MaxOffsetPercent">
            <summary> Gets or sets the maximum offset percent for the wave. </summary>
            <value> Maximum offset percent for the wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Periods">
            <summary> Gets or sets the number of periods in the wave. </summary>
            <value> Number of periods in the wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Mode">
            <summary> Gets or sets the style of wave transform to create. </summary>
            <value> The style of wave transform to create. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform">
            <summary> <para>This transform creates an effect which is a bit like looking at the image though a clear sphere.  If
            you set <see cref="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.BigWow"/> to true, the result looks as if you're inside the sphere.</para>
            </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.maxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.bigWow">
            <summary> Gets or sets a valid indicating if you the effect to appear inside the sphere. </summary>
            <value> A valid indicating if you the effect to appear inside the sphere. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>WowTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor">
            <summary> Creates a new instance of <STRONG>WowTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor(System.Double,System.Boolean)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform"/> specifying maxRadius, and bigWow. </summary>
            <exception> Thrown if maxRadius is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="bigWow"> Makes it appear as if you are inside a clear sphere. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor(System.Double,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform"/> specifying maxRadius, bigWow and transformMode.
            </summary>
            <exception> Thrown if maxRadius is less than 0. </exception>
            <param name="maxRadius"> Maximum distance from the center for this effect. </param>
            <param name="bigWow"> Makes it appear as if you are inside a clear sphere. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.MaxRadius">
            <summary> Gets or sets the maximum distance from the center for this effect. </summary>
            <value> Maximum distance from the center for this effect. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.BigWow">
            <summary> Gets or sets a valid indicating if you the effect to appear inside the sphere. </summary>
            <value> A valid indicating if you the effect to appear inside the sphere. You have to see it to know.</value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform">
            <summary> <para>This transform moves across the images in a triangle wave pattern.</para> </summary>
            <remarks> This method requires a continuous tone image. If the source image is not continuous, it will attempt to
            convert the image into one. </remarks>
            <seealso cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform"/>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.maxOffsetPercent">
            <summary> Gets or sets the maximum offset percent for the wave. </summary>
            <value> Maximum offset percent for the wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.periods">
            <summary> Gets or sets the number of periods in the wave. </summary>
            <value> Number of periods in the wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.topToBottom">
            <summary> Gets or sets a value indicating if the wave moves from top to bottom instead of left to right. </summary>
            <value> A value indicating if the wave moves from top to bottom instead of left to right. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.transformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Creates a new instance of <STRONG>ZigZagTransform</STRONG> from serialization information </summary>
            <param name="info"> A SerializationInfo object containing information for this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Fills a SerializationInfo object with information about this command. </summary>
            <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
            <param name="context"> A StreamingContext for this information. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.AddToChain(System.Int32,System.Int32)">
            <summary> Adds this transform to the transforms chain. </summary>
            <param name="width"> The width of the image to process. </param>
            <param name="height"> The height of the image to process. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor">
            <summary> Creates a new instance of <STRONG>ZigZagTransform</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor(System.Double,System.Int32,System.Boolean)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform"/> specifying maxOffsetPercent, periods, and
            topToBottom. </summary>
            <exception> Thrown if maxOffsetPercent or periods is less than 0. </exception>
            <param name="maxOffsetPercent"> Maximum offset percent for the wave. </param>
            <param name="periods"> Number of periods in the wave. </param>
            <param name="topToBottom"> The wave moves from top to bottom instead of left to right. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor(System.Double,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform"/> specifying maxOffsetPercent, periods, topToBottom
            and transformMode. </summary>
            <exception> Thrown if maxOffsetPercent or periods is less than 0. </exception>
            <param name="maxOffsetPercent"> Maximum offset percent for the wave. </param>
            <param name="periods"> Number of periods in the wave. </param>
            <param name="topToBottom"> The wave moves from top to bottom instead of left to right. </param>
            <param name="transformMode"> Specifies the interpolation used with this transform. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>
            PerformActualCommand does the actual work of the image processing command.
            </summary>
            <param name="source">The source image for processing.  This may be different from the original image.</param>
            <param name="dest">The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
            <returns>
            In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null.
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.MaxOffsetPercent">
            <summary> Gets or sets the maximum offset percent for the wave. </summary>
            <value> Maximum offset percent for the wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.Periods">
            <summary> Gets or sets the number of periods in the wave. </summary>
            <value> Number of periods in the wave. </value>
            <exception> Thrown if value is less than 0. </exception>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TopToBottom">
            <summary> Gets or sets a value indicating if the wave moves from top to bottom instead of left to right. </summary>
            <value> A value indicating if the wave moves from top to bottom instead of left to right. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TransformMode">
            <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode"/> of this transform. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSourceNode">
            <summary> This is an object used to hold <STRONG>AtalaImage</STRONG> objects in the <STRONG>ImageSource</STRONG>. 
            This object is only of interest if you are writing your own <STRONG>ImageSource</STRONG> implementation. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSourceNode._imageSize">
            <summary> The number of bytes used by this image when in memory. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSourceNode._index">
            <summary> The index of this image in the ImageSource. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSourceNode._image">
            <summary> The image in this node. </summary>
            <value> If Image is null, the image has been unloaded. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSourceNode._reloader">
            <summary> Gets the reloader, if any, associated with this node. </summary>
            <value> An object of type IImageReloader which can be used to reload a previously unloaded image. </value>
            <remarks> This property may return null.  It is entirely valid for there to be no image reloader for any given
            image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.IImageReloader)">
            <summary> Constructs a new ImageSourceNode using the supplied image and reloader. </summary>
            <param name="image"> The image to hold onto. </param>
            <param name="reloader"> An IImageReloader to load the object back into memory.  This can be null. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Acquire">
            <summary> Acquire a lock on this node. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Release">
            <summary> Release a lock on this image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.LetGo">
            <summary> Unload the image from memory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Dispose">
            <summary> Release resources used by this node. </summary>
            <overloads> Release resources used by this node. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.ImageSourceNode"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.ReferenceCount">
            <summary>
            Gets the reference count for this node.
            </summary>
            <value>
            The reference count.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Reloader">
            <summary> Gets the reloader, if any, associated with this node. </summary>
            <value> An object of type IImageReloader which can be used to reload a previously unloaded image. </value>
            <remarks> This property may return null.  It is entirely valid for there to be no image reloader for any given
            image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Released">
            <summary> Determines if this image is fully released. </summary>
            <value> True if released, false otherwise. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Image">
            <summary> The image in this node. </summary>
            <value> If Image is null, the image has been unloaded. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Index">
            <summary> The index of this image in the ImageSource. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.ImageSize">
            <summary> The number of bytes used by this image when in memory. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback">
            <summary> A delegate that can return connections to a Database </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.EncryptHandler">
            <summary> A delegate to encrypt a string (for use with serialization) </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.DecryptHandler">
            <summary> A delegate to decrypt data back into a string (for use with serialization) </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor">
            <summary>
            A class that can get images by using IDbCommands.  You can either sub-class this class 
            and implement the abstract methods to provide the various commands, or 
            <see cref="T:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor"/>, which builds up commands from SQL,
            or <see cref="T:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor"/>, which builds up commands from Stored Procedures.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.IDbImageAccessor">
            <summary> An interface containing methods necessary for getting to the underlying data store </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.ExtractImageStream(System.Int32)">
            <summary> Returns a stream containing the image at the desired index.  You are guaranteed that imageStreamIndex
            is within the range: 0 &lt; imageStreamIndex &lt;= GetImageStreamCount() </summary>
            <returns> A Stream containing the image, or throw.  Do not return null. </returns>
            <param name="imageStreamIndex"> The row index of the desired image.  The index represents the image
            stream which could contain multiple frames. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.GetImageStreamCount">
            <summary> Get the number of streams to source in the image source.  Each image stream can have multiple frames
            </summary>
            <returns> The number of streams to source. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.GetFrameCountInImage(System.Int32,Atalasoft.Imaging.ImageSources.DbImageSource.FrameCounter)">
            <summary> Returns the number of frames in the image stream at index </summary>
            <param name="imageStreamIndex"> The index of the stream. </param>
            <param name="frameCounterFn"> A delegate that can count the number of frames in a stream, which
            you can use if you haven't stored the framecount elsewhere.  To speed performance, it might
            be better to store the frame count in the data store and not use this delegate. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.Reset">
            <summary> Reset all caches of information if you are storing anything that is a cached from the database, release
            it. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor._getConnection">
            <summary> A delegate that can return a connection to the database. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor._encryptor">
            <summary> A delegate that can encrypt a string. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor._decryptor">
            <summary> A delegate that can decrypt a string. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor._encryptSerializedState">
            <summary> Whether or not the serialized state is encrypted.  Please see documentation of sub-classes to see
            which members are encrypted. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor._extraParameters">
            <summary> A copy of the extra parameters dictionary.  This class does not support changing the parameters after
            the object has been constructed. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.Collections.IDictionary)">
            <summary>
            Create an image accessor that uses IDbCommand objects to get images.  The commands are created
            by sub-classes in the abstract methods.
            </summary>
            <param name="getConnection">A delegate that can be used to get a connection to the database.  This
            delegate may be serialized, so it should be to a static method.  In the case of ASP.NET, the deserialization can 
            happen in another page or in another web-server instance.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="extraParameters">The parameters that are passed to all of your stored procedures.  For SqlCommands, the keys should be strings
            which are the names of the parameters and start with an @.  For OleDbCommands, you must use a IDictionary with sorted keys (e.g. SortedList)
            and use index numbers (starting at 0) as keys.  The parameters are added in the sort order of the keys.
            
            The values can be any object that can be automatically converted
            by the IDbDataParameter for your connection.  The <code>extraParameters</code> are not encrypted when this object is serialized. 
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ExtractImageStream(System.Int32)">
            <summary> Extracts a stream from a row of the database.  </summary>
            <returns> A stream representing the contents of the image </returns>
            <remarks> <para>This function is implemented for DbImageSource to use. </para>
            <para>The field can either be a blob, image or string.  If it is
            a string, it
            is interpreted as a filename and the filestream is opened.  In order to get a connection to the database, the
            getConnection
            callback will be called -- the connection returned doesn't have to be opened (it will be opened when necessary),
            but this function will definitely close it before it returns.
            This method will use the property <see cref="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ImageFieldName"/> to determine the column name of the image
            stream information.  If
            that method returns null, it will assume that the information is in the first column. 
            </para></remarks>
            <param name="imageStreamIndex"> The index of the stream in the source </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateGetImageRowCommand(System.Data.IDbConnection,System.Int32)">
            <summary> A method that can return a command that gets a single row dataset with the image stream information at the
            given index.  The field can either be a varbinary, binary or image type (in which case the image stream is the
            value of the field) or it can be a string which will be interpreted as a filename that contains the image.
            The command should not be associated with a connection. </summary>
            <returns> A command that will a single row with the image stream information. </returns>
            <param name="conn"> A connection to the database. </param>
            <param name="imageStreamIndex"> The index of the image stream. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetImageStreamCount">
            <summary> Gets the number of image streams in this database.  Each stream can contain more than one frame.
            </summary>
            <returns> The number of image stream in this database. </returns>
            <remarks> This function is implemented for DbImageSource to use. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateGetImageStreamCountCommand(System.Data.IDbConnection)">
            <summary> A command that can get the number of image streams in the source (each of which can contain multiple
            frames). This
            command should just return the number of streams (not the total frame count).  The command should result in
            a single row dataset with the count in the first column.  The command should not be associated with a connection.
            </summary>
            <returns> A command that can get the number of image streams in the source. </returns>
            <param name="conn"> A connection to the database. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetFrameCountInImage(System.Int32,Atalasoft.Imaging.ImageSources.DbImageSource.FrameCounter)">
            <summary>
            The number of frames in the stream indicated by the imageStreamIndex
            </summary>
            <param name="imageStreamIndex">The index of the stream in the source.  This is guaranteed to be
            in the range of: 0 &lt; imageStreamIndex &lt;= GetImageStreamCount()</param>
            <param name="frameCounterFn">A delegate that can count the number of frames in a stream, which
            you can use if you haven't stored the framecount elsewhere.  To speed performance, it might
            be better to store the frame count in the data store and not use this delegate.</param>
            <returns>
            The number of frames in the stream indicated by the imageStreamIndex
            </returns>
            <remarks>
            This function is implemented for DbImageSource to use.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateGetFrameCountCommand(System.Data.IDbConnection,System.Int32)">
            <summary> A command that returns the frame count for an image.  If this method returns null, the frame count will
            be determined by decoding the image stream.  If not null, this command should result in a single row dataset
            with the frame count in the first column.
            If the frame count is stored separately from the image stream, implementing
            this method can greatly increase performance (especially first access).  This command should not be associated with
            any connection. </summary>
            <returns> A command that returns the frame count for an image. </returns>
            <param name="conn"> A connection to the database. </param>
            <param name="imageStreamIndex"> The index of the image stream in the source. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Reset">
            <summary> Reset all caches of information.
            If you are storing anything that is a cached from the database, release it. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes stored information from the serialization info.
            </summary>
            <param name="info">The serialized data.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Get the data to serialize for this object </summary>
            <param name="info"> The information for this object to serialize </param>
            <param name="context"> The serialization context </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.AddExtraParameters(System.Data.IDbCommand)">
            <summary> Adds any extra parameters supplied by the user that are needed to run the command. </summary>
            <param name="cmd"> A command that will be used to call a stored procedure. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetFieldByString(System.Data.IDataReader,System.Object)">
            <summary>
            Gets a field from the datareader by passing in the name of the field.
            </summary>
            <param name="dr">A datareader set to a row.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>
            The value of the field named <pre><code>fieldName</code></pre>
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetFieldByInt(System.Data.IDataReader,System.Object)">
            <summary> Gets a field from the datareader by passing in the index of a field. </summary>
            <returns> The value of the field at index <pre><code>intIndex</code></pre>. </returns>
            <param name="dr"> A datareader set to a row. </param>
            <param name="intIndex"> The index of the column in the row to return. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject(System.Data.IDbCommand,System.String)">
            <summary> Gets the database object from the first row of the data set returned by the command
            at the field named <pre><code>field</code></pre>. </summary>
            <returns> The value of the given field in the first row of the dataset returned by the command. </returns>
            <param name="cmd"> The command to use to get the data set. </param>
            <param name="field"> The name of the field to return. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject(System.Data.IDbCommand,System.Int32)">
            <summary> Gets the database object from the first row of the data set returned by the command
            from the field at <pre><code>index</code></pre>. </summary>
            <returns> The value of the field at <pre><code>index</code></pre> in the first row of the dataset returned by the
            command. </returns>
            <param name="cmd"> The command to use to get the data set. </param>
            <param name="index"> The index of the field to return. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject(System.Data.IDbCommand,Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.FieldGetter,System.Object)">
            <summary> Gets the database object from the first row of the data set returned by the command
            from the field at <pre><code>index</code></pre> which can be either a field name or an integer index. </summary>
            <returns> The value of the field refered to by index. </returns>
            <param name="cmd"> The command to use to get the data set. </param>
            <param name="fieldGetter"> A delegate that can get the field using the <pre><code>index</code></pre>. </param>
            <param name="index"> An object that can be used to determine which field to get (by passing it to fieldGetter).
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateStreamFromDatabaseObject(System.Object)">
            <summary> Creates a stream from the object obtained from the database.  If the object is a byte array, it
            is attached to a MemoryStream.  If the object is a string, it is interpreted as a filename and
            an open FileStream to the file is returned.  If the object is null or not able to be interpreted
            as a stream, this method will throw. </summary>
            <returns> An open stream that contains an image. </returns>
            <param name="o"> An object that represents an image stream. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Open(System.Data.IDbConnection)">
            <summary> Opens a non-open connection </summary>
            <returns> An open connection </returns>
            <param name="conn"> A connection </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.EncryptIfRequested(System.String)">
            <summary> Encrypt a string if EncryptSerializedState is true. </summary>
            <returns> The encrypted string. </returns>
            <param name="s"> The string to encrypt </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.DecryptIfRequested(System.Byte[])">
            <summary> Decrypt a string if EncryptSerializedState is true. </summary>
            <returns> The decryted string. </returns>
            <param name="data"> The encrypted string. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDecryptedValue(System.String,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Gets the value from the serialized data and decrypts it if requested. </summary>
            <returns> The decrypted data. </returns>
            <param name="key"> The key of the data value. </param>
            <param name="info"> The serialized data. </param>
            <param name="context"> The serialization context. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.StoreEncryptedValue(System.String,System.String,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Stores the value into the serialization info and encrypts it if requested. </summary>
            <param name="key"> The key of the data value. </param>
            <param name="theValue"> The value to store. </param>
            <param name="info"> The object that contains the serialized data. </param>
            <param name="context"> The serialization context. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.EnsureNotBlank(System.String,System.String)">
            <summary> Throws if the string s is null or empty. </summary>
            <returns> The value of the parameter s only if it is not null or empty. </returns>
            <param name="param"> The name of the parameter to use in any error messages. </param>
            <param name="s"> The value to check. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.EnsureNotBlank(System.String,System.String,System.String)">
            <summary> Returns either <pre><code>s</code></pre> if it is not null or empty, or the defaultValue of it is not null
            or blank.  If they are both null or empty, this method throws. </summary>
            <param name="param"> The name of the parameter to use in any error messages. </param>
            <param name="s"> The value to check. </param>
            <param name="defaultValue"> The defaultValue to use if <pre><code>s</code></pre> is blank.  If it is also
            blank, this method throws. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.EncryptSerializedState">
            <summary> Whether or not the serialized state is encrypted.  Please see documentation of sub-classes to see
            which members are encrypted. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetConnection">
            <summary> A delegate that can return a connection to the database. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Encryptor">
            <summary> A delegate that can encrypt a string. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Decryptor">
            <summary> A delegate that can decrypt a string. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ExtraParameters">
            <summary>
            A copy of the extra parameters dictionary.  This class does not support changing the parameters after
            the object has been constructed.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ImageFieldName">
            <returns>The name of the image field in the dataset, or null if it's ok to assume it's in the first column.</returns>
            <summary> The name of the image field in the dataset returned by <pre><code>CreateGetImageRowCommand</code></pre>. 
            If this
            method returns null, it is assumed to be in the first column. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.FieldGetter">
            <summary>
            
            </summary>
            <param name="dr">The dr.</param>
            <param name="accessor">The accessor.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor">
            <summary> This class can access images for DbImageSource from clauses of SQL statements that are provided.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor._imageField">
            <summary> The name of the image field in the data source </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor._primaryKeyFields">
            <summary> The commas separated list of fields that make up the primary key of the data source </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor._fromClause">
            <summary> The table that contains the images (or any valid from clause) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor._whereClause">
            <summary> A valid SQL where clause or null if all rows are to be used. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor._orderByClause">
            <summary> A valid SQL order by clause or null if the dataset should be ordered by the primary keys </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor._frameCountField">
            <summary> The name of the frame count field in the data source </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Creates an object that can be used with <see cref="T:Atalasoft.Imaging.ImageSources.DbImageSource"/> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
            <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">The name of the image field in the data source (given by the <see cref="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.FromClause"/>).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the <code>fromClause</code>).</param>
            <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
            <overloads> Constructors for DbSqlImageAccessor </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an object that can be used with <see cref="T:Atalasoft.Imaging.ImageSources.DbImageSource"/> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
            <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">The name of the image field in the data source (given by the fromClause).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the <code>fromClause</code>).</param>
            <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
            <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement.  It can be null, which
            means that you want all rows to be returned.  It should not contain "where" at the beginning.</param>	
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an object that can be used with <see cref="T:Atalasoft.Imaging.ImageSources.DbImageSource"/> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
            <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">The name of the image field in the data source (given by the <code>fromClause</code>).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the <code>fromClause</code>).</param>
            <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
            <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement.  It can be null, which
            means that you want all rows to be returned.  It should not contain "where" at the beginning.</param>
            <param name="orderByClause">A clause that can be used in an order by clause.  If it is null, the data set is ordered
            by the primary keys.  The dataset must have a defined order.  It should not contain "order by" at the beginning.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an object that can be used with <see cref="T:Atalasoft.Imaging.ImageSources.DbImageSource"/> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
            <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">The name of the image field in the data source (given by the fromClause).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the fromClause).</param>
            <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
            <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement.  It can be null, which
            means that you want all rows to be returned.  It should not contain "where" at the beginning.</param>
            <param name="orderByClause">A clause that can be used in an order by clause.  If it is null, the data set is ordered
            by the primary keys.  The dataset must have a defined order.  It should not contain "order by" at the beginning.</param>
            <param name="frameCountField">The name of the frameCount field in the data source (given by the fromClause.
            If it is null, the frame count will be determined by decoding the image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an object that can be used with <see cref="T:Atalasoft.Imaging.ImageSources.DbImageSource"/> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
            <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">The name of the image field in the data source (given by the fromClause).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the fromClause).</param>
            <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
            <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement.  It can be null, which
            means that you want all rows to be returned.  It should not contain "where" at the beginning.</param>
            <param name="orderByClause">A clause that can be used in an order by clause.  If it is null, the data set is ordered
            by the primary keys.  The dataset must have a defined order.  It should not contain "order by" at the beginning.</param>
            <param name="frameCountField">The name of the frameCount field in the data source (given by the fromClause&gt;.
            If it is null, the frame count will be determined by decoding the image stream.</param>
            <param name="extraParameters">The parameters that are passed to all of your stored procedures.  For SqlCommands, the keys should be strings
            which are the names of the parameters and start with an @.  For OleDbCommands, you must use a IDictionary with sorted keys (e.g. SortedList)
            and use index numbers (starting at 0) as keys.  The parameters are added in the sort order of the keys.
            
            The values can be any object that can be automatically converted
            by the IDbDataParameter for your connection.  The <code>extraParameters</code> are not encrypted when this object is serialized. 
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetImageRowCommand(System.Data.IDbConnection,System.Int32)">
            <summary>
            A method that can return a command that gets a single row dataset with the image stream information at the
            given index.  The field can either be a varbinary, binary or image type (in which case the image stream is the
            value of the field) or it can be a string which will be interpreted as a filename that contains the image.
            The command should not be associated with a connection.
            </summary>
            <param name="conn">A connection to the database.</param>
            <param name="imageStreamIndex">The index of the image stream.</param>
            <returns>A command that will a single row with the image stream information.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetImageStreamCountCommand(System.Data.IDbConnection)">
            <summary> A command that can get the number of image streams in the source (each of which can contain multiple
            frames). This
            command should just return the number of streams (not the total frame count).  The command should result in
            a single row dataset with the count in the first column.  The command should not be associated with a connection.
            </summary>
            <returns> A command that can get the number of image streams in the source. </returns>
            <param name="conn"> A connection to the database. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetFrameCountCommand(System.Data.IDbConnection,System.Int32)">
            <summary> A command that returns the frame count for an image.  If this method returns null, the frame count will
            be determined by decoding the image stream.  If not null, this command should result in a single row dataset
            with the frame count in the first column.
            If the frame count is stored separately from the image stream, implementing
            this method can greatly increase performance (especially first access).  This command should not be associated with
            any connection. </summary>
            <returns> A command that returns the frame count for an image. </returns>
            <param name="conn"> A connection to the database. </param>
            <param name="imageStreamIndex"> The index of the image stream in the source. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetFieldCommand(System.Data.IDbConnection,System.Int32,System.String)">
            <summary> Creates a command that can get the given field from the row indexed by
            imageStreamIndex
            from the datasource. </summary>
            <returns> A command that gets the given field from a row at index imageStreamIndex from the
            datasource. </returns>
            <param name="conn"> A connection to the database </param>
            <param name="imageStreamIndex"> The index of the image stream in the datasource. </param>
            <param name="field"> The name of the column in the data source that the command should try to get. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateSelectFieldByRowQuery(System.String,System.String)">
            <summary> Creates a SQL Query using Common Table Expressions that can get a specific row by index from a
            data source. </summary>
            <returns> A SQL statement that will take a parameter named imageStreamIndexParamName and
            will
            contain a field named field. </returns>
            <param name="imageStreamIndexParamName"> The name of the parameter to use to contain the requested
            index (so that it can be provided later by a Parameter) </param>
            <param name="field"> The field that is being requested from the datasouce (must appear in the result of the
            query) </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetImageStreamCountQuery">
            <summary> Creates a SQL statement that can count the number of image streams.  The count should be in the first
            column
            of the first row of the returned rows. </summary>
            <returns> A SQL statement that counts the number of image streams. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.GetFieldNameFromExpression(System.String)">
            <summary> Takes SQL field clause and returns the name of the column. </summary>
            <param name="expr"> The SQL field clause </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> From ISerializable.  All properties are encrypted if encryptSerializedState was set to true in the
            constructor.
            They are encrypted using the encryptor </summary>
            <param name="info"> The information to deserialize. </param>
            <param name="context"> The serialization context. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Get the data to serialize for this object </summary>
            <param name="info"> The information for this object to serialize </param>
            <param name="context"> The serialization context </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.ImageField">
            <summary> The name of the image field in the data source </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.PrimaryKeyFields">
            <summary> The commas separated list of fields that make up the primary key of the data source </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.FromClause">
            <summary> The table that contains the images (or any valid from clause) </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.WhereClause">
            <summary> A valid SQL where clause or null if all rows are to be used. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.OrderByClause">
            <summary> A valid SQL order by clause or null if the dataset should be ordered by the primary keys </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.FrameCountField">
            <summary> The name of the frame count field in the data source </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.ImageFieldName">
            <summary> Returns the name of the field that contains the image stream information.  If the field is an expression
            it must contain an as clause that names the field. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.NonBlankWhereClause">
            <summary> Returns either the given where clause or a clause that is always true, if that is blank </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.NonBlankOrderByClause">
            <summary> Returns either the given order by clause or the primary keys if that is blank </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor">
            <summary> This class can be used with IDbImageSource to get images from a database through Stored Procedures. The
            Stored Procedures to call can be specified in the constructor and the only requirement is that they meet certain
            specifications as described in the constructor parameter documentation. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor._getImageByIndexProc">
            <summary> The name of the stored procedure that will be used to access image streams.  It must take
            a parameter called index and return a single row dataset with the image stream as the first
            column.  It may also take extra parameters.
            <see cref="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.Collections.IDictionary)"/> for an example
            of a valid stored procedure. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor._getImageStreamCountProc">
            <summary> The name of the stored procedure that will be used to access the count of image streams.  It must take
            return a single row dataset with the image stream as the first
            column.  It may also take extra parameters.
            <see cref="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.Collections.IDictionary)"/> for an example of a valid stored procedure. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor._getFrameCountByIndexProc">
            <summary> The name of the stored procedure that will be used to access the frame count of an image stream.  It must
            take
            a parameter called index and return a single row dataset with the frame count as the first
            column.  It may also take extra parameters.
            <see cref="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.Collections.IDictionary)"/> for an example of a valid stored procedure. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Construct an accessor that can access images in a database via stored procedures
            </summary>
            <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.</param>
            <param name="encryptSerializedState">Set to true if you want the serialized state of this accessor to be encrypted.  
            You must set the Encryptor and Decryptor properties to handle the decryption and encryption.  The extraParameters are not
            encrypted when serialized.</param>
            <param name="getImageByIndexProc">The name of a stored procedure that can get an image by index.  It should
            take an int parameter called "@index" and any other parameters you need, and return the image stream at that index.  
            index is not a primary key into your table, but instead is a number in range of 0 to count-1, where count is 
            gotten by calling the stored procedure named in the getImageStreamCountProc argument.  If you 
            take any extra parameters (aside from the index), you should specify their values by using the 
            extraParameters argument. The stored procedure should result in a single row dataset where the first
            column is the image.  It can either be an encoded image in a varbinary or image field or 
            a string.  If it is a string it is interpreted as a filename, which will be opened to get to the images.</param>
            <param name="getImageStreamCountProc">The name of a stored procedure that can get the number of image streams.  There 
            are no required parameters.  The stored procedure should result in single row dataset with the count in the first column.  
            If you need any extra parameters, you should specify their values by using the 
            <code>extraParameters</code> argument.</param>
            <param name="extraParameters">The parameters that are passed to all of your stored procedures.  For SqlCommands, the keys should be strings
            which are the names of the parameters and start with an @.  For OleDbCommands, you must use a IDictionary with sorted keys (e.g. SortedList)
            and use index numbers (starting at 0) as keys.  The parameters are added in the sort order of the keys.
            
            The values can be any object that can be automatically converted
            by the IDbDataParameter for your connection.  The extraParameters are not encrypted when this object is serialized. 
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
            <remarks>Here are some sample stored procedures that would work to get images from an table called images, where the
            data was stored in an field called imageData.
            
            Here is a stored procedure that would meet the specification for the getImageByIndexProc.  @startId and @endId are extra parameters
            that would need to be passed in to the constructor.
            
            <code>
            create PROCEDURE GetImageByIndex
            	@index int, @startId int, @endId int
            as
            	set nocount on;
            	with istr as (
            		select id, imagedata, row_number() over (order by id) as rn 
            		from images where id between @startid and @endid
            	) select imageData from istr where rn=(@index+1)
            </code>
            Here is a stored procedure that would meet the specification for the getImageStreamCountProc.  @startId and @endId are extra parameters
            that would need to be passed in to the constructor.
            <code>
            create PROCEDURE GetImageStreamCount
            	@startid int, @endid int
            as
            	set nocount on;
            	select count(*) from images where id between @startid and @endid
            </code>
            Note: the extra parameters must be the same for all stored procedures.
            
            </remarks>
            <overloads> Constructors for DbStoredProcImageAccessor </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Construct an accessor that can access images in a database via stored procedures
            </summary>
            <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.</param>
            <param name="encryptSerializedState">Set to true if you want the serialized state of this accessor to be encrypted.  
            You must set the Encryptor and Decryptor properties to handle the decryption and encryption.  The <code>extraParameters</code> are not
            encrypted when serialized.</param>
            <param name="getImageByIndexProc">The name of a stored procedure that can get an image by index.  It should
            take an int parameter called "@index" and any other parameters you need, and return the image stream at that index.  
            @index is not a primary key into your table, but instead is a number in range of 0 to count-1, where count is 
            gotten by calling the stored procedure named in the <code>getImageStreamCountProc</code> argument.  If you 
            take any extra parameters (aside from the index), you should specify their values by using the 
            <code>extraParameters</code> argument. The stored procedure should result in a single row dataset where the first
            column is the image.  It can either be an encoded image in a varbinary or image field or 
            a string.  If it is a string it is interpreted as a filename, which will be opened to get to the images.</param>
            <param name="getImageStreamCountProc">The name of a stored procedure that can get the number of image streams.  There 
            are no required parameters.  The stored procedure should result in single row dataset with the count in the first column.  
            If you need any extra parameters, you should specify their values by using the 
            <code>extraParameters</code> argument.</param>
            <param name="getFrameCountByIndexProc">The name of a stored procedure that can get the frame count of an image stream by index.  
            It should take an int parameter called "@index" and any other parameters you need, and return the frame count at that index.  
            @index is not a primary key into your table, but instead is a number in range of 0 to count-1, where count is 
            gotten by calling the stored procedure named in the <code>getImageStreamCountProc</code> argument.  If you 
            take any extra parameters (aside from the index), you should specify their values by using the 
            <code>extraParameters</code> argument. The stored procedure should result in a single row dataset where the first
            column is the frame count.  If you cannot provide this argument, you can pass null, and the frame count will be determined
            by decoding the image stream gotten with the <code>getImageByIndexProc</code>.  Providing this argument can substantially
            speed up viewing of multi-framed images because viewers can know which images are visible without accessing the stream.
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.
            </param>
            <param name="extraParameters">The parameters that are passed to all of your stored procedures.  For SqlCommands, the keys should be strings
            which are the names of the parameters and start with an @.  For OleDbCommands, you must use a IDictionary with sorted keys (e.g. SortedList)
            and use index numbers (starting at 0) as keys.  The parameters are added in the sort order of the keys.
            
            The values can be any object that can be automatically converted
            by the IDbDataParameter for your connection.  The <code>extraParameters</code> are not encrypted when this object is serialized. 
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
            <remarks>Here are some sample stored procedures that would work to get images from an table called images, where the
            data was stored in an field called <code>imageData</code> and the frame count was stored in field called <code>frameCount</code>.
            
            Here is a stored procedure that would meet the specification for the <code>getImageByIndexProc</code>.  
            <code>@startId</code> and <code>@endId</code> are extra parameters
            that would need to be passed in to the constructor.
            
            <code>
            create PROCEDURE GetImageByIndex
            	@index int, @startId int, @endId int
            as
            	set nocount on;
            	with istr as (
            		select id, imagedata, row_number() over (order by id) as rn 
            		from images where id between @startid and @endid
            	) select imageData from istr where rn=(@index+1)
            </code>
            Here is a stored procedure that would meet the specification for the <code>getImageStreamCountProc</code>.  
            <code>@startId</code> and <code>@endId</code> are extra parameters
            that would need to be passed in to the constructor.
            <code>
            create PROCEDURE GetImageStreamCount
            	@startid int, @endid int
            as
            	set nocount on;
            	select count(*) from images where id between @startid and @endid
            </code>
            Here is a stored procedure that would meet the specification for the getImageByIndexProc.  @startId and @endId are extra parameters
            that would need to be passed in to the constructor.
            
            <code>
            create PROCEDURE GetFrameCountByIndex
            	@index int, @startId int, @endId int
            as
            	set nocount on;
            	with istr as (
            		select id, frameCount, row_number() over (order by id) as rn 
            		from images where id between @startid and @endid
            	) select frameCount from istr where rn=(@index+1)
            </code>
            
            Note: the extra parameters must be the same for all stored procedures.
            
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateStoredProcCommand(System.Data.IDbConnection,System.String)">
            <summary>
            Creates a command that can call the given stored procedure.
            </summary>
            <param name="conn">A connection to the database</param>
            <param name="procName">The name of the stored procedure</param>
            <returns>A command that will will the given stored procedure.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetObjectByIndexCommand(System.Data.IDbConnection,System.String,System.Int32)">
            <summary>
            Creates a command that can get an image related database object by calling the stored procedure, passing
            in the given imageStreamIndex.
            </summary>
            <param name="conn">A connection to the database</param>
            <param name="procName">The name of the stored procedure that can get a dataset by index.</param>
            <param name="imageStreamIndex">The index of the image stream (in the range of 0 to the count of images).
            It will be passed into the stored procedure as the first parameter and named <code>@index</code>.</param>
            <returns>A command that can call the stored procedure and pass the index to it.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetImageRowCommand(System.Data.IDbConnection,System.Int32)">
            <summary>
            Creates a command that can get a single row dataset with the image stream information as the first
            column.  It will pass in a parameter named index with the value of <code>imageStreamIndex</code>.
            </summary>
            <param name="conn">A connection to the database.</param>
            <param name="imageStreamIndex">The index of the image stream (in the range of 0 to the count of images).
            It will be passed into the stored procedure as a parameter named index.</param>
            <returns>A command that will return a single row with the image stream information in the first column.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetImageStreamCountCommand(System.Data.IDbConnection)">
            <summary> Creates a command that can get the count of image streams. </summary>
            <returns> A command that will return a single row with the count of image streams in the first column. </returns>
            <param name="conn"> A connection to the database. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetFrameCountCommand(System.Data.IDbConnection,System.Int32)">
            <summary> Creates a command that can get the frame count of an image stream. </summary>
            <returns> A command that will return a single row with the frame count of an image stream in the first column.
            If it returns null, the frame count will be determined by decoding the image. </returns>
            <param name="conn"> A connection to the database. </param>
            <param name="imageStreamIndex"> index of the image stream. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> From ISerializable.  All properties are encrypted if encryptSerializedState was set to true in the
            constructor.
            They are encrypted using the encryptor </summary>
            <param name="info"> The serialization info which contains the serialized data. </param>
            <param name="context"> The serialization context. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Get the data to serialize for this object </summary>
            <param name="info"> The information for this object to serialize </param>
            <param name="context"> The serialization context </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetImageByIndexProc">
            <summary>
            The name of the stored procedure that will be used to access image streams.  It must take 
            a parameter called index and return a single row dataset with the image stream as the first 
            column.  It may also take extra parameters.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetImageStreamCountProc">
            <summary>
            The name of the stored procedure that will be used to access the count of image streams.  It must take 
            return a single row dataset with the image stream as the first 
            column.  It may also take extra parameters.
            <see cref="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.Collections.IDictionary)"/> for an example of a valid stored procedure.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetFrameCountByIndexProc">
            <summary>
            The name of the stored procedure that will be used to access the frame count of an image stream.  It must take 
            a parameter called index and return a single row dataset with the frame count as the first 
            column.  It may also take extra parameters.
            <see cref="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.Collections.IDictionary)"/> for an example of a valid stored procedure.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.DbImageReloader">
            <summary>
            Reloads images that came from a DbImageSource
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageReloader.#ctor(Atalasoft.Imaging.ImageSources.DbImageSource,System.Int32)">
            <summary>
            Create an object that can reload an image on demand.
            </summary>
            <param name="source">The source of the image.</param>
            <param name="index">The index of the image within the source.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageReloader.Reload">
            <summary>
            Reload the image from the source.
            </summary>
            <returns>The image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageReloader.Dispose">
            <summary>
            Disposes any resources required by this object.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource">
            <summary> A DbImageSource is a sub-class of ImageSource that allows you read-only access to images stored in a
            database. </summary>
            <example>
<code lang="CS" title="Using DbImageSource (C#)"><![CDATA[
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using Atalasoft.Imaging;
using Atalasoft.Imaging.ImageSources;
using Atalasoft.Imaging.ImageSources.Data;

public class DbImageSourceExample
{
    // Gets a SQL Server specific connection to the image database
    public static IDbConnection GetConn()
    {
       return new SqlConnection("Data Source=DBServer;Integrated security=SSPI;Initial Catalog=ImageDatabase;");
    }
    
    // create an accessor that uses SQL statements
    public DbCommandImageAccessor CreateSqlImageAccessor()
    {
       Hashtable sqlParams = new Hashtable();
       sqlParams["@lower"] = 2;
       sqlParams["@upper"] = 4;
       return new DbSqlImageAccessor(new GetConnectionCallback(GetConn), false, "imageBlob", "id", "images", "id between 2 and 4", null, null, sqlParams );
    }
    
    // get an image from the database
    public AtalaImage GetImageFromDb(int i)
    { 
       DbImageSource imgSrc = new DbImageSource(CreateSqlImageAccessor());
       return imgSrc[i];
    }
}
]]></code>

<code lang="VB" title="Using DbImageSource (Visual Basic)"><![CDATA[
Imports System.Data
Imports System.Data.SqlClient
Imports System.Collections
Imports Atalasoft.Imaging
Imports Atalasoft.Imaging.ImageSources
Imports Atalasoft.Imaging.ImageSources.Data

Public Class DbImageSourceExample

    ' Gets a SQL Server specific connection to the image database
    Public Shared Function GetConn() As IDbConnection
        Return New SqlConnection("Data Source=DBServer;Integrated security=SSPI;Initial Catalog=ImageDatabase;")
    End Function
    
    ' create an accessor that uses SQL statements
    Public Function CreateSqlImageAccessor() As DbCommandImageAccessor
        Dim sqlParams As New Hashtable()
        sqlParams("@lower") = 2
        sqlParams("@upper") = 4
        Return New DbSqlImageAccessor(New GetConnectionCallback(AddressOf GetConn), False, "imageBlob", "id", "images", "id between 2 and 4", _
        Nothing, Nothing, sqlParams)
    End Function
    
    ' get an image from the database
    Public Function GetImageFromDb(ByVal i As Integer) As AtalaImage
        Dim imgSrc As New DbImageSource(CreateSqlImageAccessor())
        Return imgSrc(i)
    End Function

End Class
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.DbImageSource._dbAccessor">
            <summary> The accessor used to get to the database.  This class supports changing the accessor, but if you change
            anything about the connected accessor, you are responsible for calling Reset() on the image source. </summary>
            <value> The accessor used by this class to get images from the database. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.DbImageSource._doAllFrames">
            <summary> Whether to include all of the frames as individual images in the source. </summary>
            <value> True if each frame is an image in the source.  False if only the first frame is used.  If
            <pre><code>DoAllFrames</code></pre> is false, this class doesn't ever decode images to find the frame count. So,
            if all of the images are known to be single-framed, this class will be much faster if this
            property is set to false. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor(Atalasoft.Imaging.ImageSources.IDbImageAccessor)">
            <summary> Creates a DbImageSource from a IDbImageAccessor implementor. </summary>
            <param name="dbAccessor"> An object that implements IDbImageAccessor and will access the underlying data. </param>
            <overloads> Constructors for DbImageSource </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor(Atalasoft.Imaging.ImageSources.IDbImageAccessor,System.Boolean)">
            <summary> Creates a DbImageSource from a IDbImageAccessor implementor. </summary>
            <param name="dbAccessor"> An object that implements IDbImageAccessor and will access the underlying data. </param>
            <param name="doAllFrames"> True means that the source should source all frames of the image.  If all
            of the images are known to be single framed, passing false will increase performance of this class. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Deserialize this object from the info and context. </summary>
            <param name="info"> The serialization info to use for this object. </param>
            <param name="context"> The serialization context. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Get the data to serialize for this object. </summary>
            <param name="info"> The information for this object to serialize </param>
            <param name="context"> The serialization context </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.CheckIndexInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Throws an index out of range exception index is not in the range: min &lt;= index &lt; max
            </summary>
            <param name="index">The index to check</param>
            <param name="min">The lower bound.  The index must be greater than or equal to this</param>
            <param name="max">The upper bound.  The index must be less than this.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.CalculateNumPagesPerImage">
            <summary> Calculates and caches the number of frames per image and the image count. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetFrameCountForStream(System.IO.Stream)">
            <summary> Gets the frame count for a given stream. </summary>
            <returns> The frame count for a given stream, which is determined by decoding the image. </returns>
            <param name="s"> The stream containing an image </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetFrameCountInImage(System.Int32)">
            <summary> Returns the number of frames in the image that will be served by this image source.  If
            <see cref="P:Atalasoft.Imaging.ImageSources.DbImageSource.DoAllFrames"/> is false, this function always returns 1. </summary>
            <returns> The number of frames in the image </returns>
            <param name="index"> The index of the image </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetImageNumAndFrame(System.Int32,System.Int32@,System.Int32@)">
            <summary> Caclulates the image number and frame number given an image source index. </summary>
            <param name="index"> The index of the image in the image source. </param>
            <param name="imageNum"> The image index in the source that contains this image. </param>
            <param name="frame"> The frame number within the image that contains the image data for the given image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetImage(System.Int32)">
            <summary> Returns the image at the given image source index. </summary>
            <returns> An image at the index. </returns>
            <param name="index"> The index of the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelAcquire(System.Int32)">
            <summary> Acquires the image at the given image source index. </summary>
            <returns> The image at the index wrapped with a reloader, or null if there is no image at that index. </returns>
            <param name="index"> The index within the image source </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelAcquireNextImage">
            <summary> Acquire the next image in the source. </summary>
            <returns> The next image in the source wrapped with a reloader. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelDispose">
            <summary> Disposes any non-GC objects used by this class. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelFlushOnReset">
            <summary> Returns true to indicate that a Reset() should flush all images </summary>
            <returns> true always </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelHasMoreImages">
            <summary> Returns true if AcquireNext would return an image </summary>
            <returns> true if AcquireNext would return an image </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelReset">
            <summary> Empties any cached data about the images </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelSkipNextImage">
            <summary> Increments the internal index so that AcquireNext would skip an image </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelTotalImages">
            <summary> The total number of images in the image source </summary>
            <returns> The total number of images in the image source </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)">
            <summary> Not implemented for this image source.  Will throw NotImplementedException. </summary>
            <param name="node"> ignored </param>
            <param name="newImage"> ignored </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetImageStream(System.Int32)">
            <summary> Gets the stream and the frame within that stream that corresponds to the passed in index. The caller is
            responsible for closing the returned stream. </summary>
            <param name="index"> The index of the requested image </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.DbImageSource.DoAllFrames">
            <summary> Whether to include all of the frames as individual images in the source. </summary>
            <value> True if each frame is an image in the source.  False if only the first frame is used.  If
            DoAllFrames is false, this class doesn't ever decode images to find the frame count. So,
            if all of the images are known to be single-framed, this class will be much faster if this
            property is set to false. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.DbImageSource.DbAccessor">
            <summary> The accessor used to get to the database.  This class supports changing the accessor, but if you change
            anything about the connected accessor, you are responsible for calling Reset() on the image source. </summary>
            <value> The accessor used by this class to get images from the database. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource.FrameCounter">
            <summary>
            A delegate to help count frames in a Stream
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource.Encryptor">
            <summary>
            A delegate to encrypt a string (for use with connection string serialization)
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource.Decryptor">
            <summary>
            A delegate to decrypt data back into a string (for use with connection string serialization)
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo">
            <summary> Objects of this type are returned by IImageStreamSource.GetImageStream(int index). They contain a stream
            that has the requested image and the frame within that stream that maps to the image index that was requested.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo._imageStream">
            <summary> The stream that contains the requested image </summary>
            <value> The stream that contains the requested image </value>
        </member>
        <member name="F:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo._frame">
            <summary> The frame within the ImageStream that maps to the image index originally requested </summary>
            <value> The frame within the ImageStream that maps to the index that was originally requested from the ImageSource
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo.#ctor(System.IO.Stream,System.Int32)">
            <summary> Creates the object from a stream and frame. The stream contains the requested image and the frame maps the
            requested index to the frame within this stream. </summary>
            <param name="imageStream"> The stream that contains the requested image </param>
            <param name="frame"> The frame within this stream that maps to the image index that was requested from the
            ImageSource </param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo.ImageStream">
            <summary> The stream that contains the requested image </summary>
            <value> The stream that contains the requested image </value>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo.Frame">
            <summary> The frame within the ImageStream that maps to the image index originally requested </summary>
            <value> The frame within the ImageStream that maps to the index that was originally requested from the ImageSource
            </value>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.MergedImageSource">
            <summary> MergedImageSource is a variety of RandomAccessImageSource that can combine any number of other
            RandomAccessImageSource objects. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.#ctor(Atalasoft.Imaging.RandomAccessImageSource[])">
            <summary> Constructs a new MergedImageSource object from zero or more supplied RandomAccessImageSource objects
            </summary>
            <remarks> Each RandomAccessImageSource provided must be unique.  Passing in the same RandomAccessImageSource twice
            is an error. </remarks>
            <overloads>
            <example>
<code lang="CS"><![CDATA[
public RandomAccessImageSource Merge(RandomAccessImageSource a, RandomAccessImageSource b)
{
    return new MergedImageSource(a, b);
}
]]></code>
</example>
            </overloads>
            <param name="imageSources"> A collection of RandomAccessImageSources to be combined. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelAcquire(System.Int32)">
            <summary>
            Performs an acquire of an indexed image.
            </summary>
            <param name="index">The index of the image to acquire.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelAcquireNextImage">
            <summary>
            Lows level implementation to acquire next image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelDispose">
            <summary>
            Lows level implementation to dispose the ImageSource.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelFlushOnReset">
            <summary>
            Lows level implementation to determine if there should be a flush on reset.
            </summary>
            <returns>
              <c>true</c> if the ImageSource needs a flush on reset, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelHasMoreImages">
            <summary>
            Lows level implementation to determine if the ImageSource has more images.
            </summary>
            <returns>
              <c>true</c> if there are more image, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelReset">
            <summary>
            Lows level implementation of reset.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelSkipNextImage">
            <summary>
            Lows level implementation to skip next image.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelTotalImages">
            <summary>
            Lows level implementation that returns the total number of images.
            </summary>
            <returns>
            the total number of images
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Deserialize this object from the info and context. </summary>
            <param name="info"> The serialization info to use for this object. </param>
            <param name="context"> The serialization context. </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data to be serialized
            </summary>
            <param name="info"> The information for this object to serialize </param>
            <param name="context"> The serialization context </param>
        </member>
        <member name="T:Atalasoft.Imaging.IndirectionImageSource">
            <summary> The <STRONG>IndirectionImageSource</STRONG> class is used to provide an <see cref="T:Atalasoft.Imaging.ImageSource"/> which
            can be modified after its initial creation.  The ThumbnailImageViewerSynchronizer uses this class to
            handle changes to the original <STRONG>ImageSource</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.IndirectionImageSource._retainInMemory">
            <summary> Gets or sets a value indicating whether the images should remain in memory once read. </summary>
            <value> A value indicating if the images should remain in memory. </value>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.#ctor(Atalasoft.Imaging.RandomAccessImageSource)">
            <summary> Creates a new instance of <STRONG>IndirectionImageSource</STRONG> specifying the initial <see cref="T:Atalasoft.Imaging.RandomAccessImageSource"/> to use. </summary>
            <param name="imageSource"> The initial <see cref="T:Atalasoft.Imaging.RandomAccessImageSource"/> to use. </param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add(System.String,System.Int32)">
            <summary> Adds an image to the end of the image source from a filename. </summary>
            <exception> Thrown if the filename is null (Nothing in VB) or empty. </exception>
            <exception> Thrown if the file is not found. </exception>
            <param name="fileName"> The filename of the image to add. </param>
            <param name="frameIndex"> The frame index to add.  If this value is -1, all pages will be added to the image source.</param>
            <overloads> Adds an image to the image source. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add(System.IO.Stream,System.Int32)">
            <summary> Adds an image to the end of the image source from a stream. </summary>
            <exception> Thrown if the stream is null (Nothing in VB). </exception>
            <param name="stream"> The stream containing the image. </param>
            <param name="frameIndex"> The frame index to add.  If this value is -1, all pages will be added to the image source.
            </param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add(Atalasoft.Imaging.AtalaImage)">
            <summary> Adds an <see cref="T:Atalasoft.Imaging.AtalaImage"/> to the end of the image source. </summary>
            <exception> Thrown if the image is null (Nothing in VB). </exception>
            <param name="image"> The image to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert(System.Int32,Atalasoft.Imaging.IndirectionImageInformation)">
            <overloads> Adds or inserts one or more images into the <STRONG>IndirectionImageSource</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert(System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary>
            Inserts the image at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="image">The image.</param>
            <exception cref="T:System.ArgumentNullException">image</exception>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert(System.Int32,System.String,System.Int32)">
            <summary> Adds or inserts one or more images from a file. </summary>
            <exception> Thrown if the fileName argument is null. </exception>
            <exception> Thrown if the fileName is invalid. </exception>
            <param name="index"> The index where the image should be inserted or -1 to add the image to the end of the
            collection. </param>
            <param name="fileName"> The full path and filename of the image to insert. </param>
            <param name="frameIndex"> The frame index to insert or -1 to insert all pages of a multipage document. </param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert(System.Int32,System.IO.Stream,System.Int32)">
            <summary> Adds or inserts one or more images from a stream. </summary>
            <exception> Thrown if the stream argument is null (Nothing in VB). </exception>
            <param name="index"> The index where the image should be inserted or -1 to add the image to the end of the
            collection. </param>
            <param name="stream"> <para>A stream containing the image(s).  This stream must be seekable.</para> </param>
            <param name="frameIndex"> The frame index to insert or -1 to insert all pages of a multipage document. </param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.RemoveAt(System.Int32)">
            <summary> Removes an image from the <STRONG>IndirectionImageSource</STRONG> at the specified index. </summary>
            <exception> Thrown if the index argument is invalid for this IndirectionImageSource. </exception>
            <param name="index"> The index of the item to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.ReorderIndex(System.Int32,System.Int32)">
            <summary> Moves one item to a different position within the <STRONG>IndirectionImageSource</STRONG>. </summary>
            <exception> Thrown if the currentIndex or newIndex values are invalid for this IndirectionImageSource. </exception>
            <param name="currentIndex"> The index of the item to move. </param>
            <param name="newIndex"> The new index for the item. </param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Clear">
            <summary> Removes all items from the image source. </summary>
            <remarks> This does not modify the original <STRONG>ImageSource</STRONG> provided in the
            <STRONG>IndirectionImageSource</STRONG> constructor. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.ReAcquire(System.Int32)">
            <summary>
            Acquire a previous image by index.
            </summary>
            <param name="index">The index of the image to re-acquire.</param>
            <returns>
            The acquired image or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if the image was not
            previously acquired.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.OnReleasing(Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs)">
            <summary>
            Called when <see cref="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)"/> was performed on an <see cref="T:Atalasoft.Imaging.ImageSourceNode"/>.
            </summary>
            <param name="e">A <see cref="T:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs"/> containing the node that was released.</param>
            <remarks>
            This method will raise the <see cref="E:Atalasoft.Imaging.ImageSource.Releasing"/> event.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.OnNodeIndexSet(Atalasoft.Imaging.ImageSourceNode)">
            <summary> Called when the index of a node is modified. </summary>
            <param name="node"> The node being modified. </param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelAcquire(System.Int32)">
            <summary>
            Performs an acquire of an indexed image.
            </summary>
            <param name="index">The index of the image to acquire.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index;Invalid index for this image source.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelAcquireNextImage">
            <summary>
            Lows level implementation to acquire next image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelDispose">
            <summary>
            Lows level implementation to dispose the ImageSource.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelHasMoreImages">
            <summary>
            Lows level implementation to determine if the ImageSource has more images.
            </summary>
            <returns>
              <c>true</c> if there are more image, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)">
            <summary>
            Lows level implementation to replace an image.
            </summary>
            <param name="node">The node.</param>
            <param name="newImage">The new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelFlushOnReset">
            <summary>
            Lows level implementation to determine if there should be a flush on reset.
            </summary>
            <returns>
              <c>true</c> if the ImageSource needs a flush on reset, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelReset">
            <summary>
            Lows level implementation of reset.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelSkipNextImage">
            <summary>
            Lows level implementation to skip next image.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelTotalImages">
            <summary>
            Lows level implementation that returns the total number of images.
            </summary>
            <returns>
            the total number of images
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.IndirectionImageSource.RetainInMemory">
            <summary> Gets or sets a value indicating whether the images should remain in memory once read. </summary>
            <value> A value indicating if the images should remain in memory. </value>
        </member>
        <member name="T:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase">
            <summary> <para>A base <STRONG>abstract</STRONG> (<STRONG>MustInherit</STRONG> in Visual Basic)
            collection class intended for strongly typed read-only collections containing unmanaged data.</para> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.GetEnumerator">
            <summary> Returns a reference to an <B>IEnumerator</B> interface, whose purpose is to grant access to an
            enumeration's items. </summary>
            <returns> A reference to an <STRONG>IEnumerator</STRONG> interface. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary> Copies the collection items into an array. </summary>
            <param name="array"> The array that will hold the collection items. </param>
            <param name="index"> The index in the array where the copies will start. </param>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.InnerList">
            <summary> Gets the <STRONG>ArrayList</STRONG> stored within the collection. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.Count">
            <summary> The number of items in the collection. </summary>
            <value> The number of items in the collection. </value>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.IsSynchronized">
            <summary> <para>Gets a value indicating whether access to the collection is synchronized (thread-safe).</para>
            </summary>
            <value> A value indicating whether access to the collection is synchronized. </value>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.SyncRoot">
            <summary> <para>Gets an object that can be used to synchronize access to the collection.</para> </summary>
            <value> <para>An object that can be used to synchronize access to the collection.</para> </value>
        </member>
        <member name="T:Atalasoft.Imaging.MarshalByRefCollectionBase">
            <summary> <para>A base <STRONG>abstract</STRONG> (<STRONG>MustInherit</STRONG> in Visual Basic) collection class
            intended for strongly typed collections containing unmanaged data.</para> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.Clear">
            <summary> Clears the collection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.GetEnumerator">
            <summary> Returns a reference to an <B>IEnumerator</B> interface, whose purpose is to grant access to an
            enumeration's items. </summary>
            <remarks> When <STRONG>GetEnumerator</STRONG> is called, it constructs an
            enumerator object containing the current version number in the collection and a reference to the collection's items.
            Every time the enumerator is accessed, it compares the version of the enumerator with the version of the collection.
            If the versions do not match, it means that the collection has changed; an exception then occurs. </remarks>
            <returns> A reference to an <STRONG>IEnumerator</STRONG> interface. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary> Copies the collection items into an array. </summary>
            <param name="array"> The array that will hold the collection items. </param>
            <param name="index"> The index in the array where the copies will start. </param>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.InnerList">
            <summary> Gets the <STRONG>ArrayList</STRONG> stored within the collection. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.Count">
            <summary> Gets the number of items in the collection. </summary>
            <value> The number of items in the collection. </value>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.IsSynchronized">
            <summary> <para>Gets a value indicating whether access to the collection is synchronized (thread-safe).</para>
            </summary>
            <value> A value indicating whether access to the collection is synchronized. </value>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.SyncRoot">
            <summary> <para>Gets an object that can be used to synchronize access to the collection.</para> </summary>
            <value> <para>An object that can be used to synchronize access to the collection.</para> </value>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.BitmapPixelMemory">
            <summary> This is a concrete implementation of PixelMemory implemented using a Bitmap object as the owner of the
            memory. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemory">
            <summary> PixelMemory is an abstract class that defines how an image's pixels are represented in memory, how they
            are allocated, deallocated, and accessed. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.PixelMemory._lock">
            <summary> Locks the pixel memory object. </summary>
            <remarks> In a sequence of calls to Lock, the memory will only actually be locked on the first call.  Every call to
            Lock should be balanced with a call to Unlock.  When the PixelMemory is disposed, all pending locks will be
            released.  Client code is encouraged to use the <see cref="T:Atalasoft.Imaging.Memory.PixelMemoryLocker"/> object to make lock management
            easier. </remarks>
            <example>
<code lang="CS"><![CDATA[
try {
    memory.Lock();
    PerformDirectMemoryAccess(memory);
}
finally {
    memory.Unlock();
}
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.PixelMemory._disposed">
            <summary> Indicates whether or the PixelMemory has been disposed. </summary>
            <value> Returns true if the PixelMemory has been disposed and is no longer valid. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Dispose">
            <summary> Disposes this PixelMemory and all its managed and unmanaged resources. </summary>
            <overloads> Disposes this PixelMemory and all its managed and unmanaged resources. </overloads>
            <remarks> When you dispose a PixelMemory objects, all of its PixelAccessor objects will become invalid. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Dispose(System.Boolean)">
            <summary> Disposes this PixelMemory and all its managed and unmanaged resources. </summary>
            <param name="disposing"> If disposing is true, PixelMemory will dispose its managed resources and its unmanaged
            resources.  If disposing is false, PixelMemory will dispose only its unmanaged resources. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.Memory.PixelMemory"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.DisposeManagedResources">
            <summary> Disposes any unmanaged resources that implement IDisposable </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.DisposeUnmanagedResources">
            <summary> Disposes and unmanaged resources, such as memory not claimed by the garbage collector. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.AcquirePixelAccessor">
            <summary> Returns an object that inherits from PixelAccessor that is used to get to an image's pixel data.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Lock">
            <summary>
            Locks this instance of PixelMemory. For memory objects that are movable, this will prevent
            the PixelMemory from moving. Client code rarely needs to use this method.
            </summary>
            <exception cref="T:Atalasoft.Imaging.PixelMemoryException">Attempt to lock PixelMemory during dispose.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Unlock">
            <overloads>
            <example>
<code lang="CS"><![CDATA[
try {
    memory.Lock();
    PerformDirectMemoryAccess(memory);
}
finally {
    memory.Unlock();
}
]]></code>
</example>
            </overloads>
            <remarks> In a sequence of calls to Unlock, the memory will only actually be unlocked when all locks have been
            released.  Every call to Lock should be balanced with a call to Unlock.  When the PixelMemory is disposed, all
            pending locks will be released.  Client code is encouraged to use the <see cref="T:Atalasoft.Imaging.Memory.PixelMemoryLocker"/> object to make
            lock management easier. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLGetHeight">
            <summary> Subclasses of PixelMemory implement this method to return the height of the image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLGetRowStride">
            <summary> Subclasses of PixelMemory implement this method to return the number of bytes necessary for a row of
            pixels.  This number should be rounded up to the next multiple of 4 bytes. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLGetPixelAccessor">
            <summary> Subclasses of PixelMemory implement this method to return a new PixelAccessor object suitable for their
            particular version of PixelMemory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLClone">
            <summary> Subclasses of PixelMemory implement this method to create a deep copy of the object. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLLock">
            <summary> Subclasses of PixelMemory implement this method to lock the memory. </summary>
            <remarks> LLLock is called by Lock only when it is necessary to actually lock the memory.  Lock manages both thread
            safety as well as accumulation of locks.  For any number of calls to Lock without a call to Unlock, there will be
            precisely one call to LLLock.  It is also guaranteed that LLLock can only be called by one thread at a time.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLUnlock">
            <summary> Subclasses of PixelMemory implement this method to unlock the memory. </summary>
            <remarks> LLUnlock is called by Unlock only when it is necessary to actually unlock the memory.  Unlock manages both
            thread safety as well as accumulation of locks.  For any number of calls to Unlock, there will be precisely one call
            to LLUnlock when there are no further lock requests.  It is also guaranteed that LLUnlock can only be called by one
            thread at a time. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Clone">
            <summary> Creates a deep copy of this image and its memory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.PointerSum(System.IntPtr,System.Int32)">
            <summary>
            Returns an IntPtr that is offset by the provided amount.
            </summary>
            <param name="p">An IntPtr</param>
            <param name="offset">An offset in bytes to add to the pointer</param>
            <returns>An IntPtr that has been offset by the provided amount.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.PixelDataFromPixelMemory(Atalasoft.Imaging.Memory.PixelMemory)">
            <summary> Returns an IntPtr to the first scanline of an image if this version of PixelMemory supports that
            operation, IntPtr.Zero is returned otherwise. </summary>
            <param name="pm"> A pixel memory object. </param>
            <overloads> Returns an IntPtr to the first scanline of an image if this version of PixelMemory supports that
            operation, IntPtr.Zero is returned otherwise. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.PixelDataFromPixelMemory(Atalasoft.Imaging.AtalaImage)">
            <summary> Returns an IntPtr to the first scanline of an image if this version of PixelMemory supports that
            operation, IntPtr.Zero is returned otherwise. </summary>
            <param name="image"> An AtalaImage object. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.ThrowOnNonContiguous(Atalasoft.Imaging.Memory.PixelMemory)">
            <summary> This is a utility method to throw an exception if a PixelMemory object is not represented by a single
            contiguous block of memory. </summary>
            <param name="pm"> A pixel memory object. </param>
            <overloads> This is a utility method to throw an exception if a PixelMemory object is not represented by a single
            contiguous block of memory. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.ThrowOnNonContiguous(Atalasoft.Imaging.AtalaImage)">
            <summary> This is a utility method to throw an exception if a PixelMemory object is not represented by a single
            contiguous block of memory. </summary>
            <param name="image"> An AtalaImage object. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemory.Disposed">
            <summary> Indicates whether or the PixelMemory has been disposed. </summary>
            <value> Returns true if the PixelMemory has been disposed and is no longer valid. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemory.IsLocked">
            <summary> Indicates whether or not the PixelMemory is currently locked. </summary>
            <example>
<code lang="CS"><![CDATA[
if (!memory.IsLocked) {
    throw new ArgumentException("memory needs to be locked", "memory");
}
]]></code>
</example>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemory.Height">
            <summary> Returns the height of the image represented. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemory.RowStride">
            <summary> Returns the number of bytes in a row of this image.  The number is always rounded up to the next multiple
            of 4. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.IDirectScanlineAccess">
            <summary> This interface is used for defining flavors of PixelMemory that allow direct access to scanlines.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.IDirectScanlineAccess.GetScanLinePtr(System.Int32)">
            <summary> Returns an IntPtr to the ith scanline in an image. </summary>
            <returns> An IntPtr which points to the first byte in the scanline. </returns>
            <param name="i"> The index of the scanline. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.IDirectScanlineAccess.IsContiguous">
            <summary> Indicates whether or not the PixelMemory is contiguous in memory. </summary>
            <value> True is the PixelMemory is contiguous, false otherwise. </value>
            <remarks> If a PixelMemory object implements IDirectScanlineAccess and IsContiguous is true, then it is safe to
            assume that any part of an image can be addressed by using a pointer to the 0th scanline and the images RowStride to
            calculate the address. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.#ctor(System.Drawing.Bitmap)">
            <summary> Constructs a new BitmapPixelMemory object from the Bbitmap supplied. </summary>
            <remarks> After constructing a BitmapPixelMemory object, the Bitmap is controlled solely by BitmapPixelMemory.  If
            the BitmapPixelMemory object is disposed or garbage-collected, then the Bitmap will also be disposed. </remarks>
            <param name="bm"> A non-null Bitmap object. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.DisposeManagedResources">
            <summary> Disposes any memory associated with this PixelMemory object, including the Bitmap. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.DisposeUnmanagedResources">
            <summary> Disposes any unmanaged resources associated with this object. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLClone">
            <summary> Subclasses implement this method to make a deep copy of this PixelAccessor. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLGetHeight">
            <summary> Returns the height of the image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLGetRowStride">
            <summary> Returns the size of a row in bytes, rounded up to the next multiple of 4. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLGetPixelAccessor">
            <summary> Constructs a PixelAccessor appropriate for BitmapPixelMemory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.GetScanLinePtr(System.Int32)">
            <summary> Gets a pointer to a scanline for this object. </summary>
            <remarks> Will throw if the index is not within the boundary of the image. </remarks>
            <param name="i"> An index to a scanline in the image. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.BitmapPixelMemory.IsContiguous">
            <summary> Returns true. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelAccessor">
            <summary> This is an abstract object that is used to get direct access to the pixels of an image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.PixelAccessor._valid">
            <summary> Returns true if this PixelAccessor is still valid. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.PixelAccessor._ownerValid">
            <summary> Indicates whether or not the PixelMemory which created this PixelAccessor is still valid. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.PixelAccessor._owner">
            <summary> Returns the PixelMemory object that created this PixelAccessor. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.#ctor(Atalasoft.Imaging.Memory.PixelMemory)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.PixelAccessor"/> class attached to the given owner.
            </summary>
            <param name="owner">The owner of the PixelAccessor.</param>
            <exception cref="T:System.ArgumentNullException">owner;PixelAccessor needs a valid owner</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Release">
            <summary> Releases a PixelAccessor back to the PixelMemory object that owns it. </summary>
            <remarks> Any attempt to use a PixelAccessor after it has been released should result in a throw. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Reset">
            <summary> Resets the pixel accessor so that AcquireNextScanline will acquire the first scanline in the image.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.AcquireNextScanline">
            <summary> Acquires the next scanline in sequence for this image. </summary>
            <returns> Returns an array of bytes or null if the next scanline would be outside the image's bounds. </returns>
            <remarks> For the sake of efficiency many implementations of PixelAccessor may return the same byte array, but with
            different contents.  If you need to keep the data from a previously acquired scanline, you should use multiple
            PixelAccessor objects or explicitly copy the data in the array. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.AcquirePreviousScanline">
            <summary> Acquires the previous scanline in the image. </summary>
            <remarks> For the sake of efficiency many implementations of PixelAccessor may return the same byte array, but with
            different contents.  If you need to keep the data from a previously acquired scanline, you should use multiple
            PixelAccessor objects or explicitly copy the data in the array. </remarks>
            <returns> Returns an array of bytes or null if the previous scanline would be outside the image's bounds. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.AcquireScanline(System.Int32)">
            <summary> Aquires a scanline of data for accessing. </summary>
            <returns> An array of bytes representing the data in the scanline. </returns>
            <remarks> <para>This method will throw an exception if i is in within the image boundary.</para>
            <para>For the sake of efficiency many implementations of PixelAccessor may return the same byte array, but with
            different contents.  If you need to keep the data from a previously acquired scanline, you should use multiple
            PixelAccessor objects or explicitly copy the data in the array.</para> </remarks>
            <param name="index"> The index of the scanline. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.WriteToScanline(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to scanline.
            </summary>
            <param name="y">The y.</param>
            <param name="destIndex">Index of the dest.</param>
            <param name="data">The data.</param>
            <param name="dataIndex">Index of the data.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            y;scanline index must be within image bounds
            or
            bytesToRead
            or
            destIndex
            or
            dataIndex
            or
            destIndex;Writing  + bytesToWrite +  bytes would exceed the row stride.
            or
            dataIndex;Writing  + bytesToWrite +  bytes would exceed the capacity of data[].
            </exception>
            <exception cref="T:Atalasoft.Imaging.PixelMemoryException">
            low-level accessor failed to read scanline.
            or
            low-level accessor returned null on acquire.
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.WriteColumn(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the column.
            </summary>
            <param name="destIndex">Index of the dest.</param>
            <param name="data">The data.</param>
            <param name="dataIndex">Index of the data.</param>
            <param name="bytesToWritePerRow">The bytes to write per row.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.WriteColumnSection(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the column section.
            </summary>
            <param name="startY">The start y.</param>
            <param name="height">The height.</param>
            <param name="destIndex">Index of the dest.</param>
            <param name="data">The data.</param>
            <param name="dataIndex">Index of the data.</param>
            <param name="bytesToWritePerRow">The bytes to write per row.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            y;scanline index must be within image bounds
            or
            height;scanline index must be within image bounds
            or
            bytesToWritePerRow
            or
            srcIndex
            or
            dataIndex
            or
            srcIndex;Writing  + bytesToWritePerRow +  bytes would exceed the row stride.
            or
            dataIndex;Writing  + (bytesToWritePerRow * height) +  bytes would exceed the capacity of data[].
            </exception>
            <exception cref="T:Atalasoft.Imaging.PixelMemoryException">
            low-level accessor failed to read scanline.
            or
            low-level accessor returned null on acquire.
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyColumn(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the read only column.
            </summary>
            <param name="srcIndex">Index of the source.</param>
            <param name="data">The data.</param>
            <param name="dataIndex">Index of the data.</param>
            <param name="bytesToReadPerRow">The bytes to read per row.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyColumnSection(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the read only column section.
            </summary>
            <param name="startY">The start y.</param>
            <param name="height">The height.</param>
            <param name="srcIndex">Index of the source.</param>
            <param name="data">The data.</param>
            <param name="dataIndex">Index of the data.</param>
            <param name="bytesToReadPerRow">The bytes to read per row.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            y;scanline index must be within image bounds
            or
            height;scanline index must be within image bounds
            or
            bytesToRead
            or
            srcIndex
            or
            dataIndex
            or
            srcIndex;Reading  + bytesToReadPerRow +  bytes would exceed the row stride.
            or
            dataIndex;Reading  + (bytesToReadPerRow * height) +  bytes would exceed the capacity of data[].
            </exception>
            <exception cref="T:Atalasoft.Imaging.PixelMemoryException">
            low-level accessor failed to read scanline.
            or
            low-level accessor returned null on acquire.
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyScanlineSection(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the read only scanline section.
            </summary>
            <param name="y">The y.</param>
            <param name="srcIndex">Index of the source.</param>
            <param name="data">The data.</param>
            <param name="dataIndex">Index of the data.</param>
            <param name="bytesToRead">The bytes to read.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            y;scanline index must be within image bounds
            or
            bytesToRead
            or
            srcIndex
            or
            dataIndex
            or
            srcIndex;Reading  + bytesToRead +  bytes would exceed the row stride.
            or
            dataIndex;Reading  + bytesToRead +  bytes would exceed the capacity of data[].
            </exception>
            <exception cref="T:Atalasoft.Imaging.PixelMemoryException">
            low-level accessor failed to read scanline.
            or
            low-level accessor returned null on acquire.
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyScanline(System.Int32,System.Byte[])">
            <summary> Copies the contents of a scanline into the supplied array </summary>
            <param name="index"> The scanline to get. </param>
            <param name="data"> An array of bytes to hold the scanline.  This array must be at least as long the image's
            RowStride. </param>
            <overloads> Gets the contents of a scanline in a manner that only requires reading the data. </overloads>
            <remarks> AcquireScanline implies that data read will be written back to the image upon release. 
            GetReadOnlyScanline does not require a release, thus the data will not ever be written back to the scanline.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyScanline(System.Int32)">
            <summary> Gets the contents of a scanline, allocating memory for the data. </summary>
            <param name="index"> The index of the scanline to get. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.MarshalCopy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            This exists only because when running managed code in the Sharepoint Sandbox if the method contains the call to 
            Marshall.Copy() a security exception is thrown. So we pulled it out into its own method which passes the security check.
            In managed environment the code is never executed but the security exception was still being thrown.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.MarshalCopy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            This exists only because when running managed code in the Sharepoint Sandbox if the method contains the call to 
            Marshall.Copy() a security exception is thrown. So we pulled it out into its own method which passes the security check.
            In managed environment the code is never executed but the security exception was still being thrown.
            </summary>
            <param name="source"></param>
            <param name="offset"></param>
            <param name="dest"></param>
            <param name="length"></param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.ReleaseScanline">
            <summary> Releases the last scanline acquired. </summary>
            <remarks> If no scanline was previously acquired, this will do nothing. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.NotifyAccessorReleasing">
            <summary> This method is called when a PixelAccessor is about to be released. </summary>
            <remarks> The default implementation does nothing. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.NotifyAccessorReleased">
            <summary> This method is called whenever an accessor has been released. </summary>
            <remarks> The default implementation does nothing. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.LLAcquireScanline(System.Int32)">
            <summary> Subclasses of PixelAccessor implement this method to acquire a pointer to a scanline. </summary>
            <remarks> The index will always be in the correct range for this object. </remarks>
            <param name="index"> The index of the scanline to access. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.LLReleaseScanline(System.Int32,System.IntPtr)">
            <summary> Subclasses of PixelAccessor implement this method to release a previously acquired scanline </summary>
            <remarks> The index will always be in a correct range for this image. </remarks>
            <param name="index"> The index of the scanline to release. </param>
            <param name="p"> A pointer to the scanline, returned by a previous call to AcquireScaline, AcquireNextScanline, or
            AcquirePreviousScanline. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Dispose">
            <summary> Disposes this PixelAccessor and all its managed and unmanaged resources. </summary>
            <overloads> Disposes any resources needed by this PixelAccessor. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Dispose(System.Boolean)">
            <summary> Disposes this PixelAccessor and all its managed and unmanaged resources. </summary>
            <param name="disposing"> If disposing is true, PixelAccessor will dispose its managed resources and its unmanaged
            resources.  If disposing is false, PixelMemory will dispose only its unmanaged resources. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.DisposeManagedResources">
            <summary> Disposed any managed objects that implement IDisposable </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.DisposeUnmanagedResources">
            <summary> Disposes any unmanaged resources such as memory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.Memory.PixelAccessor"/> class.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.Height">
            <summary> Returns the height of the image in scanlines. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.RowStride">
            <summary> The number of bytes contained in a scanline, rounded up to the next multiple of 4. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.Valid">
            <summary> Returns true if this PixelAccessor is still valid. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.OwnerValid">
            <summary> Indicates whether or not the PixelMemory which created this PixelAccessor is still valid. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.Owner">
            <summary> Returns the PixelMemory object that created this PixelAccessor. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.ResidentPixelMemory">
            <summary> This is a class used to represent PixelMemory that is resident and for which allocation and deallocation
            are controlled. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.#ctor(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.ResidentPixelMemory"/> class.
            </summary>
            <param name="sizeInBytes">The total size in bytes for the image.</param>
            <param name="height">The height of the image.</param>
            <param name="rowStride">The row stride of the image.</param>
            <param name="offsetToFirstScanline">The offset in bytes to first scanline from the start of the image data.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offsetToFirstScanline;offset must be greater than or equal to zero
            or
            height;height must be greater than 0.
            or
            height;rowStride must be greater than 0.
            </exception>
            <exception cref="T:System.ArgumentException">offsetToFirstScanline;Offset to first scanline must be a multiple of 4</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.ResidentPixelMemory"/> class, total size in bytes is calculated
            by multiplying height and rowString and adding offsetToFirstScanline.
            </summary>
            <param name="height">The height.</param>
            <param name="rowStride">The row stride.</param>
            <param name="offsetToFirstScanline">The offset to first scanline.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.GetScanLinePtr(System.Int32)">
            <summary> Gets a pointer to the a given scanline. </summary>
            <remarks> Throws an ArgumentOutOfRangeException if the index is not within the image boundary. </remarks>
            <param name="index"> An index to a scanline in an image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.RerportMemoryAllocated(System.IntPtr,System.Int64)">
            <summary>
            Rerports that memory was allocated.
            </summary>
            <param name="p">The p.</param>
            <param name="numBytes">The number bytes.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.AllocateMemory(System.Int64,System.Boolean)">
            <summary> Allocates memory for this PixelMemory object and reports it for tracking. </summary>
            <remarks> Subclasses of ResidentPixelMemory do not need to be concerned with tracking memory through
            PixelMemoryTracker if it is allocated in a single block.  AllocateMemory automatically tracks it. </remarks>
            <param name="numBytes"> The nubmer of bytes to allocate. </param>
            <param name="zeroMemory"> Indicates whether or not the memory should be cleared. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.FreeMemory">
            <remarks> Subclasses of ResidentPixelMemory do not need to be concerned with tracking memory through
            PixelMemoryTracker if it is allocated in a single block. </remarks>
            <summary> Frees memory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.DisposeManagedResources">
            <summary> Disposes any unmanaged resources. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.DisposeUnmanagedResources">
            <summary> Disposes the memory used by this object. </summary>
            <remarks> Subclasses of ResidentPixelMemory do not need to be concerned with tracking memory through
            PixelMemoryTracker if it is allocated in a single block.  DisposeUnmanagedResources automatically tracks it.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLGetHeight">
            <summary> Returns the height of the image. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLGetRowStride">
            <summary> Returns the size of a scanline in bytes, rounded up to the next multiple of 4. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLGetPixelAccessor">
            <summary> Returns a suitable PixelAccesor object for this PixelMemory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLAllocateMemory(System.Int32,System.Boolean)">
            <summary> Subclasses of ResidentPixelMemory implement this method to allocate memory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLAllocateMemory(System.Int64,System.Boolean)">
            <summary> Subclasses of ResidentPixelMemory implement this method to allocate memory. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLFreeMemory(System.IntPtr)">
            <summary> Subclasses of ResidentPixelMemory implement this method to free memory. </summary>
            <param name="p"> The pointer to free. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLPixelMemoryStart">
            <summary> Returns a pointer to the start of memory. </summary>
            <remarks> This pointer may not be a pointer to the first scanline. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.PixelData">
            <summary> Returns a pointer to the first scanline in the image. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.IsContiguous">
            <summary> Returns true. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.SizeInBytes">
            <summary> Returns the number of bytes used by the memory for this image. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.OffsetToFirstScanline">
            <summary> Returns an offset to the first scanline of the image. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.MemoryUseEventArgs">
            <summary> This class is used by all memory handling events. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.MemoryUseEventArgs._memoryInUse">
            <summary> The current amount of memory in use. </summary>
            <remarks> This is the amount of memory in use when the event was fired.  The total memory in use may be different by
            the time the event is handled. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.MemoryUseEventArgs._highWaterMark">
            <summary> The current high water mark for reporting high memory usage. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.MemoryUseEventArgs._change">
            <summary> The last change in memory - this is positive for increases and negative for decreases. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.MemoryUseEventArgs.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary> Constructs a new MemoryUseEventArgs object. </summary>
            <param name="memoryInUse"> The current amount of memory in use. </param>
            <param name="highWatermark"> The current high water mark for reporting high memory usage. </param>
            <param name="change"> The last change in memory - this is positive for increases and negative for decreases.
            </param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.MemoryUseEventArgs.MemoryInUse">
            <summary> The current amount of memory in use. </summary>
            <remarks> This is the amount of memory in use when the event was fired.  The total memory in use may be different by
            the time the event is handled. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.MemoryUseEventArgs.HighWatermark">
            <summary> The current high water mark for reporting high memory usage. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.MemoryUseEventArgs.Change">
            <summary> The last change in memory - this is positive for increases and negative for decreases. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.MemoryUseEventHandler">
            <summary> This delegate defines the type that is used for all PixelMemoryTracker events. </summary>
            <param name="sender"> The object raising the event. </param>
            <param name="e"> A MemoryUseEventArgs object indicating the change in memory. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory">
            <summary> Represents a PixelMemory object with memory allocated by GlobalAlloc. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int64,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <overloads> Constructs a new PixelMemory object with memory allocated by GlobalAlloc. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc. </summary>
            <param name="numBytes"> The total number of bytes occupied by this image.  Typically this will be height *
            rowstride, but it could be larger if there is space needed before or after the last scanline. </param>
            <param name="height"> The height of the image. </param>
            <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
            <param name="offsetToFirstScanline"> An offset to the first scanline in the image.  Typically, this is zero, but in
            some images, there is header information before the first scanline. </param>
            <param name="zeroMemory"> Indicates whether allocated memory should be cleared or not. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc. </summary>
            <param name="numBytes"> The total number of bytes occupied by this image.  Typically this will be height *
            rowstride, but it could be larger if there is space needed after the last scanline. </param>
            <param name="height"> The height of the image. </param>
            <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
            <param name="zeroMemory"> Indicates whether allocated memory should be cleared or not. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc. </summary>
            <param name="numBytes"> The total number of bytes occupied by this image.  Typically this will be height *
            rowstride, but it could be larger if there is space needed after the last scanline. </param>
            <param name="height"> The height of the image. </param>
            <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32)">
            <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc. </summary>
            <param name="height"> The height of the image. </param>
            <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc in the provided pointer.
            </summary>
            <remarks> This method will throw if memoryStart is not the start of a valid block or was not allocated by
            GlobalAlloc or was not allocated with specified size. </remarks>
            <param name="memoryStart"> A pointer to the start at memory.  MemoryStart must be allocated by GlobalAlloc. </param>
            <param name="numBytes"> The total number of bytes occupied by this image.  Typically this will be height *
            rowstride, but it could be larger if there is space needed before or after the last scanline. </param>
            <param name="height"> The height of the image. </param>
            <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
            <param name="offsetToFirstScanline"> An offset to the first scanline in the image.  Typically, this is zero, but in
            some images, there is header information before the first scanline </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.IntPtr,System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory"/> class.
            </summary>
            <param name="memoryStart">The memory start.</param>
            <param name="numBytes">The number bytes.</param>
            <param name="height">The height.</param>
            <param name="rowStride">The row stride.</param>
            <param name="offsetToFirstScanline">The offset to first scanline.</param>
            <exception cref="T:System.ArgumentNullException">memoryStart;memoryStart needs to be a valid IntPtr.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">numBytes;nBytes must be greater than 0</exception>
            <exception cref="T:System.ArgumentException">memoryStart is not a valid pointer - maybe it wasn't allocated with GlobalAlloc or isn't the start of a block;memoryStart</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLAllocateMemory(System.Int32,System.Boolean)">
            <summary> Allocates memory using GlobalAlloc. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLAllocateMemory(System.Int64,System.Boolean)">
            <summary>
            Subclasses of ResidentPixelMemory implement this method to allocate memory.
            </summary>
            <param name="size"></param>
            <param name="zeroMemory"></param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLFreeMemory(System.IntPtr)">
            <summary> Frees the memory occupied by this object using GlobalFree. </summary>
            <param name="pointer"> The pointer to free. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLClone">
            <summary> Creates a deep copy of this object. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.IArrayScanline">
            <summary>
            An interface applied to PixelMemory objects that represent their image in an array.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.IArrayScanline.LLReadFromScanline(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a subsection from a scanline.
            </summary>
            <param name="scanlineIndex">Y index of the scanline.</param>
            <param name="srcIndex">Byte index into the source scanline.</param>
            <param name="array">The destination array.</param>
            <param name="index">The index into the destination scanline.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>true on success, false otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.IArrayScanline.LLWriteToScanline(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes an a subsection of an array into a scanline.
            </summary>
            <param name="scanlineIndex">Y index of the scanline.</param>
            <param name="srcIndex">Index into the source.</param>
            <param name="array">The array of data to write into the scanline.</param>
            <param name="index">Byte index into the destination scanline.</param>
            <param name="length">The number of bytes to write.</param>
            <returns></returns>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.IContiguous">
            <summary>
            An adornment interface with no members. It is applied to PixelMemory variants that have contiguous allocation.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.ManagedPixelMemory">
            <summary> Constructs a new PiixelMemory object using memory from the managed heap for the image. </summary>
            <remarks> Managed memory may move.  This PixelMemory object needs to be locked before any direct memory access.
            </remarks>
            <summary> Constructs a new PiixelMemory object using memory from the managed heap for the image. </summary>
            <remarks> Managed memory may move.  This PixelMemory object needs to be locked before any direct memory access.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.#ctor(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary> Constructs a new ManagedPixelMemory object. </summary>
            <param name="numBytes"> The total number of bytes needed for the memory.  This should be no less than height *
            rowStride + offsetToFirstScanline, but it can be more. </param>
            <param name="height"> <para>The height of the image in scan lines</para> </param>
            <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
            <param name="offsetToFirstScanline"> The offset in bytes to the first scan line from the start of memory. </param>
            <overloads> Constructs a new ManagedPixelMemory object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.#ctor(System.Int32,System.Int32)">
            <summary> Constructs a new ManagedPixelMemory object. </summary>
            <param name="height"> <para>The height of the image in scan lines</para> </param>
            <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.DisposeManagedResources">
            <summary>
            Disposes any unmanaged resources that implement IDisposable
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.DisposeUnmanagedResources">
            <summary>
            Disposes and unmanaged resources, such as memory not claimed by the garbage collector.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLGetHeight">
            <summary>
            Subclasses of PixelMemory implement this method to return the height of the image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLGetRowStride">
            <summary>
            Subclasses of PixelMemory implement this method to return the number of bytes necessary for a row of
            pixels.  This number should be rounded up to the next multiple of 4 bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLGetPixelAccessor">
            <summary>
            Subclasses of PixelMemory implement this method to return a new PixelAccessor object suitable for their
            particular version of PixelMemory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLClone">
            <summary>
            Subclasses of PixelMemory implement this method to create a deep copy of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLLock">
            <summary>
            Subclasses of PixelMemory implement this method to lock the memory.
            </summary>
            <remarks>
            LLLock is called by Lock only when it is necessary to actually lock the memory.  Lock manages both thread
            safety as well as accumulation of locks.  For any number of calls to Lock without a call to Unlock, there will be
            precisely one call to LLLock.  It is also guaranteed that LLLock can only be called by one thread at a time.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLUnlock">
            <summary>
            Subclasses of PixelMemory implement this method to unlock the memory.
            </summary>
            <remarks>
            LLUnlock is called by Unlock only when it is necessary to actually unlock the memory.  Unlock manages both
            thread safety as well as accumulation of locks.  For any number of calls to Unlock, there will be precisely one call
            to LLUnlock when there are no further lock requests.  It is also guaranteed that LLUnlock can only be called by one
            thread at a time.
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.GetScanLinePtr(System.Int32)">
            <summary> Returns a pointer to the specified scan line. </summary>
            <remarks> The PixelMemory must be locked before calling this method. </remarks>
            <param name="i"> The index to the scan line.  This value should be greater than or equal to 0 and less than the
            image height. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ManagedPixelMemory.IsContiguous">
            <summary> Indicates whether or not the memory is contiguous. </summary>
            <value> Returns true. </value>
            <remarks> Presently, ManagedPixelMemory is contiguous, but this may change in the future. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters">
            <summary> This class is used to control how PixelMemory is allocated by the PixelMemoryFactory </summary>
            <example>
<code lang="CS"><![CDATA[
public PixelMemory MyAllocator(PixelMemoryFactoryParameters factoryParameters, object allocationObject)
{
    MyFactoryParams myParams = factoryParameters as MyFactoryParams;
    if (myParams != null) {
        return PerformCustomAllocation(myParams);
    }
    else {
        return InvokePreviousAllocator(factoryParameters);
    }
}
        
}
]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor(System.Int64,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <overloads> Constructs a new PixelMemoryFactoryParameters object. </overloads>
            <overloads>
            <example>
<code lang="CS"><![CDATA[
PixelMemoryFactoryParameters myParams = new PixelMemoryFactoryParameters(200, 32);
]]></code>
</example>
            </overloads>
            <summary> Constructs a new PixelMemoryFactoryParameters object. </summary>
            <param name="numBytes"> The total number of bytes needed for the memory.  This should be no less than height *
            rowStride + offsetToFirstScanline, but it can be more. </param>
            <param name="height"> The height of the image in scan lines </param>
            <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
            <param name="offsetToFirstScanline"> The offset in bytes to the first scan line from the start of memory. </param>
            <param name="zeroMemory"> Indicates whether or not memory should be set to zero. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary> Constructs a new PixelMemoryFactoryParameters object. </summary>
            <param name="numBytes"> The total number of bytes needed for the memory.  This should be no less than height *
            rowStride + offsetToFirstScanline, but it can be more. </param>
            <param name="height"> The height of the image in scan lines </param>
            <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor(System.Int32,System.Int32)">
            <summary> Constructs a new PixelMemoryFactoryParameters object. </summary>
            <param name="height"> The height of the image in scan lines </param>
            <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.NumBytes">
            <summary> Sets or gets the requested total number of bytes needed for the memory.  This should be no less than
            height * rowStride + offsetToFirstScanline, but it can be more. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.Height">
            <summary> <para>Sets or gets the requested height of the image in scan lines</para> </summary>
            <remarks> Height must be 1 or greater. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.RowStride">
            <summary> Sets or gets the length of a scan line in bytes.  This should be a multiple of 4. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.OffsetToFirstScanline">
            <summary> Sets or gets the offset in bytes to the first scan line from the start of memory. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.ZeroMemory">
            <summary> Sets or gets whether or not memory will be set to zero upon allocation </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryAllocator">
            <summary> This delegate is used to define a method to allocate pixel memory. </summary>
            <param name="factoryParameters"> The parameters used to control how the PixelMemory object will be allocated.
            </param>
            <param name="o"> A user supplied object to control memory allocation. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryFactory">
            <summary> PixelMemoryFactory is a singleton object that is used for allocating all image memory in dotImage.  The
            object is accessed through the static <see cref="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.Factory"/> property. </summary>
            <example>
<code lang="CS"><![CDATA[
PixelMemory memory = PixelMemoryFactory.Factory.Allocate(parameters);
]]></code>
</example>
            <remarks> All PixelMemory should be allocated through this object instead of constructing a concrete subclass of
            PixelMemory directly. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.PixelMemoryFactory._factory">
            <summary> Gets the singleton object used for memory allocation. </summary>
            <example>
<code lang="CS"><![CDATA[
PixelMemory memory = PixelMemoryFactory.Factory.Allocate(parameters);
]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactory.Allocate(Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters)">
            <summary> Allocates a new PixelMemory object using the supplied parameters. </summary>
            <remarks> Allocate will use the Allocator property to perform the actual allocation.  When the Allocator is invoked,
            it will be passed the AllocatorObject. </remarks>
            <overloads>
            <example>
<code lang="CS"><![CDATA[
PixelMemory memory = PixelMemoryFactory.Factory.Allocate(parameters);
]]></code>
</example>
            </overloads>
            <param name="factoryParameters"> The parameters used to control how the PixelMemory object will be allocated.
            </param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.Factory">
            <summary> Gets the singleton object used for memory allocation. </summary>
            <example>
<code lang="CS"><![CDATA[
PixelMemory memory = PixelMemoryFactory.Factory.Allocate(parameters);
]]></code>
</example>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.Allocator">
            <summary> Sets or gets the PixelMemoryAllocator that will be used to allocate PixelMemory. </summary>
            <remarks> It is not necessary to call the Allocator directly.  Instead, use the Allocate method. </remarks>
            <example>
<code lang="CS"><![CDATA[
PixelMemoryFactory.Factory.Allocator = PixelMemoryFactory.Factory.DefaultAllocator;
]]></code>
</example>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.AllocatorObject">
            <summary> Sets or gets and object passed to the Allocator delegate. </summary>
            <remarks> This is a memento object intended to be used by the Allocator to hold private data that might be needed at
            allocation time.  This object is not currently used in the default allocator, although it may be used in the future.
            Client allocators should be prepared to handle conditions when this object might have been changed to something
            unexpected. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.DefaultAllocator">
            <summary> Gets the default allocator that is used by dotImage. </summary>
            <remarks> The intent of this property is to allow client code to restore the allocator to "factory settings".
            </remarks>
            <example>
<para>This example illustrates how to restore the Allocator to its default setting.</para>
<code lang="CS"><![CDATA[
PixelMemoryFactory.Factory.Allocator = PixelMemoryFactory.Factory.DefaultAllocator;
]]></code>
</example>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryLocker">
            <summary> PixelMemoryLocker is a utility class to help manage the locking and unlocking of memory.  By constructing
            a PixelMemoryLocker object in a using block, PixelMemory will be automatically locked on entrance and exit of the
            block. </summary>
            <example>
<code lang="CS"><![CDATA[
using (PixelMemoryLocker locker = new PixelMemoryLocker(myImage)) {
    PerformDirectMemoryAccess(myImage);
}
]]></code>
</example>
            <remarks> <STRONG>PixelMemoryLocker should never be used outside of a using block.</STRONG>  PixelMemoryLocker
            depends on Dispose being called in a predictable manner to operate correctly.  Using a PixelMemoryLocker outside a
            using block will cause unpredictable behavior since the memory will be unlocked when the object is either disposed
            or garbage collected. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryLocker.#ctor(Atalasoft.Imaging.Memory.PixelMemory)">
            <summary> Constructs an object that will automatically lock and unlock the supplied PixelMemory. </summary>
            <remarks> <STRONG>PixelMemoryLocker should never be used outside of a using block.</STRONG>  PixelMemoryLocker
            depends on Dispose being called in a predictable manner to operate correctly.  Using a PixelMemoryLocker outside a
            using block will cause unpredictable behavior since the memory will be unlocked when the object is either disposed
            or garbage collected. </remarks>
            <param name="mem"> The PixelMemory object to be locked.  If mem is null, it will be ignored. </param>
            <overloads> Constructs a new PixelMemoryLocker object. </overloads>
            <remarks> Construction of the object will immediately lock the pixel memory. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryLocker.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary> Constructs an object that will automatically lock and unlock the PixelMemory for the supplied AtalaImage.
            </summary>
            <remarks> <STRONG>PixelMemoryLocker should never be used outside of a using block.</STRONG>  PixelMemoryLocker
            depends on Dispose being called in a predictable manner to operate correctly.  Using a PixelMemoryLocker outside a
            using block will cause unpredictable behavior since the memory will be unlocked when the object is either disposed
            or garbage collected. </remarks>
            <param name="image"> An image to be locked.  If image is null, PixelMemoryLocker will do nothing. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryTracker">
            <summary>
            This is a singleton class that is used for tracking memory used by images.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Memory.PixelMemoryTracker._highWaterMark">
            <summary> Sets or gets a trigger point for memory events. </summary>
            <remarks> When total image memory in use exceeds this value, an event will be fired. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryAllocated(System.IntPtr,System.Int64)">
            <summary> This method is used to report an allocation of image memory. </summary>
            <remarks> <para>MemoryAllocated will throw is the location has already been reported as allocated or if the location
            is null or the size is less than or equal to zero.</para>
            <para>All memory reporting routines are thread-safe.</para> </remarks>
            /// <param name="location"> A pointer to the first byte of image memory. </param>
            <param name="size"> The number of bytes used by this block of memory. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryAllocated(System.Object,System.Int64)">
            <summary>
            Report than an object has allocated memory.
            </summary>
            <param name="o">The o.</param>
            <param name="numBytes">The number bytes.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryReallocated(System.IntPtr,System.IntPtr,System.Int64)">
            <summary> This method is used to report when a block of allocated image memory has been reallocated. </summary>
            <remarks> <para>If oldLocation has not been previously reported as allocated via MemoryAllocated, this method will
            throw.</para>
            <para>This method is equivalent to:</para>
            <para>ReportFreed(oldLocation);</para>
            <para>ReportAllocated(newLocation, newSize);</para> </remarks>
            <param name="oldLocation"> The previous location in memory </param>
            <param name="newLocation"> The new location in memory </param>
            <param name="newSize"> The size of the new block. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryFreed(System.IntPtr)">
            <param name="location"> A pointer to the memory about to be freed. </param>
            <summary> Reports a block of memory as free. </summary>
            <remarks> This method is thread-safe. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryFreed(System.Object)">
            <summary>
            Marks memory as free
            </summary>
            <param name="o">The o.</param>
            <exception cref="T:System.ArgumentException">
            Can't mark null pointer as free;location
            or
            Unable to location allocation entry;o
            </exception>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.OnExceededHighWatermark(Atalasoft.Imaging.Memory.MemoryUseEventArgs)">
            <summary> This method handles when memory usage has exceeded the high water mark </summary>
            <param name="e"> A MemoryUseEventArgs object indicating the change in memory. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.OnDroppedBelowHighWatermark(Atalasoft.Imaging.Memory.MemoryUseEventArgs)">
            <summary> This method handles when memory usage has dropped below the high water mark. </summary>
            <param name="e"> A MemoryUseEventArgs object indicating the change in memory. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.OnMemoryInUseChanged(Atalasoft.Imaging.Memory.MemoryUseEventArgs)">
            <summary> This method handles when memory usage has changed in some way </summary>
            <param name="e"> A MemoryUseEventArgs object indicating the change in memory. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryTracker.Memory">
            <summary> Returns a singleton object used for tracking memory. </summary>
            <remarks> There is only one PixelMemoryTracker object used for tracking memory across a single .NET application. 
            All operations on this object are thread-safe. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryInUse">
            <summary> Indicates the total amount of memory in use by AtalaImage objects. </summary>
            <remarks> Some images include memory which is not used for visual parts of the image.  This memory should also be
            included in the total bytes. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryTracker.HighWatermark">
            <summary> Sets or gets a trigger point for memory events. </summary>
            <remarks> When total image memory in use exceeds this value, an event will be fired. </remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Memory.PixelMemoryTracker.ExceededHighWatermark">
            <summary> This event is fired is MemoryInUse exceeds the HighWatermark property of PixelMemoryTracker </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Memory.PixelMemoryTracker.DroppedBelowHighWatermark">
            <summary> This event is fired is MemoryInUse drops below the HighWatermark property of PixelMemoryTracker </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryInUseChanged">
            <summary> An event for reporting changes in the current memory use. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextCollection">
            <summary> <para>Contains a collection of COM text tags and methods to access COM Text data from an image.</para>
            </summary>
            <seealso cref="T:Atalasoft.Imaging.Metadata.ComTextCollection"/>
            <seealso cref="N:Atalasoft.Imaging.Metadata"/>
            <remarks> See the ParseFromImage method of the ComTextParser class to
            generate data from a JPEG or PNG image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.#ctor">
            <summary> Initialize a new instance of this COM Text tag. </summary>
            <overloads> <para>Initialize a new instance of <STRONG>ComTextCollection</STRONG>.</para> </overloads>
            <summary> <para>Initialize a new instance of <STRONG>ComTextCollection</STRONG>.</para> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.#ctor(System.String)">
            <summary> Obsolete </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.#ctor(System.IO.Stream)">
            <summary> Obsolete </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Add(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary> Add a new COM Text marker to this collection. </summary>
            <param name="tag"> The <see cref="T:Atalasoft.Imaging.Metadata.ComTextTag"/> to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Remove(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary> Remove a specified COM Text tag from this collection. </summary>
            <param name="tag"> The <see cref="T:Atalasoft.Imaging.Metadata.ComTextTag"/> to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Contains(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary>
            Determines whether [contains] [the specified source].
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.IndexOf(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary>
            Indexes the of.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.CopyTo(Atalasoft.Imaging.Metadata.ComTextTag[],System.Int32)">
            <summary> Copies items from this collection into an array. </summary>
            <param name="comText"> An array of <STRONG>ComTextTag</STRONG> objects that will hold the items. </param>
            <param name="index"> An index in the array where the data will be copied. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextCollection.Item(System.Int32)">
            <summary> Returns the <STRONG>ComTextTag</STRONG> by index in the collection and allows the COM Text tags to be
            enumerated. </summary>
            <param name="index"> The index of the item to retrieve. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextParser">
            <summary> Parses COM Markers from a JPEG or PNG image into a collection of COM Text tags. </summary>
            <example>
<code lang="CS" title="EX (C#)"><![CDATA[
ComTextParser comParser = new ComTextParser();
ComTextCollection comTags = comParser.Parse("myimage.jpg");
]]></code>

<code lang="VB" title="EX (Visual Basic)"><![CDATA[
Dim comParser As ComTextParser = New ComTextParser();
Dim comTags As ComTextCollection = comParser.Parse("myimage.jpg");
]]></code>
</example>
            <remarks> <para>PNG and JPEG images support a type of metadata called COM Text.  This is simple textual information
            that can be stored into an image.  DotImage supports reading and writing this information to an image. </para></remarks>
            <seealso cref="T:Atalasoft.Imaging.Metadata.ComTextCollection"/>
            <seealso> COM Text </seealso>
            <seealso> Metadata Overview </seealso>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.#ctor">
            <summary> Initializes a new instance of <STRONG>ComTextParser</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage(System.String)">
            <summary> Parses COM Text data from an image file. </summary>
            <param name="imageFile"> The image file to parse data from. </param>
            <overloads> Parses COM Text data from an image file or stream. </overloads>
            <returns> Returns a <STRONG>ComTextCollection</STRONG> containing all COM Text data. </returns>
            <seealso cref="T:Atalasoft.Imaging.Metadata.ComTextParser"/>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage(System.IO.Stream)">
            <summary> Parses COM Text data from an image file stream. </summary>
            <returns> A <STRONG>ComTextCollection</STRONG> containing all COM Text tags. </returns>
            <seealso cref="T:Atalasoft.Imaging.Metadata.ComTextParser"/>
            <param name="imageStream"> The image file stream to parse data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.GetComTextData(Atalasoft.Imaging.Metadata.ComTextCollection,System.IO.Stream)">
            <summary>
            Reads the COM tags from a JPG or PNG stream.
            </summary>
            <param name="tags">A collection to receive the tags.</param>
            <param name="stream">Stream containing the image data.</param>
            <returns><c>True</c> on success, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.SaveComText(Atalasoft.Imaging.Metadata.ComTextCollection)">
            <summary>
            Save the ComTextTags to the current image.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextTag">
            <summary> Contains the data for a specified COM Text tag including the key and text. </summary>
            <remarks> The Key value in a COM Text tag is only valid for PNG images.  Ignored in JPEG images. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ComTextTag.text">
            <summary> Gets or sets the text contained in this COM Text Tag. </summary>
            <value> The text contained in this COM Text Tag. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ComTextTag.key">
            <summary> Gets or sets a unique indentifier of the COM Tag for use in PNG images. </summary>
            <value> A unique indentifier of the COM Tag for use in PNG images. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.#ctor">
            <summary> Initialize a new instance of this COM Text tag. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.#ctor(System.String)">
            <summary> Initialize a new instance of this COM Text tag specifying the text. </summary>
            <param name="text"> The text contained in this COM Text Tag. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.#ctor(System.String,System.String)">
            <summary> Initialize a new instance of this COM Text tag specifying the key and text. </summary>
            <param name="text"> The text contained in this COM Text Tag. </param>
            <param name="key"> A unique indentifier of the COM Tag for use in PNG images. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.ToString">
            <summary> Returns a text description of the tag. </summary>
            <returns> A text description of the tag. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Text">
            <summary> Gets or sets the text contained in this COM Text Tag. </summary>
            <value> The text contained in this COM Text Tag. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Key">
            <summary> Gets or sets a unique indentifier of the COM Tag for use in PNG images. </summary>
            <value> A unique indentifier of the COM Tag for use in PNG images. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerTypes">
            <summary> Defines the types of Jpeg Markers that can be saved as a data chunk inside a Jpeg image. </summary>
            <remarks> These markers contain binary information such as Exif and Iptc Data. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp1">
            <summary> The APP1 JPEG Marker commonly associated with EXIF data </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp2">
            <summary> The APP2 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp3">
            <summary> The APP3 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp4">
            <summary> The APP4 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp5">
            <summary> The APP5 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp6">
            <summary> The APP6 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp7">
            <summary> The APP7 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp8">
            <summary> The APP8 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp9">
            <summary> The APP9 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp10">
            <summary> The APP10 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp11">
            <summary> The APP11 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp12">
            <summary> The APP12 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp13">
            <summary> The APP13 JPEG Marker commonly associated with IPTC data. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp14">
            <summary> The APP14 JPEG Marker. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.AllMarkers">
            <summary> All markers OR'd together. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTagID">
            <summary> Enumeration of known Exif tag ID's. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageWidth">
            <summary> ImageWidth, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageLength">
            <summary> ImageLength, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BitsPerSample">
            <summary> BitsPerSample, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Compression">
            <summary> Compression algorithm </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PhotometricInterpretation">
            <summary> PhotometricInterpretation, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DocumentName">
            <summary> (TIFF Extended) The name of the document from which this image was scanned </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageDescription">
            <summary> ImageDescription, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Make">
            <summary> Make, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Model">
            <summary> Model, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.StripOffsets">
            <summary> StripOffsets, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Orientation">
            <summary> Orientation, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SamplesPerPixel">
            <summary> SamplesPerPixel, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RowsPerStrip">
            <summary> RowsPerStrip, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.StripByteCounts">
            <summary> StripByteCounts, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.XResolution">
            <summary> XResolution, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.YResolution">
            <summary> YResolution, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PlanarConfiguration">
            <summary> PlanarConfiguration, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PageName">
            <summary> The name of the page from which this image was scanned </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.XPosition">
            <summary> (TIFF Extended) X position of the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.YPosition">
            <summary> (TIFF Extended) Y position of the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GrayResponseUnit">
            <summary> The precision of the information contained in the GrayResponseCurve </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GrayResponseCurve">
            <summary> For grayscale data, the optical density of each possible pixel value. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ResolutionUnit">
            <summary> ResolutionUnit, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PageNumber">
            <summary> (TIFF Extended) The page number of the page from which this image was scanned. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TransferFunction">
            <summary> TransferFunction, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Software">
            <summary> Software, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DateTime">
            <summary> DateTime, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Artist">
            <summary> Artist, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.HostComputer">
            <summary> The computer and/or operating system in use at the time of image creation. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.WhitePoint">
            <summary> WhitePoint, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PrimaryChromaticities">
            <summary> PrimaryChromaticities, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.JpegInterchangeFormat">
            <summary> JpegInterchangeFormat, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.JpegInterchangeFormatLength">
            <summary> JpegInterchangeFormatLength, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.YCbCrCoefficients">
            <summary> YCbCrCoefficients, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.YCbCrSubSampling">
            <summary> YCbCrSubSampling, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.YCbCrPositioning">
            <summary> YCbCrPositioning, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ReferenceBlackWhite">
            <summary> ReferenceBlackWhite, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BatteryLevel">
            <summary> 0x828F TIFF/EP: Encodes camera battery level at time of image capture. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Copyright">
            <summary> Copyright, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExifIfdPointer">
            <summary> ExifIfdPointer, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsInfoIfdPointer">
            <summary> GpsInfoIfdPointer, used by Main Ifd (0 - 32) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureTime">
            <summary> ExposureTime, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FNumber">
            <summary> FNumber, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.IccProfile">
            <summary> 0x8773 InterColorProfile (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureProgram">
            <summary> 0x8822 ExposureProgram (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SpectralSensitivity">
            <summary> 0x8824 SpectralSensitivity (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.IsoSpeedRatings">
            <summary> IsoSpeedRatings, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Oecf">
            <summary> Oecf, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Interlace">
            <summary> 0x8829 Interlace - Indicates the field number of multifield images. (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TimeZoneOffset">
            <summary> Encodes time zone of camera clock relative to GMT. (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SelfTimeMode">
            <summary> 0x882B SelfTimeMode (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExifVersion">
            <summary> ExifVersion (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DateTimeOriginal">
            <summary> DateTimeOriginal (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DateTimeDigitized">
            <summary> DateTimeDigitized (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ComponentsConfiguration">
            <summary> ComponentsConfiguration, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CompressedBitsPerPixel">
            <summary> CompressedBitsPerPixel, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ShutterSpeedValue">
            <summary> ShutterSpeedValue, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ApertureValue">
            <summary> ApertureValue, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BrightnessValue">
            <summary> BrightnessValue, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureBiasValue">
            <summary> ExposureBiasValue, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.MaxApertureValue">
            <summary> MaxApertureValue, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubjectDistance">
            <summary> SubjectDistance, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.MeteringMode">
            <summary> MeteringMode, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LightSource">
            <summary> LightSource, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Flash">
            <summary> Flash, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalLength">
            <summary> FocalLength, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.MakerNote">
            <summary> (0x927C) MakerNote </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.UserComment">
            <summary> (0x9286) UserComment </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubsecTime">
            <summary> SubsecTime, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubsecTimeOriginal">
            <summary> SubsecTimeOriginal, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubsecTimeDigitized">
            <summary> SubsecTimeDigitized, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FlashPixVersion">
            <summary> FlashPixVersion, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ColorSpace">
            <summary> ColorSpace, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PixelXDimension">
            <summary> PixelXDimension, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PixelYDimension">
            <summary> PixelYDimension, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RelatedSoundFile">
            <summary> RelatedSoundFile, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.InteroperabilityIfdPointer">
            <summary> InteroperabilityIfdPointer, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FlashEnergy">
            <summary> FlashEnergy, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SpatialFrequencyResponse">
            <summary> (0xA20C) Exif: SpatialFrequencyResponse </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalPlaneXResolution">
            <summary> (0xA20E) Exif: FocalPlaneXResolution </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalPlaneYResolution">
            <summary> (0xA20F) Exif: FocalPlaneYResolution </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalPlaneResolutionUnit">
            <summary> (0xA210) Exif: FocalPlaneResolutionUnit </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubjectLocation">
            <summary> (0xA214) Exif: SubjectLocation </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureIndex">
            <summary> ExposureIndex, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SensingMethod">
            <summary> 0xA217 SensingMethod (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FileSource">
            <summary> FileSource (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SceneType">
            <summary> SceneType (Exif) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CFAPattern">
            <summary> Exif: Indicates the color filter array (CFA) geometric pattern of the image sensor when a one-chip color area sensor is used. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageNumber">
            <summary> Exif: ImageNumber </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SecurityClassification">
            <summary> SecurityClassification, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageHistory">
            <summary> ImageHistory, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TiffEpStandardID">
            <summary> TiffEpStandardID (Not well attested - see 0x9216!) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CustomRendered">
            <summary> CustomRendered, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureMode">
            <summary> ExposureMode, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.WhiteBalance">
            <summary> WhiteBalance, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DigitalZoomRatio">
            <summary> DigitalZoomRatio, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalLengthIn35mmFormat">
            <summary> FocalLengthIn35mmFormat, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SceneCaptureType">
            <summary> SceneCaptureType, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GainControl">
            <summary> GainControl, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Contrast">
            <summary> Contrast, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Saturation">
            <summary> Saturation, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Sharpness">
            <summary> Sharpness, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DeviceSettingDescription">
            <summary> DeviceSettingDescription, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubjectDistanceRange">
            <summary> SubjectDistanceRange, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageUniqueID">
            <summary> ImageUniqueID, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CameraOwnerName">
            <summary>  owner of the camera as an ASCII string</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BodySerialNumber">
            <summary>  serial number of the body of the camera as an ASCII string</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LensSpecification">
            <summary>  minimum focal length, maximum focal length, minimum F number in the minimum focal length, and minimum F number in the maximum focal length</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LensMake">
            <summary>  lens manufacturer as an ASCII string</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LensModel">
            <summary> Lens Model ASCII string</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LensSerialNumber">
            <summary> Lens Serial Number, serial number of the interchangeable lens that was used in photography, as an ASCII string. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GDALMetaData">
            <summary> GDALMetaData, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Gamma">
            <summary> Gamma, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FilmProductCode">
            <summary> FilmProductCode, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageSourceEK">
            <summary> ImageSourceEK, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CaptureConditionsPAR">
            <summary> CaptureConditionsPAR, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CameraOwner">
            <summary> CameraOwner, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SerialNumber">
            <summary> SerialNumber, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.UserSelectGroupTitle">
            <summary> UserSelectGroupTitle, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DealerIDNumber">
            <summary> DealerIDNumber, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CaptureDeviceFID">
            <summary> CaptureDeviceFID, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PrintImageMatching">
            <summary> Exiv2.org says: "description needed". Found in some Olympus JPEGs. Sub-IFD? </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DNGVersion">
            <summary> Encodes the DNG four-tier version number. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DNGBackwardVersion">
            <summary> Specifies the oldest version of the Digital Negative specification for which a file is compatible. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.UniqueCameraModel">
            <summary> Defines a unique, non-localized name for the camera model that created the image in the raw file. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LocalizedCameraModel">
            <summary> Similar to the UniqueCameraModel tag, except the name can be localized for different markets to match the localization of the camera name </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CFAPlaneColor">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CFALayout">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LinearizationTable">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BlackLevelRepeatDim">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BlackLevel">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BlackLevelDeltaH">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BlackLevelDeltaV">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.WhiteLevel">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DefaultScale">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DefaultCropOrigin">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DefaultCropSize">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ColorMatrix1">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ColorMatrix2">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CameraCalibration1">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CameraCalibration2">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ReductionMatrix1">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ReductionMatrix2">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.AnalogBalance">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.AsShotNeutral">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.AsShotWhiteXY">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BaselineExposure">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BaselineNoise">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BaselineSharpness">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BayerGreenSplit">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LinearResponseLimit">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CameraSerialNumber">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LensInfo">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ChromaBlurRadius">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.AntiAliasStrength">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ShadowScale">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DNGPrivateData">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.MakerNoteSafety">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CalibrationIlluminant1">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CalibrationIlluminant2">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BestQualityScale">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RawDataUniqueID">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OriginalRawFileName">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OriginalRawFileData">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ActiveArea">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.MaskedAreas">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.AsShotICCProfile">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.AsShotPreProfileMatrix">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CurrentICCProfile">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CurrentPreProfileMatrix">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ColorimetricReference">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CameraCalibrationSignature">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileCalibrationSignature">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.AsShotProfileName">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NoiseReductionApplied">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileName">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileHueSatMapDims">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileHueSatMapData1">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileHueSatMapData2">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileToneCurve">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileEmbedPolicy">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileCopyright">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ForwardMatrix1">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ForwardMatrix2">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PreviewApplicationName">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PreviewApplicationVersion">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PreviewSettingsName">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PreviewSettingsDigest">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PreviewColorSpace">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PreviewDateTime">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RawImageDigest">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OriginalRawFileDigest">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubTileBlockSize">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RowInterleaveFactor">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileLookTableDims">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ProfileLookTableData">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OpcodeList1">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OpcodeList2">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OpcodeList3">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NoiseProfile">
            <summary>  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsVersionId">
            <summary> GpsVersionId, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsLatitudeRef">
            <summary> GpsLatitudeRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsLatitude">
            <summary> GpsLatitude, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsLongitudeRef">
            <summary> GpsLongitudeRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsLongitude">
            <summary> GpsLongitude, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsAltitudeRef">
            <summary> GpsAltitudeRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsAltitude">
            <summary> GpsAltitude, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsTimeStamp">
            <summary> GpsTimeStamp, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsSatellites">
            <summary> GpsSatellites, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsStatus">
            <summary> GpsStatus, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsMeasureMode">
            <summary> GpsMeasureMode, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDop">
            <summary> GpsDop, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsSpeedRef">
            <summary> GpsSpeedRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsSpeed">
            <summary> GpsSpeed, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsTrackRef">
            <summary> GpsTrackRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsTrack">
            <summary> GpsTrack, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsImgDirectionRef">
            <summary> GpsImgDirectionRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsImgDirection">
            <summary> GpsImgDirection, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsMapDatum">
            <summary> GpsMapDatum, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestLatitudeRef">
            <summary> GpsDestLatitudeRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestLatitude">
            <summary> GpsDestLatitude, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestLongitudeRef">
            <summary> GpsDestLongitudeRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestLongitude">
            <summary> GpsDestLongitude, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestBearingRef">
            <summary> GpsDestBearingRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestBearing">
            <summary> GpsDestBearing, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestDistanceRef">
            <summary> GpsDestDistanceRef, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestDistance">
            <summary> GpsDestDistance, used by Gps Ifd (74 - 100) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.InteroperabilityIndex">
            <summary> InteroperabilityIndex, used by Interoperability Ifd (101 - 105) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.InteroperabilityVersion">
            <summary> InteroperabilityVersion, used by Interoperability Ifd (101 - 105) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RelatedImageFileFormat">
            <summary> RelatedImageFileFormat, used by Interoperability Ifd (101 - 105) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RelatedImageWidth">
            <summary> RelatedImageWidth, used by Interoperability Ifd (101 - 105) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RelatedImageLength">
            <summary> RelatedImageLength, used by Interoperability Ifd (101 - 105) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiVersion">
            <summary> FujiVersion, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiQuality">
            <summary> FujiQuality, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiSharpness">
            <summary> FujiSharpness, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiWhiteBalance">
            <summary> FujiWhiteBalance, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiColor">
            <summary> FujiColor, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiTone">
            <summary> FujiTone, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiFlashMode">
            <summary> FujiFlashMode, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiFlashStrength">
            <summary> FujiFlashStrength, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiMacro">
            <summary> FujiMacro, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiFocusMode">
            <summary> FujiFocusMode, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiSlowSynch">
            <summary> FujiSlowSynch, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiPictureMode">
            <summary> FujiPictureMode, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiContTakeBracket">
            <summary> FujiContTakeBracket, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiBlurWarning">
            <summary> FujiBlurWarning, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiFocusWarning">
            <summary> FujiFocusWarning, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiAEWarning">
            <summary> FujiAEWarning, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiUnknown">
            <summary> FujiUnknown, Fuji specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMakernoteVersion">
            <summary> OlympusMakernoteVersion, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMinoltaCameraSettings">
            <summary> MinoltaCameraSettings, Olympus(Minolta) makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMinoltaAltCameraSettings">
            <summary> Minolta Alternate Camera Settings, Olympus(Minolta) makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusPrintImageMatchingInfo">
            <summary> OlympusPrintImageMatchingInfo, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCameraCompressedImageSize">
            <summary> OlympusCameraCompressedImageSize, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMinoltaThumbnailOffset">
            <summary> OlympusMinoltaThumbnailOffset, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMinoltaThumbnailOffset1">
            <summary> OlympusMinoltaThumbnailOffset1, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMinoltaThumbnailLength">
            <summary> OlympusMinoltaThumbnailLength, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusThumbnailImage">
            <summary> Olympus Makernote - thumbnail image </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusColorMode">
            <summary> OlympusColorMode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageQuality">
            <summary> OlympusImageQuality (0..4), Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageQuality1">
            <summary> OlympusImageQuality1 (0..4), Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBodyFirmwareVersion">
            <summary> Body Firmware Version, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSpecialMode">
            <summary> SpecialMode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusJpegQuality">
            <summary> JPEG Quality (1,2,3), Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMacro">
            <summary> Macro mode (0=off, 1=Macro), Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBWMode">
            <summary> Black and white mode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusDigitalZoom">
            <summary> Digital zoom (0=off, 1=on ?), Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusPlaneFocalDiagonal">
            <summary> Digital zoom (0=off, 1=on ?), Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusLensDistortionParams">
            <summary> Digital zoom (0=off, 1=on ?), Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCameraType">
            <summary> Camera type, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusPictInfo">
            <summary> OlympusPictInfo, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCameraId">
            <summary> OlympusCameraId, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSoftware">
            <summary> Software (?), Olympus(Epson) makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFirmware">
            <summary> Firmware (version?), Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusDataDump">
            <summary> OlympusDataDump, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusDataDump2">
            <summary> OlympusDataDump2, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusShutterSpeed">
            <summary> OlympusFlashMode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusISOSpeed">
            <summary> OlympusFlashMode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusApertureValue">
            <summary> OlympusFlashMode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBrightness">
            <summary> OlympusFlashMode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFlashMode">
            <summary> OlympusFlashMode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFlashDevice">
            <summary> OlympusFlashDevice, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBracket">
            <summary> OlympusBracket, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSensorTemperature">
            <summary> OlympusSensorTemperature, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusLensTemperature">
            <summary> OlympusLensTemperature, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusLightCondition">
            <summary> OlympusLightCondition, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFocusRange">
            <summary> OlympusFocusRange, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFocusMode">
            <summary> OlympusFocusMode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFocusDistance">
            <summary> OlympusFocusDistance, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusZoom">
            <summary> OlympusZoom, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMacroFocus">
            <summary> OlympusMacroFocus, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSharpness">
            <summary> OlympusSharpness, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFlashChargeLevel">
            <summary> OlympusFlashChargeLevel, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusColorMatrix">
            <summary> OlympusColorMatrix, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBlackLevel">
            <summary> OlympusBlackLevel, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBlackLevel1">
            <summary> OlympusDataDump2, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusWhiteBalance">
            <summary> OlympusWhiteBalance, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusRedBias">
            <summary> OlympusRedBias, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBlueBias">
            <summary> OlympusBlueBias, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusColorMatrixNumber">
            <summary> OlympusColorMatrixNumber, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSerialNumber">
            <summary> OlympusSerialNumber, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFlashBias">
            <summary> OlympusFlashBias, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusContrast">
            <summary> OlympusContrast, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSharpnessFactor">
            <summary> OlympusSharpnessFactor, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusColorControl">
            <summary> OlympusColorControl, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusValidBits">
            <summary> OlympusValidBits, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCoringFilter">
            <summary> OlympusCoringFilter, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageWidth">
            <summary> OlympusImageWidth, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageHeight">
            <summary> OlympusImageHeight, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCompressionRatio">
            <summary> OlympusCompressionRatio, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusThumbnail">
            <summary> Thumbnail, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusThumbnailOffset">
            <summary> ThumbnailOffset, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusThumbnailLength">
            <summary> ThumbnailLength, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCCDScanMode">
            <summary> CCDScanMode, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusNoiseReduction">
            <summary> NoiseReduction, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusInfinityLensStep">
            <summary> InfinityLensStep, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusNearLensStep">
            <summary> NearLensStep, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusEquipment">
            <summary> Equipment sub-IFD, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCameraSettings">
            <summary> Camera settings sub-IFD, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusRawDevelopment">
            <summary> Raw development sub-IFD, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusRawDevelopment2">
            <summary> Raw development 2 sub-IFD, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageProcessing">
            <summary> Image processing sub-IFD, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFocusInfo">
            <summary> Focus Info sub-IFD, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusRawInfo">
            <summary> Raw info sub-IFD, Olympus makernote tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonQuality">
            <summary> NikonQuality, Nikon specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonColorMode">
            <summary> NikonColorMode, Nikon specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonImageAdjustment">
            <summary> NikonImageAdjustment, Nikon specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonCcdSensitivity">
            <summary> NikonCcdSensitivity, Nikon specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonWhiteBalance">
            <summary> NikonWhiteBalance, Nikon specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonFocus">
            <summary> NikonFocus, Nikon specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonDigitalZoom">
            <summary> NikonDigitalZoom, Nikon specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonConverter">
            <summary> NikonConverter, Nikon specific tag </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3MakernoteVersion">
            <summary> Nikon3MakernoteVersion, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ISOSpeedUsed">
            <summary> Nikon3ISOSpeedUsed, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ColorMode">
            <summary> Nikon3ColorMode, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3Quality">
            <summary> Nikon3Quality, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3WhiteBalance">
            <summary> Nikon3WhiteBalance, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3Sharpening">
            <summary> Nikon3Sharpening, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FocusMode">
            <summary> Nikon3FocusMode, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashSetting">
            <summary> Nikon3FlashSetting, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3AutoFlashMode">
            <summary> Nikon MakerNote3 AutoFlashMode</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3WhiteBalanceBias">
            <summary> Nikon MakerNote3 WhiteBalanceBias</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3WB_RBLevels">
            <summary> Nikon MakerNote3 WB_RedBlueLevels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ProgramShift">
            <summary> Nikon MakerNote3 ProgramShift</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ExposureDiff">
            <summary> Nikon MakerNote3 ExposureDiff</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ISOSelection">
            <summary> Nikon MakerNote3 ISOSelection</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3DataDump">
            <summary> Nikon MakerNote3 DataDump</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3Preview">
            <summary> Nikon MakerNote3 Preview</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashComp">
            <summary> Nikon MakerNote3 FlashComp</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ISOSettings">
            <summary> Nikon MakerNote3 ISOSettings</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ImageBoundary">
            <summary> Nikon MakerNote3 ImageBoundary</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3PhotoCornerCoordinates">
            <summary>
            The nikon3 photo corner coordinates
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashExposureComp">
            <summary> Nikon MakerNote3 FlashExposureComp</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashBracketComp">
            <summary> Nikon MakerNote3 FlashBracketComp</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashBracketCompensationApplied">
            <summary>
            The nikon3 flash bracket compensation applied
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ExposureBracketComp">
            <summary> Nikon MakerNote3 ExposureBracketComp</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3AEBracketCompensationApplied">
            <summary>
            The nikon3 ae bracket compensation applied
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ImageProcessing">
            <summary> Nikon MakerNote3 ImageProcessing</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3CropHiSpeed">
            <summary> Nikon MakerNote3 CropHiSpeed</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ExposureTuning">
            <summary> Nikon MakerNote3 ExposureTuning</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3SerialNumber">
            <summary> Nikon MakerNote3 SerialNumber</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ColorSpace">
            <summary> Nikon MakerNote3 ColorSpace</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3VRInfo">
            <summary> Nikon MakerNote3 VRInfo</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ImageAuthentication">
            <summary> Nikon MakerNote3 ImageAuthentication</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ActiveDLighting">
            <summary> Nikon MakerNote3 ActiveDLighting</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3PictureControl">
            <summary> Nikon MakerNote3 PictureControl</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3WorldTime">
            <summary> Nikon MakerNote3 WorldTime</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ISOInfo">
            <summary> Nikon MakerNote3 ISOInfo</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3VignetteControl">
            <summary> Nikon MakerNote3 VignetteControl</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ImageAdjustment">
            <summary> ImageAdjustment, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ToneCompensation">
            <summary> Nikon3ToneCompensation, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3AuxiliaryLens">
            <summary> Nikon3AuxiliaryLens, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3LensType">
            <summary> Nikon3LensType, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3LensMinMaxFocalLength">
            <summary> Nikon3LensMinMaxFocalLength, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ManualFocusDistance">
            <summary> Nikon3ManualFocusDistance, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3DigitalZoomFactor">
            <summary> Nikon3DigitalZoomFactor, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashUsed">
            <summary> Nikon3FlashUsed, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3AutoFocusArea">
            <summary> Nikon3AutoFocusArea, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3BracketingShootingMode">
            <summary> Nikon3BracketingShootingMode, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3AutoBracketRelease">
            <summary> Nikon MakerNote3 AutoBracketRelease</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3LensFStops">
            <summary> Nikon MakerNote3 LensFStops</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ContrastCurve">
            <summary> Nikon MakerNote3 ContrastCurve </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ColorHue">
            <summary> Nikon3ColourMode, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ColourMode">
            <summary>
            The nikon3 colour mode
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3SceneMode">
            <summary> Nikon3SceneMode, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3LightingType">
            <summary> Nikon3LightingType, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ShotInfo">
            <summary> Nikon MakerNote3 ShotInfo</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3HueAdjustment">
            <summary> Nikon MakerNote3 HueAdjustment</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3NEFCompression">
            <summary> Nikon MakerNote3 NEFCompression</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3Saturation">
            <summary> Nikon3Saturation, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3NoiseReduction">
            <summary> Nikon3NoiseReduction, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ColorBalance">
            <summary> Nikon3ColorBalance </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3LensData">
            <summary> Nikon3LensData </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3RawImageCenter">
            <summary> Nikon3RawImageCenter </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3SensorPixelSize">
            <summary> Nikon3SensorPixelSize </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3SceneAssist">
            <summary> Nikon3SceneAssist </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3RetouchHistory">
            <summary> Nikon3RetouchHistory </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ImageDataSize">
            <summary> Nikon3ImageDataSize </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3TagA3">
            <summary> Nikon3TagA3 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ImageCount">
            <summary> Nikon3ImageCount </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3DeletedImageCount">
            <summary> Nikon3DeletedImageCount </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ShutterCount">
            <summary> TotalNumberOfShutterReleasesForCamera</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3TotalNumberOfShutterReleasesForCamera">
            <summary>
            The nikon3 total number of shutter releases for camera
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashInfo">
            <summary> FlashInfo </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ImageOptimisation">
            <summary> ImageOptimisation, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3Saturation2">
            <summary> Saturation1, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3DigitalVariProgram">
            <summary> DigitalVariProgram, Nikon specific tag, type 3</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3MultiExposure">
            <summary> MultiExposure </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3HighISONoiseReduction">
            <summary> HighISONoiseReduction</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioRecordingMode">
            <summary> CasioRecordingMode, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioQuality">
            <summary> CasioQuality, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioFocusingMode">
            <summary> CasioFocusingMode, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioFlashMode">
            <summary> CasioFlashMode, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioFlashIntensity">
            <summary> CasioFlashIntensity, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioObjectDistance">
            <summary> CasioObjectDistance, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioWhiteBalance">
            <summary> CasioWhiteBalance, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioDigitalZoom">
            <summary> CasioDigitalZoom, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioSharpness">
            <summary> CasioSharpness, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioContrast">
            <summary> CasioContrast, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioSaturation">
            <summary> CasioSaturation, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioCcdSensitivity">
            <summary> CasioCcdSensitivity, Casio specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonHeader">
            <summary> CanonHeader, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTagLength1">
            <summary> CanonTagLength1, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMacroMode">
            <summary> CanonMacroMode, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSelfTimer">
            <summary> CanonSelfTimer, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonQuality">
            <summary> CanonQuality, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFlashMode">
            <summary> CanonFlashMode, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonContinuousDriveMode">
            <summary> CanonContinuousDriveMode, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_6">
            <summary> CanonUnknown1_6, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocusMode">
            <summary> CanonFocusMode, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_8">
            <summary> CanonUnknown1_8, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_9">
            <summary> CanonUnknown1_9, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonImageSize">
            <summary> CanonImageSize, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonEasyShootingMode">
            <summary> CanonEasyShootingMode, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonDigitalZoom">
            <summary> CanonDigitalZoom, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonContrast">
            <summary> CanonContrast, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSaturation">
            <summary> CanonSaturation, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSharpness">
            <summary> CanonSharpness, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonIso">
            <summary> CanonIso, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMeteringMode">
            <summary> CanonMeteringMode, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocusType">
            <summary> CanonFocusType, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAFPointSelected">
            <summary> CanonAFPointSelected, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonExposureMode">
            <summary> CanonExposureMode, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_21">
            <summary> CanonUnknown1_21, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensType">
            <summary> CanonLensType, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLongFocalLength">
            <summary> CanonLongFocalLength, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShortFocalLength">
            <summary> CanonShortFocalLength, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalUnits">
            <summary> CanonFocalUnits, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMaxAperture">
            <summary> CanonMaxAperture, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_27">
            <summary> CanonUnknown1_27, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFlashActivity">
            <summary> CanonFlashActivity, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFlashDetails">
            <summary> CanonFlashDetails, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_30">
            <summary> CanonUnknown1_30, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_31">
            <summary> CanonUnknown1_31, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocusContinuos">
            <summary> CanonFocusContinuos, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_33">
            <summary> CanonUnknown1_33, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_34">
            <summary> CanonUnknown1_34, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_35">
            <summary> CanonUnknown1_35, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonZoomedResolution">
            <summary> CanonZoomedResolution, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonZoomedResolutionBase">
            <summary> CanonZoomedResolutionBase, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_38">
            <summary> CanonUnknown1_38, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_39">
            <summary> CanonUnknown1_39, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_40">
            <summary> CanonUnknown1_40, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_41">
            <summary> CanonUnknown1_41, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonColorTone">
            <summary> CanonColorTone, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_43">
            <summary> CanonUnknown1_43, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_44">
            <summary> CanonUnknown1_44, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_45">
            <summary> CanonUnknown1_45, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_46">
            <summary> CanonUnknown1_46, Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalType">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalLength">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalPlaneXSize">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalPlaneYSize">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownTag3">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownTag16">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFileLength">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTagLength4">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_1">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShotISO">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_3">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTargetAperture">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTargetExposureTime">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonExposureCompensation">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonWhiteBalance">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_8">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSequenceNumber">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_10">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_11">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_12">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_13">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAFPointUsed">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFlashBias">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAutoExposureBracketing">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAEBBracketValue">
            <summary>Canon specific tag</summary>,
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_18">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSubjectDistance">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocusDistanceLower">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFNumber">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonExposureTime">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_23">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBulbDuration">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAutoRotate">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_26">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_27">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_28">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_29">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_30">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_31">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown5_00">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown5_01">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPanoramaFrame">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown5_03">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown5_04">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPanoramaDirection">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonImageType">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFirmwareVersion">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonImageNumber">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonOwnerName">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFileInfoFileNumber">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFileInfoShutterCount">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonCameraSerialNumber">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_00">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_01">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_02">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_03">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_04">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_05">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_06">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_07">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_08">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonColorTemperature">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonColorMatrix">
            <summary>Canon 0xa specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceAuto">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceAuto">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceDayLight">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceDayLight">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceCloudy">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceCloudy">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceTungsten">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceTungsten">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceFluorescent">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceFluorescent">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceFlash">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceFlash">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceCustom">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceCustom">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceBW">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceBW">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceShade">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceShade">
            <summary>Canon 0xA9 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown0">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown1">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown2">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown3">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DExposureTime">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown5">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown6">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown7">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown8">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown9">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DFocalLength">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown11">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DLensType">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DShortFocal">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DLongFocal">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DFocalType">
            <summary>Canon 0xd specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonColorTemperature1">
            <summary>Canon 0x00AE specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageWidth">
            <summary>Canon 0x12 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageHeight">
            <summary>Canon 0x12 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageWidthAsShot">
            <summary>Canon 0x12 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageHeightAsShot">
            <summary>Canon 0x12 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageAFPointsUsed">
            <summary>Canon 0x12 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoUnknown">
            <summary>Canon 0x12 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoUnKnown0">
            <summary>Canon 0x00B6 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoUnKnown1">
            <summary>Canon 0x00B6 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoLength">
            <summary>Canon 0x00B6 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoWidth">
            <summary>Canon 0x00B6 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoHeight">
            <summary>Canon 0x00B6 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoStart">
            <summary>Canon 0x00B6 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoFocalPlaneXResolution">
            <summary>Canon 0x00B6 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoUnknown7">
            <summary>Canon 0x00B6 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoFocalPlaneYResolution">
            <summary>Canon 0x00B6 specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTagLength15">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLongExposureNoiseReduction">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShutterAELockButtons">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMirrorLockup">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTVAVAndExposureLevel">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAFAssistLight">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShutterSpeedInAVMode">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAebSequenceAutoCancellation">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShutterCurtainSync">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensAFStopButtonFNSwitch">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAutoReductionOfFillFlash">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMenuButtonReturnPosition">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSetButtonFuncWhenShooting">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSensorCleaning">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSuperImposedDisplay">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShutterReleaseNoCFCard">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonUnknown0">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonCameraSettings">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFocalLength">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFlashInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonShotInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonPanorama">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonImageType">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFirmwareVersion">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonImageNumber">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFileNumber">
            <summary>
            The tg canon file number
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonOwnerName">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonColorInfoD30">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonUnknown11">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonSerialNumber">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonLensInfo1D">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFileLength">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonCustomFunctions">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonModelID">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonMovieInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonAFInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonCameraInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonSerialNumberFormat">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonSuperMacro">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonDateStampMode">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonMyColors">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFirmwareRevision">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonCategories">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFaceDetect1">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFaceDetect2">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonAFInfo2">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonContrastInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonCustomFunctions1D">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFileInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonLensModel">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonDustRemovalData">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonCropInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonAspectInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonProcessingInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonWhiteBalanceTable">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonUnknown168">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonColorBalance">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonMeasuredColor">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonColorTemperature">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonColorSpace">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonPreviewImageInfo">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonUnknown192">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonUnknown193">
            <summary>Canon specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawColorInfo">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFileDescription">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawUserComment">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawMakeModel">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFirmwareVersion">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawROMOperationMode">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawOwnerName">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawImageType">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawOriginalFileName">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawThumbnailFileName">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawTargetImageType">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawShutterReleaseMethod">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawShutterReleaseTiming">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawBaseISO">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFocalLength">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawShotInfo">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawCameraSettings">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawWhiteSample">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawSensorInfo">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawCustomFunction">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawPictureInfo">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawWhiteBalanceTable">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawColorTemperature">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawColorSpace">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawImageFormat">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawCompressionRatio">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawRecordId">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawSelfTimerTime">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawTargetDistanceSetting">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawSerialNumber">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawTimeStamp">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawImageInfo">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFlashInfo">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawMeasuredEV">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFileNumber">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawExposureInfo">
            <summary>Canon Raw specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSpecialMode">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoJpegQuality">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoMacro">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoDigitalZoom">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSoftwareRelease">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoPictInfo">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoCameraID">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSequentialShotMethod">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoWideRange">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoColourAdjustmentMode">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoQuickShot">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSelfTimer">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoVoiceMemo">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoRecordShutterRelease">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoFlickerReduce">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoOpticalZoom">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoDigitalZoom1">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoLightSourceSpecial">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoResaved">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSceneSelect">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoManualFocalDistance">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoFlashMode">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoPrintIMFlag">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoDataDump">
            <summary>SANYO specific tag</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTagIfd">
            <summary> Contains an enumeration of standard Exif Ifd's. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Main">
            <summary> Primary image data information. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Exif">
            <summary> Exif camera information. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Interoperability">
            <summary> Exif interoperabliity information. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Thumbnail">
            <summary> A thumbnail stored with the image. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Gps">
            <summary> GPS Satellite information. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteUnknown">
            <summary> Camera specific information for an unknown camera make. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteFujiFilm">
            <summary> Camera specific information for a FujiFilm camera make. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteOlympus">
            <summary> Camera specific information for an Olympus camera make. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteNikonType1">
            <summary> Camera specific information for a Nikon camera make. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteNikonType3">
            <summary> Camera specific information for a Nikon camera make. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteCasio">
            <summary> Camera specific information for a Casio camera make. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteCanon">
            <summary> Camera specific information for a Canon camera make. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagID">
            <summary> Standard Tiff Tags that can be read from a TIFF file. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.NewSubfileType">
            <summary> TIFFTAG_SUBFILETYPE </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SubfileType">
            <summary>  TIFFTAG_OSUBFILETYPE </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageWidth">
            <summary> TIFFTAG_IMAGEWIDTH (256) UInt32 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageLength">
            <summary> TIFFTAG_IMAGELENGTHUInt32 (257) UInt32 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BitsPerSample">
            <summary> TIFFTAG_BITSPERSAMPLE (258) UInt16 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Compression">
            <summary> <para>TIFFTAG_COMPRESSION (259) UInt16</para>
            <para>1 = COMPRESSION_NONE,<BR/>2 = COMPRESSION_CCITTRLE,<BR/>3 = COMPRESSION_CCITTFAX3,<BR/>4 =
            COMPRESSION_CCITTFAX4,<BR/>5 = COMPRESSION_LZW,<BR/>6 = COMPRESSION_OJPEG,<BR/>7 = COMPRESSION_JPEG,<BR/>32766 =
            COMPRESSION_NEXT  (NeXT 2-bit RLE),<BR/>32771 = COMPRESSION_CCITTRLEW (#1 w/ word alignment),<BR/>32773 =
            COMPRESSION_PACKBITS (Macintosh RLE),<BR/>32809 = COMPRESSION_THUNDERSCAN (ThunderScan RLE)</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PhotometricInterpretation">
            <summary> <para>TIFFTAG_PHOTOMETRIC (262) UInt16</para>
            <para>0 = PHOTOMETRIC_MINISWHITE (min value is white),<BR/>1 = PHOTOMETRIC_MINISBLACK (min value is black),<BR/>2 =
            PHOTOMETRIC_RGB (RGB color model),<BR/>3 = PHOTOMETRIC_PALETTE  (color map indexed),<BR/>4 = PHOTOMETRIC_MASK 
            ($holdout mask),<BR/>5 = PHOTOMETRIC_SEPARATED (!color separations),<BR/>6 = PHOTOMETRIC_YCBCR  (!CCIR 601),<BR/>7 =
            PHOTOMETRIC_CIELAB  (!1976 CIE L*a*b*),<BR/>8 = PHOTOMETRIC_ICCLAB  (ICC L*a*b* [Adobe TIFF Technote 4]),<BR/>9 =
            PHOTOMETRIC_ITULAB  (ITU L*a*b*),<BR/>32844 = PHOTOMETRIC_LOGL  (CIE Log2(L)),<BR/>32845 = PHOTOMETRIC_LOGLUV (CIE
            Log2(L) (u',v'))</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Thresholding">
            <summary> TIFFTAG_THRESHHOLDING </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CellWidth">
            <summary> TIFFTAG_CELLWIDTH </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CellLength">
            <summary> TIFFTAG_CELLLENGTH </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FillOrder">
            <summary> TIFFTAG_FILLORDER </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DocumentName">
            <summary> TIFFTAG_DOCUMENTNAME (269) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageDescription">
            <summary> TIFFTAG_IMAGEDESCRIPTION (270) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Make">
            <summary> TIFFTAG_MAKE (271) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Model">
            <summary> TIFFTAG_MODEL (272) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.StripOffsets">
            <summary> StripOffsets </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Orientation">
            <summary> <para>TIFFTAG_ORIENTATION (274) UInt16</para>
            <para>1 = ORIENTATION_TOPLEFT,<BR/>2 = ORIENTATION_TOPRIGHT<BR/>3 = ORIENTATION_BOTRIGHT,<BR/>4 =
            ORIENTATION_BOTLEFT,<BR/>5 = ORIENTATION_LEFTTOP,<BR/>6 = ORIENTATION_RIGHTTOP,<BR/>7 = ORIENTATION_RIGHTBOT,<BR/>8
            = ORIENTATION_LEFTBOT</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SamplesPerPixel">
            <summary> TIFFTAG_SAMPLESPERPIXEL </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RowsPerStrip">
            <summary> TIFFTAG_ROWSPERSTRIP (The number of rows per strip in the image (not used in tiled images) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.StripByteCounts">
            <summary> TIFFTAG_STRIPBYTECOUNTS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.MinSampleValue">
            <summary> TIFFTAG_MINSAMPLEVALUE </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.MaxSampleValue">
            <summary> TIFFTAG_MAXSAMPLEVALUE </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XResolution">
            <summary> TIFFTAG_XRESOLUTION (282) Int32 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YResolution">
            <summary> TIFFTAG_YRESOLUTION (283) Int32 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PlanarConfiguration">
            <summary> How the data of each pixel are stored.  TIFFTAG_PLANARCONFIG</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PageName">
            <summary> TIFFTAG_PAGENAME (285) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XPosition">
            <summary> X position of the image. TIFFTAG_XPOSITION</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YPosition">
            <summary> Y position of the image. TIFFTAG_YPOSITION</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FreeOffsets">
            <summary> TIFFTAG_FREEOFFSETS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FreeByteCounts">
            <summary> TIFFTAG_FREEBYTECOUNTS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.GrayResponseUnit">
            <summary> TIFFTAG_GRAYRESPONSEUNIT </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.GrayResponseCurve">
            <summary> TIFFTAG_GRAYRESPONSECURVE </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.T4Options">
            <summary> TIFFTAG_GROUP3OPTIONS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.T6Options">
            <summary> TIFFTAG_GROUP4OPTIONS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ResolutionUnit">
            <summary> <para>TIFFTAG_RESOLUTIONUNIT (296) UInt16</para>
            <para>1 = RESUNIT_NONE,<BR/>2 = RESUNIT_INCH,<BR/>3 = RESUNIT_CENTIMETER</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PageNumber">
            <summary> Page number of scanned image. TIFFTAG_PAGENUMBER </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TransferFunction">
            <summary> TIFFTAG_TRANSFERFUNCTION </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Software">
            <summary> TIFFTAG_SOFTWARE (305) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DateTime">
            <summary> TIFFTAG_DATETIME (306) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Artist">
            <summary> TIFFTAG_ARTIST (315) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.HostComputer">
            <summary> TIFFTAG_HOSTCOMPUTER (316) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Predictor">
            <summary> TIFFTAG_PREDICTOR </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.WhitePoint">
            <summary> TIFFTAG_WHITEPOINT </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PrimaryChromaticities">
            <summary> TIFFTAG_PRIMARYCHROMATICITIES </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ColorMap">
            <summary> TIFFTAG_COLORMAP </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.HalftoneHints">
            <summary> TIFFTAG_HALFTONEHINTS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileWidth">
            <summary> TIFFTAG_TILEWIDTH (322) UInt32 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileLength">
            <summary> TIFFTAG_TILELENGTH (323) UInt32 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileOffsets">
            <summary> TIFFTAG_TILEOFFSETS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileByteCounts">
            <summary> TIFFTAG_TILEBYTECOUNTS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SubIFD">
            <summary> 330 TIFFTAG_SUBIFD </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.InkSet">
            <summary> <para>TIFFTAG_INKSET (332) UInt32 </para>
            <para>1 = INKSET_CMYK   (cyan-magenta-yellow-black color),<BR/>2 = INKSET_MULTIINK  (multi-ink or hi-fi
            color)</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.InkNames">
            <summary> TIFFTAG_INKNAMES (333) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.NumberOfInks">
            <summary> TIFFTAG_NUMBEROFINKS (334) UInt16 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DotRange">
            <summary> TIFFTAG_DOTRANGE (335) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TargetPrinter">
            <summary> TIFFTAG_TARGETPRINTER (337) String </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExtraSamples">
            <summary> <para>TIFFTAG_EXTRASAMPLES (338)</para>
            <para>0 = EXTRASAMPLE_UNSPECIFIED (unspecified data),<BR/>1 = EXTRASAMPLE_ASSOCALPHA (associated alpha data),<BR/>2
            = EXTRASAMPLE_UNASSALPHA (unassociated alpha data)</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SampleFormat">
            <summary> TIFFTAG_SAMPLEFORMAT </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SMinSampleValue">
            <summary> TIFFTAG_SMINSAMPLEVALUE </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SMaxSampleValue">
            <summary> TIFFTAG_SMAXSAMPLEVALUE </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TransferRange">
            <summary> TransferRange </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegTable">
            <summary> TIFFTAG_JPEGTABLES </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegProc">
            <summary> TIFFTAG_JPEGPROC </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegInterchangeFormat">
            <summary> JpegInterchangeFormat </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegInterchangeFormatLength">
            <summary> TIFFTAG_JPEGIFBYTECOUNT </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegRestartInterval">
            <summary> TIFFTAG_JPEGRESTARTINTERVAL </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegLosslessPredictors">
            <summary> TIFFTAG_JPEGLOSSLESSPREDICTORS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegPointTransforms">
            <summary> TIFFTAG_JPEGPOINTTRANSFORM </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegQTables">
            <summary> TIFFTAG_JPEGQTABLES </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegDcTables">
            <summary> TIFFTAG_JPEGDCTABLES </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegAcTables">
            <summary> TIFFTAG_JPEGACTABLES </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YCbCrCoefficients">
            <summary> TIFFTAG_YCBCRCOEFFICIENTS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YCbCrSubSampling">
            <summary> TIFFTAG_YCBCRSUBSAMPLING </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YCbCrPositioning">
            <summary> TIFFTAG_YCBCRPOSITIONING </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ReferenceBlackWhite">
            <summary> TIFFTAG_REFERENCEBLACKWHITE </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.StripRowCounts">
            <summary> 559 Defined in the Mixed Raster Content part of RFC 2301, used to replace RowsPerStrip for IFDs with variable-sized strips. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XmpData">
            <summary> TIFFTAG_XMLPACKET (700) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.WangAnnotationData">
            <summary> TIFFTAG_ANNOTATIONS (Wang annotations) (32932) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BatteryLevel">
            <summary> 0x828F TIFF/EP: Encodes camera battery level at time of image capture. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CFARepeatPatternDim">
            <summary> 0x828D TIFF/EP and DNG: "For camera raw files from sensors with CFA overlay"</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CFAPattern">
            <summary> 0x828E TIFF/EP and DNG: "Indicates the color filter array (CFA) geometric pattern of the image sensor when a one-chip color area sensor is used"</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Copyright">
            <summary> 0x8298 TIFFTAG_COPYRIGHT </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExposureTime">
            <summary> 0x829A ExposureTime (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FNumber">
            <summary> 0x829D FNumber (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RichTiffIptc">
            <summary> 0x83BB IPTC Data from the RichTIFF specification </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Photoshop">
            <summary> 0x8649 (34377) Private tag registered to Adobe for PhotoShop (IPTC data) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExifIfd">
            <summary> 0x8769 (34665) TIFFTAG_EXIFIFD </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.IccProfile">
            <summary> 0x8773 (34675) TIFFTAG_ICCPROFILE (TIFF/EP)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExposureProgram">
            <summary> 0x8822 ExposureProgram (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SpectralSensitivity">
            <summary> 0x8824 SpectralSensitivity (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.GpsIfd">
            <summary> 0x8825 TIFFTAG_GPSIFD (TIFF/EP)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.IsoSpeedRatings">
            <summary> IsoSpeedRatings, used by Exif Ifd (31 - 73) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Oecf">
            <summary> OECF: Opto-Electric Conversion Function (OECF) specified in ISO 14524. (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Interlace">
            <summary> 0x8829 Interlace - Indicates the field number of multifield images. (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TimeZoneOffset">
            <summary> Encodes time zone of camera clock relative to GMT. (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SelfTimeMode">
            <summary> 0x882B SelfTimeMode (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExifVersion">
            <summary> ExifVersion (TIFF/EP)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DateTimeOriginal">
            <summary> The date and time when the original image data was generated. (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DateTimeDigitized">
            <summary> DateTimeDigitized (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CompressedBitsPerPixel">
            <summary> CompressedBitsPerPixel (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ShutterSpeedValue">
            <summary> ShutterSpeedValue (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ApertureValue">
            <summary> ApertureValue (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BrightnessValue">
            <summary> BrightnessValue (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExposureBiasValue">
            <summary> ExposureBiasValue (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.MaxApertureValue">
            <summary> MaxApertureValue (TIFF/EP) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FlashEnergy">
            <summary> (0x920B) TIFF/EP: energy used by flash during capture, in BCPS </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SpatialFrequencyResponse">
            <summary> (0x920C) TIFF/EP: Spatial Frequency Response </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FocalPlaneXResolution">
            <summary> (0x920E) TIFF/EP: Focal Plane X-Resolution </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FocalPlaneYResolution">
            <summary> (0x920F) TIFF/EP: Focal Plane Y-Resolution </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FocalPlaneResolutionUnit">
            <summary> (0x9210) TIFF/EP: Focal Plane Resolution Unit </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SubjectLocation">
            <summary> (0x9214) TIFF/EP: Subject Location </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExposureIndex">
            <summary> (0x9215) TIFF/EP: Exposure Index </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SensingMethod">
            <summary> (0x9217) TIFF/EP: Sensing Method </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.EP_StandardID">
            <summary> (0x9216) applicable version of TIFF/EP standard</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.StoNits">
            <summary> (0x923F) 37439  number of candelas/meter^2 corresponding to a decoded Y value of 1.0</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.InteroperabilityIfdPointer">
            <summary> 0xA005 InteroperabilityIfdPointer (Exif, Image IFD) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PrintImageMatching">
            <summary> 0xC4A5 maybe PrintImageMatching in Image IFD? </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DNGVersion">
            <summary> Encodes the DNG four-tier version number. (DNG, Image IFD)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DNGBackwardVersion">
            <summary> Specifies the oldest version of the Digital Negative specification for which a file is compatible. (DNG IFD-0) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.UniqueCameraModel">
            <summary> Defines a unique, non-localized name for the camera model that created the image in the raw file. (DNG IFD-0) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.LocalizedCameraModel">
            <summary> Similar to the UniqueCameraModel tag, except the name can be localized for different markets to match the localization of the camera name </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CFAPlaneColor">
            <summary> 0xC616 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CFALayout">
            <summary> 0xC617 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DefaultScale">
            <summary> 0xC61E DefaultScale (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DefaultCropOrigin">
            <summary> 0xC61F DefaultCropOrigin (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DefaultCropSize">
            <summary> 0xC620 DefaultCropSize (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ColorMatrix1">
            <summary> 0xC621 ColorMatrix1 (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ColorMatrix2">
            <summary> 0xC622 ColorMatrix2 (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CameraCalibration1">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CameraCalibration2">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ReductionMatrix1">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ReductionMatrix2">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.AnalogBalance">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.AsShotNeutral">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.AsShotWhiteXY">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BaselineExposure">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BaselineNoise">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BaselineSharpness">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BayerGreenSplit">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.LinearResponseLimit">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CameraSerialNumber">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.LensInfo">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ChromaBlurRadius">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.AntiAliasStrength">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ShadowScale">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DNGPrivateData">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.MakerNoteSafety">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CalibrationIlluminant1">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CalibrationIlluminant2">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BestQualityScale">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RawDataUniqueID">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.AliasLayerMetadata">
            <summary>0xC660 private tag for Alias Sketchbook Pro</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.OriginalRawFileName">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.OriginalRawFileData">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ActiveArea">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.MaskedAreas">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.AsShotICCProfile">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.AsShotPreProfileMatrix">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CurrentICCProfile">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CurrentPreProfileMatrix">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ColorimetricReference">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CameraCalibrationSignature">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileCalibrationSignature">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExtraCameraProfiles">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.AsShotProfileName">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.NoiseReductionApplied">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileName">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileHueSatMapDims">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileHueSatMapData1">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileHueSatMapData2">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileToneCurve">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileEmbedPolicy">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileCopyright">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ForwardMatrix1">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ForwardMatrix2">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PreviewApplicationName">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PreviewApplicationVersion">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PreviewSettingsName">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PreviewSettingsDigest">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PreviewColorSpace">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PreviewDateTime">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RawImageDigest">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.OriginalRawFileDigest">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SubTileBlockSize">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RowInterleaveFactor">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileLookTableDims">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ProfileLookTableData">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.OpcodeList1">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.OpcodeList2">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.OpcodeList3">
            <summary> (DNG) </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.NoiseProfile">
            <summary> (DNG) </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags">
            <summary> Flag enumeration used with <see cref="M:CopyJpegWithNewMarkers"/>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyCom">
            <summary> Indicates whether the COM metadata should be copied. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyApp">
            <summary> Indicates whether the APP markers should be copied.  This will not copy JPEG_APP0. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.PlaceAfterSofn">
            <summary> Indicates whether the metadata should be placed after the SOF tag. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyApp0">
            <summary> Indicates whether the JPEG_APP0 marker is copied.  Normally this marker should not be copied since it
            contains image specific information, such as DPI. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagDataType">
            <summary> Enumeration of TIFF Tag data types </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.None">
            <summary> None </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Byte">
            <summary> 8-bit unsigned integer  </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Ascii">
            <summary> 8-bit bytes w/ last byte null </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Short">
            <summary> 16-bit unsigned integer </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Long">
            <summary> 32-bit unsigned integer </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Rational">
            <summary> 64-bit unsigned fraction </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.SByte">
            <summary> !8-bit signed integer </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Undefined">
            <summary> !8-bit untyped data </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.SShort">
            <summary> !16-bit signed integer </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.SLong">
            <summary> !32-bit signed integer </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.SRational">
            <summary> !64-bit signed fraction </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Float">
            <summary> !32-bit IEEE floating point </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Double">
            <summary> !64-bit IEEE floating point </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Ifd">
            <summary> 32-bit unsigned integer (offset) </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ImageMetadataException">
            <summary>
            This exception is thrown when an error with image metadata is detected
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor">
            <summary> Creates a new instance of ImageMetadataException. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor(System.String)">
            <summary> Creates a new instance of ImageMetadataException specifying the exception message. </summary>
            <param name="message"> The exception message. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor(System.String,System.Exception)">
            <summary> Creates a new instance of ImageMetadataException specifying the exception message and inner exception.
            </summary>
            <param name="message"> The exception message. </param>
            <param name="innerException"> The inner exception for this error. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Metadata.ImageMetadataException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifCollection">
            <summary> <para>Contains a collection of EXIF tags.</para> </summary>
            <seealso> EXIF Metadata </seealso>
            <seealso> Metadata Overview </seealso>
            <seealso> ExifParser Class </seealso>
            <remarks> See <see cref="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.IO.Stream,System.Int32)"/> of <see cref="T:Atalasoft.Imaging.Metadata.ExifParser"/> to populate an
            <STRONG>ExifCollection</STRONG> with EXIF data from an image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifCollection._makernoteHeader">
            <summary> Gets or sets the makernote header. </summary>
            <remarks> This information is required to save EXIF with the original maker note data.  It contains the header for
            vendor specific maker note tags identifying the type of makernote contained within this
            <STRONG>ExifCollection</STRONG>. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.#ctor">
            <summary> Creates a new instance of the <STRONG>ExifCollection</STRONG> class. </summary>
            <overloads> Create a new instance of <see cref="T:Atalasoft.Imaging.Metadata.ExifCollection"/>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.ToByteArray">
            <summary> Creates a byte array of the EXIF data that can be inserted into an image. </summary>
            <remarks> This method is intended on being used to store EXIF in a Jpeg Image.  To add or edit EXIF data in a JPEG
            image, create a JPEG APP1 Marker from this data.  See <see cref="T:Atalasoft.Imaging.Metadata.JpegMarker"/> for more information. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.CopyTo(Atalasoft.Imaging.Metadata.ExifTag[],System.Int32)">
            <summary> Copies items from this collection into an array. </summary>
            <param name="tags"> An array of <STRONG>ExifTags</STRONG> to hold the items. </param>
            <param name="index"> An index in the array where the data will be copied. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Add(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary> Adds a new <STRONG>ExifTag</STRONG> to this collection. </summary>
            <param name="tag"> The EXIF tag to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Remove(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary> Remove a specified <STRONG>ExifTag</STRONG> from the collection. </summary>
            <param name="tag"> The tag to remove </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.IndexOf(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary> Returns the index value of an <STRONG>ExifTag</STRONG> found in the collection. </summary>
            <returns> Returns -1 if the tag was not found. </returns>
            <param name="tag"> The specific tag to search for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.ExifTag)">
            <summary> Insert an EXIF Tag into the collection at the specified index. </summary>
            <param name="index"> The index to insert into. </param>
            <param name="source"> The tag to insert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Contains(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary> Returns a value indicating if a particular EXIF Tag exists in the collection. </summary>
            <param name="source"> The EXIF tag to test. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfd)">
            <summary> Looks up an <STRONG>ExifTag</STRONG> by Exif ID and IFD and returns it, or null. </summary>
            <param name="id"> The ID of the EXIF tag to lookup. </param>
            <param name="ifd"> The IFD to search through. </param>
            <returns> the matching ExifTag, or null if not found.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfd)">
            <summary> Looks up an <STRONG>ExifTag</STRONG> by id and IFD and returns it, or null.</summary>
            <param name="id"> The int id of the EXIF tag to look for</param>
            <param name="ifd"> The IFD to search through. </param>
            <returns> the matching ExifTag, or null if not found.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(System.String)">
            <summary>Deprecated</summary>
            <param name="description"> A textual description of the ExifTag (for example, "DateTime"). </param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.ThumbnailStream">
            <summary> Gets or sets the thumbnail stream contained within this EXIF data. </summary>
            <remarks> <para>EXIF information often contains a small thumbnail image.  That image can be obtained from this
            property.  The thumbnail can also be set or changed by setting this to a new stream.</para>
            <para>Please note that saving a thumbnail inside a TIFF image requires that the thumbnail is a TIFF.  When copying
            EXIF from a JPEG to a TIFF, ensure that the ThumbnailStream is converted from a JPEG to a TIFF.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.MakernoteHeader">
            <summary> Gets or sets the makernote header. </summary>
            <remarks> This information is required to save EXIF with the original maker note data.  It contains the header for
            vendor specific maker note tags identifying the type of makernote contained within this
            <STRONG>ExifCollection</STRONG>. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.Item(System.Int32)">
            <summary> Returns the <STRONG>ExifTag</STRONG> by index in the collection and allows the EXIF tags to be enumerated.
            </summary>
            <value> The EXIF Tag by index in the collection. </value>
            <param name="index"> The zero based index in the collection. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifDictionary">
            <summary>
            A collection of Exif 'tags' - metadata in Exif format.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage">
            <summary>
            in order to help fire CodecError event in static method, static method will pass
            this parameter indicating whether error was occurred.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO">
            <summary>
            Provides static methods to read (and write) from (to) source to conform to the given endian.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetTwoBytes(System.IO.Stream,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read short data from stream with big endian
            </summary>
            <param name="source">source stream</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>unsigned short type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetTwoBytes(System.Byte[],Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read short data from byte array with big endian
            </summary>
            <param name="source">source byte array</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>unsigned short type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetTwoBytes(System.IO.Stream,System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read 16 bit short type data from stream conforming to the given endian
            </summary>
            <param name="source">source stream</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>unsigned short type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetTwoBytes(System.Byte[],System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read 16 bit short type data from byte array conforming to the given endian
            </summary>
            <param name="source">source byte array</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>unsigned short type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetTwoBytes(System.Byte[],System.UInt16,System.Int32,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read 16 bit short type data from byte array conforming to the given endian
            </summary>
            <param name="source">source byte array</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="starting">the starting offset</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>unsigned short type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetFourBytes(System.IO.Stream,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read 32 bit integer type data conforming to the big endian
            </summary>
            <param name="source">source stream</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>integer type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetFourBytes(System.Byte[],Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read 32 bit integer type data conforming to the big endian
            </summary>
            <param name="source">source byte array</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>integer type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetFourBytes(System.IO.Stream,System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read 32 bit integer type data conforming to the given endian
            </summary>
            <param name="source">source stream</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>integer type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetFourBytes(System.Byte[],System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read 32 bit integer type data conforming to the given endian
            </summary>
            <param name="source">source byte array</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>integer type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.GetFourBytes(System.Byte[],System.UInt16,System.Int32,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            read 32 bit integer type data conforming to the given endian
            </summary>
            <param name="source">source byte array</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="starting">the starting offset</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>integer type data</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutTwoBytes(System.IO.Stream,System.UInt16,System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 16 bit short type data to stream conforming to the given endian
            </summary>
            <param name="target">target stream</param>
            <param name="buf">source data</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutTwoBytes(System.IO.Stream,System.Byte[],System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 16 bit short type data to stream conforming to the given endian
            </summary>
            <param name="target">target stream</param>
            <param name="buf">source byte array</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutTwoBytes(System.Byte[],System.UInt16,System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 16 bit short type data to byte array conforming to the given endian
            </summary>
            <param name="target">target byte array</param>
            <param name="buf">source data</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutTwoBytes(System.Byte[],System.UInt16,System.UInt16,System.Int32,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 16 bit short type data to byte array conforming to the given endian
            </summary>
            <param name="target">target byte array</param>
            <param name="buf">source data</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="starting">offset into the target</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutTwoBytes(System.Byte[],System.Byte[],System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 16 bit short type data to byte array conforming to the given endian
            </summary>
            <param name="target">target byte array</param>
            <param name="buf">source byte array</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutFourBytes(System.IO.Stream,System.Int32,System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 32 bit short type data conforming to the given endian
            </summary>
            <param name="target">target stream</param>
            <param name="buf">source data</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutFourBytes(System.IO.Stream,System.Byte[],System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 32 bit short type data conforming to the given endian
            </summary>
            <param name="target">target stream</param>
            <param name="buf">source data</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutFourBytes(System.Byte[],System.Int32,System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 32 bit short type data conforming to the given endian
            </summary>
            <param name="target">target byte array</param>
            <param name="buf">source data</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutFourBytes(System.Byte[],System.Byte[],System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 32 bit short type data conforming to the given endian
            </summary>
            <param name="target">target byte array</param>
            <param name="buf">source data</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutFourBytes(System.Byte[],System.Byte[],System.UInt16,System.Int32,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 32 bit short type data conforming to the given endian
            </summary>
            <param name="target">target byte array</param>
            <param name="buf">source data</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="buf_starting">An error message that is set if an error occurs</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.PutEightBytes(System.Byte[],System.Byte[],System.UInt16,System.Int32,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            write 32 bit short type data conforming to the given endian
            </summary>
            <param name="target">target byte array</param>
            <param name="buf">source data</param>
            <param name="byteorder">the endian: 0x4949 (little), 0x4D4D (big)</param>
            <param name="buf_starting">An error message that is set if an error occurs</param>
            <param name="cEM">An error message that is set if an error occurs</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.ConvertByteArrayToTypedObject(System.Byte[],System.UInt16,System.Int32,System.UInt16,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            convert byte array obtained to object conforming to exif tiff tag type 
            </summary>
            <param name="source">source byte array</param>
            <param name="type">tiff tag type</param>
            <param name="count">count of typed data (not size of byte array)</param>
            <param name="byteorder">endian</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>object</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.EndianIO.ConvertObjectToByteArray(System.Object,System.UInt16,System.UInt16,System.Int32@,Atalasoft.Imaging.Metadata.ExifEditor.CodecErrorMessage@)">
            <summary>
            convert object type data into byte array with a specified endian
            </summary>
            <param name="source">source object</param>
            <param name="type">origin data type</param>
            <param name="byteorder">given endian</param>
            <param name="count">count of data array, not the length of byte array</param>
            <param name="cEM">An error message that is set if an error occurs</param>
            <returns>byte array</returns>
            
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTag">
            <summary> Represents an Exif tag including tag-ID, IFD, value, and description. </summary>
            <remarks> See the <see cref="T:Atalasoft.Imaging.Metadata.ExifParser"/> class to retreive ExifTags from images. </remarks>
            <seealso cref="T:Atalasoft.Imaging.Metadata.ExifParser"/>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTag">
            <summary> Holds the data of a single TIFF Tag. </summary>
            <remarks> <para>TIFF Tags are returned when obtaining tags with the 
            <see cref="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag(System.Int32,System.String,System.Int32)">TiffDecoder.GetTiffTag</see> method in
            <see cref="T:Atalasoft.Imaging.Codec.TiffDecoder">TiffDecoder</see>, and set with the 
            <see cref="T:Atalasoft.Imaging.Metadata.TiffTag"/> property in the <see cref="T:Atalasoft.Imaging.Codec.TiffEncoder">TiffEncoder</see>.</para>
            <para>An alternative, and more comprehensive interface for retrieval and editing of TIFF Tags is the 
            <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffFile">TiffFile</see> class.</para> </remarks>
            <seealso> TiffTags Property </seealso>
            <seealso> GetTiffTag Method </seealso>
            <seealso> TiffTagCollection Class </seealso>
            <seealso> TiffFile </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTag._id">
            <summary> Gets the ID of this TIFF tag. </summary>
            <value> The ID of this TIFF tag. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTag._data">
            <summary> Gets or sets the data of a specific TIFF tag. </summary>
            <value> The data of this TIFF tag. </value>
            <remarks> <para>TIFF Tag data can is stored in the type which it was read from a file.  </para>
            <para>The TIFF Tag Data can contain an offset value which is a reference pointer to a location in the TIFF File with
            the actual image data.  In this case the <see cref="P:Atalasoft.Imaging.Metadata.TiffTag.IsReference"/> property is true and the actual data can
            be obtained by invoking the <see cref="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.LoadReferenceTagData(Atalasoft.Imaging.Metadata.TiffTag)">LoadReferenceTagData</see>
            in the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory">TiffDirectory</see>
            class.</para>
            <para>The TIFF Tag Data can be an array of values of the appropriate type.  To test if the Data contains an array
            invoke the GetType().IsArray() method.</para> </remarks>
            <exception> Thrown when the conversion from the data passed in to the actual type causes an overflow. </exception>
            <exception> Thrown when the an attempt was made to convert the data to the appropriate type, but failed.
            </exception>
            <exception> Thrown when the data passed is not the correct type. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTag._type">
            <summary> Gets the TIFF DataType for this TIFF Tag. </summary>
            <value> The TIFF DataType for this TIFF Tag. </value>
            <remarks> Each TIFF Tag has a specific data type.  When the TIFF Tag is created with the TiffTagID enumeration
            parameter, this value is automatically determined based on the standard TIFF Tag ID. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor(Atalasoft.Imaging.Metadata.TiffTagID,System.Object)">
            <summary> Creates a new instance of <STRONG>TiffTag</STRONG> with the tag ID enumeration and object data
            automatically determine the data type. </summary>
            <param name="id"> The TIFF Tag ID </param>
            <param name="data"> The data of the TIFF Tag </param>
            <summary> Initializes a new instance of the TiffTag class. </summary>
            <overloads> Creates an new instance of <STRONG>TiffTag</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor(Atalasoft.Imaging.Metadata.TiffTagID,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
            <summary> Creates a new instance of <STRONG>TiffTag</STRONG> with the tag ID, object data, and data type. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor(System.Int32,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
            <summary> Creates a new instance of <STRONG>TiffTag</STRONG> with the tag ID, object data, and data type. </summary>
            <param name="id"> The TIFF Tag ID </param>
            <param name="data"> The data of the TIFF Tag </param>
            <param name="type"> The data type of the TIFF Tag </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.ToString">
            <summary> A text description of the TiffTag. </summary>
            <returns> A text description of the TiffTag object. </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.IsReference">
            <summary> Gets a value indicating if the Data is a reference pointer. </summary>
            <value> A value indicating if the Data is a reference pointer. </value>
            <remarks> When this value is true, the actual data represented by this TIFF Tag can be obtained by invoking the <see cref="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.LoadReferenceTagData(Atalasoft.Imaging.Metadata.TiffTag)"/> in the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/> class. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.ID">
            <summary> Gets the ID of this TIFF tag. </summary>
            <value> The ID of this TIFF tag. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.Type">
            <summary> Gets the TIFF DataType for this TIFF Tag. </summary>
            <value> The TIFF DataType for this TIFF Tag. </value>
            <remarks> Each TIFF Tag has a specific data type.  When the TIFF Tag is created with the TiffTagID enumeration
            parameter, this value is automatically determined based on the standard TIFF Tag ID. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.Data">
            <summary> Gets or sets the data of a specific TIFF tag. </summary>
            <value> The data of this TIFF tag. </value>
            <remarks> <para>TIFF Tag data can is stored in the type which it was read from a file.  </para>
            <para>The TIFF Tag Data can contain an offset value which is a reference pointer to a location in the TIFF File with
            the actual image data.  In this case the <see cref="P:Atalasoft.Imaging.Metadata.TiffTag.IsReference"/> property is true and the actual data can
            be obtained by invoking the <see cref="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.LoadReferenceTagData(Atalasoft.Imaging.Metadata.TiffTag)"/> in the
            <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory"/>
            class.</para>
            <para>The TIFF Tag Data can be an array of values of the appropriate type.  To test if the Data contains an array
            invoke the GetType().IsArray() method.</para> </remarks>
            <exception> Thrown when the conversion from the data passed in to the actual type causes an overflow. </exception>
            <exception> Thrown when the an attempt was made to convert the data to the appropriate type, but failed.
            </exception>
            <exception> Thrown when the data passed is not the correct type. </exception>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTag._ifd">
            <summary> Gets the IFD of this <see cref="T:Atalasoft.Imaging.Metadata.ExifTag"/>. </summary>
            <value> The IFD of this <see cref="T:Atalasoft.Imaging.Metadata.ExifTag"/>. </value>
            <remarks> EXIF data can be stored in multiple IFD's. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#cctor">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.Metadata.ExifTag"/> specifying the id, ifd, data, and decription. </summary>
            <overloads> Initializes a new instance of <STRONG>ExifTag</STRONG>. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object)">
            <summary> Initializes a new instance of <STRONG>ExifTag</STRONG>. </summary>
            <param name="id"> The EXIF ID. </param>
            <param name="ifd"> The EXIF IFD. </param>
            <param name="data"> The EXIF Data </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object)">
            <summary> Initializes a new instance of <STRONG>ExifTag</STRONG>. </summary>
            <param name="id"> The ExifID </param>
            <param name="ifd"> The ExifIdf </param>
            <param name="data"> The object data </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Metadata.ExifTag"/> class.
            </summary>
            <param name="id">The tag identifier.</param>
            <param name="ifd">The ifd.</param>
            <param name="data">The data to associate with the tag.</param>
            <param name="type">The type of the data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
            <summary> Initializes a new instance of <STRONG>ExifTag</STRONG>. </summary>
            <param name="id"> The ExifID </param>
            <param name="ifd"> The ExifIfd </param>
            <param name="data"> The object data </param>
            <param name="type"> The tag data type </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.ToString">
            <summary> Returns a text description of the tag in the form of 'TagDescription: FormattedTagValue' </summary>
            <returns> A text description of the tag. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.ConvertExifDate(System.String)">
            <summary>
             convert an Exif Date to a recognizeable system date
            </summary>
            <param name="exifDate">A date string returned from an unformatted Exif tag.</param>
            <returns>The converted <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Ifd">
            <summary> Gets the IFD of this <see cref="T:Atalasoft.Imaging.Metadata.ExifTag"/>. </summary>
            <value> The IFD of this <see cref="T:Atalasoft.Imaging.Metadata.ExifTag"/>. </value>
            <remarks> EXIF data can be stored in multiple IFD's. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Data">
            <summary> Gets or sets the value of this EXIF tag. </summary>
            <value> The value of this EXIF tag. </value>
            <remarks> <para>The returned value is a variant object that is stored at its native type.  Use <see cref="M:Atalasoft.Imaging.Metadata.ExifTag.ToString"/> to view the string data of this tag.</para>
            <para>When editing or adding EXIF data, this tag must be able to be translated to the appropriate Type as defined in
            the ExifTag.Type property.  </para>
            <para>Array of types is also supported.  To determine if a tag is an array of values ihe invoke the
            GetType().IsArray() of the Data object. </para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Description">
            <summary> This property is deprecated. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifEditor.ExifMakerNoteParser">
            <summary>
            exif makernote parser
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.ExifMakerNoteParser.#ctor(System.Int64,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="position">makernote offset</param>
            <param name="relativePosition">exif offset</param>
            <remarks>
            offset is meant by stream position where exif/makernote starts
            </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.ExifMakerNoteParser.ExtractFujiFilm(System.IO.Stream)">
            <summary>
            FinePix4900Z
            </summary>
            <remarks>The other manufacturer's MakerNote counts the offset to data from the first byte of TIFF header, but Fujifilm counts it from the first byte of MakerNote itself. Fujifilm's Exif data uses Motorola align, but MakerNote ignores it and uses Intel align</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.ExifMakerNoteParser.ExtractOlympus(System.IO.Stream,System.UInt16)">
            <param name="source"></param>
            <param name="byteorder"></param>
            <returns>return makernote header</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifEditor.ExifMakerNoteParser.MakernoteTagIDMapping">
            <summary>
            some makernote tags are not unique, to resolve this problem an internal
            mapping is deviced between makernote tag and tiffTagID.................
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifEditor.ExifMakerNoteUnParser">
            <summary>
            write makernote back to stream
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.ExifMakerNoteUnParser.#ctor(System.Int64,System.Int64,System.Byte[])">
            <summary>
            constructor
            </summary>
            <param name="exifOffset">exif offset</param>
            <param name="makernoteOffset">makenote offset</param>
            <param name="makernote_header">makenote header string if exists</param>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._frame_index">
            <summary>
            page
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._exif_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._gps_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._interop_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._main_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._first_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._exif_pointer_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._gps_pointer_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._interop_pointer_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._main_pointer_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._first_pointer_info">
            <summary>
            position indicators of various-type exif tags
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._exif_tags">
            <summary>
            various-type exif tag collection
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._gps_tags">
            <summary>
            various-type exif tag collection
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._interop_tags">
            <summary>
            various-type exif tag collection
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._main_tags">
            <summary>
            various-type exif tag collection
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._first_tags">
            <summary>
            various-type exif tag collection
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._makernote_tags">
            <summary>
            various-type exif tag collection
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase._tiff_header">
            <summary>
            tiff header of exif including important information of endian
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase.ParseExifFromStream(System.IO.Stream,System.Int32)">
            <summary>
            extract exif tags from stream of jpeg/tiff
            </summary>
            <param name="source">stream</param>
            <param name="frameIndex">specific page in multi-page image</param>
            <returns>ExifCollection</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.ExifParserBase.ParseExifFromArray(System.Byte[])">
            <summary>
            extract exif tags out of byte array representing exif block
            </summary>
            <param name="source">byte array</param>
            <returns>ExifCollection</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.IExifUnparser.WriteToArray(Atalasoft.Imaging.Metadata.ExifCollection)">
            <summary>
            exif tags will be written to byte array
            </summary>
            <param name="exifTags">collection of exif tags to be written in byte array</param>
            <returns>exif block starting with APP1 marker (0xFFE1)</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.IExifUnparser.WriteToStream(System.IO.Stream,Atalasoft.Imaging.Metadata.ExifCollection)">
            <summary>
            exif block will be inserted in target stream 
            </summary>
            <param name="target">target stream</param>
            <param name="exifTags">collection of exif tags to be written in stream</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.JpegExifParser.ExtractExifTags(System.IO.Stream,System.Int32)">
            <summary>
            extract exif tags from jpeg stream
            </summary>
            <param name="source">jpeg stream</param>
            <param name="frameIndex">must be 0</param>
            <returns>true if exif tags can be extracted</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.JpegExifUnParser.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.JpegExifUnParser.WriteToArray(Atalasoft.Imaging.Metadata.ExifCollection)">
            <summary>
            exif tags will be written to byte array
            </summary>
            <param name="exifTags">collection of exif tags to be written in byte array</param>
            <returns>exif block starting with APP1 marker (0xFFE1)</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.JpegExifUnParser.WriteToStream(System.IO.Stream,Atalasoft.Imaging.Metadata.ExifCollection)">
            <summary>
            exif block will be inserted in target stream 
            </summary>
            <param name="target">target stream</param>
            <param name="exifTags">collection of exif tags to be written in stream</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifEditor.TiffExifParser">
            <summary>
            Helper class for parsing Exif metadata out of TIFF files
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.TiffExifParser.LocateExifTagPointer(System.IO.Stream,System.Int32,System.UInt16@,System.Int32@,System.UInt16)">
            <summary>
            Search stream for an IFD entry with specified tag in specified page
            </summary>
            <param name="source">stream to read from</param>
            <param name="frameIndex">image (page) in file, 0-based</param>
            <param name="byteorder">TIFF byte order (0x4949 or 0x4d4d)</param>
            <param name="page_offset">out: offset to start of IFD for that page</param>
            <param name="tagID">tag to look for</param>
            <returns>file position of entry, 0 if not found, -1 for 'parse error'</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.TiffExifParser.LocateSpecificTag(System.IO.Stream,System.UInt16,System.Int32,System.UInt16)">
            <summary>
            Locate an IFD Entry by tag ID, in an IFD
            </summary>
            <param name="source">stream to read from</param>
            <param name="byteorder">TIFF byte order (0x4949 or 0x4d4d)</param>
            <param name="ifdpos">position in stream of start of IFD</param>
            <param name="tagId">ID of tag to look for</param>
            <returns>position (offset) of matching entry, 0 if not found, -1 if invalid/error</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.TiffExifParser.HasJpegThumbnail(System.IO.Stream,System.Int64@)">
            <summary>
            Detect an Exif JPEG thumbnail in the IFD at the current position in the stream
            </summary>
            <param name="source">stream to read, positioned at IFD</param>
            <param name="joffset">(output) file position of start (SOI) of JPEG thumbnail data</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.TiffExifParser.GetThumbnailFromFirstIfd(System.IO.Stream,System.Int32)">
            <summary>
            Read and store thumbnail from the IFD at offset in stream
            </summary>
            <param name="source">stream to read from</param>
            <param name="offset">offset to IFD</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.TiffExifParser.GetJpegInterchangeFormat(System.IO.Stream,System.Int64)">
            <summary>
            Extract the thumbnail stream from the IFD at offset in stream
            </summary>
            <param name="source"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.RawExifParser.ParseExifFromStream(System.IO.Stream,System.Int32)">
            <summary>
            Parse and return a metadata collection from specified page in the specified stream.
            </summary>
            <param name="source">stream to read from</param>
            <param name="frameIndex">0-origin index of image/page to read</param>
            <returns>a collection of metadata tags, null if not found or error. </returns>
            <remarks>Starts at byte 0 of the stream
            assumes the stream starts with a TIFF byte-order mark ('II' or 'MM')
            Seems to handle: TIFF, DNG, NEF, CRW, RW2 </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifEditor.TiffExifUnParser">
            <summary>
            Summary description for TiffExifUnParser.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifEditor.ExifInfo">
            <summary>
            Summary description for ExifInfo.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifEditor.TiffHeader">
            <summary>
            Representation of 8-byte TIFF file header
            </summary>
            <remarks> We also parse a variety of not-quite-TIFF formats, such as Olympus ORF
            which may have for example a magic number != 42.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifEditor.TiffIFDBase.LocateSpecificTag(System.IO.Stream,System.UInt16,System.Int64,System.UInt16)">
            <summary>
            locate position of stream
            </summary>
            <param name="source">stream</param>
            <param name="byteorder">endian</param>
            <param name="rewindPos">current position in stream</param>
            <param name="tagId">given tag</param>
            <returns>0: non-existence of given tag, -1: error, streamp position</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifParser">
            <summary> Parses EXIF data from JPEG or TIFF images into a collection of EXIF tags. </summary>
            <remarks> <para>EXIF (Exchangeable Image File Format) is a standard for storing interchange information in image
            files, in particular JPEG images.  This metadata is commonly used in digital camera images to store information
            specific to digital photography such as shutter speed, date taken, aperture, GPS information, and other information
            depending on the make of the camera.</para></remarks>
            <example>
<para>This example demonstrates how to retreive EXIF tags from a JPEG image.</para>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
ExifTextParser exifParser = new ExifTextParser();
ExifTextCollection exifTags = exifParser.Parse("myimage.jpg");
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
Dim exifParser As ExifTextParser = New ExifTextParser()
Dim exifTags As ExifTextCollection = exifParser.Parse("myimage.jpg")
]]></code>

<para>This example shows how to retrieve EXIF data from an image, then save it back to a new image.</para>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
//get EXIF Tags
ExifParser exifParse = new ExifParser();
ExifCollection exifTags = exifParse.ParseFromImage(@"c\in.jpg");
//get JPEG Markers
JpegMarkerCollection appMarkersIn = new JpegMarkerCollection(@"c\in.jpg");
//read image
Workspace myWorkspace = new Workspace();
myWorkspace.Open(@"c\in.jpg");
//get the DataTime Tag from the image and display the value
if (exifTags != null)
{
    ExifTag tag = exifTags.LookupTag("DateTime");
    if (tag != null)
        MessageBox.Show("This photo was taken on " + tag.Data.ToString());
}
JpegEncoder jpeg = new JpegEncoder(75);
//only write EXIF Tags back to the image (APP1)
JpegMarkerCollection appMarkersOut = new JpegMarkerCollection();
foreach (JpegMarker mk in appMarkersIn)
    if (mk.Type == JpegMarkerTypes.MarkerApp1)
        appMarkersOut.Add(mk);
jpeg.AppMarkers = appMarkersOut;
myWorkspace.Save("c:\\out.jpg", jpeg);
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
'get EXIF Tags
Dim exifParse As ExifParser = New ExifParser() 
Dim exifTags As ExifCollection = exifParse.ParseFromImage("c\in.jpg") 
'get JPEG Markers
Dim appMarkersIn As JpegMarkerCollection = New JpegMarkerCollection("c:\in.jpg") 
'read image
Dim myWorkspace As Workspace =  New Workspace() 
myWorkspace.Open("c:\in.jpg")
'get the DataTime Tag from the image and display the value
If Not exifTags Is Nothing Then
    Dim tag As ExifTag =  exifTags.LookupTag("DateTime") 
    If Not tag Is Nothing Then
        MessageBox.Show("This photo was taken on " & tag.Data.ToString())
    End If
End If
Dim jpeg As JpegEncoder =  New JpegEncoder(75) 
'only write EXIF Tags back to the image (APP1)
Dim appMarkersOut As JpegMarkerCollection = New JpegMarkerCollection() 
Dim mk As JpegMarker
For Each mk In appMarkersIn
    If mk.Type = JpegMarkerTypes.MarkerApp1 Then
        appMarkersOut.Add(mk)
    End If
Next
jpeg.AppMarkers = appMarkersOut
myWorkspace.Save("c:\out.jpg", jpeg)
]]></code>
</example>
            <seealso> EXIF Description </seealso>
            <seealso> Metadata Overview </seealso>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.#ctor">
            <overloads> Initializes a new instance of <STRONG>ExifParser</STRONG>. </overloads>
            <summary> Initializes a new instance of <STRONG>ExifParser</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.String)">
            <summary> Parses EXIF data from a JPEG or TIFF image file. </summary>
            <example> ExifParser Class </example>
            <param name="imageFile"> The image filename to parse data from. </param>
            <example> ExifParser Class </example>
            <overloads> Parses EXIF data from a JPEG or TIFF image file or stream. </overloads>
            <returns> An <STRONG>ExifCollection</STRONG> containing all EXIF information. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.String,System.Int32)">
            <summary> Parses EXIF data from an image file, specifying the frame index of a multipage TIFF. </summary>
            <example> ExifParser Class </example>
            <param name="imageFile"> The image filename to parse data from. </param>
            <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load EXIF data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.IO.Stream)">
            <summary> Parses EXIF data from a JPEG or TIFF image file stream. </summary>
            <example> ExifParser Class </example>
            <param name="imageStream"> The image file stream to parse data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary> Parses EXIF data from an image file stream, specifying the frame index of a multipage TIFF. </summary>
            <example> ExifParser Class </example>
            <param name="imageStream"> The image file stream to parse data from. </param>
            <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load EXIF data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromByteArray(System.Byte[])">
            <summary> Parses a byte array of EXIF data. </summary>
            <returns> An <see cref="T:Atalasoft.Imaging.Metadata.ExifCollection"/> holding a list of all the EXIF values that were read.  This list will be
            empty if no values were read. </returns>
            <remarks> Use this method for dealing with raw image data.  For reading Exif from an image, use <see cref="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.String)"/>. </remarks>
            <overloads>
            <example>
<para>This example shows how to obtain the Exif data array directly from the raw data of a Jpeg.</para>
<code lang="CS" title="Exif Parse CS (C#)"><![CDATA[
ExifParser exifParse = new ExifParser();
ExifCollection exif;
FileStream fs = new FileStream("C:\testImage.jpg", FileMode.Open, FileAccess.Read, FileShare.Read);

fs.Seek(0,SeekOrigin.Begin);
JpegMarkerCollection markers = new JpegMarkerCollection(fs);
JpegMarker exifMarker = markers.LookupMarker(JpegMarkerTypes.MarkerApp1);
byte[] exifBytes = new byte[exifMarker.Data.Length];
exifBytes = exifMarker.Data;
            
exif = exifParse.ParseFromByteArray(exifBytes);
]]></code>

<code lang="VB" title="Exif Parse VB (Visual Basic)"><![CDATA[
Dim exifParse As ExifParser = New ExifParser
Dim exif As ExifCollection
Dim fs As FileStream = New FileStream("C:\testImage.jpg", FileMode.Open, FileAccess.Read, FileShare.Read)

fs.Seek(0, SeekOrigin.Begin)
Dim markers As JpegMarkerCollection = New JpegMarkerCollection(fs)
Dim exifMarker As JpegMarker = markers.LookupMarker(JpegMarkerTypes.MarkerApp1)
Dim exifBytes(exifMarker.Data.Length) As Byte
exifBytes = exifMarker.Data

exif = exifParse.ParseFromByteArray(exifBytes)
]]></code>
</example>
            </overloads>
            <param name="exifData"> An array containing the entire EXIF string to parse. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)">
            <summary>
            Raises the <see cref="E:Error"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Imaging.Codec.CodecErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifParser.FormatTags">
            <value> A value indicating if the EXIF tags are formatted to english strings. </value>
            <remarks> To achieve similar functionality as the pre-deprecated version, use the ToString() method in the ExifTag
            class.  It will return 'TagName: EnglishFormattedValue'.  You can parse this string to yield the same result, which
            is just 'EnglishFormattedValue'. </remarks>
            <summary> Deprecated</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifParser.ThumbnailCallback">
            <summary>Deprecated </summary>
            <remarks> See <see cref="P:Atalasoft.Imaging.Metadata.ExifCollection.ThumbnailStream"/> in <see cref="T:Atalasoft.Imaging.Metadata.ExifCollection"/> for the replacement.
            </remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Metadata.ExifParser.CodecError">
            <summary> This event is used by the <STRONG>ExifParser </STRONG>object to report errors that occur when parsing an
            image. </summary>
            <remarks> The DotImage EXIF Parser is aggressive in suppressing errors encountered while parsing damaged or somewhat
            malformed files.  Normally these errors are not reported.  This event provides a mechanism for an application to
            record, report, or abort in the event of an error. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifParser.FileFormat.Unknown">
            <summary> Image file format is undefined </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifParser.FileFormat.JPEG">
            <summary> JPEG/JFIF </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifParser.FileFormat.J2K">
            <summary> JPEG2000 </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifParser.FileFormat.TIFF">
            <summary> TIFF - Tagged Image File Format </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifParser.FileFormat.DNG">
            <summary> Adobe DNG - special TIFF-based RAW format </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifParser.FileFormat.ORF">
            <summary> ORF - Olympus RAW, almost TIFF </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifParser.FileFormat.RAW">
            <summary> RAW general </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcCollection">
            <summary> <para>Contains a collection of IPTC tags.</para> </summary>
            <seealso> Metadata Overview </seealso>
            <remarks> See the ParseFromImage methods of the IptcParser class to populate an
            <STRONG>IptcCollection</STRONG> with data from an image. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor">
            <summary> Initializes an empty collection of <see cref="T:Atalasoft.Imaging.Metadata.IptcTag">IptcTags</see> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.String)">
            <summary> Creates a new instance of the IptcCollection class specifying the file to read the iptc metadata from.
            </summary>
            <param name="fileName"> File to retreive iptc data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.String,System.Int32)">
            <summary> Creates a new instance of the IptcCollection class specifying the file and page index (in a multipage
            TIFF) to read the iptc metadata from. </summary>
            <param name="fileName"> File to retreive iptc data from. </param>
            <param name="frameIndex"> The zero based page in a multipage TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.IO.Stream)">
            <summary> Creates a new instance of the IptcCollection class specifying the file stream to read the iptc metadata
            from. </summary>
            <param name="stream"> File to retreive iptc data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.IO.Stream,System.Int32)">
            <summary> Creates a new instance of the IptcCollection class specifying the file stream and page index (in a
            multipage TIFF) to read the iptc metadata from. </summary>
            <param name="stream"> File to retreive iptc data from. </param>
            <param name="frameIndex"> The zero based page in a multipage TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.CopyTo(Atalasoft.Imaging.Metadata.IptcTag[],System.Int32)">
            <summary> Copies items from the collection into an array. </summary>
            <param name="tags"> An array of IptcTag object that will hold the collection items. </param>
            <param name="index"> An index in the array where the data will be copied. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Add(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>
            Add a new IptcTag to the image.
            </summary>
            <param name="tag">IptcTag to add.</param>
            <remarks>If the tag already exists, the text data will be overwritten.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Remove(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary> Remove a specified IptcTag from the collection. </summary>
            <param name="tag"> The IptcTag to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Contains(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>
            Determines whether [contains] [the specified source].
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.IndexOf(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary> Returns the index value of an IptcTag. </summary>
            <returns> The index of the item or -1 if the item is not in the collection. </returns>
            <param name="tag"> The IptcTag to search for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag(System.Int32,System.Int32)">
            <param name="id"> The ID of the tag to look up. </param>
            <param name="index"> The index of the tag to look up. </param>
            <summary> Returns an IptcTag based on an IPTC ID and index. </summary>
            <returns> An IptcTag containing the ID and index specified or null (Nothing in Visual Basic) if a match is not
            found. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag(System.Int32,System.Int32,System.Int32)">
            <summary>
            Lookups the tag.
            </summary>
            <param name="section">The section.</param>
            <param name="id">The identifier.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.GetTagDescription(System.Int32)">
            <returns>A text description of an IPTC ID.</returns>
            <summary> Returns a textual description based on an IptcID. </summary>
            <param name="id"> The ID of the tag. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.CreateIptcDataBlock">
            <summary>
            Generate an IPTC data block.
            </summary>
            <returns>The data block generated by this function can be used in IS3AddJPGOutputMarker to add an IPTC data block to a JPG image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcCollection.Item(System.Int32)">
            <summary> Returns the IptcTag by index in the collection and allows the Iptc tags to be enumerated. </summary>
            <param name="index"> The zero based index in the collection. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcParser">
            <remarks> <para>The Newspaper Association of America (NAA) and the International Press Telecommunications Council
            (IPTC) have worked jointly to design a model to store all sorts of data in an image.  This metadata is commonly
            known as IPTC.  Adobe Photoshop uses IPTC to store information in images as well as much of the newspaper and press
            industry.  DotImage can read and write IPTC information to a JPEG image and read IPTC information from a TIFF
            image.</para>
            <para>IPTC data can be modified and saved back in a JPEG or TIFF image.</para>
            <para>For more information on IPTC and Metadata in general see %iptc.html% and %metadataoverview.html%.</para>
            </remarks>
            <summary> Parses IPTC data from JPEG or TIFF images into a collection of IPTC tags. </summary>
            <example>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
IptcTextParser iptcParser = new IptcTextParser();
IptcTextCollection iptcTags = iptcParser.Parse("myimage.jpg");
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
Dim iptcParser As IptcTextParser = New IptcTextParser()
Dim iptcTags As IptcTextCollection = iptcParser.Parse("myimage.jpg")
]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.#ctor">
            <summary> Initializes a new instance of <STRONG>IptcParser</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromByteArray(System.Byte[])">
            <summary> Parses IPTC data from a byte array. </summary>
            <returns> An IptcCollection containing the parsed data. </returns>
            <remarks> This is useful if the image format stores the IPTC in a different location within the file.  For instance,
            IPTC may be stored in the TIFFTAG_RICHTIFFIPTC (ID 33723) instead of the Adobe Photoshop tag. </remarks>
            <param name="iptcData"> A byte array containing the IPTC data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.String,System.Int32)">
            <summary> Parses IPTC data from a specific frame in a multipage TIFF image file. </summary>
            <seealso cref="T:Atalasoft.Imaging.Metadata.IptcParser"/>
            <param name="imageFile"> The image file to parse data from. </param>
            <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load data from. </param>
            <overloads> Parses IPTC data from a JPEG or TIFF image file or stream. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.String)">
            <summary> Parses IPTC data from a JPEG or TIFF image file. </summary>
            <seealso cref="T:Atalasoft.Imaging.Metadata.IptcParser"/>
            <param name="imageFile"> The image file to parse data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.IO.Stream)">
            <summary> Parses IPTC data from a JPEG or TIFF image file stream. </summary>
            <seealso cref="T:Atalasoft.Imaging.Metadata.IptcParser"/>
            <param name="imageStream"> The image file stream to parse data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary> Parses IPTC data from a specific frame in a multipage TIFF image file stream. </summary>
            <seealso cref="T:Atalasoft.Imaging.Metadata.IptcParser"/>
            <param name="imageStream"> The image file stream to parse data from. </param>
            <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load data from. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcTag">
            <summary> Contains the data of this IPTC tag including ID, index, section, and value. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.Metadata.ExifTag"/> specifying the id, section, index, and data. </summary>
            <param name="section"> The section for this IPTC tag.  Normally 2. </param>
            <param name="id"> The ID of this IPTC tag. </param>
            <param name="index"> The index of this IPTC tag. </param>
            <param name="data"> The value of this IptcTag. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag.ToString">
            <summary> Returns a text description of the IptcTag. </summary>
            <returns> A text description of the IptcTag. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag.op_Equality(Atalasoft.Imaging.Metadata.IptcTag,Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>
            Compares the specified tags for equality.
            </summary>
            <param name="tag1">The tag1.</param>
            <param name="tag2">The tag2.</param>
            <returns><c>true</c> if the tags are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag.op_Inequality(Atalasoft.Imaging.Metadata.IptcTag,Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>
            Compares the specified tags for inequality.
            </summary>
            <param name="tag1">The tag1.</param>
            <param name="tag2">The tag2.</param>
            <returns><c>true</c> if the tags are not equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.ID">
            <summary> Gets or sets the ID of this IPTC tag. </summary>
            <value> The ID of this IPTC tag. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Data">
            <summary> Gets or sets the value of this IptcTag. </summary>
            <value> The value of this IptcTag. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Section">
            <summary> Gets or sets the section for this IPTC tag. Normally this value is 2. </summary>
            <value> The section for this IPTC tag. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Index">
            <summary> Sets or returns the index value for this IPTC tag. </summary>
            <remarks> Each IPTC item can have multiple tags. This specifies the index for this item. </remarks>
            <value> The index of this IPTC tag. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarker">
            <remarks> A Jpeg Marker is a data block stored in Jpeg images.  Also known as JPEG APPn markers.  There are 14
            markers that can be stored in JPEG images.  See <see cref="T:Atalasoft.Imaging.Metadata.JpegMarkerCollection"/> for retreiving this data from
            existing JPEG images. </remarks>
            <summary> The JpegMarker is an object that stores information from JPEG images </summary>
            <seealso cref="T:Atalasoft.Imaging.Metadata.JpegMarkerCollection"/>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarker._type">
            <summary> Gets or sets the type of JpegMarker. </summary>
            <value> The type of JpegMarker. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarker._data">
            <summary> <para>Gets the binary data stored in this marker.</para> </summary>
            <remarks> This data does not contain the first four bytes of marker information, which specifies the data length and
            marker type.  When adding custom data, these four bytes should be removed so the Data property only contains the
            marker content. </remarks>
            <value> <para>A pointer to the data stored in this marker.</para>,<BR/>The binary data stored in this marker.
            </value>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarker.#ctor(Atalasoft.Imaging.Metadata.JpegMarkerTypes,System.Byte[])">
            <remarks> Creates a new instance of JpegMarker. </remarks>
            <summary> Creates a new instance of JpegMarker. </summary>
            <param name="type"> The type of JpegMarker. </param>
            <param name="data"> <para>The data stored in this marker.</para> </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarker.Dispose">
            <summary> Call this method to free the JpegMarker data from memory without waiting for the Garbage Collector.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Type">
            <summary> Gets or sets the type of JpegMarker. </summary>
            <value> The type of JpegMarker. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Data">
            <summary> <para>Gets the binary data stored in this marker.</para> </summary>
            <remarks> This data does not contain the first four bytes of marker information, which specifies the data length and
            marker type.  When adding custom data, these four bytes should be removed so the Data property only contains the
            marker content. </remarks>
            <value> <para>A pointer to the data stored in this marker.</para>,<BR/>The binary data stored in this marker.
            </value>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Length">
            <value> The length of this marker in bytes. </value>
            <summary> Gets or sets the length of this marker in bytes. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerCollection">
            <remarks> <para>Metadata such as EXIF, IPTC, and COM Markers are stored in as Jpeg Markers in JPEG files.  This
            class allows Jpeg markers to be accessed and resaved in a new image (both lossy or lossless).</para>
            <para>The marker data returned does not contain the first four bytes of actual marker data.  These four bytes
            contain the length of the data and the marker type.</para> </remarks>
            <summary> <para>Contains a collection of JpegMarkers and methods to access JpegMarker data.</para> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor">
            <summary> Creates a new instance of <STRONG>JpegMarkerCollection</STRONG> with an empty collection </summary>
            <remarks> Creates a new instance of the JpegMarkerCollection class. ,<BR/> </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor(System.IO.Stream)">
            <remarks> Creates a new instance of the JpegMarkerCollection class specifying the file stream to read the markers
            from. </remarks>
            <summary> Creates a new instance of <STRONG>JpegMarkerCollection</STRONG> specifying a stream containing the Jpeg
            file. </summary>
            <param name="stream"> File to retreive Jpeg markers from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor(System.String)">
            <remarks> Creates a new instance of the JpegMarkerCollection class specifying the file to read the markers from.
            </remarks>
            <summary> Creates a new instance of <STRONG>JpegMarkerCollection</STRONG> specifying the filename of the image.
            </summary>
            <param name="fileName"> File to retreive Jpeg markers from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.LookupMarkers(Atalasoft.Imaging.Metadata.JpegMarkerTypes)">
            <summary> Returns a collection of %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% in the collection based
            on the marker type. </summary>
            <returns> A Collection of markers filtered for the types specified. </returns>
            <param name="type"> The types of markers to lookup. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.LookupMarker(Atalasoft.Imaging.Metadata.JpegMarkerTypes)">
            <summary> <para>This method is obsolete and will only return the first marker found, please use LookupMarkers
            instead.</para>
            <para>Returns a %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% in the collection based on the marker
            type.</para> </summary>
            <returns> The JpegMarker or null (Nothing in Visual Basic) if the item is not found. </returns>
            <param name="type"> The type of marker to lookup. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.CopyTo(Atalasoft.Imaging.Metadata.JpegMarker[],System.Int32)">
            <overloads> Copies data from the collection into an array. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Add(Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary> Adds a new <STRONG>JpegMarker</STRONG> to the collection. </summary>
            <param name="marker"> The marker to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary> Insert a new %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% into the collection at the
            specified index. </summary>
            <param name="index"> The index in the collection. </param>
            <param name="marker"> The marker to insert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Remove(Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary> Removes a specified %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% from the collection.</summary>
            <param name="marker"> The marker to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.IndexOf(Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary> Searches for the specified %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% and returns the
            zero-based index of the first occurance within the collection </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Contains(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>
            Determines whether the collection contains the specified marker.
            </summary>
            <param name="marker">The marker.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Contains(Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary>
            Determines whether the collection contains the specified marker.
            </summary>
            <param name="marker">The marker.</param>
            <returns></returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.MarkersToSave">
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarkerTypes.html">JpegMarkerTypes</a> bit
            flags that indicate which markers will be saved. </value>
            <summary> Obsolete </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Item(System.Int32)">
            <summary> Allows the <see cref="T:Atalasoft.Imaging.Metadata.JpegMarker"/> objects to be enumerated. </summary>
            <param name="index"> The zero based index in the collection. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResource">
            <summary> Contains the data of a <STRONG>Photoshop Resource</STRONG> including ID, Data, and Description. </summary>
            <remarks> The Data object always contains a byte array. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.PhotoshopResource.id">
            <summary> Gets or sets the ID of this resource. </summary>
            <value> The ID of this resource. </value>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.PhotoshopResource.data">
            <summary> Gets or sets the data of this resource. </summary>
            <value> The data of this resource. </value>
            <remarks> The object is always a byte array. </remarks>
            <seealso cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection"/>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.PhotoshopResource.description">
            <summary> Gets or sets a textual description of the resource. </summary>
            <value> A textual description of the resource. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.#ctor(System.Int32,System.Object,System.String)">
            <summary> Initializes a new instance of <STRONG>PhotoshopResource</STRONG>. </summary>
            <param name="id"> The resource ID. </param>
            <param name="data"> The resource data (typically a string value or byte array). </param>
            <param name="description"> A description of the resource (optional). </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.ToString">
            <summary> <para>Returns a string of:</para>
            <para>The data if the data is a string</para>
            <para>OR</para>
            <para>The description if not null</para>
            <para>OR</para>
            <para>The ID as string</para> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.op_Equality(Atalasoft.Imaging.Metadata.PhotoshopResource,Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>
            Compares two PhotoshopResource objects for equality.
            </summary>
            <param name="resource1">The resource1.</param>
            <param name="resource2">The resource2.</param>
            <returns><c>true</c> if the resources are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.op_Inequality(Atalasoft.Imaging.Metadata.PhotoshopResource,Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>
            Compares two PhotoshopResource objects for inequality.
            </summary>
            <param name="resource1">The resource1.</param>
            <param name="resource2">The resource2.</param>
            <returns><c>true</c> if the resources are not equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.GetHashCode">
            <summary> Gets the hashcode for this object </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.ID">
            <summary> Gets or sets the ID of this resource. </summary>
            <value> The ID of this resource. </value>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.Data">
            <summary> Gets or sets the data of this resource. </summary>
            <value> The data of this resource. </value>
            <remarks> The object is always a byte array. </remarks>
            <seealso cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection"/>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.Description">
            <summary> Gets or sets a textual description of the resource. </summary>
            <value> A textual description of the resource. </value>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection">
            <summary> <para>Contains a collection of Photoshop resources.</para> </summary>
            <remarks> See ParseFromImage of the  PhotoshopResourceParser
            class to populate a <STRONG>PhotoshopResourceCollection</STRONG> with data from an image. </remarks>
            <seealso> Photoshop resources</seealso>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.#ctor">
            <summary> Initializes a new instance of <STRONG>PhotoshopResourceCollection</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.CopyTo(Atalasoft.Imaging.Metadata.PhotoshopResource[],System.Int32)">
            <summary> Copies the collection into an Array of <STRONG>PhotoshopResources</STRONG>. </summary>
            <param name="resources"> The array of resources. </param>
            <param name="index"> the index of the array to start copying into. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Add(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>
            Adds the specified resource.
            </summary>
            <param name="resource">The resource.</param>
            <exception cref="T:System.ArgumentNullException">resource;Argument 'resource' cannot be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Remove(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary> Removes a specified <STRONG>PhotoshopResource </STRONG>from the collection. </summary>
            <param name="resource"> The <STRONG>PhotoshopResource</STRONG> to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.IndexOf(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary> Returns the zero based index of a specified <STRONG>PhotoshopResource</STRONG> if located in the
            collection. </summary>
            <returns> Returns -1 if not found, the index in the collection if found. </returns>
            <param name="resource"> The <STRONG>PhotoshopResource</STRONG> to search for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>
            Inserts the resource at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="resource">The resource.</param>
            <exception cref="T:System.ArgumentNullException">resource;Argument 'resource' cannot be null.</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Contains(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary> Determines whether the given <STRONG>PhotoshopResource</STRONG> is in the collection </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.LookupResource(System.Int32)">
            <summary> Gets a <STRONG>PhotoshopResource</STRONG> from an ID. </summary>
            <remarks> Returns null (Nothing in VB) if a resource of the specified ID doesn't exist. </remarks>
            <returns> A PhotoshopResource that matches the specified ID. </returns>
            <param name="id"> The PhotoshopResource ID to look for. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Item(System.Int32)">
            <summary> Gets an item index of the <STRONG>PhotoshopResourceCollection</STRONG>. </summary>
            <param name="index"> The zero based item index. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser">
            <summary> Parses Photoshop resources from JPEG, TIFF, and PSD images into a collection of
            <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResource">PhotoshopResources</see>. </summary>
            <remarks> The Format Specification for Photoshop Resources is available to purchase from Adobe.  This document
            contains information for each resource ID.  The data in each <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResource"/> is stored as a byte
            array.  The developer must know the format of each ID, available in the specification, to parse to the respective
            value (string, integer, raw bytes, etc). </remarks>
            <seealso cref="T:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection"/>
            <example> Extract DPI information from a PSD File </example>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.#ctor">
            <summary> Initializes a new instance of <STRONG>PhotoshopResourceParser</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.String,System.Int32)">
            <summary> Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file specifying the frame index. </summary>
            <param name="imageFile"> The image file to parse data from. </param>
            <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load data from. </param>
            <overloads> Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file or stream. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.String)">
            <summary> Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file. </summary>
            <param name="imageFile"> The image file to parse data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.IO.Stream)">
            <summary> Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file stream. </summary>
            <param name="imageStream"> The image file stream to parse data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary> Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file stream specifying the frame index.</summary>
            <param name="imageStream"> The image file stream to parse data from. </param>
            <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load data from. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.Rational">
            <summary> A fractional value used to represent certain TIFF and EXIF tags. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.#ctor(System.Int32,System.Int32)">
            <summary> Creates a new instance of Rational. </summary>
            <param name="numerator"> The fraction numerator </param>
            <param name="denominator"> The fraction denominator </param>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.Rational._numerator">
            <summary> Gets the numerator of the fraction. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.Rational._denominator">
            <summary> Gets the denominator of the fraction </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.ToString">
            <summary> Returns a string representation of the fraction (numerator/denominator) </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.Parse(System.String)">
            <summary> Parses a string in the form of numerator/denominator to a Rational value. </summary>
            <param name="s"> The string to parse </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.op_Equality(Atalasoft.Imaging.Metadata.Rational,Atalasoft.Imaging.Metadata.Rational)">
            <summary>
            Compares two Rational objects for equality.
            </summary>
            <param name="rat1">The rat1.</param>
            <param name="rat2">The rat2.</param>
            <returns><c>true</c> if the Rationals are equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.Equals(Atalasoft.Imaging.Metadata.Rational,Atalasoft.Imaging.Metadata.Rational)">
            <summary>
            Equalses the specified rat1.
            </summary>
            <param name="rat1">The rat1.</param>
            <param name="rat2">The rat2.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.op_Inequality(Atalasoft.Imaging.Metadata.Rational,Atalasoft.Imaging.Metadata.Rational)">
            <summary>
            Compares two Rational objects for inequality.
            </summary>
            <param name="rat1">The rat1.</param>
            <param name="rat2">The rat2.</param>
            <returns><c>true</c> if the Rationals are not equal, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.Rational.Numerator">
            <summary> Gets the numerator of the fraction. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.Rational.Denominator">
            <summary> Gets the denominator of the fraction </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.Rational.Empty">
            <summary> Returns an 'Empty' Rational value of 0/1. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagCollection">
            <summary> <para>Contains a collection of TIFF tags, used tor writing TIFF Tags to an image when saving.</para>
            </summary>
            <remarks> <para>All TIFF images contain metadata explaining the size, colordepth, strip size, and other detailed
            information of the image.  A TIFF tag is identified by an ID.  DotImage can read this information from a TIFF file
            as a string.</para>
            <para>For more information, see the section on Tiff Tags and the Metadata Overview.</para> </remarks>
            <seealso cref="T:Atalasoft.Imaging.Metadata.TiffTag"/>
            <seealso cref="N:Atalasoft.Imaging.Metadata"/>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor">
            <summary>
            Create a new instance of <see cref="T:Atalasoft.Imaging.Metadata.ExifCollection"/>.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.String)">
            <summary> Deprecated </summary>
            <param name="fileName"> File to retreive tiff tags from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.IO.Stream)">
            /// <summary> Deprecated </summary>
            <param name="fileStream"> File to retreive tiff tags from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.String,System.Int32)">
            <summary> Deprecated </summary>
            <param name="fileName"> File to retreive tiff tags from. </param>
            <param name="frameIndex"> The zero based page in a multipage TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.IO.Stream,System.Int32)">
            <summary> Deprecated </summary>
            <param name="fileStream"> File to retreive tiff tags from. </param>
            <param name="frameIndex"> The zero based page in a multipage TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Add(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary> Adds a new TIFF Tag to the collection. </summary>
            <param name="tag"> The TIFF Tag to add. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.TiffTag)">
            <summary> Insert a TIFF Tag into the collection at the specified index. </summary>
            <param name="index"> The index to insert into. </param>
            <param name="tag"> The tag to insert. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Remove(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary> Remove a specified tag from the collection. </summary>
            <param name="tag"> The TIFF Tag to remove. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.IndexOf(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary> Returns the index value of a <STRONG>TiffTag</STRONG> found in the collection. </summary>
            <returns> Returns -1 if the tag was not found. </returns>
            <param name="tag"> The specific tag to search for. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Contains(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary> Returns a value indicating if a particular TIFF Tag exists in the collection. </summary>
            <param name="tag"> The TIFF Tag to check. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.LookupTag(System.Int32)">
            <summary> Returns a TiffTag based on a TiffID. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.LookupTag(Atalasoft.Imaging.Metadata.TiffTagID)">
            <summary>
            Lookups the tag.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String)">
            <summary> Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID and file. </summary>
            <param name="tag"> The TIFF Tag ID to retrieve. </param>
            <param name="filename"> The file containing the encoded TIFF image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream)">
            <summary> Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID and file stream. </summary>
            <param name="tag"> The TIFF Tag ID to retrieve. </param>
            <param name="source"> The stream containing the encoded TIFF image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String,System.Int32)">
            <summary> Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID, file and zero based page index.
            </summary>
            <param name="tag"> The TIFF Tag ID to retrieve. </param>
            <param name="filename"> The file containing the encoded TIFF image. </param>
            <param name="frameIndex"> The zero based page index of a multipaged TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(System.Int32,System.String,System.Int32)">
            <summary> Returns the TIFF tag data from a file. </summary>
            <param name="tagID"> The TIFF Tag ID to retrieve. </param>
            <param name="filename"> The filename of the TIFF image. </param>
            <param name="frameIndex"> The zero based page index of a multipaged TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(System.Int32,System.IO.Stream,System.Int32)">
            <summary> Returns a TiffTag from a TIFF image specifying the tag ID, image stream and frame index. </summary>
            <returns> A object containing the TIFF tag data. </returns>
            <param name="tagID"> The TIFF tag ID to return. </param>
            <param name="source"> A stream containing the image data. </param>
            <param name="frameIndex"> The frame index from a multipage TIFF containing the tag data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream,System.Int32)">
            <summary> Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID, file stream and zero based page
            index. </summary>
            <param name="tag"> The TIFF Tag ID to retrieve. </param>
            <param name="source"> The stream containing the encoded TIFF image. </param>
            <param name="frameIndex"> The zero based page index of a multipaged TIFF. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.CopyTo(Atalasoft.Imaging.Metadata.TiffTag[],System.Int32)">
            <summary> Copies items from the collection into an array. </summary>
            <param name="tags"> An array of TiffTag where the data will be stored. </param>
            <param name="index"> An index in the array where the data will be stored. </param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTagCollection.Item(System.Int32)">
            <summary> Returns the <see cref="T:Atalasoft.Imaging.Metadata.TiffTag"/> by index in the collection and allows
            the Tiff tags to be enumerated. </summary>
            <param name="index"> The zero based index in the collection. </param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.XmpParser">
            <summary> The <STRONG>XmpParser</STRONG> class can extract XMP Binary data from an image, and parse it into XML
            content. </summary>
            <remarks> <para>There are two important methods in this class.  <see cref="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.IO.Stream,System.Int32)"/> returns a
            byte array of the raw XMP data.  It is used in the DotImage Annotations Toolkit, to load XMP annotations data. 
            <see cref="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.String,System.Int32)"/> returns an XmlDocument that can be easily parsed using features in the .NET
            XML namespace.</para>
            <para>For more information on XMP including the specification, visit 
            <A href="http://www.adobe.com/products/xmp/">http://www.adobe.com/products/xmp/</A>.</para></remarks>
            <example>
<code lang="CS" title="[New Example] (C#)"><![CDATA[
XmpParser xmpParser = new XmpParser();
XmlDocument doc = xmpParser.Parse("document.tif", 1);
]]></code>

<code lang="VB" title="[New Example] (Visual Basic)"><![CDATA[
Dim xmpParser As XmpParser = New XmpParser()
Dim doc As XmlDocument = xmpParser.Parse("document.tif", 1)
]]></code>
</example>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.#ctor">
            <summary> Initializes a new instance of <STRONG>XmpParser</STRONG>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)">
            <summary>
            Raises the <see cref="E:Error"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Imaging.Codec.CodecErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.String,System.Int32)">
            <summary> Returns an <STRONG>XmlDocument</STRONG> containing XMP data from an image file and zero based frame index.
            </summary>
            <param name="imageFile"> The image file containing XMP data. </param>
            <param name="frameIndex"> The zero based frame index of a multi-page image. </param>
            <overloads> Returns an <STRONG>XmlDocument</STRONG> containing XMP data from an image file or stream. </overloads>
            <returns> A <STRONG>System.Xml.XmlDocument</STRONG> containing XMP information. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.String)">
            <summary> Returns an <STRONG>XmlDocument</STRONG> containing XMP data from an image file. </summary>
            <param name="imageFile"> The image file containing XMP data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.IO.Stream)">
            <summary> Returns an <STRONG>XmlDocument</STRONG> containing XMP data from an image file stream. </summary>
            <param name="imageStream"> The image file stream containing XMP data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary> Returns an <STRONG>XmlDocument</STRONG> containing XMP data from an image file stream and zero based frame
            index. </summary>
            <param name="imageStream"> The image file stream containing XMP data. </param>
            <param name="frameIndex"> The zero based frame index of a multi-page image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.String,System.Int32)">
            <summary> Returns a byte array containing XMP data from an image file specifying the frame index. </summary>
            <param name="imageFile"> The image filename to retreive data from </param>
            <param name="frameIndex"> The zero based frame index of the image to retrieve data from </param>
            <overloads> Returns a byte array containing XMP data from an image file or stream. </overloads>
            <remarks> Currently supports reading XMP from JPEG, TIFF, and PDF images. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.String)">
            <summary> Returns a byte array containing XMP data from an image file. </summary>
            <param name="imageFile"> The image filename to retreive data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.IO.Stream)">
            <summary> Returns a byte array containing XMP data from an image stream. </summary>
            <param name="imageStream"> The image stream to retrieve data from. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.IO.Stream,System.Int32)">
            <summary> Returns a byte array containing XMP data from an image stream specifying the frame index. </summary>
            <param name="imageStream"> The image stream to retrieve data from. </param>
            <param name="frameIndex"> The zero based frame index of the image to retrieve data from </param>
        </member>
        <member name="E:Atalasoft.Imaging.Metadata.XmpParser.CodecError">
            <summary>
            Occurs when a codec error has been reported.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Palette">
            <summary> The palette contains color information that is applied to colormapped images.  Use this object to modify
            and read the palette colors. </summary>
            <remarks> A palette consists of 256 colors, each index is a byte value of R, G, B, and sometimes Alpha values.
            </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Palette.colors">
            <summary> Returns the number of colors in the palette. </summary>
            <value> The number of colors in the palette. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Palette"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> Provide information for object serialization. </summary>
            <param name="info"> The object that will hold the serialization information. </param>
            <param name="context"> The context into which this object is being streamed. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Palette"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Int32)">
            <summary> Initialize a new instance of a Palette specifying the number of colors to start with. </summary>
            <param name="colors"> The number of colors in the palette. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor(Atalasoft.Imaging.PaletteType)">
            <summary> Initialize a new instance of a Palette class specifying the PaletteType. </summary>
            <param name="palType"> The type of palette to create. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Drawing.Color[])">
            <summary> Creates a new instance of Palette specifying the colors of the palette. </summary>
            <param name="colors"> An array of System.Drawing.Color objects used to fill the palette. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Palette"/> class.
            </summary>
            <param name="col">The col.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.Palette"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.ToArray">
            <summary>
            To the array.
            </summary>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">Palette</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetEntry(System.Int32)">
            <summary>
            Returns the color of a particular index entry in
            the palette. See <see cref="M:Atalasoft.Imaging.Palette.SetEntry(System.Int32,System.Drawing.Color)"/> to change the color of a palette entry.
            </summary>
            <param name="index">The palette index <i>(0 - 255)</i>.</param>
            <returns>The color of the palette entry.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.SetEntry(System.Int32,System.Drawing.Color)">
            <summary>
            Sets the color of a particular index entry in the palette.  See
            <see cref="M:Atalasoft.Imaging.Palette.GetEntry(System.Int32)"/> to retreive the color of the palette entry.
            </summary>
            <param name="index">The palette index <i>(0 - 255)</i>.</param>
            <param name="newColor">The color to set the Palette index to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.SetPalette(Atalasoft.Imaging.PaletteType)">
            <summary>
            Change the palette to a standard <see cref="T:Atalasoft.Imaging.PaletteType"/>.
            </summary>
            <param name="palType">The type of palette to change to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Clone">
            <summary>
            Returns a deep copy of this <see cref="T:Atalasoft.Imaging.Palette"/>.
            </summary>
            <returns>A deep copy of this <see cref="T:Atalasoft.Imaging.Palette"/>.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color)">
            <summary> Returns the palette index that best matches a specified color. </summary>
            <param name="color"> The color to look up in the palette. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color,System.Boolean@)">
            <summary> Returns the palette index that best matches a specified color, returning a value if there was an exact match. </summary>
            <param name="color"> The color to look up in the palette. </param>
            <param name="exact"> This value is set to <STRONG>true</STRONG> if there is an exact match, otherwise <STRONG>false</STRONG>. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.CopyFromPalette(Atalasoft.Imaging.Palette)">
            <summary> Copies the palette data from an existing palette to the current palette </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette">
            <summary> Returns the system palette of the current display if it's an 8-bit device, <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in Visual Basic) if the device is greater then 8 bits. </summary>
            <returns> A Palette containing the system palette colors. </returns>
            <overloads> Returns the system palette. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette(System.IntPtr)">
            <summary> Returns the system palette of the specified device if it's 8-bit, <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in Visual Basic) if the device is greater then 8 bits. </summary>
            <returns> A Palette containing the system palette colors. </returns>
            <param name="device"> A handle to the device context. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.HasAlpha">
            <summary>
            Determines whether this instance has alpha.
            </summary>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">Palette</exception>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.IsGray">
            <summary>
            Determines whether this instance is gray.
            </summary>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">Palette</exception>
        </member>
        <member name="P:Atalasoft.Imaging.Palette.Colors">
            <summary> Returns the number of colors in the palette. </summary>
            <value> The number of colors in the palette. </value>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaPixelFormatChanger">
            <summary> This is the standard PixelFormat changer class. </summary>
            <remarks> <para>The AtalaPixelFormatChanger does standard conversion between all differing pixel formats.  Note that
            when converting from a pixel format that represents a large amount of data to a pixel format that represents a
            lesser amount of data, information will be lost.  Therefore, it is not possible to perform an accurate round trip
            conversion.</para>
            <para>When converting to a palette image (8-bit indexed or less) this will use Floyd Steinberg Dithering.  See
            DocumentPixelFormatChanger for converting document images.</para> </remarks>
            <seealso> DocumentPixelFormatChanger Class </seealso>
        </member>
        <member name="F:Atalasoft.Imaging.AtalaPixelFormatChanger._ditherErrorMax">
            <summary> Gets or sets the diffusion or dither error that's applied to an image when converting to from a continuous
            tone to colormapped format. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaPixelFormatChanger.LowLevelChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>
            Lows level implementation to change pixel format.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="newPixelFormat">The new pixel format.</param>
            <param name="destProfile">The dest profile.</param>
            <returns></returns>
            <exception cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException"></exception>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaPixelFormatChanger.DitherErrorMax">
            <summary> Gets or sets the diffusion or dither error that's applied to an image when converting to from a continuous
            tone to colormapped format. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatUtilities">
            <summary> PixelFormatUtilities is a toolbox of utilities for manipulating and asking questions about PixelFormat
            enumerated values. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsColor(Atalasoft.Imaging.PixelFormat)">
            <summary> Indicates whether or not a pixel format represents a color image </summary>
            <returns> True if the pixel format is a color format, false if it is gray or colormapped. </returns>
            <param name="pf"> An input PixelFormat </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsGray(Atalasoft.Imaging.PixelFormat)">
            <returns> Returns true if the image format is gray, false otherwise. </returns>
            <remarks> 1 bit per pixel images are not considered gray since it is impossible to tell without a color map.</remarks>
            <summary> Indicates whether or not the pixel format represents a gray image. </summary>
            <param name="pf"> An input PixelFormat </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsColorMapped(Atalasoft.Imaging.PixelFormat)">
            <summary> Indicated whether or not the pixel format represents a color mapped format </summary>
            <returns> True if the pixel format will use a color map, false otherwise. </returns>
            <param name="pf"> An input PixelFormat </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsMultiByte(Atalasoft.Imaging.PixelFormat)">
            <returns> Returns true if a channels needs multiple bytes, false otherwise. </returns>
            <summary> Indicates whether or not any channel in this image requires multiple bytes. </summary>
            <remarks> To find out how many bytes a channel requires, use BitsPerChannel(pf)/8 </remarks>
            <param name="pf"> An input PixelFormat </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.HasAlpha(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns true if the pixel format contains an alpha channel </summary>
            <remarks> This will return false for color mapped pixel formats since it is impossible to know from the pixel format
            value alone if the colors have any alpha values. </remarks>
            <param name="pf"> An input PixelFormat </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsContinuous(Atalasoft.Imaging.PixelFormat)">
            <summary> Indicates whether or not the pixel format represents a continuous pixel format </summary>
            <returns> True if the pixel format is continuous, false otherwise. </returns>
            <param name="pf"> An input PixelFormat </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsValid(System.Int32)">
            <returns> Returns true if the value is valid, false otherwise. </returns>
            <param name="ipf"> An integer representing a pixel format </param>
            <overloads> Indicates whether or not a value or a .NET PixelFormat is valid as an Atalasoft.Image.PixelFormat type</overloads>
            <remarks> Returns true if the value is valid, false otherwise. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsValid(System.Drawing.Imaging.PixelFormat)">
            <returns> Returns true if the value is valid, false otherwise. </returns>
            <param name="bpf"> A .NET PixelFormat type </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsRGBColor(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns <code>true</code> if the pixel format represents an RGB color, <code>false</code> otherwise.</summary>
            <param name="pf">An input <see cref="T:Atalasoft.Imaging.PixelFormat"/>.</param>
            <returns><code>true</code> if the pixel format represents an RGB color, <code>false</code> otherwise.</returns>        
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.BitsPerPixel(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns the number of bits used per pixel in total. </summary>
            <remarks> Note than some pixel formats do not use all the bits for image data.  For example, Pixel32bppBgr only uses
            24 bits for image data, but BitsPerPixel will return 32 for this format. </remarks>
            <param name="pf"> An input PixelFormat </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.ChannelsPerPixel(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns the number of channels in this pixel format </summary>
            <remarks> Note that for pixel formats with colormaps, this method will always return 1. </remarks>
            <param name="pf"> An input PixelFormat </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.BitsPerChannel(Atalasoft.Imaging.PixelFormat)">
            <summary> Returns the number of bits in each channel of this image. </summary>
            <param name="pf"> An input PixelFormat </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.RowStride(Atalasoft.Imaging.PixelFormat,System.Int32)">
            <summary> Calculates the width in bytes of a row in an image. </summary>
            <param name="pf"> An input PixelFormat </param>
            <param name="w"> The width of an image in pixels </param>
            <overloads> Calculates the width in bytes of a row in an image. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.RowStride(System.Int32,System.Int32)">
            <summary> Calculates the width in bytes of a row in an image. </summary>
            <param name="bitsPerPixel"> The number of bits per pixel </param>
            <param name="w"> The width of an image in pixels </param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.ImageSize(Atalasoft.Imaging.PixelFormat,System.Int32,System.Int32)">
            <summary> Given a pixel format, ImageSize will return the number of bytes necessary to represent that image.
            </summary>
            <param name="pf"> An input PixelFormat </param>
            <param name="w"> The width of the image </param>
            <param name="h"> The height of the image </param>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessQueue">
            <summary> Holds a collection of <see cref="T:Atalasoft.Imaging.ProcessQueue"/> that are awaiting asynchronous processing.</summary>
            <remarks> When the <see cref="T:Atalasoft.Imaging.Workspace"/> is runing in <B>asynchronous</B> mode all image processing calls through
            the <STRONG>Workspace.ProcessImage</STRONG> method or the read and save methods will put the process into this
            queue.  The purpose is to process images sequentially and prevent threading issues.  Each workspace object can
            process only one image at a time, but as long as <STRONG>Workspace.IsAsynchronous</STRONG> is true, the processing
            will be performed in a separate thread. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ProcessQueue.currentItem">
            <value> The ProcessQueuedItem that is currently being processed.  </value>
            <summary> Gets the ProcessQueuedItem that is currently being processed. </summary>
            <value> The current ProcessQueuedItem. </value>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.#ctor">
            <summary>
            Create a instance of the <see cref="T:Atalasoft.Imaging.ProcessQueue"/>.
            </summary>
            <summary> Create a instance of the <see cref="T:Atalasoft.Imaging.ProcessQueue"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Dequeue">
            <summary> Remove the next item from the queue. </summary>
            <returns> The queued item that was removed. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Enqueue(Atalasoft.Imaging.ProcessQueuedItem)">
            <summary> Add a new item into the process queue. </summary>
            <param name="item"> The <see cref="T:Atalasoft.Imaging.ProcessQueuedItem"/> containing the thread information to process. </param>
            <summary> Add a new item into the process queue. </summary>
            <overloads> Adds a new item to the queue. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Peek">
            <summary> Return the next item in the process queue without removing it. </summary>
            <returns> The next item in the process queue. </returns>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.CopyTo(Atalasoft.Imaging.ProcessQueuedItem[],System.Int32)">
            <summary> Copies ProcessQueuedItems from this collection to an array. </summary>
            <param name="queuedItems"> The array to copy the items into. </param>
            <param name="index"> The starting index in the array where the items will be copied. </param>
            <overloads> Copies items from the collection to an array. </overloads>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueue.CurrentItem">
            <value> The ProcessQueuedItem that is currently being processed.  </value>
            <summary> Gets the ProcessQueuedItem that is currently being processed. </summary>
            <value> The current ProcessQueuedItem. </value>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessQueuedItem">
            <summary> <para>This class contains information regarding the image processing function that is to be run when the
            <see cref="T:Atalasoft.Imaging.ProcessQueue"/> is ready.</para> </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ProcessQueuedItem.thread">
            <summary> Gets or sets the thread that the process is running in. </summary>
            <value> The thread that the process is running in. </value>
        </member>
        <member name="F:Atalasoft.Imaging.ProcessQueuedItem.processingClass">
            <summary> The instance of a class that will be processed in a new thread. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ProcessQueuedItem.processUndo">
            <summary> Indicates if an undo should be created before the thread begins. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.Thread">
            <summary> Gets or sets the thread that the process is running in. </summary>
            <value> The thread that the process is running in. </value>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessingClass">
            <summary> The instance of a class that will be processed in a new thread. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessUndo">
            <summary> Indicates if an undo should be created before the thread begins. </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessUndo">
            <summary> Contains information about an undo level that will be used in the %ProcessQueue%. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ProcessUndo.undoDescription">
            <summary> The description of the undo level. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ProcessUndo.copyCurrent">
            <summary> If <STRONG>true</STRONG>, the image will be copied before placing into the <STRONG>undo</STRONG>.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo.#ctor">
            <summary> Initialize a new instance of %ProcessUndo%. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo.#ctor(System.String,System.Boolean)">
            <summary> Initialize a new instance of %ProcessUndo% specifying the Undo Description and if the image should be
            copied. </summary>
            <param name="undoDescription"> The undo description. </param>
            <param name="copyCurrent"> Specifies if the image should be copied before undoing. </param>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessUndo.UndoDescription">
            <summary> The description of the undo level. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessUndo.CopyCurrent">
            <summary> If <STRONG>true</STRONG>, the image will be copied before placing into the <STRONG>undo</STRONG>.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProgressWrapper">
            <summary>
            Contains the ImgSource callbacks and Progress information
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.ProgressWrapper.numProgresses">
            <summary>
            Delegate used for ImgSource progress info
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressWrapper.#ctor(Atalasoft.Imaging.ProgressEventHandler,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ProgressWrapper"/> class.
            </summary>
            <param name="progress">The progress event handler to call on progress events.</param>
            <param name="methodName">Name of the method.</param>
            <param name="effects">if set to <c>true</c> if the call is from the effects library.</param>
            <param name="numProgresses">The number of progresses.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressWrapper.Callback(System.Int32,System.Int32,System.Int32)">
            <summary>The callback function ImgSource uses</summary>
            <param name="currentRow">The current row peing processed</param>
            <param name="totalRows">The total rows in the current process</param>
            <param name="userData">User Defined Data</param>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressWrapper.EndProgress">
            <summary>Turn off ImgSource callback</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressWrapper.NumProgresses">
            <summary>Returns or sets the number of ImgSource operations for one progress sequence</summary>
        </member>
        <member name="T:Atalasoft.Imaging.SerializationHelper">
            <remarks>
            In the current .NET model, one must ask for a field within a serialization
            object acting under the assumption that it will be there.  If the field
            isn't there, an Exception is thrown.  An object is deserializable if and
            only if all fields of an object have been serialized.
            
            In the dotImage model, an object is constructed with default values which are then
            replaced by the information in the SerializationInfo object.  In dotImage
            this makes more sense since several objects' underlying data is optional or
            mutually exclusive.
            
            To retrieve a scalar, pass GetValue() the SerializationInfo object, the name
            of the field, and a reference to the variable that will hold the value.  GetValue()
            will return true if it performed an assignment to the variable.
            
            To retrieve a non-scalar type, pass GetValue() the SerializationInfo object, the
            name of the field and its expected Type.  GetValue will return the object if it
            found it, null otherwise.
            </remarks>
            <summary> SerializationHelper is a set of static methods to help in the process of deserialization of an object
            graph. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
            <overloads> Get a value from a SerializationInfo object. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Byte@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Char@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.DateTime@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Decimal@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Double@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int16@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int32@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int64@)">
            <summary>
            Get a value from a SerializationInfo object
            </summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Single@)">
            <summary>Get a value from a SerializationInfo object</summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
            <returns>true if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <returns>an object of the Type specified if found, null otherwise</returns>
            <summary> Get an object from a SerializationInfo object. </summary>
            <returns> An object of the Type specified if found, null otherwise. </returns>
            <param name="info"> The object in which to look for the value. </param>
            <param name="name"> The name of the value. </param>
            <param name="type"> The expected type of the object. </param>
        </member>
        <member name="T:Atalasoft.Imaging.StreamHandler64">
            <summary>Custom stream object used for reading and writing.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.StreamHandlerBase`1">
            <summary>Skeleton class for a concrete implementation (32 or 64 bit length) of a custom stream object used 
            for reading and writing.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandlerBase`1.#ctor(System.IO.Stream,Atalasoft.Imaging.StreamFileAccess)">
            <summary>
            Create a file stream for reading and writing.
            </summary>
            <param name="stream">Stream to read or write to.</param>
            <param name="fileAccess">The type of file access required.</param>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandlerBase`1.Dispose">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandlerBase`1.Open(System.Int32)">
            <summary>
            Callback method which opens the file stream.
            </summary>
            <param name="uUserData">Not used.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandlerBase`1.Write(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Callback method used to write data into the stream.
            </summary>
            <param name="pBuffer">Memory pointer containing the data to write.</param>
            <param name="uNumBytes">The number of bytes to write.</param>
            <param name="uUserData">Not used.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandlerBase`1.Read(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Callback method used to read data from the stream.
            </summary>
            <param name="pBuffer">Memory pointer to read the bytes into.</param>
            <param name="uNumBytes">The maximum number of bytes to read.</param>
            <param name="uUserData">Not used.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandlerBase`1.EOF(System.Int32)">
            <summary>
            Callback method used to see if the EOF condition is true.
            </summary>
            <param name="uUserData">Not used.</param>
            <returns>True if the stream is at the end of the data.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandlerBase`1.Close(System.Int32)">
            <summary>
            Callback used to close the stream.
            </summary>
            <param name="uUserData">Not used.</param>
            <returns>True on success.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.StreamHandlerBase`1.Handle">
            <summary>
            Returns the file handle used for reading and writing.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandler64.#ctor(System.IO.Stream,Atalasoft.Imaging.StreamFileAccess)">
            <summary>
            Create a file stream for reading and writing.
            </summary>
            <param name="stream">Stream to read or write to.</param>
            <param name="fileAccess">The type of file access required.</param>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandler64.Seek64(System.Int64,System.Int32,System.Int32)">
            <summary>
            Callback method used to seek to a position within the stream.
            </summary>
            <param name="uOffset">The amount in bytes to move within the stream.</param>
            <param name="uOrigin">States whether the movement if from the beginning, current position or the end of the stream.</param>
            <param name="uUserData">Not used.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandler64.GetPos64(System.Int32,System.Int64@)">
            <summary>
            Callback method used to get the current position in the stream.
            </summary>
            <param name="uUserData">Not used.</param>
            <param name="uPos">This value is set to the current position in the stream.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandler64.GetSize64(System.Int32,System.Int64@)">
            <summary>
            Callback method used to get the size of the stream.
            </summary>
            <param name="uUserData">Not used.</param>
            <param name="uSize">This value is set with the size of the stream.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.StreamFileAccess">
            <summary>Used to specify the type of file access required for the stream.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.StreamHandler">
            <summary>Custom stream object used for reading and writing. Deprecated, use StreamHandler64 in 
            preferance to this class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandler.#ctor(System.IO.Stream,Atalasoft.Imaging.StreamFileAccess)">
            <summary>
            Create a file stream for reading and writing.
            </summary>
            <param name="stream">Stream to read or write to.</param>
            <param name="fileAccess">The type of file access required.</param>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandler.Seek(System.Int32,System.Int32,System.Int32)">
            <summary>
            Callback method used to seek to a position within the stream.
            </summary>
            <param name="uOffset">The amount in bytes to move within the stream.</param>
            <param name="uOrigin">States whether the movement if from the beginning, current position or the end of the stream.</param>
            <param name="uUserData">Not used.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandler.GetPos(System.Int32,System.Int32@)">
            <summary>
            Callback method used to get the current position in the stream.
            </summary>
            <param name="uUserData">Not used.</param>
            <param name="uPos">This value is set to the current position in the stream.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.StreamHandler.GetSize(System.Int32,System.Int32@)">
            <summary>
            Callback method used to get the size of the stream.
            </summary>
            <param name="uUserData">Not used.</param>
            <param name="uSize">This value is set with the size of the stream.</param>
            <returns>True on success.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.Text.IGlyphInfo">
            <summary>
            Represents single glyph information.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.IGlyphInfo.Text">
            <summary>
            Gets the glyph text.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.IGlyphInfo.Bounds">
            <summary>
            Gets the glyph bounds in image coordinates without rotation applied.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.IGlyphInfo.IsGenerated">
            <summary>
            Gets or sets a value indicating whether this glyph is generated.
            </summary>
            <remarks>It's possible the extraction engine adds spaces between individual words or line breaks.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Text.ITextDocument">
            <summary>
            Represents document that supports text extraction.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Text.ITextDocument.GetPage(System.Int32)">
            <summary>
            Gets the <see cref="T:Atalasoft.Imaging.Text.ITextPage"/> at the specified index.
            </summary>
            <param name="index">The page index.</param>
            <returns><see cref="T:Atalasoft.Imaging.Text.ITextPage"/> at the specified index.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextDocument.PageCount">
            <summary>
            Gets the document page count.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextDocument.ExtractionGranularity">
            <summary>
            Gets the extraction granularity provided by this document.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Text.ITextFormatDecoder">
            <summary>
            Represents a codec that is capable of document text extraction.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Text.ITextFormatDecoder.GetTextDocument(System.IO.Stream)">
            <summary>
            Creates the text document.
            </summary>
            <param name="stream">The document stream.</param>
            <returns>
              <see cref="T:Atalasoft.Imaging.Text.ITextDocument"/> that allows text information extraction.
            </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Text.ITextPage">
            <summary>
            Represents single page text extraction functionality.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Text.ITextPage.GetTextSegments">
            <summary>
            Gets the page text segments with the specified target image resolution.
            </summary>
            <returns>
            Extracted text segments.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Text.ITextPage.GetText">
            <summary>
            Extracts the formatted text for the whole page.
            </summary>
            <returns>Formatted page text.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextPage.Width">
            <summary>
            Gets the page width.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextPage.Height">
            <summary>
            Gets the page height.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextPage.Rotate">
            <summary>
            Gets the page rotation angle.
            </summary>
            <remarks>
            This property is mostly applied to formats that separate rotation representation and physical coordinates.
            In such case text coordinates on rendered image will differ from returned and <see cref="P:Atalasoft.Imaging.Text.ITextPage.Rotate"/> property could be used to transform them.
            </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextPage.SegmentsCount">
            <summary>
            Gets the text segments count.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextPage.Resolution">
            <summary>
            Gets or sets the page resolution.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Text.ITextSegment">
            <summary>
            Represents single text segment.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextSegment.Text">
            <summary>
            Gets the segment text.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextSegment.Bounds">
            <summary>
            Gets the segment bounding rectangle in image coordinates without rotation applied.
            </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Text.ITextSegment.Glyphs">
            <summary>
            Gets the individual glyphs information if supported. Returns empty collection otherwise.
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Text.PageRotation">
            <summary>
            Represents possible rotations of a document page for display. 
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.PageRotation.None">
            <summary>
            The page will not be rotated.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.PageRotation.Clockwise90">
            <summary>
            The page will be rotated 90 degrees clockwise
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.PageRotation.Clockwise180">
            <summary>
            The page will be rotated 180 degrees clockwise
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.PageRotation.Clockwise270">
            <summary>
            The page will be rotated 270 degrees clockwise
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.PageRotation.CounterClockwise90">
            <summary>
            The page will be rotated 90 degrees counter clockwise (equivalent to Clockwise270)
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.PageRotation.CounterClockwise180">
            <summary>
            The page will be rotated 180 degrees counter clockwise (equivalent to Clockwise180)
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.PageRotation.CounterClockwise270">
            <summary>
            The page will be rotated 270 degrees counter clockwise (equivalent to Clockwise90)
            </summary>
        </member>
        <member name="T:Atalasoft.Imaging.Text.TextExtractionUnit">
            <summary>
            Defines the text extraction granularity.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.TextExtractionUnit.None">
            <summary>
            Extraction unit is not specified.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.TextExtractionUnit.Glyph">
            <summary>
            Each segment represents individual glyph.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.TextExtractionUnit.Word">
            <summary>
            Each segment represents individual world.
            </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Text.TextExtractionUnit.Line">
            <summary>
            Each segment represents one or more words merged together.
            </summary>
            <remarks>This is not guaranteed to extract full logical region of the text on the page. </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.UndoCollection">
            <summary> <para>The <STRONG>UndoCollection </STRONG>class is used to manage operations that need undo/redo
            functinality.  The collection contains properties to specify the number of allowed operations to undo or
            redo.</para> </summary>
            <remarks> <para><EM><STRONG>NOTE:</STRONG> The <STRONG>UndoCollection</STRONG> class is intended for use in the
            </EM><see cref="T:Atalasoft.Imaging.Workspace"/><EM> class only, and should not be used on its own.  The <STRONG>UndoCollection
            </STRONG>relies on the <STRONG>Workspace's</STRONG> </EM><see cref="T:Atalasoft.Imaging.ImageCollection"/><EM> in order to save the
            current images.</EM></para>
            <para>The undo collection may be used to create an Undo/Redo menu in your project.  The <STRONG>Add </STRONG>method
            should be called at the point you want to save as the 'undo point' (for examble, BEFORE an ImageCommand is applied). 
            To undo or redo an operation, simply call the <see cref="M:Atalasoft.Imaging.UndoCollection.Undo"/>
            or <see cref="M:Atalasoft.Imaging.UndoCollection.Redo"/> methods.  You can access the <see cref="P:Atalasoft.Imaging.UndoLevel.Description"/> property to
            determine what the next undo or redo will accomplish.  The following code example shows how this is done.</para>
            </remarks>
            <example>
<para>Accessing the description of the next operation to undo/redo.</para>
<code lang="CS" title="UndoDescriptionCS (C#)"><![CDATA[
WorkspaceViewer Viewer;
...
string undoDescription = Viewer.Undos[Viewer.Undos.Count - Viewer.Undos.NumUndos].Description;
string redoDescription = Viewer.Undos[Viewer.Undos.Count - Viewer.Undos.NumUndos - 1].Description;
]]></code>

<code lang="VB" title="UndoDescriptionVB (Visual Basic)"><![CDATA[
Dim Viewer As WorkspaceViewer
...
Dim undoDescription As String = Viewer.Undos(Viewer.Undos.Count - Viewer.Undos.NumUndos).Description 
Dim redoDescription As String = Viewer.Undos(Viewer.Undos.Count - Viewer.Undos.NumUndos - 1).Description
]]></code>
</example>
        </member>
        <member name="F:Atalasoft.Imaging.UndoCollection.levels">
            <summary> Gets or set the number of Undo levels in this collection. </summary>
            <remarks> <para>The <STRONG>Levels </STRONG>property limits the number of undo's or redo's that are saved.  For
            example, to limit the Workspace to only be able to undo a single operation, set the <STRONG>Levels </STRONG>property
            to 1.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.UndoCollection.numUndos">
            <summary> Gets the current number of undos in the collection. </summary>
            <value> An integer represending the number of operations that are able to be undone. </value>
        </member>
        <member name="F:Atalasoft.Imaging.UndoCollection.numRedos">
            <summary> Gets the current number of redos in the collection. </summary>
            <value> An integer representing the number of redo operations that may be performed at this instant. </value>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.OnNewImageCollection(Atalasoft.Imaging.ImageCollectionEventArgs)">
            <summary>
            Raises the <see cref="E:NewImageCollection"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Imaging.ImageCollectionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.OnGetCurrentImageCollection(Atalasoft.Imaging.ImageCollectionEventArgs)">
            <summary>
            Raises the <see cref="E:GetCurrentImageCollection"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Imaging.ImageCollectionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Add(System.String,System.Boolean)">
            <summary> Add a new undo level to the undo collection specifying the description and if the Image is copied.</summary>
            <param name="undoDescription"> The textual description of this undo level. </param>
            <param name="copyCurrent"> If <STRONG>true</STRONG>, the image will be copied into the undo collection. </param>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Undo">
            <summary> The <STRONG>Undo </STRONG>method undo's the most recently added item to this
            <STRONG>UndoCollection</STRONG>. </summary>
            <overloads>
            <example>
<code lang="VB" title="undoVB (Visual Basic)"><![CDATA[
Dim myWorkspace As Workspace = New Workspace()
' ... apply some ImageCommand here
myWorkspace.Undos.Undo()
' now re-apply that command
myWorkspace.Undos.Redo()
]]></code>

<code lang="CS" title="undoCS (C#)"><![CDATA[
Workspace myWorkspace = new Workspace();
// ... apply some ImageCommand here
myWorkspace.Undos.Undo();
// now re-apply that command
myWorkspace.Undos.Redo();
]]></code>
</example>
            </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Redo">
            <summary> The <STRONG>Redo </STRONG>method redo's the most recent udno in this <STRONG>UndoCollection</STRONG>.
            </summary>
            <remarks> If there are no redo's to be undone (<STRONG>NumRedos</STRONG> lt; 1), then this method does nothing.
            </remarks>
            <overloads>
            <example>
<code lang="CS" title="redoCS (C#)"><![CDATA[
Workspace myWorkspace = new Workspace();
// ... apply some ImageCommand here
myWorkspace.Undos.Undo();
// now re-apply that command
myWorkspace.Undos.Redo();
]]></code>

<code lang="VB" title="redoVB (Visual Basic)"><![CDATA[
Dim myWorkspace As Workspace = New Workspace()
' ... apply some ImageCommand here
myWorkspace.Undos.Undo()
' now re-apply that command
myWorkspace.Undos.Redo()
]]></code>
</example>
            </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.CopyTo(Atalasoft.Imaging.UndoLevel[],System.Int32)">
            <summary> <para>Copies the UndoLevels into an array.</para> </summary>
            <param name="undos"> An array of UndoLevel where the collection items will be stored. </param>
            <param name="index"> An index in the array where items will be stored. </param>
            <summary> <para>Copies the UndoLevels into an array.</para> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Dispose">
            <summary> Clean up unmanaged resources by disposing each AtalaImage in the collection. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Clear">
            <summary> Clears the undo/redo collection items. </summary>
            <returns> Clears the collection. </returns>
            <remarks> Use this method to release all undo and redo items. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Atalasoft.Imaging.UndoCollection"/> class.
            </summary>
        </member>
        <member name="E:Atalasoft.Imaging.UndoCollection.NewImageCollection">
            <summary> This event is fired to  set the current image collection. </summary>
        </member>
        <member name="E:Atalasoft.Imaging.UndoCollection.GetCurrentImageCollection">
            <summary> This event is fired to retrieve the current image collection. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.NumUndos">
            <summary> Gets the current number of undos in the collection. </summary>
            <value> An integer represending the number of operations that are able to be undone. </value>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.NumRedos">
            <summary> Gets the current number of redos in the collection. </summary>
            <value> An integer representing the number of redo operations that may be performed at this instant. </value>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.Levels">
            <summary> Gets or set the number of Undo levels in this collection. </summary>
            <remarks> <para>The <STRONG>Levels </STRONG>property limits the number of undo's or redo's that are saved.  For
            example, to limit the Workspace to only be able to undo a single operation, set the <STRONG>Levels </STRONG>property
            to 1.</para> </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.Item(System.Int32)">
            <summary> Gets the undo item. </summary>
            <value> The <see cref="T:Atalasoft.Imaging.UndoLevel"/> at this index. </value>
            <param name="index"> Zero based Index of the undo item. </param>
        </member>
        <member name="T:Atalasoft.Imaging.UndoLevel">
            <summary> The <STRONG>UndoLevel</STRONG> class is used to store a single operation, in an UndoCollection, that can
            be un-done or re-done.  Every instance of this class holds an <see cref="T:Atalasoft.Imaging.ImageCollection"/> which are the set of
            images that will be restored to 'undo' the operation that this <STRONG>UndoLevel</STRONG> represents. </summary>
            <remarks> The <STRONG>UndoLevel </STRONG>class is not usualy accessed directly, but is used by the
            <STRONG>UndoCollection </STRONG>to keep track of operations. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.UndoLevel.images">
            <summary> Gets the undo image collection associated with this <STRONG>UndoLevel</STRONG>. </summary>
            <value> An <see cref="T:Atalasoft.Imaging.ImageCollection"/> for this <STRONG>UndoLevel</STRONG>. </value>
        </member>
        <member name="F:Atalasoft.Imaging.UndoLevel.description">
            <summary> Gets the undo description associated with this <STRONG>UndoLevel</STRONG>. </summary>
            <value> A string containing the undo description. </value>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel.#ctor">
            <summary>Creates a new instance of <c>UndoLevel</c>.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel.#ctor(Atalasoft.Imaging.ImageCollection,System.String)">
            <summary> <para>Creates a new instance of <STRONG>UndoLevel</STRONG> specifying the <see cref="T:Atalasoft.Imaging.ImageCollection"/> and undo <see cref="P:Atalasoft.Imaging.UndoLevel.Description"/>.</para> </summary>
            <param name="images"> The <STRONG>ImageCollection</STRONG> that this undo level will contain. </param>
            <param name="description"> The description of this undo level. </param>
        </member>
        <member name="P:Atalasoft.Imaging.UndoLevel.Images">
            <summary> Gets the undo image collection associated with this <STRONG>UndoLevel</STRONG>. </summary>
            <value> An <see cref="T:Atalasoft.Imaging.ImageCollection"/> for this <STRONG>UndoLevel</STRONG>. </value>
        </member>
        <member name="P:Atalasoft.Imaging.UndoLevel.Description">
            <summary> Gets the undo description associated with this <STRONG>UndoLevel</STRONG>. </summary>
            <value> A string containing the undo description. </value>
        </member>
        <member name="M:Atalasoft.Imaging.Utilities.GetImageDataOffset(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle@)">
            <summary>Returns the pointer offset in bytes and the source width for the region in the image</summary>
            <param name="Image">source image</param>
            <param name="srcRect">rectangular region</param>
            <returns>The amount to offset the pointer to start the effect region</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Utilities.GetReadFileStream(System.String)">
            <summary>Returns a FileStream or AtalaFileStream based on the file path.  The reason for this
            function is that some codecs do not work with the ATalaFileStream (which is faster most of the time)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Utility.PointFConverter">
            <summary> Useful for designers that display PointF obects. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.PointFConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Utility.PointFConverter"/> class.
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.PointFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.PointFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.PointFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
        </member>
        <member name="M:Atalasoft.Imaging.Utility.PointFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object" /> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
            <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
        </member>
        <member name="T:Atalasoft.Imaging.Workspace">
            <summary> <para>The <STRONG>workspace </STRONG>object is the container that is used to manage changes to images and
            provide an interface to open, save, and manipulate images either synchronously or asynchronously.</para> </summary>
            <example>
<para>This example demonstrates how to create a new workspace, open an image, resample it, then save it to a file.</para>
<code lang="CS" title="Simple Example (C#)"><![CDATA[
Workspace myWorkspace = new Workspace();
myWorkspace.Open("image.png");
myWorkspace.ApplyCommand(new ResampleCommand((int)(myWorkspace.Width / 2), (int)(myWorkspace.Height / 2)));
myWorkspace.Save("newImage.png", new PngEncoder());
myWorkspace.Dispose();
]]></code>

<code lang="VB" title="Simple Example (Visual Basic)"><![CDATA[
Dim myWorkspace As Workspace = New Workspace()
myWorkspace.Open("image.png")
myWorkspace.ApplyCommand(New ResampleCommand(myWorkspace.Width / 2, myWorkspace.Height / 2))
myWorkspace.Save("newImage.png", New PngEncoder())
myWorkspace.Dispose()
]]></code>
</example>
            <remarks> <para>The Workspace object, part of the <STRONG>Atalasoft.Imaging</STRONG> namespace,
            provides a container that allows for intuitive image processing and management of <STRONG>AtalaImage</STRONG> and
            ImageCollection objects.  The <STRONG>Workspace</STRONG> can be used to manage changes to
            <STRONG>AtalaImage</STRONG> objects and access methods to open, save, and manipulate images.  </para>
            <para>Many image processing functions may create new <STRONG>AtalaImage</STRONG> objects.  The
            <STRONG>Workspace</STRONG> manages the creation of these objects by keeping a single current image and providing
            events when the image changes.  The <STRONG>Workspace</STRONG> also disposes of old images when they are no longer
            needed.  You can access the current <STRONG>AtalaImage</STRONG> with the <STRONG>Image</STRONG> property of the
            <STRONG>Workspace</STRONG> object.</para>
            <para>The <STRONG>Workspace</STRONG> is designed to operate either synchronously or asynchronously for
            multi-threading operations.  This behavior is set by the <see cref="P:Atalasoft.Imaging.Workspace.Asynchronous"/> property.</para>
            <para>See the WinForm's WorkspaceViewer for a Workspace object with a user interface for displaying images.</para> </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Workspace.images">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.ImageCollection"/> of this <STRONG>Workspace </STRONG>object. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Workspace.undos">
            <summary> Gets the UndoCollection object containing the undo history of this <STRONG>Workspace</STRONG>. </summary>
        </member>
        <member name="F:Atalasoft.Imaging.Workspace.autoDispose">
            <summary> Gets or sets a value indicating if the <STRONG>Workspace</STRONG> should dispose all images it contains
            when finalized. </summary>
            <value> A value indicating if the Workspace should dispose all images it contains when finalized. </value>
            <remarks> This value is true by default.  Setting this value to false is useful when using an Images from another
            location.  This only prevents images from being disposed when the associated <STRONG>Workspace</STRONG> object is
            disposed or finalized.  To prevent images from being disposed when processing, handle the <see cref="E:Atalasoft.Imaging.Workspace.DisposeImage"/> event and set the cancel property in the event args to true.  Also consider using
            <see cref="M:Atalasoft.Imaging.ImageCollection.Replace(Atalasoft.Imaging.AtalaImage)"/> instead of the <see cref="P:Atalasoft.Imaging.Workspace.Image"/> property when setting a new
            image. </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Workspace.queue">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.ProcessQueue"/> containing queued items that this Workspace object is
            currently processing. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ProcessQueue.html">ProcessQueue</a> containing queued
            items that this <a href="Atalasoft.dotImage~Atalasoft.Imaging.Workspace.html">Workspace</a> object is currently
            processing. </value>
            <remarks> The <see cref="T:Atalasoft.Imaging.ProcessQueue"/> only contains items if the <STRONG>Workspace </STRONG>is running in <see cref="P:Atalasoft.Imaging.Workspace.Asynchronous"/> mode. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnDisposeImage(Atalasoft.Imaging.ImageCancelEventArgs)">
            <summary> Invoked when pixel data in the current image changes without setting a new image.  Fires the <see cref="E:Atalasoft.Imaging.Workspace.DisposeImage"/> event. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnProcessError(Atalasoft.Imaging.ExceptionEventArgs)">
            <summary> Invoked when an error occurs in a separate thread when being processed asynchronously.  Fires the <see cref="E:Atalasoft.Imaging.Workspace.ProcessError"/> event. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnImageChanged(Atalasoft.Imaging.ImageEventArgs)">
            <summary>
            Raises the <see cref="E:ImageChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Atalasoft.Imaging.ImageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnImageStreamCompleted(Atalasoft.Imaging.ImageStreamEventArgs)">
            <summary> Invoked after an image has been read or saved signifying that the <STRONG>Stream</STRONG> which was passed
            in can be closed.  Fires the <see cref="E:Atalasoft.Imaging.Workspace.ImageStreamCompleted"/> event. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnProcessCompleted(Atalasoft.Imaging.ImageEventArgs)">
            <summary> Invoked when an asynchronous process has completed.  Fires the <see cref="E:Atalasoft.Imaging.Workspace.ProcessCompleted"/>
            event. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.#cctor">
            <summary> <para>Initializes a new instance of %WorkspaceViewer%.</para> </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.#ctor">
            <summary>
            Creates a new instance of dotImage
            </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <summary> Applies an <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> to the current image in order to process it. </summary>
            <param name="command"> The Command to apply.  Any object that inherits <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> can be passed into
            this method. </param>
            <summary> Applies an <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> to the current image in order to process it. </summary>
            <overloads>
            <example>
<para>This example demonstrates how to apply a command in VB.</para>
<code lang="VB" title="Apply a Command (Visual Basic)"><![CDATA[
myWorkspace.ApplyCommand(new BlurGaussian(10))
]]></code>

<para>This example demonstrates how to apply a command in C#.</para>
<code lang="CS" title="Apply a Command (C#)"><![CDATA[
myWorkspace.ApplyCommand(new BlurGaussian(10));
]]></code>
</example>
            </overloads>
            <remarks> If <see cref="P:Atalasoft.Imaging.Workspace.Asynchronous"/> is <STRONG>true</STRONG>, the command will be processed in a background
            thread. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand,System.String)">
            <summary> Creates an undo level, then applies an <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> to the current image in order to process
            it. </summary>
            <param name="command"> The Command to apply.  Any object that inherits <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand"/> can be passed into
            this method. </param>
            <param name="undoDescription"> A description of the undo level that will be added before processing. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String,System.Int32)">
            <summary> Decodes an image from a file specifying the frame index of a multipaged file, and sets it to the current
            image. </summary>
            <param name="fileName"> The path of the file to open. </param>
            <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
            <remarks> Opening an image with this method when the <STRONG>Workspace</STRONG> is in <see cref="P:Atalasoft.Imaging.Workspace.Asynchronous"/> mode will add
            this operation to the <see cref="T:Atalasoft.Imaging.ProcessQueue"/> and open Asynchronously. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String)">
            <summary> Decodes an image from a file and sets it to the current image. </summary>
            <remarks> A URL formatted string can be passed to download a file.  If the address is pointing to an FTP site, you
            may need to include the username and password in the URL to allow access to the file.</remarks>
            <param name="fileName"> The path of the file to open. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream,System.Int32)">
            <summary> Decodes an image from a stream specifying the frame index of a multipaged file, and sets it to the current
            image. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
            <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream)">
            <summary> Decodes an image from a stream and sets it to the current image. </summary>
            <param name="stream"> A stream containing the encoded image data. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
            <summary> Writes the current %AtalaImage% or %ImageCollection% to a file specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/>
            to use to encode the image and the image index in the collection to save. </summary>
            <remarks><para>This method can be used to save an image to an FTP server.  If the <EM>fileName</EM> is pointing to an FTP
            server, you may need to include the username and password in the URL to allow the file to be saved.</para>
            <para>Saving an image with this method when the <STRONG>Workspace</STRONG> is in synchronous mode will add
            this operation to the <see cref="T:Atalasoft.Imaging.ProcessQueue"/> and save Asynchronously.</para></remarks>
            <param name="fileName"> The filename to save the current image to. </param>
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
            <param name="frameIndex"> The index in the <STRONG>ImageCollection</STRONG> to save. </param>
            <remarks> Saving an image with this method when the <STRONG>Workspace</STRONG> is in %Asynchronous% mode will add
            this operation to the %ProcessQueue% and save Asynchronously. </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary> Writes the current <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.ImageCollection"/> to a file specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/>
            to use to encode the image. </summary>
            <remarks> This method can be used to save an image to an FTP server.  If the <EM>fileName</EM> is pointing to an FTP
            server, you may need to include the username and password in the URL to allow the file to be saved. </remarks>
            <param name="fileName"> The filename to save the current image to. </param>
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageType)">
            <summary> Writes the current <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.ImageCollection"/> to a file specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageType"/> to
            use to encode the image. </summary>
            <remarks> This method can be used to save an image to an FTP server.  If the <EM>fileName</EM> is pointing to an FTP
            server, you may need to include the username and password in the URL to allow the file to be saved.</remarks>
            <param name="fileName"> The filename to save the current image to. </param>
            <param name="imageType"> The image type to save this image as. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary> Writes the current <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.ImageCollection"/> to a stream specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/>
            to use to encode the image. </summary>
            <param name="stream"> A stream containing the file which the current image will be encoded to. </param>
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
            <summary> Writes the current <see cref="T:Atalasoft.Imaging.AtalaImage"/> or <see cref="T:Atalasoft.Imaging.ImageCollection"/> to a stream specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/>
            to use to encode the image and the image index in the collection to save. </summary>
            <param name="stream"> A stream containing the file which the current image will be encoded to. </param>
            <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder"/> which will be used to encode the image. </param>
            <param name="frameIndex"> The index in the <STRONG>ImageCollection</STRONG> to save. </param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnNewImage(Atalasoft.Imaging.ImageEventArgs)">
            <overloads> Invoked when the <see cref="P:Atalasoft.Imaging.Workspace.Image"/> property of the <STRONG>Workspace</STRONG> is set to a new
            image, a command has been applied, which results in a new image, or a new image has been loaded into memory.  Fires
            the NewImage event. </overloads>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Dispose">
            <summary> Cleans up all resources held by this Workspace including all images in the <see cref="T:Atalasoft.Imaging.ImageCollection"/> and undos
            in the <see cref="T:Atalasoft.Imaging.UndoCollection"/>. </summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Finalize">
            <summary>
            Finalizes an instance of the Workspace class.
            </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.DisposeImage">
            <summary> Fired when an image in the ImageCollection or UndoCollection is disposed. </summary>
            <remarks> This even should be handled if images are being shared.  If this event contains an image that shouldn't be
            disposed, set the Cancel property to true. </remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ProcessError">
            <summary> Fires when an error occurs in a separate thread when being processed asynchronously. </summary>
            <remarks> This event can be handled to react to an exception when it occurs in another thread.  Typically a message
            box with exception details is displayed to the user.  When this event is not handled, and the Asynchronous property
            is true, errors can go un-noticed, and without any error messages displayed. </remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.Progress">
            <summary> Fires while an image is being processed. </summary>
            <remarks> Handle this event to show a progress bar or to cancel an operation while in progress.  Some operations
            will fire this event from 0 - 100% multiple times. </remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ImageChanged">
            <summary> Occurs when the current image in the ImageCollection changes. </summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ImageStreamCompleted">
            <summary> Fires after an image has been read or saved signifying that the <STRONG>Stream</STRONG> which was passed
            in can be closed. </summary>
            <remarks> This event only fires if the stream was created outside dotImage. </remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ProcessCompleted">
            <summary> Fires when an asynchronous process has completed. </summary>
            <remarks> This is fired when processing commands, opening, or saving images. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.AutoDispose">
            <summary> Gets or sets a value indicating if the <STRONG>Workspace</STRONG> should dispose all images it contains
            when finalized. </summary>
            <value> A value indicating if the Workspace should dispose all images it contains when finalized. </value>
            <remarks> This value is true by default.  Setting this value to false is useful when using an Images from another
            location.  This only prevents images from being disposed when the associated <STRONG>Workspace</STRONG> object is
            disposed or finalized.  To prevent images from being disposed when processing, handle the <see cref="E:Atalasoft.Imaging.Workspace.DisposeImage"/> event and set the cancel property in the event args to true.  Also consider using
            <see cref="M:Atalasoft.Imaging.ImageCollection.Replace(Atalasoft.Imaging.AtalaImage)"/> instead of the <see cref="P:Atalasoft.Imaging.Workspace.Image"/> property when setting a new
            image. </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Asynchronous">
            <summary> Gets or sets a value indicating if method calls through this <STRONG>Workspace </STRONG>object are
            processed asynchronously in a background thread. </summary>
            <value> A value indicating if method calls through this <STRONG>Workspace </STRONG>object are processed
            asynchronously in a background thread. </value>
            <remarks> <para>By default, this value is <STRONG>false</STRONG>.  When this value is <STRONG>true </STRONG>the
            workspace is operating in asynchronous mode and the <see cref="T:Atalasoft.Imaging.ProcessQueue"/> is used to queue each command that is applied to
            the image.  If the <see cref="T:Atalasoft.Imaging.AtalaImage"/> is accessed directly, unexpected threading issues might occur.</para></remarks>
            <seealso> Asynchronous Image Processing </seealso>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Image">
            <summary> Gets or sets the current <see cref="T:Atalasoft.Imaging.AtalaImage"/> that is active in this <STRONG>Workspace</STRONG>.</summary>
            <remarks> <para>When the image that is being set already exists in the ImageCollection, then that image is set as
            the current, and the ChangedImage event fires.  When the image being set does not exist in
            the collection, the current image is replaced with the new image, and the current image is either added to the <see cref="T:Atalasoft.Imaging.UndoCollection"/>, or disposed.</para>
            <para>To replace the current image, without disposing it, or placing it into the <STRONG>UndoCollection</STRONG>,
            use the <see cref="M:Atalasoft.Imaging.ImageCollection.Replace(Atalasoft.Imaging.AtalaImage)"/> method in the <see cref="T:Atalasoft.Imaging.ImageCollection"/> by calling
            <EM>myWorkspace.Images.Replace(newImage)</EM> instead of <EM>myWorkspace.Image = newImage</EM>.</para> </remarks>
            <seealso> Replace Method </seealso>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Images">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.ImageCollection"/> of this <STRONG>Workspace </STRONG>object. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Undos">
            <summary> Gets the UndoCollection object containing the undo history of this <STRONG>Workspace</STRONG>. </summary>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Queue">
            <summary> Gets the <see cref="T:Atalasoft.Imaging.ProcessQueue"/> containing queued items that this Workspace object is
            currently processing. </summary>
            <value> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.ProcessQueue.html">ProcessQueue</a> containing queued
            items that this <a href="Atalasoft.dotImage~Atalasoft.Imaging.Workspace.html">Workspace</a> object is currently
            processing. </value>
            <remarks> The <see cref="T:Atalasoft.Imaging.ProcessQueue"/> only contains items if the <STRONG>Workspace </STRONG>is running in <see cref="P:Atalasoft.Imaging.Workspace.Asynchronous"/> mode. </remarks>
        </member>
    </members>
</doc>
